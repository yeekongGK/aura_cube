
AURA_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005388  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005518  08005518  00006518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055bc  080055bc  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055bc  080055bc  000065bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055c4  080055c4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c4  080055c4  000065c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055c8  080055c8  000065c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080055cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000005c  08005628  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08005628  0000741c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f44  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e1c  00000000  00000000  00019fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d18  00000000  00000000  0001def0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023ec4  00000000  00000000  0001ec08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d34  00000000  00000000  00042acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d449b  00000000  00000000  00058800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cc9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a48  00000000  00000000  0012cce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00131728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005500 	.word	0x08005500

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005500 	.word	0x08005500

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08a      	sub	sp, #40	@ 0x28
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 0314 	add.w	r3, r7, #20
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c2:	4b56      	ldr	r3, [pc, #344]	@ (800071c <MX_GPIO_Init+0x170>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005c6:	4a55      	ldr	r2, [pc, #340]	@ (800071c <MX_GPIO_Init+0x170>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ce:	4b53      	ldr	r3, [pc, #332]	@ (800071c <MX_GPIO_Init+0x170>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	613b      	str	r3, [r7, #16]
 80005d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	4b50      	ldr	r3, [pc, #320]	@ (800071c <MX_GPIO_Init+0x170>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005de:	4a4f      	ldr	r2, [pc, #316]	@ (800071c <MX_GPIO_Init+0x170>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005e6:	4b4d      	ldr	r3, [pc, #308]	@ (800071c <MX_GPIO_Init+0x170>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b4a      	ldr	r3, [pc, #296]	@ (800071c <MX_GPIO_Init+0x170>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f6:	4a49      	ldr	r2, [pc, #292]	@ (800071c <MX_GPIO_Init+0x170>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fe:	4b47      	ldr	r3, [pc, #284]	@ (800071c <MX_GPIO_Init+0x170>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b44      	ldr	r3, [pc, #272]	@ (800071c <MX_GPIO_Init+0x170>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060e:	4a43      	ldr	r2, [pc, #268]	@ (800071c <MX_GPIO_Init+0x170>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000616:	4b41      	ldr	r3, [pc, #260]	@ (800071c <MX_GPIO_Init+0x170>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_PSM_EINT_GPIO_Port, NB_PSM_EINT_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000628:	483d      	ldr	r0, [pc, #244]	@ (8000720 <MX_GPIO_Init+0x174>)
 800062a:	f001 fa1b 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2146      	movs	r1, #70	@ 0x46
 8000632:	483c      	ldr	r0, [pc, #240]	@ (8000724 <MX_GPIO_Init+0x178>)
 8000634:	f001 fa16 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NFC_PWR_Pin|NB_ONOFF_Pin, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 800063e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000642:	f001 fa0f 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_RESET_GPIO_Port, NB_RESET_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	4837      	ldr	r0, [pc, #220]	@ (8000728 <MX_GPIO_Init+0x17c>)
 800064c:	f001 fa0a 	bl	8001a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NB_PSM_EINT_Pin */
  GPIO_InitStruct.Pin = NB_PSM_EINT_Pin;
 8000650:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_PSM_EINT_GPIO_Port, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	482d      	ldr	r0, [pc, #180]	@ (8000720 <MX_GPIO_Init+0x174>)
 800066a:	f001 f881 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT2_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin|MEMS_INT1_Pin;
 800066e:	2303      	movs	r3, #3
 8000670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4829      	ldr	r0, [pc, #164]	@ (8000728 <MX_GPIO_Init+0x17c>)
 8000682:	f001 f875 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBATT_ADC_Pin NFC_BUSY_Pin COMP2_INP_CH1_Pin TAMPER_IN_Pin
                           VBATT_DET_Pin PWR_BY_MAG_Pin */
  GPIO_InitStruct.Pin = VBATT_ADC_Pin|NFC_BUSY_Pin|COMP2_INP_CH1_Pin|TAMPER_IN_Pin
 8000686:	f640 132d 	movw	r3, #2349	@ 0x92d
 800068a:	617b      	str	r3, [r7, #20]
                          |VBATT_DET_Pin|PWR_BY_MAG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f001 f867 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : NB_PWR_BYPASS_Pin NB_PWR_EN_Pin PWR_EN_Pin */
  GPIO_InitStruct.Pin = NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin;
 80006a2:	2346      	movs	r3, #70	@ 0x46
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	481a      	ldr	r0, [pc, #104]	@ (8000724 <MX_GPIO_Init+0x178>)
 80006ba:	f001 f859 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_DT_Pin FUEL_GAUGE_ALRT_Pin RS_TAMPER_Pin */
  GPIO_InitStruct.Pin = SIM_DT_Pin|FUEL_GAUGE_ALRT_Pin|RS_TAMPER_Pin;
 80006be:	f249 0308 	movw	r3, #36872	@ 0x9008
 80006c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4619      	mov	r1, r3
 80006d2:	4814      	ldr	r0, [pc, #80]	@ (8000724 <MX_GPIO_Init+0x178>)
 80006d4:	f001 f84c 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_PWR_Pin NB_ONOFF_Pin */
  GPIO_InitStruct.Pin = NFC_PWR_Pin|NB_ONOFF_Pin;
 80006d8:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	2301      	movs	r3, #1
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006f4:	f001 f83c 	bl	8001770 <HAL_GPIO_Init>

  /*Configure GPIO pin : NB_RESET_Pin */
  GPIO_InitStruct.Pin = NB_RESET_Pin;
 80006f8:	2308      	movs	r3, #8
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_RESET_GPIO_Port, &GPIO_InitStruct);
 8000708:	f107 0314 	add.w	r3, r7, #20
 800070c:	4619      	mov	r1, r3
 800070e:	4806      	ldr	r0, [pc, #24]	@ (8000728 <MX_GPIO_Init+0x17c>)
 8000710:	f001 f82e 	bl	8001770 <HAL_GPIO_Init>

}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	@ 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	48000800 	.word	0x48000800
 8000724:	48000400 	.word	0x48000400
 8000728:	48001c00 	.word	0x48001c00

0800072c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000730:	4b1b      	ldr	r3, [pc, #108]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000732:	4a1c      	ldr	r2, [pc, #112]	@ (80007a4 <MX_I2C1_Init+0x78>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000738:	4a1b      	ldr	r2, [pc, #108]	@ (80007a8 <MX_I2C1_Init+0x7c>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800073c:	4b18      	ldr	r3, [pc, #96]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000742:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000748:	4b15      	ldr	r3, [pc, #84]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000754:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <MX_I2C1_Init+0x74>)
 8000768:	f001 f994 	bl	8001a94 <HAL_I2C_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000772:	f000 fa9b 	bl	8000cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000776:	2100      	movs	r1, #0
 8000778:	4809      	ldr	r0, [pc, #36]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800077a:	f002 f803 	bl	8002784 <HAL_I2CEx_ConfigAnalogFilter>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000784:	f000 fa92 	bl	8000cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000788:	2100      	movs	r1, #0
 800078a:	4805      	ldr	r0, [pc, #20]	@ (80007a0 <MX_I2C1_Init+0x74>)
 800078c:	f002 f845 	bl	800281a <HAL_I2CEx_ConfigDigitalFilter>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000796:	f000 fa89 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000078 	.word	0x20000078
 80007a4:	40005400 	.word	0x40005400
 80007a8:	00100d14 	.word	0x00100d14

080007ac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000824 <MX_I2C2_Init+0x78>)
 80007b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000828 <MX_I2C2_Init+0x7c>)
 80007ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007bc:	4b18      	ldr	r3, [pc, #96]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007ce:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007d4:	4b12      	ldr	r3, [pc, #72]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007dc:	2200      	movs	r2, #0
 80007de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007e6:	480e      	ldr	r0, [pc, #56]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007e8:	f001 f954 	bl	8001a94 <HAL_I2C_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007f2:	f000 fa5b 	bl	8000cac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007f6:	2100      	movs	r1, #0
 80007f8:	4809      	ldr	r0, [pc, #36]	@ (8000820 <MX_I2C2_Init+0x74>)
 80007fa:	f001 ffc3 	bl	8002784 <HAL_I2CEx_ConfigAnalogFilter>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000804:	f000 fa52 	bl	8000cac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000808:	2100      	movs	r1, #0
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_I2C2_Init+0x74>)
 800080c:	f002 f805 	bl	800281a <HAL_I2CEx_ConfigDigitalFilter>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000816:	f000 fa49 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200000cc 	.word	0x200000cc
 8000824:	40005800 	.word	0x40005800
 8000828:	00100d14 	.word	0x00100d14

0800082c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b0a4      	sub	sp, #144	@ 0x90
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000834:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	2260      	movs	r2, #96	@ 0x60
 800084a:	2100      	movs	r1, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f004 f9d9 	bl	8004c04 <memset>
  if(i2cHandle->Instance==I2C1)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a41      	ldr	r2, [pc, #260]	@ (800095c <HAL_I2C_MspInit+0x130>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d13b      	bne.n	80008d4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800085c:	2340      	movs	r3, #64	@ 0x40
 800085e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000860:	2300      	movs	r3, #0
 8000862:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4618      	mov	r0, r3
 800086a:	f003 f853 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000874:	f000 fa1a 	bl	8000cac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000878:	4b39      	ldr	r3, [pc, #228]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 800087a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087c:	4a38      	ldr	r2, [pc, #224]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 800087e:	f043 0302 	orr.w	r3, r3, #2
 8000882:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000884:	4b36      	ldr	r3, [pc, #216]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 8000886:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
 800088e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|GPIO_PIN_9;
 8000890:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000894:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000896:	2312      	movs	r3, #18
 8000898:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008a8:	2304      	movs	r3, #4
 80008aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80008b2:	4619      	mov	r1, r3
 80008b4:	482b      	ldr	r0, [pc, #172]	@ (8000964 <HAL_I2C_MspInit+0x138>)
 80008b6:	f000 ff5b 	bl	8001770 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ba:	4b29      	ldr	r3, [pc, #164]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 80008bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008be:	4a28      	ldr	r2, [pc, #160]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 80008c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80008d2:	e03f      	b.n	8000954 <HAL_I2C_MspInit+0x128>
  else if(i2cHandle->Instance==I2C2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a23      	ldr	r2, [pc, #140]	@ (8000968 <HAL_I2C_MspInit+0x13c>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d13a      	bne.n	8000954 <HAL_I2C_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008de:	2380      	movs	r3, #128	@ 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 f812 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80008f6:	f000 f9d9 	bl	8000cac <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b19      	ldr	r3, [pc, #100]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fe:	4a18      	ldr	r2, [pc, #96]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 8000900:	f043 0302 	orr.w	r3, r3, #2
 8000904:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2SCL_Pin|I2C2_SDA_Pin;
 8000912:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000916:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000918:	2312      	movs	r3, #18
 800091a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800092a:	2304      	movs	r3, #4
 800092c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000934:	4619      	mov	r1, r3
 8000936:	480b      	ldr	r0, [pc, #44]	@ (8000964 <HAL_I2C_MspInit+0x138>)
 8000938:	f000 ff1a 	bl	8001770 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800093c:	4b08      	ldr	r3, [pc, #32]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 800093e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000940:	4a07      	ldr	r2, [pc, #28]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 8000942:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000946:	6593      	str	r3, [r2, #88]	@ 0x58
 8000948:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <HAL_I2C_MspInit+0x134>)
 800094a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fb      	ldr	r3, [r7, #12]
}
 8000954:	bf00      	nop
 8000956:	3790      	adds	r7, #144	@ 0x90
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40005400 	.word	0x40005400
 8000960:	40021000 	.word	0x40021000
 8000964:	48000400 	.word	0x48000400
 8000968:	40005800 	.word	0x40005800

0800096c <I2C1_MemWrite>:
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef I2C1_MemWrite(uint16_t _devAddr, uint16_t _memAddress, uint16_t _memAddSize, uint8_t *_pData, uint16_t _size, uint32_t _timeout)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af04      	add	r7, sp, #16
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	4603      	mov	r3, r0
 8000976:	81fb      	strh	r3, [r7, #14]
 8000978:	460b      	mov	r3, r1
 800097a:	81bb      	strh	r3, [r7, #12]
 800097c:	4613      	mov	r3, r2
 800097e:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Write(&hi2c1, _devAddr, _memAddress, _memAddSize, (uint8_t *)_pData, _size, _timeout);
 8000980:	8978      	ldrh	r0, [r7, #10]
 8000982:	89ba      	ldrh	r2, [r7, #12]
 8000984:	89f9      	ldrh	r1, [r7, #14]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	9302      	str	r3, [sp, #8]
 800098a:	8b3b      	ldrh	r3, [r7, #24]
 800098c:	9301      	str	r3, [sp, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4603      	mov	r3, r0
 8000994:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <I2C1_MemWrite+0x38>)
 8000996:	f001 f919 	bl	8001bcc <HAL_I2C_Mem_Write>
 800099a:	4603      	mov	r3, r0
}
 800099c:	4618      	mov	r0, r3
 800099e:	3710      	adds	r7, #16
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000078 	.word	0x20000078

080009a8 <I2C1_MemRead>:

HAL_StatusTypeDef I2C1_MemRead(uint16_t _devAddr, uint16_t _memAddress, uint16_t _memAddSize, uint8_t *_pData, uint16_t _size, uint32_t _timeout)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af04      	add	r7, sp, #16
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4603      	mov	r3, r0
 80009b2:	81fb      	strh	r3, [r7, #14]
 80009b4:	460b      	mov	r3, r1
 80009b6:	81bb      	strh	r3, [r7, #12]
 80009b8:	4613      	mov	r3, r2
 80009ba:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Read(&hi2c1, _devAddr, _memAddress, _memAddSize, _pData, _size, _timeout );
 80009bc:	8978      	ldrh	r0, [r7, #10]
 80009be:	89ba      	ldrh	r2, [r7, #12]
 80009c0:	89f9      	ldrh	r1, [r7, #14]
 80009c2:	69fb      	ldr	r3, [r7, #28]
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	8b3b      	ldrh	r3, [r7, #24]
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	4603      	mov	r3, r0
 80009d0:	4803      	ldr	r0, [pc, #12]	@ (80009e0 <I2C1_MemRead+0x38>)
 80009d2:	f001 fa0f 	bl	8001df4 <HAL_I2C_Mem_Read>
 80009d6:	4603      	mov	r3, r0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000078 	.word	0x20000078

080009e4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 80009ea:	4a17      	ldr	r2, [pc, #92]	@ (8000a48 <MX_LPTIM1_Init+0x64>)
 80009ec:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80009ee:	4b15      	ldr	r3, [pc, #84]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80009fa:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000a00:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000a06:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 8000a08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a0c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 8000a1c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a20:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000a22:	4b08      	ldr	r3, [pc, #32]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_LPTIM1_Init+0x60>)
 8000a30:	f001 ff40 	bl	80028b4 <HAL_LPTIM_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8000a3a:	f000 f937 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000120 	.word	0x20000120
 8000a48:	40007c00 	.word	0x40007c00

08000a4c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b0a2      	sub	sp, #136	@ 0x88
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a54:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2260      	movs	r2, #96	@ 0x60
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f004 f8c9 	bl	8004c04 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a24      	ldr	r2, [pc, #144]	@ (8000b08 <HAL_LPTIM_MspInit+0xbc>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d140      	bne.n	8000afe <HAL_LPTIM_MspInit+0xb2>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000a7c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a80:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 ff42 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8000a96:	f000 f909 	bl	8000cac <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <HAL_LPTIM_MspInit+0xc0>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000b0c <HAL_LPTIM_MspInit+0xc0>)
 8000aa0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <HAL_LPTIM_MspInit+0xc0>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aaa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <HAL_LPTIM_MspInit+0xc0>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab6:	4a15      	ldr	r2, [pc, #84]	@ (8000b0c <HAL_LPTIM_MspInit+0xc0>)
 8000ab8:	f043 0302 	orr.w	r3, r3, #2
 8000abc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <HAL_LPTIM_MspInit+0xc0>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac2:	f003 0302 	and.w	r3, r3, #2
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000aca:	23a0      	movs	r3, #160	@ 0xa0
 8000acc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	@ (8000b10 <HAL_LPTIM_MspInit+0xc4>)
 8000aea:	f000 fe41 	bl	8001770 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2100      	movs	r1, #0
 8000af2:	2041      	movs	r0, #65	@ 0x41
 8000af4:	f000 fe05 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000af8:	2041      	movs	r0, #65	@ 0x41
 8000afa:	f000 fe1e 	bl	800173a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8000afe:	bf00      	nop
 8000b00:	3788      	adds	r7, #136	@ 0x88
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40007c00 	.word	0x40007c00
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	48000400 	.word	0x48000400

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1a:	f000 fc7e 	bl	800141a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1e:	f000 f83f 	bl	8000ba0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b22:	f7ff fd43 	bl	80005ac <MX_GPIO_Init>
  MX_LPTIM1_Init();
 8000b26:	f7ff ff5d 	bl	80009e4 <MX_LPTIM1_Init>
  MX_I2C1_Init();
 8000b2a:	f7ff fdff 	bl	800072c <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b2e:	f7ff fe3d 	bl	80007ac <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8000b32:	f000 fb4b 	bl	80011cc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000b36:	f000 fb75 	bl	8001224 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000b3a:	f000 fa03 	bl	8000f44 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BatteryMonitor_Init();
 8000b3e:	f000 f9e0 	bl	8000f02 <BatteryMonitor_Init>

  for (uint16_t addr = 1; addr < 128; addr++)
 8000b42:	2301      	movs	r3, #1
 8000b44:	80fb      	strh	r3, [r7, #6]
 8000b46:	e012      	b.n	8000b6e <main+0x5a>
  {
	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(addr << 1), 2, 10) == HAL_OK)
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	b299      	uxth	r1, r3
 8000b4e:	230a      	movs	r3, #10
 8000b50:	2202      	movs	r2, #2
 8000b52:	4810      	ldr	r0, [pc, #64]	@ (8000b94 <main+0x80>)
 8000b54:	f001 fa68 	bl	8002028 <HAL_I2C_IsDeviceReady>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d104      	bne.n	8000b68 <main+0x54>
	  {
		  UART_Printf("Found device at 0x%02X\r\n", addr);
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <main+0x84>)
 8000b64:	f000 f872 	bl	8000c4c <UART_Printf>
  for (uint16_t addr = 1; addr < 128; addr++)
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	80fb      	strh	r3, [r7, #6]
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b72:	d9e9      	bls.n	8000b48 <main+0x34>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint16_t value = BatteryMonitor_GetQH();
 8000b74:	f000 f9d7 	bl	8000f26 <BatteryMonitor_GetQH>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	80bb      	strh	r3, [r7, #4]
	  UART_Printf("1test %d\r\n",value);
 8000b7c:	88bb      	ldrh	r3, [r7, #4]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4806      	ldr	r0, [pc, #24]	@ (8000b9c <main+0x88>)
 8000b82:	f000 f863 	bl	8000c4c <UART_Printf>
    HAL_Delay(1000);
 8000b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8a:	f000 fcbb 	bl	8001504 <HAL_Delay>
  {
 8000b8e:	bf00      	nop
 8000b90:	e7f0      	b.n	8000b74 <main+0x60>
 8000b92:	bf00      	nop
 8000b94:	20000078 	.word	0x20000078
 8000b98:	08005518 	.word	0x08005518
 8000b9c:	08005534 	.word	0x08005534

08000ba0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b096      	sub	sp, #88	@ 0x58
 8000ba4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2244      	movs	r2, #68	@ 0x44
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f004 f828 	bl	8004c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bc6:	f002 f817 	bl	8002bf8 <HAL_PWREx_ControlVoltageScaling>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bd0:	f000 f86c 	bl	8000cac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bd4:	f001 fff2 	bl	8002bbc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c48 <SystemClock_Config+0xa8>)
 8000bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000bde:	4a1a      	ldr	r2, [pc, #104]	@ (8000c48 <SystemClock_Config+0xa8>)
 8000be0:	f023 0318 	bic.w	r3, r3, #24
 8000be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000be8:	2314      	movs	r3, #20
 8000bea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000bf8:	2360      	movs	r3, #96	@ 0x60
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4618      	mov	r0, r3
 8000c06:	f002 f84d 	bl	8002ca4 <HAL_RCC_OscConfig>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000c10:	f000 f84c 	bl	8000cac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c14:	230f      	movs	r3, #15
 8000c16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c28:	463b      	mov	r3, r7
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fc4d 	bl	80034cc <HAL_RCC_ClockConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c38:	f000 f838 	bl	8000cac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c3c:	f003 f8b4 	bl	8003da8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c40:	bf00      	nop
 8000c42:	3758      	adds	r7, #88	@ 0x58
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40021000 	.word	0x40021000

08000c4c <UART_Printf>:

/* USER CODE BEGIN 4 */

void UART_Printf(char *format, ...)
{
 8000c4c:	b40f      	push	{r0, r1, r2, r3}
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b0c2      	sub	sp, #264	@ 0x108
 8000c52:	af00      	add	r7, sp, #0
  char str[256];
  va_list args;
  va_start(args, format);
 8000c54:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c60:	601a      	str	r2, [r3, #0]
  vsnprintf(str, sizeof(str), format, args);
 8000c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000c6a:	f107 0008 	add.w	r0, r7, #8
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000c74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c78:	f003 ffb6 	bl	8004be8 <vsniprintf>
  va_end(args);

  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff faa5 	bl	80001d0 <strlen>
 8000c86:	4603      	mov	r3, r0
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f107 0108 	add.w	r1, r7, #8
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <UART_Printf+0x5c>)
 8000c94:	f003 fa7b 	bl	800418e <HAL_UART_Transmit>
}
 8000c98:	bf00      	nop
 8000c9a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr
 8000ca8:	20000248 	.word	0x20000248

08000cac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb0:	b672      	cpsid	i
}
 8000cb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb4:	bf00      	nop
 8000cb6:	e7fd      	b.n	8000cb4 <Error_Handler+0x8>

08000cb8 <i2c_init>:

/**
 * @brief Initializes the I2C peripheral.
 * @note  This is a placeholder. Implement with your hardware's I2C init code.
 */
static void i2c_init(void) {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
    // Example: i2c_master_init(I2C_NUM_0, ...);
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <i2c_write>:
 * @param reg_addr The register address to write to.
 * @param data A pointer to the data buffer to write.
 * @param len The number of bytes to write.
 * @return true on success, false on failure.
 */
static bool i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, uint16_t len) {
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b084      	sub	sp, #16
 8000cca:	af02      	add	r7, sp, #8
 8000ccc:	603a      	str	r2, [r7, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	71fb      	strb	r3, [r7, #7]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	71bb      	strb	r3, [r7, #6]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	80bb      	strh	r3, [r7, #4]
    // This is a placeholder.
    // Implement this function using your platform's I2C write function.
    // It should handle the START, address, register, data, and STOP conditions.
     return I2C1_MemWrite(dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	b298      	uxth	r0, r3
 8000ce4:	79bb      	ldrb	r3, [r7, #6]
 8000ce6:	b299      	uxth	r1, r3
 8000ce8:	2364      	movs	r3, #100	@ 0x64
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	88bb      	ldrh	r3, [r7, #4]
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f7ff fe3a 	bl	800096c <I2C1_MemWrite>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	bf0c      	ite	eq
 8000cfe:	2301      	moveq	r3, #1
 8000d00:	2300      	movne	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
    //return true; // Assume success for now
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}

08000d0c <i2c_read>:
 * @param reg_addr The register address to read from.
 * @param data A pointer to the buffer to store the read data.
 * @param len The number of bytes to read.
 * @return true on success, false on failure.
 */
static bool i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, uint16_t len) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	603a      	str	r2, [r7, #0]
 8000d14:	461a      	mov	r2, r3
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	71bb      	strb	r3, [r7, #6]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	80bb      	strh	r3, [r7, #4]
    // This is a placeholder.
    // Implement this function using your platform's I2C read function.
    return I2C1_MemRead(dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK;
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	b298      	uxth	r0, r3
 8000d2a:	79bb      	ldrb	r3, [r7, #6]
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	2364      	movs	r3, #100	@ 0x64
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	88bb      	ldrh	r3, [r7, #4]
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f7ff fe35 	bl	80009a8 <I2C1_MemRead>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf0c      	ite	eq
 8000d44:	2301      	moveq	r3, #1
 8000d46:	2300      	movne	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
    //return true; // Assume success for now
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <delay_ms>:
/**
 * @brief Delays execution for a specified number of milliseconds.
 * @note This is a placeholder. Implement with your hardware's delay function.
 * @param ms Milliseconds to delay.
 */
static void delay_ms(uint32_t ms) {
 8000d52:	b480      	push	{r7}
 8000d54:	b085      	sub	sp, #20
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
    // Example: vTaskDelay(pdMS_TO_TICKS(ms)); or HAL_Delay(ms);
    volatile uint32_t i, j;
    for (i = 0; i < ms; i++) {
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	e00d      	b.n	8000d7c <delay_ms+0x2a>
        for (j = 0; j < 1000; j++) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	e003      	b.n	8000d6e <delay_ms+0x1c>
            __asm__("nop");
 8000d66:	bf00      	nop
        for (j = 0; j < 1000; j++) {
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60bb      	str	r3, [r7, #8]
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000d74:	d3f7      	bcc.n	8000d66 <delay_ms+0x14>
    for (i = 0; i < ms; i++) {
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d8ed      	bhi.n	8000d60 <delay_ms+0xe>
        }
    }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <MAX17260_Register_WriteSingle>:
//=============================================================================

/**
 * @brief Writes a single 16-bit value to a MAX17260 register.
 */
static bool MAX17260_Register_WriteSingle(uint8_t reg, uint16_t value) {
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	460a      	mov	r2, r1
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	80bb      	strh	r3, [r7, #4]
    uint8_t buffer[2];
    // Little-endian format
    buffer[0] = value & 0xFF;
 8000da2:	88bb      	ldrh	r3, [r7, #4]
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	733b      	strb	r3, [r7, #12]
    buffer[1] = (value >> 8) & 0xFF;
 8000da8:	88bb      	ldrh	r3, [r7, #4]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	737b      	strb	r3, [r7, #13]
    return i2c_write(MAX17260_I2C_ADDRESS, reg, buffer, 2);
 8000db2:	f107 020c 	add.w	r2, r7, #12
 8000db6:	79f9      	ldrb	r1, [r7, #7]
 8000db8:	2302      	movs	r3, #2
 8000dba:	2036      	movs	r0, #54	@ 0x36
 8000dbc:	f7ff ff83 	bl	8000cc6 <i2c_write>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <MAX17260_Register_ReadSingle>:

/**
 * @brief Reads a single 16-bit value from a MAX17260 register.
 */
static bool MAX17260_Register_ReadSingle(uint8_t reg, uint16_t* value) {
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	6039      	str	r1, [r7, #0]
 8000dd4:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2];
    if (i2c_read(MAX17260_I2C_ADDRESS, reg, buffer, 2)) {
 8000dd6:	f107 020c 	add.w	r2, r7, #12
 8000dda:	79f9      	ldrb	r1, [r7, #7]
 8000ddc:	2302      	movs	r3, #2
 8000dde:	2036      	movs	r0, #54	@ 0x36
 8000de0:	f7ff ff94 	bl	8000d0c <i2c_read>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d00c      	beq.n	8000e04 <MAX17260_Register_ReadSingle+0x3a>
        // Little-endian format
        *value = (uint16_t)buffer[0] | ((uint16_t)buffer[1] << 8);
 8000dea:	7b3b      	ldrb	r3, [r7, #12]
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	7b7b      	ldrb	r3, [r7, #13]
 8000df0:	b21b      	sxth	r3, r3
 8000df2:	021b      	lsls	r3, r3, #8
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	801a      	strh	r2, [r3, #0]
        return true;
 8000e00:	2301      	movs	r3, #1
 8000e02:	e003      	b.n	8000e0c <MAX17260_Register_ReadSingle+0x42>
    }
    *value = 0;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	801a      	strh	r2, [r3, #0]
    return false;
 8000e0a:	2300      	movs	r3, #0
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <IsPOR>:

/**
 * @brief Checks if the MAX17260 has experienced a Power-On-Reset.
 */
static bool IsPOR(void) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
    uint16_t status_val = 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	80fb      	strh	r3, [r7, #6]
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 8000e1e:	1dbb      	adds	r3, r7, #6
 8000e20:	4619      	mov	r1, r3
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff ffd1 	bl	8000dca <MAX17260_Register_ReadSingle>
    // POR bit is bit 1 of the STATUS register
    return (status_val & (1 << 1)) != 0;
 8000e28:	88fb      	ldrh	r3, [r7, #6]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	bf14      	ite	ne
 8000e32:	2301      	movne	r3, #1
 8000e34:	2300      	moveq	r3, #0
 8000e36:	b2db      	uxtb	r3, r3
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <ClearPOR>:

/**
 * @brief Clears the Power-On-Reset flag in the STATUS register.
 */
static void ClearPOR(void) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
    uint16_t status_val = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	80fb      	strh	r3, [r7, #6]
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 8000e4a:	1dbb      	adds	r3, r7, #6
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff ffbb 	bl	8000dca <MAX17260_Register_ReadSingle>
    // Write the value back, but with the POR bit cleared
    MAX17260_Register_WriteSingle(STATUS, status_val & ~(1 << 1));
 8000e54:	88fb      	ldrh	r3, [r7, #6]
 8000e56:	f023 0302 	bic.w	r3, r3, #2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f7ff ff97 	bl	8000d92 <MAX17260_Register_WriteSingle>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <LWInit>:
 * @brief Performs the initial configuration of the MAX17260.
 *
 * This sequence is extracted from the `BATTSENSOR_LWInit` function and is
 * critical for setting up the device's model and configuration.
 */
static void LWInit(void) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
    int16_t value;

    // Exit hibernate mode sequence
    MAX17260_Register_WriteSingle(SOFT_WAKEUP, 0x90);
 8000e72:	2190      	movs	r1, #144	@ 0x90
 8000e74:	2060      	movs	r0, #96	@ 0x60
 8000e76:	f7ff ff8c 	bl	8000d92 <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(HIB_CFG, 0x00);
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	20ba      	movs	r0, #186	@ 0xba
 8000e7e:	f7ff ff88 	bl	8000d92 <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(SOFT_WAKEUP, 0x00);
 8000e82:	2100      	movs	r1, #0
 8000e84:	2060      	movs	r0, #96	@ 0x60
 8000e86:	f7ff ff84 	bl	8000d92 <MAX17260_Register_WriteSingle>

    // Initial config values from original file
    MAX17260_Register_WriteSingle(DESIGN_CAP, 0x7FF8);
 8000e8a:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 8000e8e:	2018      	movs	r0, #24
 8000e90:	f7ff ff7f 	bl	8000d92 <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(I_CHG_TERM, 0x0000);
 8000e94:	2100      	movs	r1, #0
 8000e96:	201e      	movs	r0, #30
 8000e98:	f7ff ff7b 	bl	8000d92 <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(V_EMPTY, 0x9661);
 8000e9c:	f249 6161 	movw	r1, #38497	@ 0x9661
 8000ea0:	203a      	movs	r0, #58	@ 0x3a
 8000ea2:	f7ff ff76 	bl	8000d92 <MAX17260_Register_WriteSingle>

    // Write to ModelCfg and wait for it to clear
    MAX17260_Register_WriteSingle(MODEL_CFG, 0x8000);
 8000ea6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000eaa:	20db      	movs	r0, #219	@ 0xdb
 8000eac:	f7ff ff71 	bl	8000d92 <MAX17260_Register_WriteSingle>
    do {
        MAX17260_Register_ReadSingle(MODEL_CFG, (uint16_t*)&value);
 8000eb0:	1dbb      	adds	r3, r7, #6
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	20db      	movs	r0, #219	@ 0xdb
 8000eb6:	f7ff ff88 	bl	8000dca <MAX17260_Register_ReadSingle>
    } while (value != 0x0000);
 8000eba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f6      	bne.n	8000eb0 <LWInit+0x44>

    uint16_t status_val;
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ff7f 	bl	8000dca <MAX17260_Register_ReadSingle>
    MAX17260_Register_WriteSingle(STATUS, status_val & ~(1 << 1)); // Clear POR bit
 8000ecc:	88bb      	ldrh	r3, [r7, #4]
 8000ece:	f023 0302 	bic.w	r3, r3, #2
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff ff5b 	bl	8000d92 <MAX17260_Register_WriteSingle>

    MAX17260_Register_WriteSingle(HIB_CFG, 0x870C);
 8000edc:	f248 710c 	movw	r1, #34572	@ 0x870c
 8000ee0:	20ba      	movs	r0, #186	@ 0xba
 8000ee2:	f7ff ff56 	bl	8000d92 <MAX17260_Register_WriteSingle>
    
    // Write final configuration
    MAX17260_Register_WriteSingle(CONFIG2, 0x0658);
 8000ee6:	f44f 61cb 	mov.w	r1, #1624	@ 0x658
 8000eea:	20bb      	movs	r0, #187	@ 0xbb
 8000eec:	f7ff ff51 	bl	8000d92 <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(MODEL_CFG, 0x8000);
 8000ef0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000ef4:	20db      	movs	r0, #219	@ 0xdb
 8000ef6:	f7ff ff4c 	bl	8000d92 <MAX17260_Register_WriteSingle>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <BatteryMonitor_Init>:

//=============================================================================
// PUBLIC FUNCTION IMPLEMENTATIONS
//=============================================================================

void BatteryMonitor_Init(void) {
 8000f02:	b580      	push	{r7, lr}
 8000f04:	af00      	add	r7, sp, #0
    i2c_init();
 8000f06:	f7ff fed7 	bl	8000cb8 <i2c_init>

    // Small delay to ensure the sensor is ready after power-up.
    delay_ms(10);
 8000f0a:	200a      	movs	r0, #10
 8000f0c:	f7ff ff21 	bl	8000d52 <delay_ms>

    if (IsPOR()) {
 8000f10:	f7ff ff80 	bl	8000e14 <IsPOR>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <BatteryMonitor_Init+0x20>
        LWInit();
 8000f1a:	f7ff ffa7 	bl	8000e6c <LWInit>
        ClearPOR();
 8000f1e:	f7ff ff8f 	bl	8000e40 <ClearPOR>
    }
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <BatteryMonitor_GetQH>:

uint16_t BatteryMonitor_GetQH(void) {
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
    uint16_t qh_value = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	80fb      	strh	r3, [r7, #6]
    MAX17260_Register_ReadSingle(QH, &qh_value);
 8000f30:	1dbb      	adds	r3, r7, #6
 8000f32:	4619      	mov	r1, r3
 8000f34:	204d      	movs	r0, #77	@ 0x4d
 8000f36:	f7ff ff48 	bl	8000dca <MAX17260_Register_ReadSingle>
    return qh_value;
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <MX_SPI1_Init+0x78>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f56:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f5e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f70:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f72:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f92:	2207      	movs	r2, #7
 8000f94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_SPI1_Init+0x74>)
 8000fa4:	f003 f802 	bl	8003fac <HAL_SPI_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fae:	f7ff fe7d 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000158 	.word	0x20000158
 8000fbc:	40013000 	.word	0x40013000

08000fc0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a25      	ldr	r2, [pc, #148]	@ (8001074 <HAL_SPI_MspInit+0xb4>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d144      	bne.n	800106c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fe2:	4b25      	ldr	r3, [pc, #148]	@ (8001078 <HAL_SPI_MspInit+0xb8>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fe6:	4a24      	ldr	r2, [pc, #144]	@ (8001078 <HAL_SPI_MspInit+0xb8>)
 8000fe8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fee:	4b22      	ldr	r3, [pc, #136]	@ (8001078 <HAL_SPI_MspInit+0xb8>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ff2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <HAL_SPI_MspInit+0xb8>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <HAL_SPI_MspInit+0xb8>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <HAL_SPI_MspInit+0xb8>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <HAL_SPI_MspInit+0xb8>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a18      	ldr	r2, [pc, #96]	@ (8001078 <HAL_SPI_MspInit+0xb8>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b16      	ldr	r3, [pc, #88]	@ (8001078 <HAL_SPI_MspInit+0xb8>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800102a:	23c2      	movs	r3, #194	@ 0xc2
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800103a:	2305      	movs	r3, #5
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001048:	f000 fb92 	bl	8001770 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800104c:	2301      	movs	r3, #1
 800104e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800105c:	2305      	movs	r3, #5
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <HAL_SPI_MspInit+0xbc>)
 8001068:	f000 fb82 	bl	8001770 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800106c:	bf00      	nop
 800106e:	3728      	adds	r7, #40	@ 0x28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40013000 	.word	0x40013000
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400

08001080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	4b0f      	ldr	r3, [pc, #60]	@ (80010c4 <HAL_MspInit+0x44>)
 8001088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800108a:	4a0e      	ldr	r2, [pc, #56]	@ (80010c4 <HAL_MspInit+0x44>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6613      	str	r3, [r2, #96]	@ 0x60
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <HAL_MspInit+0x44>)
 8001094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_MspInit+0x44>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010a2:	4a08      	ldr	r2, [pc, #32]	@ (80010c4 <HAL_MspInit+0x44>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_MspInit+0x44>)
 80010ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40021000 	.word	0x40021000

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111e:	f000 f9d1 	bl	80014c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <LPTIM1_IRQHandler+0x10>)
 800112e:	f001 fc63 	bl	80029f8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000120 	.word	0x20000120

0800113c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001144:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <_sbrk+0x5c>)
 8001146:	4b15      	ldr	r3, [pc, #84]	@ (800119c <_sbrk+0x60>)
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001150:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <_sbrk+0x64>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d102      	bne.n	800115e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001158:	4b11      	ldr	r3, [pc, #68]	@ (80011a0 <_sbrk+0x64>)
 800115a:	4a12      	ldr	r2, [pc, #72]	@ (80011a4 <_sbrk+0x68>)
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <_sbrk+0x64>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	429a      	cmp	r2, r3
 800116a:	d207      	bcs.n	800117c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800116c:	f003 fd52 	bl	8004c14 <__errno>
 8001170:	4603      	mov	r3, r0
 8001172:	220c      	movs	r2, #12
 8001174:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001176:	f04f 33ff 	mov.w	r3, #4294967295
 800117a:	e009      	b.n	8001190 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <_sbrk+0x64>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001182:	4b07      	ldr	r3, [pc, #28]	@ (80011a0 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <_sbrk+0x64>)
 800118c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118e:	68fb      	ldr	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	2000c000 	.word	0x2000c000
 800119c:	00000400 	.word	0x00000400
 80011a0:	200001bc 	.word	0x200001bc
 80011a4:	20000420 	.word	0x20000420

080011a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <SystemInit+0x20>)
 80011ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b2:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <SystemInit+0x20>)
 80011b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 80011d2:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <MX_LPUART1_UART_Init+0x54>)
 80011d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 80011d8:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 80011dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0d      	ldr	r3, [pc, #52]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b09      	ldr	r3, [pc, #36]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001208:	4804      	ldr	r0, [pc, #16]	@ (800121c <MX_LPUART1_UART_Init+0x50>)
 800120a:	f002 ff72 	bl	80040f2 <HAL_UART_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001214:	f7ff fd4a 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200001c0 	.word	0x200001c0
 8001220:	40008000 	.word	0x40008000

08001224 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <MX_USART1_UART_Init+0x58>)
 800122a:	4a15      	ldr	r2, [pc, #84]	@ (8001280 <MX_USART1_UART_Init+0x5c>)
 800122c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_USART1_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_USART1_UART_Init+0x58>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <MX_USART1_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001260:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_USART1_UART_Init+0x58>)
 8001268:	f002 ff43 	bl	80040f2 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001272:	f7ff fd1b 	bl	8000cac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000248 	.word	0x20000248
 8001280:	40013800 	.word	0x40013800

08001284 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b0a4      	sub	sp, #144	@ 0x90
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800129c:	f107 031c 	add.w	r3, r7, #28
 80012a0:	2260      	movs	r2, #96	@ 0x60
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f003 fcad 	bl	8004c04 <memset>
  if(uartHandle->Instance==LPUART1)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a42      	ldr	r2, [pc, #264]	@ (80013b8 <HAL_UART_MspInit+0x134>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d13b      	bne.n	800132c <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80012b4:	2320      	movs	r3, #32
 80012b6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80012b8:	2300      	movs	r3, #0
 80012ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012bc:	f107 031c 	add.w	r3, r7, #28
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 fb27 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012cc:	f7ff fcee 	bl	8000cac <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80012d0:	4b3a      	ldr	r3, [pc, #232]	@ (80013bc <HAL_UART_MspInit+0x138>)
 80012d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012d4:	4a39      	ldr	r2, [pc, #228]	@ (80013bc <HAL_UART_MspInit+0x138>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80012dc:	4b37      	ldr	r3, [pc, #220]	@ (80013bc <HAL_UART_MspInit+0x138>)
 80012de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	61bb      	str	r3, [r7, #24]
 80012e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b34      	ldr	r3, [pc, #208]	@ (80013bc <HAL_UART_MspInit+0x138>)
 80012ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ec:	4a33      	ldr	r2, [pc, #204]	@ (80013bc <HAL_UART_MspInit+0x138>)
 80012ee:	f043 0302 	orr.w	r3, r3, #2
 80012f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f4:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <HAL_UART_MspInit+0x138>)
 80012f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = LPUART1_RX_Pin|LPUART1_TX_Pin;
 8001300:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001304:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001312:	2303      	movs	r3, #3
 8001314:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001318:	2308      	movs	r3, #8
 800131a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001322:	4619      	mov	r1, r3
 8001324:	4826      	ldr	r0, [pc, #152]	@ (80013c0 <HAL_UART_MspInit+0x13c>)
 8001326:	f000 fa23 	bl	8001770 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800132a:	e040      	b.n	80013ae <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a24      	ldr	r2, [pc, #144]	@ (80013c4 <HAL_UART_MspInit+0x140>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d13b      	bne.n	80013ae <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001336:	2301      	movs	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800133a:	2300      	movs	r3, #0
 800133c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4618      	mov	r0, r3
 8001344:	f002 fae6 	bl	8003914 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800134e:	f7ff fcad 	bl	8000cac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001352:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <HAL_UART_MspInit+0x138>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001356:	4a19      	ldr	r2, [pc, #100]	@ (80013bc <HAL_UART_MspInit+0x138>)
 8001358:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800135c:	6613      	str	r3, [r2, #96]	@ 0x60
 800135e:	4b17      	ldr	r3, [pc, #92]	@ (80013bc <HAL_UART_MspInit+0x138>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001362:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <HAL_UART_MspInit+0x138>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <HAL_UART_MspInit+0x138>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <HAL_UART_MspInit+0x138>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001382:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001386:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800139a:	2307      	movs	r3, #7
 800139c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013aa:	f000 f9e1 	bl	8001770 <HAL_GPIO_Init>
}
 80013ae:	bf00      	nop
 80013b0:	3790      	adds	r7, #144	@ 0x90
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40008000 	.word	0x40008000
 80013bc:	40021000 	.word	0x40021000
 80013c0:	48000400 	.word	0x48000400
 80013c4:	40013800 	.word	0x40013800

080013c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001400 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013cc:	f7ff feec 	bl	80011a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d2:	490d      	ldr	r1, [pc, #52]	@ (8001408 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d4:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <LoopForever+0xe>)
  movs r3, #0
 80013d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013d8:	e002      	b.n	80013e0 <LoopCopyDataInit>

080013da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013de:	3304      	adds	r3, #4

080013e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e4:	d3f9      	bcc.n	80013da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001414 <LoopForever+0x16>)
  movs r3, #0
 80013ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ec:	e001      	b.n	80013f2 <LoopFillZerobss>

080013ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f0:	3204      	adds	r2, #4

080013f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f4:	d3fb      	bcc.n	80013ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013f6:	f003 fc13 	bl	8004c20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013fa:	f7ff fb8b 	bl	8000b14 <main>

080013fe <LoopForever>:

LoopForever:
    b LoopForever
 80013fe:	e7fe      	b.n	80013fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001400:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001404:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001408:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800140c:	080055cc 	.word	0x080055cc
  ldr r2, =_sbss
 8001410:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001414:	2000041c 	.word	0x2000041c

08001418 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001418:	e7fe      	b.n	8001418 <ADC1_IRQHandler>

0800141a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001420:	2300      	movs	r3, #0
 8001422:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 f961 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800142a:	2000      	movs	r0, #0
 800142c:	f000 f80e 	bl	800144c <HAL_InitTick>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d002      	beq.n	800143c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	e001      	b.n	8001440 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800143c:	f7ff fe20 	bl	8001080 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001440:	79fb      	ldrb	r3, [r7, #7]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001458:	4b17      	ldr	r3, [pc, #92]	@ (80014b8 <HAL_InitTick+0x6c>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d023      	beq.n	80014a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <HAL_InitTick+0x70>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <HAL_InitTick+0x6c>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f96d 	bl	8001756 <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10f      	bne.n	80014a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2b0f      	cmp	r3, #15
 8001486:	d809      	bhi.n	800149c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001488:	2200      	movs	r2, #0
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f000 f937 	bl	8001702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001494:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_InitTick+0x74>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e007      	b.n	80014ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
 80014a0:	e004      	b.n	80014ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	73fb      	strb	r3, [r7, #15]
 80014a6:	e001      	b.n	80014ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000008 	.word	0x20000008
 80014bc:	20000000 	.word	0x20000000
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014c8:	4b06      	ldr	r3, [pc, #24]	@ (80014e4 <HAL_IncTick+0x20>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4413      	add	r3, r2
 80014d4:	4a04      	ldr	r2, [pc, #16]	@ (80014e8 <HAL_IncTick+0x24>)
 80014d6:	6013      	str	r3, [r2, #0]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008
 80014e8:	200002d0 	.word	0x200002d0

080014ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return uwTick;
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_GetTick+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200002d0 	.word	0x200002d0

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff ffee 	bl	80014ec <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffde 	bl	80014ec <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	@ (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	@ (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	@ (800163c <__NVIC_SetPriority+0x50>)
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	@ 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	@ 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff29 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001714:	f7ff ff3e 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	68b9      	ldr	r1, [r7, #8]
 800171e:	6978      	ldr	r0, [r7, #20]
 8001720:	f7ff ff8e 	bl	8001640 <NVIC_EncodePriority>
 8001724:	4602      	mov	r2, r0
 8001726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	bf00      	nop
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff31 	bl	80015b0 <__NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f7ff ffa2 	bl	80016a8 <SysTick_Config>
 8001764:	4603      	mov	r3, r0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177e:	e154      	b.n	8001a2a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8146 	beq.w	8001a24 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d005      	beq.n	80017b0 <HAL_GPIO_Init+0x40>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d130      	bne.n	8001812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017e6:	2201      	movs	r2, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 0201 	and.w	r2, r3, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b03      	cmp	r3, #3
 800181c:	d017      	beq.n	800184e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d123      	bne.n	80018a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	6939      	ldr	r1, [r7, #16]
 800189e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0203 	and.w	r2, r3, #3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80a0 	beq.w	8001a24 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e4:	4b58      	ldr	r3, [pc, #352]	@ (8001a48 <HAL_GPIO_Init+0x2d8>)
 80018e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018e8:	4a57      	ldr	r2, [pc, #348]	@ (8001a48 <HAL_GPIO_Init+0x2d8>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80018f0:	4b55      	ldr	r3, [pc, #340]	@ (8001a48 <HAL_GPIO_Init+0x2d8>)
 80018f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018fc:	4a53      	ldr	r2, [pc, #332]	@ (8001a4c <HAL_GPIO_Init+0x2dc>)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001926:	d019      	beq.n	800195c <HAL_GPIO_Init+0x1ec>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a49      	ldr	r2, [pc, #292]	@ (8001a50 <HAL_GPIO_Init+0x2e0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d013      	beq.n	8001958 <HAL_GPIO_Init+0x1e8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a48      	ldr	r2, [pc, #288]	@ (8001a54 <HAL_GPIO_Init+0x2e4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d00d      	beq.n	8001954 <HAL_GPIO_Init+0x1e4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a47      	ldr	r2, [pc, #284]	@ (8001a58 <HAL_GPIO_Init+0x2e8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d007      	beq.n	8001950 <HAL_GPIO_Init+0x1e0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a46      	ldr	r2, [pc, #280]	@ (8001a5c <HAL_GPIO_Init+0x2ec>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_GPIO_Init+0x1dc>
 8001948:	2304      	movs	r3, #4
 800194a:	e008      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 800194c:	2307      	movs	r3, #7
 800194e:	e006      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 8001950:	2303      	movs	r3, #3
 8001952:	e004      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 8001954:	2302      	movs	r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_GPIO_Init+0x1ee>
 800195c:	2300      	movs	r3, #0
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4093      	lsls	r3, r2
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800196e:	4937      	ldr	r1, [pc, #220]	@ (8001a4c <HAL_GPIO_Init+0x2dc>)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800197c:	4b38      	ldr	r3, [pc, #224]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ca:	4a25      	ldr	r2, [pc, #148]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019d0:	4b23      	ldr	r3, [pc, #140]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a1e:	4a10      	ldr	r2, [pc, #64]	@ (8001a60 <HAL_GPIO_Init+0x2f0>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f aea3 	bne.w	8001780 <HAL_GPIO_Init+0x10>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	bf00      	nop
 8001a3e:	371c      	adds	r7, #28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	48000400 	.word	0x48000400
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00
 8001a5c:	48001000 	.word	0x48001000
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a80:	e002      	b.n	8001a88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e08d      	b.n	8001bc2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d106      	bne.n	8001ac0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7fe feb6 	bl	800082c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	@ 0x24
 8001ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ae4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001af4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d107      	bne.n	8001b0e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689a      	ldr	r2, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	e006      	b.n	8001b1c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001b1a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d108      	bne.n	8001b36 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	e007      	b.n	8001b46 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b44:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b58:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b68:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691a      	ldr	r2, [r3, #16]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69d9      	ldr	r1, [r3, #28]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1a      	ldr	r2, [r3, #32]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	430a      	orrs	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0201 	orr.w	r2, r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2220      	movs	r2, #32
 8001bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	4608      	mov	r0, r1
 8001bd6:	4611      	mov	r1, r2
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4603      	mov	r3, r0
 8001bdc:	817b      	strh	r3, [r7, #10]
 8001bde:	460b      	mov	r3, r1
 8001be0:	813b      	strh	r3, [r7, #8]
 8001be2:	4613      	mov	r3, r2
 8001be4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	f040 80f9 	bne.w	8001de6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bf4:	6a3b      	ldr	r3, [r7, #32]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <HAL_I2C_Mem_Write+0x34>
 8001bfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0ed      	b.n	8001de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_I2C_Mem_Write+0x4e>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e0e6      	b.n	8001de8 <HAL_I2C_Mem_Write+0x21c>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c22:	f7ff fc63 	bl	80014ec <HAL_GetTick>
 8001c26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2319      	movs	r3, #25
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 fbaf 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e0d1      	b.n	8001de8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2221      	movs	r2, #33	@ 0x21
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2240      	movs	r2, #64	@ 0x40
 8001c50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	6a3a      	ldr	r2, [r7, #32]
 8001c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c6c:	88f8      	ldrh	r0, [r7, #6]
 8001c6e:	893a      	ldrh	r2, [r7, #8]
 8001c70:	8979      	ldrh	r1, [r7, #10]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f000 fabf 	bl	8002200 <I2C_RequestMemoryWrite>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d005      	beq.n	8001c94 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0a9      	b.n	8001de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2bff      	cmp	r3, #255	@ 0xff
 8001c9c:	d90e      	bls.n	8001cbc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	22ff      	movs	r2, #255	@ 0xff
 8001ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	8979      	ldrh	r1, [r7, #10]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 fd33 	bl	8002720 <I2C_TransferConfig>
 8001cba:	e00f      	b.n	8001cdc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	8979      	ldrh	r1, [r7, #10]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 fd22 	bl	8002720 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fbb2 	bl	800244a <I2C_WaitOnTXISFlagUntilTimeout>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e07b      	b.n	8001de8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d034      	beq.n	8001d94 <HAL_I2C_Mem_Write+0x1c8>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d130      	bne.n	8001d94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	9300      	str	r3, [sp, #0]
 8001d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d38:	2200      	movs	r2, #0
 8001d3a:	2180      	movs	r1, #128	@ 0x80
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f000 fb2b 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e04d      	b.n	8001de8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2bff      	cmp	r3, #255	@ 0xff
 8001d54:	d90e      	bls.n	8001d74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	22ff      	movs	r2, #255	@ 0xff
 8001d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	8979      	ldrh	r1, [r7, #10]
 8001d64:	2300      	movs	r3, #0
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f000 fcd7 	bl	8002720 <I2C_TransferConfig>
 8001d72:	e00f      	b.n	8001d94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	8979      	ldrh	r1, [r7, #10]
 8001d86:	2300      	movs	r3, #0
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f000 fcc6 	bl	8002720 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d19e      	bne.n	8001cdc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 fb98 	bl	80024d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e01a      	b.n	8001de8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2220      	movs	r2, #32
 8001db8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6859      	ldr	r1, [r3, #4]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001df0 <HAL_I2C_Mem_Write+0x224>)
 8001dc6:	400b      	ands	r3, r1
 8001dc8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2220      	movs	r2, #32
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e000      	b.n	8001de8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001de6:	2302      	movs	r3, #2
  }
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	fe00e800 	.word	0xfe00e800

08001df4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af02      	add	r7, sp, #8
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	817b      	strh	r3, [r7, #10]
 8001e06:	460b      	mov	r3, r1
 8001e08:	813b      	strh	r3, [r7, #8]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	f040 80fd 	bne.w	8002016 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e1c:	6a3b      	ldr	r3, [r7, #32]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d002      	beq.n	8001e28 <HAL_I2C_Mem_Read+0x34>
 8001e22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d105      	bne.n	8001e34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0f1      	b.n	8002018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d101      	bne.n	8001e42 <HAL_I2C_Mem_Read+0x4e>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e0ea      	b.n	8002018 <HAL_I2C_Mem_Read+0x224>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e4a:	f7ff fb4f 	bl	80014ec <HAL_GetTick>
 8001e4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	2319      	movs	r3, #25
 8001e56:	2201      	movs	r2, #1
 8001e58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f000 fa9b 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0d5      	b.n	8002018 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2222      	movs	r2, #34	@ 0x22
 8001e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2240      	movs	r2, #64	@ 0x40
 8001e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6a3a      	ldr	r2, [r7, #32]
 8001e86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e94:	88f8      	ldrh	r0, [r7, #6]
 8001e96:	893a      	ldrh	r2, [r7, #8]
 8001e98:	8979      	ldrh	r1, [r7, #10]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	9301      	str	r3, [sp, #4]
 8001e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f9ff 	bl	80022a8 <I2C_RequestMemoryRead>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0ad      	b.n	8002018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2bff      	cmp	r3, #255	@ 0xff
 8001ec4:	d90e      	bls.n	8001ee4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	8979      	ldrh	r1, [r7, #10]
 8001ed4:	4b52      	ldr	r3, [pc, #328]	@ (8002020 <HAL_I2C_Mem_Read+0x22c>)
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fc1f 	bl	8002720 <I2C_TransferConfig>
 8001ee2:	e00f      	b.n	8001f04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	8979      	ldrh	r1, [r7, #10]
 8001ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8002020 <HAL_I2C_Mem_Read+0x22c>)
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 fc0e 	bl	8002720 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	68f8      	ldr	r0, [r7, #12]
 8001f10:	f000 fa42 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e07c      	b.n	8002018 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d034      	beq.n	8001fc4 <HAL_I2C_Mem_Read+0x1d0>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d130      	bne.n	8001fc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2180      	movs	r1, #128	@ 0x80
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 fa13 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e04d      	b.n	8002018 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2bff      	cmp	r3, #255	@ 0xff
 8001f84:	d90e      	bls.n	8001fa4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	8979      	ldrh	r1, [r7, #10]
 8001f94:	2300      	movs	r3, #0
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fbbf 	bl	8002720 <I2C_TransferConfig>
 8001fa2:	e00f      	b.n	8001fc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb2:	b2da      	uxtb	r2, r3
 8001fb4:	8979      	ldrh	r1, [r7, #10]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f000 fbae 	bl	8002720 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d19a      	bne.n	8001f04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f000 fa80 	bl	80024d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e01a      	b.n	8002018 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8002024 <HAL_I2C_Mem_Read+0x230>)
 8001ff6:	400b      	ands	r3, r1
 8001ff8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2220      	movs	r2, #32
 8001ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002012:	2300      	movs	r3, #0
 8002014:	e000      	b.n	8002018 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002016:	2302      	movs	r3, #2
  }
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	80002400 	.word	0x80002400
 8002024:	fe00e800 	.word	0xfe00e800

08002028 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	@ 0x28
 800202c:	af02      	add	r7, sp, #8
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	603b      	str	r3, [r7, #0]
 8002034:	460b      	mov	r3, r1
 8002036:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b20      	cmp	r3, #32
 8002046:	f040 80d6 	bne.w	80021f6 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002058:	d101      	bne.n	800205e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800205a:	2302      	movs	r3, #2
 800205c:	e0cc      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_I2C_IsDeviceReady+0x44>
 8002068:	2302      	movs	r3, #2
 800206a:	e0c5      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x1d0>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2224      	movs	r2, #36	@ 0x24
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d107      	bne.n	800209a <HAL_I2C_IsDeviceReady+0x72>
 800208a:	897b      	ldrh	r3, [r7, #10]
 800208c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002090:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002094:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002098:	e006      	b.n	80020a8 <HAL_I2C_IsDeviceReady+0x80>
 800209a:	897b      	ldrh	r3, [r7, #10]
 800209c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020a4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80020ae:	f7ff fa1d 	bl	80014ec <HAL_GetTick>
 80020b2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b20      	cmp	r3, #32
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b10      	cmp	r3, #16
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80020e0:	e034      	b.n	800214c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d01a      	beq.n	8002120 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020ea:	f7ff f9ff 	bl	80014ec <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d302      	bcc.n	8002100 <HAL_I2C_IsDeviceReady+0xd8>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10f      	bne.n	8002120 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2220      	movs	r2, #32
 8002104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210c:	f043 0220 	orr.w	r2, r3, #32
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e06b      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b20      	cmp	r3, #32
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0310 	and.w	r3, r3, #16
 8002140:	2b10      	cmp	r3, #16
 8002142:	bf0c      	ite	eq
 8002144:	2301      	moveq	r3, #1
 8002146:	2300      	movne	r3, #0
 8002148:	b2db      	uxtb	r3, r3
 800214a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800214c:	7ffb      	ldrb	r3, [r7, #31]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <HAL_I2C_IsDeviceReady+0x130>
 8002152:	7fbb      	ldrb	r3, [r7, #30]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0c4      	beq.n	80020e2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	2b10      	cmp	r3, #16
 8002164:	d01a      	beq.n	800219c <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	2120      	movs	r1, #32
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f911 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e03b      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2220      	movs	r2, #32
 8002186:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	e02d      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2120      	movs	r1, #32
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f8f6 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e020      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2210      	movs	r2, #16
 80021bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2220      	movs	r2, #32
 80021c4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3301      	adds	r3, #1
 80021ca:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f63f af56 	bhi.w	8002082 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021e2:	f043 0220 	orr.w	r2, r3, #32
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 80021f6:	2302      	movs	r3, #2
  }
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4603      	mov	r3, r0
 8002210:	817b      	strh	r3, [r7, #10]
 8002212:	460b      	mov	r3, r1
 8002214:	813b      	strh	r3, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	b2da      	uxtb	r2, r3
 800221e:	8979      	ldrh	r1, [r7, #10]
 8002220:	4b20      	ldr	r3, [pc, #128]	@ (80022a4 <I2C_RequestMemoryWrite+0xa4>)
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fa79 	bl	8002720 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	69b9      	ldr	r1, [r7, #24]
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f909 	bl	800244a <I2C_WaitOnTXISFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e02c      	b.n	800229c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d105      	bne.n	8002254 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002248:	893b      	ldrh	r3, [r7, #8]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	629a      	str	r2, [r3, #40]	@ 0x28
 8002252:	e015      	b.n	8002280 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002254:	893b      	ldrh	r3, [r7, #8]
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	b29b      	uxth	r3, r3
 800225a:	b2da      	uxtb	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	69b9      	ldr	r1, [r7, #24]
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 f8ef 	bl	800244a <I2C_WaitOnTXISFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e012      	b.n	800229c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002276:	893b      	ldrh	r3, [r7, #8]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	2200      	movs	r2, #0
 8002288:	2180      	movs	r1, #128	@ 0x80
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f884 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	80002000 	.word	0x80002000

080022a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	8979      	ldrh	r1, [r7, #10]
 80022c8:	4b20      	ldr	r3, [pc, #128]	@ (800234c <I2C_RequestMemoryRead+0xa4>)
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	2300      	movs	r3, #0
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f000 fa26 	bl	8002720 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	69b9      	ldr	r1, [r7, #24]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 f8b6 	bl	800244a <I2C_WaitOnTXISFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e02c      	b.n	8002342 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022e8:	88fb      	ldrh	r3, [r7, #6]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d105      	bne.n	80022fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ee:	893b      	ldrh	r3, [r7, #8]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80022f8:	e015      	b.n	8002326 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022fa:	893b      	ldrh	r3, [r7, #8]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	b29b      	uxth	r3, r3
 8002300:	b2da      	uxtb	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	69b9      	ldr	r1, [r7, #24]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f89c 	bl	800244a <I2C_WaitOnTXISFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e012      	b.n	8002342 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800231c:	893b      	ldrh	r3, [r7, #8]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	2200      	movs	r2, #0
 800232e:	2140      	movs	r1, #64	@ 0x40
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f831 	bl	8002398 <I2C_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	80002000 	.word	0x80002000

08002350 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b02      	cmp	r3, #2
 8002364:	d103      	bne.n	800236e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2200      	movs	r2, #0
 800236c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d007      	beq.n	800238c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	699a      	ldr	r2, [r3, #24]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0201 	orr.w	r2, r2, #1
 800238a:	619a      	str	r2, [r3, #24]
  }
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	603b      	str	r3, [r7, #0]
 80023a4:	4613      	mov	r3, r2
 80023a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a8:	e03b      	b.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	6839      	ldr	r1, [r7, #0]
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 f8d6 	bl	8002560 <I2C_IsErrorOccurred>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e041      	b.n	8002442 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d02d      	beq.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023c6:	f7ff f891 	bl	80014ec <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d302      	bcc.n	80023dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d122      	bne.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	699a      	ldr	r2, [r3, #24]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	4013      	ands	r3, r2
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	79fb      	ldrb	r3, [r7, #7]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d113      	bne.n	8002422 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fe:	f043 0220 	orr.w	r2, r3, #32
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e00f      	b.n	8002442 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	699a      	ldr	r2, [r3, #24]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	4013      	ands	r3, r2
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	429a      	cmp	r2, r3
 8002430:	bf0c      	ite	eq
 8002432:	2301      	moveq	r3, #1
 8002434:	2300      	movne	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	429a      	cmp	r2, r3
 800243e:	d0b4      	beq.n	80023aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002456:	e033      	b.n	80024c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f000 f87f 	bl	8002560 <I2C_IsErrorOccurred>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e031      	b.n	80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002472:	d025      	beq.n	80024c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002474:	f7ff f83a 	bl	80014ec <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68ba      	ldr	r2, [r7, #8]
 8002480:	429a      	cmp	r2, r3
 8002482:	d302      	bcc.n	800248a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d11a      	bne.n	80024c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b02      	cmp	r3, #2
 8002496:	d013      	beq.n	80024c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249c:	f043 0220 	orr.w	r2, r3, #32
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e007      	b.n	80024d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d1c4      	bne.n	8002458 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024e4:	e02f      	b.n	8002546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f838 	bl	8002560 <I2C_IsErrorOccurred>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e02d      	b.n	8002556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7fe fff7 	bl	80014ec <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d11a      	bne.n	8002546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b20      	cmp	r3, #32
 800251c:	d013      	beq.n	8002546 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	f043 0220 	orr.w	r2, r3, #32
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e007      	b.n	8002556 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0320 	and.w	r3, r3, #32
 8002550:	2b20      	cmp	r3, #32
 8002552:	d1c8      	bne.n	80024e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	@ 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d068      	beq.n	800265e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002594:	e049      	b.n	800262a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d045      	beq.n	800262a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800259e:	f7fe ffa5 	bl	80014ec <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	68ba      	ldr	r2, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d302      	bcc.n	80025b4 <I2C_IsErrorOccurred+0x54>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d13a      	bne.n	800262a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025d6:	d121      	bne.n	800261c <I2C_IsErrorOccurred+0xbc>
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025de:	d01d      	beq.n	800261c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d01a      	beq.n	800261c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80025f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80025f6:	f7fe ff79 	bl	80014ec <HAL_GetTick>
 80025fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025fc:	e00e      	b.n	800261c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80025fe:	f7fe ff75 	bl	80014ec <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b19      	cmp	r3, #25
 800260a:	d907      	bls.n	800261c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800260c:	6a3b      	ldr	r3, [r7, #32]
 800260e:	f043 0320 	orr.w	r3, r3, #32
 8002612:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800261a:	e006      	b.n	800262a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d1e9      	bne.n	80025fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b20      	cmp	r3, #32
 8002636:	d003      	beq.n	8002640 <I2C_IsErrorOccurred+0xe0>
 8002638:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0aa      	beq.n	8002596 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002640:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002644:	2b00      	cmp	r3, #0
 8002646:	d103      	bne.n	8002650 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2220      	movs	r2, #32
 800264e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00b      	beq.n	8002688 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00b      	beq.n	80026aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	f043 0308 	orr.w	r3, r3, #8
 8002698:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80026cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01c      	beq.n	800270e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff fe3b 	bl	8002350 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6859      	ldr	r1, [r3, #4]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <I2C_IsErrorOccurred+0x1bc>)
 80026e6:	400b      	ands	r3, r1
 80026e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026ee:	6a3b      	ldr	r3, [r7, #32]
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800270e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002712:	4618      	mov	r0, r3
 8002714:	3728      	adds	r7, #40	@ 0x28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	fe00e800 	.word	0xfe00e800

08002720 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	460b      	mov	r3, r1
 800272c:	817b      	strh	r3, [r7, #10]
 800272e:	4613      	mov	r3, r2
 8002730:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002738:	7a7b      	ldrb	r3, [r7, #9]
 800273a:	041b      	lsls	r3, r3, #16
 800273c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002740:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	4313      	orrs	r3, r2
 800274a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800274e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	0d5b      	lsrs	r3, r3, #21
 800275a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800275e:	4b08      	ldr	r3, [pc, #32]	@ (8002780 <I2C_TransferConfig+0x60>)
 8002760:	430b      	orrs	r3, r1
 8002762:	43db      	mvns	r3, r3
 8002764:	ea02 0103 	and.w	r1, r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	03ff63ff 	.word	0x03ff63ff

08002784 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	d138      	bne.n	800280c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027a4:	2302      	movs	r3, #2
 80027a6:	e032      	b.n	800280e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2224      	movs	r2, #36	@ 0x24
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80027d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6819      	ldr	r1, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	683a      	ldr	r2, [r7, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800281a:	b480      	push	{r7}
 800281c:	b085      	sub	sp, #20
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b20      	cmp	r3, #32
 800282e:	d139      	bne.n	80028a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800283a:	2302      	movs	r3, #2
 800283c:	e033      	b.n	80028a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2224      	movs	r2, #36	@ 0x24
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 0201 	bic.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800286c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4313      	orrs	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e000      	b.n	80028a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e08f      	b.n	80029e6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d106      	bne.n	80028e6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fe f8b3 	bl	8000a4c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d004      	beq.n	8002908 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002902:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002906:	d103      	bne.n	8002910 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 031e 	bic.w	r3, r3, #30
 800290e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002918:	4293      	cmp	r3, r2
 800291a:	d005      	beq.n	8002928 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002922:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002926:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4b31      	ldr	r3, [pc, #196]	@ (80029f0 <HAL_LPTIM_Init+0x13c>)
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002938:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800293e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8002944:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800294a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	4313      	orrs	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d107      	bne.n	800296a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8002962:	4313      	orrs	r3, r2
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d004      	beq.n	800297c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002976:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800297a:	d107      	bne.n	800298c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8002984:	4313      	orrs	r3, r2
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4313      	orrs	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002994:	4293      	cmp	r3, r2
 8002996:	d00a      	beq.n	80029ae <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80029a0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80029a6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a0e      	ldr	r2, [pc, #56]	@ (80029f4 <HAL_LPTIM_Init+0x140>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	621a      	str	r2, [r3, #32]
 80029d0:	e004      	b.n	80029dc <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029da:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	ff19f1fe 	.word	0xff19f1fe
 80029f4:	40007c00 	.word	0x40007c00

080029f8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d10d      	bne.n	8002a2a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0301 	and.w	r3, r3, #1
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d106      	bne.n	8002a2a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2201      	movs	r2, #1
 8002a22:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f882 	bl	8002b2e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d10d      	bne.n	8002a54 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d106      	bne.n	8002a54 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f877 	bl	8002b42 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d10d      	bne.n	8002a7e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d106      	bne.n	8002a7e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2204      	movs	r2, #4
 8002a76:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 f86c 	bl	8002b56 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d10d      	bne.n	8002aa8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d106      	bne.n	8002aa8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f861 	bl	8002b6a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0310 	and.w	r3, r3, #16
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d10d      	bne.n	8002ad2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	2b10      	cmp	r3, #16
 8002ac2:	d106      	bne.n	8002ad2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2210      	movs	r2, #16
 8002aca:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f856 	bl	8002b7e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0320 	and.w	r3, r3, #32
 8002adc:	2b20      	cmp	r3, #32
 8002ade:	d10d      	bne.n	8002afc <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b20      	cmp	r3, #32
 8002aec:	d106      	bne.n	8002afc <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2220      	movs	r2, #32
 8002af4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f84b 	bl	8002b92 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b06:	2b40      	cmp	r3, #64	@ 0x40
 8002b08:	d10d      	bne.n	8002b26 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b14:	2b40      	cmp	r3, #64	@ 0x40
 8002b16:	d106      	bne.n	8002b26 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2240      	movs	r2, #64	@ 0x40
 8002b1e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f840 	bl	8002ba6 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8002b4a:	bf00      	nop
 8002b4c:	370c      	adds	r7, #12
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b083      	sub	sp, #12
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8002b9a:	bf00      	nop
 8002b9c:	370c      	adds	r7, #12
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
	...

08002bbc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bca:	6013      	str	r3, [r2, #0]
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40007000 	.word	0x40007000

08002bdc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40007000 	.word	0x40007000

08002bf8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c06:	d130      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c08:	4b23      	ldr	r3, [pc, #140]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c14:	d038      	beq.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c16:	4b20      	ldr	r3, [pc, #128]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c20:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c26:	4b1d      	ldr	r3, [pc, #116]	@ (8002c9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2232      	movs	r2, #50	@ 0x32
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9b      	lsrs	r3, r3, #18
 8002c38:	3301      	adds	r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c3c:	e002      	b.n	8002c44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c44:	4b14      	ldr	r3, [pc, #80]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c50:	d102      	bne.n	8002c58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1f2      	bne.n	8002c3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c58:	4b0f      	ldr	r3, [pc, #60]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c64:	d110      	bne.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e00f      	b.n	8002c8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c76:	d007      	beq.n	8002c88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c78:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c80:	4a05      	ldr	r2, [pc, #20]	@ (8002c98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	40007000 	.word	0x40007000
 8002c9c:	20000000 	.word	0x20000000
 8002ca0:	431bde83 	.word	0x431bde83

08002ca4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f000 bc02 	b.w	80034bc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cb8:	4b96      	ldr	r3, [pc, #600]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f003 030c 	and.w	r3, r3, #12
 8002cc0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cc2:	4b94      	ldr	r3, [pc, #592]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 80e4 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d007      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x4c>
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	f040 808b 	bne.w	8002dfe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	f040 8087 	bne.w	8002dfe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cf0:	4b88      	ldr	r3, [pc, #544]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_OscConfig+0x64>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e3d9      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1a      	ldr	r2, [r3, #32]
 8002d0c:	4b81      	ldr	r3, [pc, #516]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d004      	beq.n	8002d22 <HAL_RCC_OscConfig+0x7e>
 8002d18:	4b7e      	ldr	r3, [pc, #504]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d20:	e005      	b.n	8002d2e <HAL_RCC_OscConfig+0x8a>
 8002d22:	4b7c      	ldr	r3, [pc, #496]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d223      	bcs.n	8002d7a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fd8c 	bl	8003854 <RCC_SetFlashLatencyFromMSIRange>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e3ba      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d46:	4b73      	ldr	r3, [pc, #460]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a72      	ldr	r2, [pc, #456]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	4b70      	ldr	r3, [pc, #448]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	496d      	ldr	r1, [pc, #436]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d64:	4b6b      	ldr	r3, [pc, #428]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	021b      	lsls	r3, r3, #8
 8002d72:	4968      	ldr	r1, [pc, #416]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	e025      	b.n	8002dc6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7a:	4b66      	ldr	r3, [pc, #408]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a65      	ldr	r2, [pc, #404]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b63      	ldr	r3, [pc, #396]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4960      	ldr	r1, [pc, #384]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d98:	4b5e      	ldr	r3, [pc, #376]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	495b      	ldr	r1, [pc, #364]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fd4c 	bl	8003854 <RCC_SetFlashLatencyFromMSIRange>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e37a      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dc6:	f000 fc81 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	4b51      	ldr	r3, [pc, #324]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	091b      	lsrs	r3, r3, #4
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	4950      	ldr	r1, [pc, #320]	@ (8002f18 <HAL_RCC_OscConfig+0x274>)
 8002dd8:	5ccb      	ldrb	r3, [r1, r3]
 8002dda:	f003 031f 	and.w	r3, r3, #31
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a4e      	ldr	r2, [pc, #312]	@ (8002f1c <HAL_RCC_OscConfig+0x278>)
 8002de4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002de6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f20 <HAL_RCC_OscConfig+0x27c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fe fb2e 	bl	800144c <HAL_InitTick>
 8002df0:	4603      	mov	r3, r0
 8002df2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d052      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dfa:	7bfb      	ldrb	r3, [r7, #15]
 8002dfc:	e35e      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d032      	beq.n	8002e6c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e06:	4b43      	ldr	r3, [pc, #268]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a42      	ldr	r2, [pc, #264]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fb6b 	bl	80014ec <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fb67 	bl	80014ec <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e347      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e2c:	4b39      	ldr	r3, [pc, #228]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e38:	4b36      	ldr	r3, [pc, #216]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a35      	ldr	r2, [pc, #212]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	f043 0308 	orr.w	r3, r3, #8
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	4b33      	ldr	r3, [pc, #204]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	4930      	ldr	r1, [pc, #192]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e56:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69db      	ldr	r3, [r3, #28]
 8002e62:	021b      	lsls	r3, r3, #8
 8002e64:	492b      	ldr	r1, [pc, #172]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
 8002e6a:	e01a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e6c:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a28      	ldr	r2, [pc, #160]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e72:	f023 0301 	bic.w	r3, r3, #1
 8002e76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e78:	f7fe fb38 	bl	80014ec <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e80:	f7fe fb34 	bl	80014ec <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e314      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e92:	4b20      	ldr	r3, [pc, #128]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1dc>
 8002e9e:	e000      	b.n	8002ea2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ea0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0301 	and.w	r3, r3, #1
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d073      	beq.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d005      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x21c>
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	d10e      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d063      	beq.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d15f      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e2f1      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x24c>
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e025      	b.n	8002f3c <HAL_RCC_OscConfig+0x298>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef8:	d114      	bne.n	8002f24 <HAL_RCC_OscConfig+0x280>
 8002efa:	4b06      	ldr	r3, [pc, #24]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a05      	ldr	r2, [pc, #20]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a02      	ldr	r2, [pc, #8]	@ (8002f14 <HAL_RCC_OscConfig+0x270>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e013      	b.n	8002f3c <HAL_RCC_OscConfig+0x298>
 8002f14:	40021000 	.word	0x40021000
 8002f18:	08005540 	.word	0x08005540
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000004 	.word	0x20000004
 8002f24:	4ba0      	ldr	r3, [pc, #640]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a9f      	ldr	r2, [pc, #636]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	4b9d      	ldr	r3, [pc, #628]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a9c      	ldr	r2, [pc, #624]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d013      	beq.n	8002f6c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fad2 	bl	80014ec <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f4c:	f7fe face 	bl	80014ec <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b64      	cmp	r3, #100	@ 0x64
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e2ae      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f5e:	4b92      	ldr	r3, [pc, #584]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0f0      	beq.n	8002f4c <HAL_RCC_OscConfig+0x2a8>
 8002f6a:	e014      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fabe 	bl	80014ec <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f74:	f7fe faba 	bl	80014ec <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	@ 0x64
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e29a      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f86:	4b88      	ldr	r3, [pc, #544]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x2d0>
 8002f92:	e000      	b.n	8002f96 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d060      	beq.n	8003064 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d005      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x310>
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b0c      	cmp	r3, #12
 8002fac:	d119      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d116      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb4:	4b7c      	ldr	r3, [pc, #496]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x328>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e277      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b76      	ldr	r3, [pc, #472]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	061b      	lsls	r3, r3, #24
 8002fda:	4973      	ldr	r1, [pc, #460]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	e040      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d023      	beq.n	8003032 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fea:	4b6f      	ldr	r3, [pc, #444]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6e      	ldr	r2, [pc, #440]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8002ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff6:	f7fe fa79 	bl	80014ec <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fa75 	bl	80014ec <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e255      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003010:	4b65      	ldr	r3, [pc, #404]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003018:	2b00      	cmp	r3, #0
 800301a:	d0f0      	beq.n	8002ffe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b62      	ldr	r3, [pc, #392]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	495f      	ldr	r1, [pc, #380]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
 8003030:	e018      	b.n	8003064 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003032:	4b5d      	ldr	r3, [pc, #372]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a5c      	ldr	r2, [pc, #368]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fa55 	bl	80014ec <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7fe fa51 	bl	80014ec <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e231      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003058:	4b53      	ldr	r3, [pc, #332]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1f0      	bne.n	8003046 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d03c      	beq.n	80030ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d01c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003078:	4b4b      	ldr	r3, [pc, #300]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 800307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800307e:	4a4a      	ldr	r2, [pc, #296]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fa30 	bl	80014ec <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800308e:	e008      	b.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003090:	f7fe fa2c 	bl	80014ec <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b02      	cmp	r3, #2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e20c      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a2:	4b41      	ldr	r3, [pc, #260]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0ef      	beq.n	8003090 <HAL_RCC_OscConfig+0x3ec>
 80030b0:	e01b      	b.n	80030ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b2:	4b3d      	ldr	r3, [pc, #244]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030b8:	4a3b      	ldr	r2, [pc, #236]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030ba:	f023 0301 	bic.w	r3, r3, #1
 80030be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030c2:	f7fe fa13 	bl	80014ec <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ca:	f7fe fa0f 	bl	80014ec <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e1ef      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030dc:	4b32      	ldr	r3, [pc, #200]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1ef      	bne.n	80030ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 80a6 	beq.w	8003244 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030f8:	2300      	movs	r3, #0
 80030fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030fc:	4b2a      	ldr	r3, [pc, #168]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003108:	4b27      	ldr	r3, [pc, #156]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800310c:	4a26      	ldr	r2, [pc, #152]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 800310e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003112:	6593      	str	r3, [r2, #88]	@ 0x58
 8003114:	4b24      	ldr	r3, [pc, #144]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003116:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003120:	2301      	movs	r3, #1
 8003122:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003124:	4b21      	ldr	r3, [pc, #132]	@ (80031ac <HAL_RCC_OscConfig+0x508>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d118      	bne.n	8003162 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003130:	4b1e      	ldr	r3, [pc, #120]	@ (80031ac <HAL_RCC_OscConfig+0x508>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1d      	ldr	r2, [pc, #116]	@ (80031ac <HAL_RCC_OscConfig+0x508>)
 8003136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800313a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800313c:	f7fe f9d6 	bl	80014ec <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003144:	f7fe f9d2 	bl	80014ec <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e1b2      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003156:	4b15      	ldr	r3, [pc, #84]	@ (80031ac <HAL_RCC_OscConfig+0x508>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d108      	bne.n	800317c <HAL_RCC_OscConfig+0x4d8>
 800316a:	4b0f      	ldr	r3, [pc, #60]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003170:	4a0d      	ldr	r2, [pc, #52]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003172:	f043 0301 	orr.w	r3, r3, #1
 8003176:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800317a:	e029      	b.n	80031d0 <HAL_RCC_OscConfig+0x52c>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d115      	bne.n	80031b0 <HAL_RCC_OscConfig+0x50c>
 8003184:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003194:	4b04      	ldr	r3, [pc, #16]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	4a03      	ldr	r2, [pc, #12]	@ (80031a8 <HAL_RCC_OscConfig+0x504>)
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031a4:	e014      	b.n	80031d0 <HAL_RCC_OscConfig+0x52c>
 80031a6:	bf00      	nop
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40007000 	.word	0x40007000
 80031b0:	4b9a      	ldr	r3, [pc, #616]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031b6:	4a99      	ldr	r2, [pc, #612]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80031b8:	f023 0301 	bic.w	r3, r3, #1
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80031c0:	4b96      	ldr	r3, [pc, #600]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c6:	4a95      	ldr	r2, [pc, #596]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d016      	beq.n	8003206 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe f988 	bl	80014ec <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031de:	e00a      	b.n	80031f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e0:	f7fe f984 	bl	80014ec <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e162      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031f6:	4b89      	ldr	r3, [pc, #548]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80031f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ed      	beq.n	80031e0 <HAL_RCC_OscConfig+0x53c>
 8003204:	e015      	b.n	8003232 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003206:	f7fe f971 	bl	80014ec <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe f96d 	bl	80014ec <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e14b      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003224:	4b7d      	ldr	r3, [pc, #500]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 8003226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1ed      	bne.n	800320e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003232:	7ffb      	ldrb	r3, [r7, #31]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003238:	4b78      	ldr	r3, [pc, #480]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 800323a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323c:	4a77      	ldr	r2, [pc, #476]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 800323e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003242:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0320 	and.w	r3, r3, #32
 800324c:	2b00      	cmp	r3, #0
 800324e:	d03c      	beq.n	80032ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01c      	beq.n	8003292 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003258:	4b70      	ldr	r3, [pc, #448]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 800325a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800325e:	4a6f      	ldr	r2, [pc, #444]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003268:	f7fe f940 	bl	80014ec <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003270:	f7fe f93c 	bl	80014ec <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e11c      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003282:	4b66      	ldr	r3, [pc, #408]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 8003284:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0ef      	beq.n	8003270 <HAL_RCC_OscConfig+0x5cc>
 8003290:	e01b      	b.n	80032ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003292:	4b62      	ldr	r3, [pc, #392]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 8003294:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003298:	4a60      	ldr	r2, [pc, #384]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fe f923 	bl	80014ec <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032aa:	f7fe f91f 	bl	80014ec <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e0ff      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032bc:	4b57      	ldr	r3, [pc, #348]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80032be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d1ef      	bne.n	80032aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80f3 	beq.w	80034ba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	2b02      	cmp	r3, #2
 80032da:	f040 80c9 	bne.w	8003470 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032de:	4b4f      	ldr	r3, [pc, #316]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f003 0203 	and.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d12c      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	3b01      	subs	r3, #1
 80032fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d123      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800330e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d11b      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800331e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003320:	429a      	cmp	r2, r3
 8003322:	d113      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800332e:	085b      	lsrs	r3, r3, #1
 8003330:	3b01      	subs	r3, #1
 8003332:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003334:	429a      	cmp	r2, r3
 8003336:	d109      	bne.n	800334c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	085b      	lsrs	r3, r3, #1
 8003344:	3b01      	subs	r3, #1
 8003346:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003348:	429a      	cmp	r2, r3
 800334a:	d06b      	beq.n	8003424 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	2b0c      	cmp	r3, #12
 8003350:	d062      	beq.n	8003418 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003352:	4b32      	ldr	r3, [pc, #200]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e0ac      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003362:	4b2e      	ldr	r3, [pc, #184]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2d      	ldr	r2, [pc, #180]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 8003368:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800336c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800336e:	f7fe f8bd 	bl	80014ec <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003376:	f7fe f8b9 	bl	80014ec <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e099      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003388:	4b24      	ldr	r3, [pc, #144]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1f0      	bne.n	8003376 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003394:	4b21      	ldr	r3, [pc, #132]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	4b21      	ldr	r3, [pc, #132]	@ (8003420 <HAL_RCC_OscConfig+0x77c>)
 800339a:	4013      	ands	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80033ae:	0212      	lsls	r2, r2, #8
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033b6:	0852      	lsrs	r2, r2, #1
 80033b8:	3a01      	subs	r2, #1
 80033ba:	0552      	lsls	r2, r2, #21
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80033c2:	0852      	lsrs	r2, r2, #1
 80033c4:	3a01      	subs	r2, #1
 80033c6:	0652      	lsls	r2, r2, #25
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80033ce:	06d2      	lsls	r2, r2, #27
 80033d0:	430a      	orrs	r2, r1
 80033d2:	4912      	ldr	r1, [pc, #72]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033d8:	4b10      	ldr	r3, [pc, #64]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0f      	ldr	r2, [pc, #60]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80033de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033e4:	4b0d      	ldr	r3, [pc, #52]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a0c      	ldr	r2, [pc, #48]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033f0:	f7fe f87c 	bl	80014ec <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe f878 	bl	80014ec <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e058      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340a:	4b04      	ldr	r3, [pc, #16]	@ (800341c <HAL_RCC_OscConfig+0x778>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003416:	e050      	b.n	80034ba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e04f      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
 800341c:	40021000 	.word	0x40021000
 8003420:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003424:	4b27      	ldr	r3, [pc, #156]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d144      	bne.n	80034ba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003430:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a23      	ldr	r2, [pc, #140]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800343a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800343c:	4b21      	ldr	r3, [pc, #132]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4a20      	ldr	r2, [pc, #128]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003442:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003446:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003448:	f7fe f850 	bl	80014ec <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003450:	f7fe f84c 	bl	80014ec <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e02c      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003462:	4b18      	ldr	r3, [pc, #96]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0x7ac>
 800346e:	e024      	b.n	80034ba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	2b0c      	cmp	r3, #12
 8003474:	d01f      	beq.n	80034b6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b13      	ldr	r3, [pc, #76]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a12      	ldr	r2, [pc, #72]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 800347c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003480:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003482:	f7fe f833 	bl	80014ec <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348a:	f7fe f82f 	bl	80014ec <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e00f      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800349c:	4b09      	ldr	r3, [pc, #36]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d1f0      	bne.n	800348a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	4905      	ldr	r1, [pc, #20]	@ (80034c4 <HAL_RCC_OscConfig+0x820>)
 80034ae:	4b06      	ldr	r3, [pc, #24]	@ (80034c8 <HAL_RCC_OscConfig+0x824>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	60cb      	str	r3, [r1, #12]
 80034b4:	e001      	b.n	80034ba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034ba:	2300      	movs	r3, #0
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3720      	adds	r7, #32
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	feeefffc 	.word	0xfeeefffc

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0e7      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e0:	4b75      	ldr	r3, [pc, #468]	@ (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d910      	bls.n	8003510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ee:	4b72      	ldr	r3, [pc, #456]	@ (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 0207 	bic.w	r2, r3, #7
 80034f6:	4970      	ldr	r1, [pc, #448]	@ (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fe:	4b6e      	ldr	r3, [pc, #440]	@ (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e0cf      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d010      	beq.n	800353e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	4b66      	ldr	r3, [pc, #408]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003528:	429a      	cmp	r2, r3
 800352a:	d908      	bls.n	800353e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b63      	ldr	r3, [pc, #396]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4960      	ldr	r1, [pc, #384]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800353a:	4313      	orrs	r3, r2
 800353c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d04c      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b03      	cmp	r3, #3
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003552:	4b5a      	ldr	r3, [pc, #360]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d121      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e0a6      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800356a:	4b54      	ldr	r3, [pc, #336]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d115      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e09a      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003582:	4b4e      	ldr	r3, [pc, #312]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e08e      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003592:	4b4a      	ldr	r3, [pc, #296]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e086      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b46      	ldr	r3, [pc, #280]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4943      	ldr	r1, [pc, #268]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b4:	f7fd ff9a 	bl	80014ec <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fd ff96 	bl	80014ec <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e06e      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b3a      	ldr	r3, [pc, #232]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d010      	beq.n	8003612 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b31      	ldr	r3, [pc, #196]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d208      	bcs.n	8003612 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b2e      	ldr	r3, [pc, #184]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	492b      	ldr	r1, [pc, #172]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003612:	4b29      	ldr	r3, [pc, #164]	@ (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	429a      	cmp	r2, r3
 800361e:	d210      	bcs.n	8003642 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003620:	4b25      	ldr	r3, [pc, #148]	@ (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 0207 	bic.w	r2, r3, #7
 8003628:	4923      	ldr	r1, [pc, #140]	@ (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	4313      	orrs	r3, r2
 800362e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003630:	4b21      	ldr	r3, [pc, #132]	@ (80036b8 <HAL_RCC_ClockConfig+0x1ec>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d001      	beq.n	8003642 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e036      	b.n	80036b0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800364e:	4b1b      	ldr	r3, [pc, #108]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4918      	ldr	r1, [pc, #96]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800365c:	4313      	orrs	r3, r2
 800365e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d009      	beq.n	8003680 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800366c:	4b13      	ldr	r3, [pc, #76]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	00db      	lsls	r3, r3, #3
 800367a:	4910      	ldr	r1, [pc, #64]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	4313      	orrs	r3, r2
 800367e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003680:	f000 f824 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8003684:	4602      	mov	r2, r0
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	091b      	lsrs	r3, r3, #4
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	490b      	ldr	r1, [pc, #44]	@ (80036c0 <HAL_RCC_ClockConfig+0x1f4>)
 8003692:	5ccb      	ldrb	r3, [r1, r3]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
 800369c:	4a09      	ldr	r2, [pc, #36]	@ (80036c4 <HAL_RCC_ClockConfig+0x1f8>)
 800369e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036a0:	4b09      	ldr	r3, [pc, #36]	@ (80036c8 <HAL_RCC_ClockConfig+0x1fc>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fd fed1 	bl	800144c <HAL_InitTick>
 80036aa:	4603      	mov	r3, r0
 80036ac:	72fb      	strb	r3, [r7, #11]

  return status;
 80036ae:	7afb      	ldrb	r3, [r7, #11]
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40022000 	.word	0x40022000
 80036bc:	40021000 	.word	0x40021000
 80036c0:	08005540 	.word	0x08005540
 80036c4:	20000000 	.word	0x20000000
 80036c8:	20000004 	.word	0x20000004

080036cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b089      	sub	sp, #36	@ 0x24
 80036d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	2300      	movs	r3, #0
 80036d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036da:	4b3e      	ldr	r3, [pc, #248]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036e4:	4b3b      	ldr	r3, [pc, #236]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f003 0303 	and.w	r3, r3, #3
 80036ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_GetSysClockFreq+0x34>
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	2b0c      	cmp	r3, #12
 80036f8:	d121      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d11e      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003700:	4b34      	ldr	r3, [pc, #208]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800370c:	4b31      	ldr	r3, [pc, #196]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800370e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003712:	0a1b      	lsrs	r3, r3, #8
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e005      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800371c:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	091b      	lsrs	r3, r3, #4
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003728:	4a2b      	ldr	r2, [pc, #172]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d10d      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b04      	cmp	r3, #4
 8003742:	d102      	bne.n	800374a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003744:	4b25      	ldr	r3, [pc, #148]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	e004      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d101      	bne.n	8003754 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003750:	4b23      	ldr	r3, [pc, #140]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003752:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	2b0c      	cmp	r3, #12
 8003758:	d134      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800375a:	4b1e      	ldr	r3, [pc, #120]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	2b02      	cmp	r3, #2
 8003768:	d003      	beq.n	8003772 <HAL_RCC_GetSysClockFreq+0xa6>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d003      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0xac>
 8003770:	e005      	b.n	800377e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003772:	4b1a      	ldr	r3, [pc, #104]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003774:	617b      	str	r3, [r7, #20]
      break;
 8003776:	e005      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003778:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800377a:	617b      	str	r3, [r7, #20]
      break;
 800377c:	e002      	b.n	8003784 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	617b      	str	r3, [r7, #20]
      break;
 8003782:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003784:	4b13      	ldr	r3, [pc, #76]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	3301      	adds	r3, #1
 8003790:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003792:	4b10      	ldr	r3, [pc, #64]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	fb03 f202 	mul.w	r2, r3, r2
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	0e5b      	lsrs	r3, r3, #25
 80037b0:	f003 0303 	and.w	r3, r3, #3
 80037b4:	3301      	adds	r3, #1
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037c4:	69bb      	ldr	r3, [r7, #24]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3724      	adds	r7, #36	@ 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08005558 	.word	0x08005558
 80037dc:	00f42400 	.word	0x00f42400
 80037e0:	007a1200 	.word	0x007a1200

080037e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e8:	4b03      	ldr	r3, [pc, #12]	@ (80037f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ea:	681b      	ldr	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20000000 	.word	0x20000000

080037fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003800:	f7ff fff0 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 8003804:	4602      	mov	r2, r0
 8003806:	4b06      	ldr	r3, [pc, #24]	@ (8003820 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	0a1b      	lsrs	r3, r3, #8
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	4904      	ldr	r1, [pc, #16]	@ (8003824 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003812:	5ccb      	ldrb	r3, [r1, r3]
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800381c:	4618      	mov	r0, r3
 800381e:	bd80      	pop	{r7, pc}
 8003820:	40021000 	.word	0x40021000
 8003824:	08005550 	.word	0x08005550

08003828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800382c:	f7ff ffda 	bl	80037e4 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	@ (800384c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0adb      	lsrs	r3, r3, #11
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4904      	ldr	r1, [pc, #16]	@ (8003850 <HAL_RCC_GetPCLK2Freq+0x28>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	08005550 	.word	0x08005550

08003854 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800385c:	2300      	movs	r3, #0
 800385e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003860:	4b2a      	ldr	r3, [pc, #168]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003864:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800386c:	f7ff f9b6 	bl	8002bdc <HAL_PWREx_GetVoltageRange>
 8003870:	6178      	str	r0, [r7, #20]
 8003872:	e014      	b.n	800389e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003874:	4b25      	ldr	r3, [pc, #148]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003878:	4a24      	ldr	r2, [pc, #144]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800387e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003880:	4b22      	ldr	r3, [pc, #136]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800388c:	f7ff f9a6 	bl	8002bdc <HAL_PWREx_GetVoltageRange>
 8003890:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003892:	4b1e      	ldr	r3, [pc, #120]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003896:	4a1d      	ldr	r2, [pc, #116]	@ (800390c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003898:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038a4:	d10b      	bne.n	80038be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b80      	cmp	r3, #128	@ 0x80
 80038aa:	d919      	bls.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2ba0      	cmp	r3, #160	@ 0xa0
 80038b0:	d902      	bls.n	80038b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038b2:	2302      	movs	r3, #2
 80038b4:	613b      	str	r3, [r7, #16]
 80038b6:	e013      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038b8:	2301      	movs	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e010      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b80      	cmp	r3, #128	@ 0x80
 80038c2:	d902      	bls.n	80038ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038c4:	2303      	movs	r3, #3
 80038c6:	613b      	str	r3, [r7, #16]
 80038c8:	e00a      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b80      	cmp	r3, #128	@ 0x80
 80038ce:	d102      	bne.n	80038d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038d0:	2302      	movs	r3, #2
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e004      	b.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b70      	cmp	r3, #112	@ 0x70
 80038da:	d101      	bne.n	80038e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038dc:	2301      	movs	r3, #1
 80038de:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f023 0207 	bic.w	r2, r3, #7
 80038e8:	4909      	ldr	r1, [pc, #36]	@ (8003910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038f0:	4b07      	ldr	r3, [pc, #28]	@ (8003910 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d001      	beq.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40021000 	.word	0x40021000
 8003910:	40022000 	.word	0x40022000

08003914 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800391c:	2300      	movs	r3, #0
 800391e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003920:	2300      	movs	r3, #0
 8003922:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800392c:	2b00      	cmp	r3, #0
 800392e:	d031      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003934:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003938:	d01a      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800393a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800393e:	d814      	bhi.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003944:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003948:	d10f      	bne.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800394a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	4a5c      	ldr	r2, [pc, #368]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003954:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003956:	e00c      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f000 fa32 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003964:	4603      	mov	r3, r0
 8003966:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003968:	e003      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	74fb      	strb	r3, [r7, #19]
      break;
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003970:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10b      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003978:	4b51      	ldr	r3, [pc, #324]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800397a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800397e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003986:	494e      	ldr	r1, [pc, #312]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003988:	4313      	orrs	r3, r2
 800398a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800398e:	e001      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 809e 	beq.w	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039a6:	4b46      	ldr	r3, [pc, #280]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00d      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039bc:	4b40      	ldr	r3, [pc, #256]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80039c8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039d4:	2301      	movs	r3, #1
 80039d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039d8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a39      	ldr	r2, [pc, #228]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e4:	f7fd fd82 	bl	80014ec <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ea:	e009      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ec:	f7fd fd7e 	bl	80014ec <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d902      	bls.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	74fb      	strb	r3, [r7, #19]
        break;
 80039fe:	e005      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a00:	4b30      	ldr	r3, [pc, #192]	@ (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d0ef      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d15a      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d01e      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d019      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a2e:	4b24      	ldr	r3, [pc, #144]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a38:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a3a:	4b21      	ldr	r3, [pc, #132]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a40:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a50:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a5a:	4a19      	ldr	r2, [pc, #100]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d016      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fd3e 	bl	80014ec <HAL_GetTick>
 8003a70:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a72:	e00b      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a74:	f7fd fd3a 	bl	80014ec <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d902      	bls.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	74fb      	strb	r3, [r7, #19]
            break;
 8003a8a:	e006      	b.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0ec      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003a9a:	7cfb      	ldrb	r3, [r7, #19]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa0:	4b07      	ldr	r3, [pc, #28]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aae:	4904      	ldr	r1, [pc, #16]	@ (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003ab6:	e009      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ab8:	7cfb      	ldrb	r3, [r7, #19]
 8003aba:	74bb      	strb	r3, [r7, #18]
 8003abc:	e006      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	7cfb      	ldrb	r3, [r7, #19]
 8003aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003acc:	7c7b      	ldrb	r3, [r7, #17]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d105      	bne.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	4a8c      	ldr	r2, [pc, #560]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003aea:	4b87      	ldr	r3, [pc, #540]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af0:	f023 0203 	bic.w	r2, r3, #3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4983      	ldr	r1, [pc, #524]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f023 020c 	bic.w	r2, r3, #12
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1a:	497b      	ldr	r1, [pc, #492]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0304 	and.w	r3, r3, #4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00a      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b2e:	4b76      	ldr	r3, [pc, #472]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b34:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3c:	4972      	ldr	r1, [pc, #456]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00a      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b50:	4b6d      	ldr	r3, [pc, #436]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5e:	496a      	ldr	r1, [pc, #424]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b72:	4b65      	ldr	r3, [pc, #404]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b80:	4961      	ldr	r1, [pc, #388]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b94:	4b5c      	ldr	r3, [pc, #368]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	4959      	ldr	r1, [pc, #356]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb6:	4b54      	ldr	r3, [pc, #336]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bbc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	4950      	ldr	r1, [pc, #320]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003be6:	4948      	ldr	r1, [pc, #288]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bfa:	4b43      	ldr	r3, [pc, #268]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c00:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c08:	493f      	ldr	r1, [pc, #252]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d028      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c1c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c2a:	4937      	ldr	r1, [pc, #220]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c3c:	4b32      	ldr	r3, [pc, #200]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a31      	ldr	r2, [pc, #196]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c46:	60d3      	str	r3, [r2, #12]
 8003c48:	e011      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c52:	d10c      	bne.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3304      	adds	r3, #4
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 f8b4 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c64:	7cfb      	ldrb	r3, [r7, #19]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8003c6a:	7cfb      	ldrb	r3, [r7, #19]
 8003c6c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d028      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c7a:	4b23      	ldr	r3, [pc, #140]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c80:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c88:	491f      	ldr	r1, [pc, #124]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c98:	d106      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ca0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ca4:	60d3      	str	r3, [r2, #12]
 8003ca6:	e011      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	2101      	movs	r1, #1
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 f885 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cc2:	7cfb      	ldrb	r3, [r7, #19]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8003cc8:	7cfb      	ldrb	r3, [r7, #19]
 8003cca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d02b      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ce6:	4908      	ldr	r1, [pc, #32]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cf6:	d109      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf8:	4b03      	ldr	r3, [pc, #12]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a02      	ldr	r2, [pc, #8]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d02:	60d3      	str	r3, [r2, #12]
 8003d04:	e014      	b.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003d06:	bf00      	nop
 8003d08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d10:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d14:	d10c      	bne.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 f853 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003d22:	4603      	mov	r3, r0
 8003d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d26:	7cfb      	ldrb	r3, [r7, #19]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8003d2c:	7cfb      	ldrb	r3, [r7, #19]
 8003d2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01c      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d3c:	4b19      	ldr	r3, [pc, #100]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	4916      	ldr	r1, [pc, #88]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d5a:	d10c      	bne.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	2102      	movs	r1, #2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 f830 	bl	8003dc8 <RCCEx_PLLSAI1_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d6c:	7cfb      	ldrb	r3, [r7, #19]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8003d72:	7cfb      	ldrb	r3, [r7, #19]
 8003d74:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d82:	4b08      	ldr	r3, [pc, #32]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d88:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d90:	4904      	ldr	r1, [pc, #16]	@ (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d98:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3718      	adds	r7, #24
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000

08003da8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003dac:	4b05      	ldr	r3, [pc, #20]	@ (8003dc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a04      	ldr	r2, [pc, #16]	@ (8003dc4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003db2:	f043 0304 	orr.w	r3, r3, #4
 8003db6:	6013      	str	r3, [r2, #0]
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40021000 	.word	0x40021000

08003dc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dd6:	4b74      	ldr	r3, [pc, #464]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d018      	beq.n	8003e14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003de2:	4b71      	ldr	r3, [pc, #452]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f003 0203 	and.w	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10d      	bne.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
       ||
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d009      	beq.n	8003e0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003dfa:	4b6b      	ldr	r3, [pc, #428]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	091b      	lsrs	r3, r3, #4
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	1c5a      	adds	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
       ||
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d047      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	e044      	b.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d018      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0x86>
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d825      	bhi.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d002      	beq.n	8003e2a <RCCEx_PLLSAI1_Config+0x62>
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d009      	beq.n	8003e3c <RCCEx_PLLSAI1_Config+0x74>
 8003e28:	e020      	b.n	8003e6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d11d      	bne.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e3a:	e01a      	b.n	8003e72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e4c:	e013      	b.n	8003e76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e4e:	4b56      	ldr	r3, [pc, #344]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10f      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e5a:	4b53      	ldr	r3, [pc, #332]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e6a:	e006      	b.n	8003e7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e004      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e72:	bf00      	nop
 8003e74:	e002      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e76:	bf00      	nop
 8003e78:	e000      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10d      	bne.n	8003e9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e82:	4b49      	ldr	r3, [pc, #292]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6819      	ldr	r1, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	011b      	lsls	r3, r3, #4
 8003e96:	430b      	orrs	r3, r1
 8003e98:	4943      	ldr	r1, [pc, #268]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d17c      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ea4:	4b40      	ldr	r3, [pc, #256]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a3f      	ldr	r2, [pc, #252]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eaa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb0:	f7fd fb1c 	bl	80014ec <HAL_GetTick>
 8003eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003eb6:	e009      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003eb8:	f7fd fb18 	bl	80014ec <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d902      	bls.n	8003ecc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eca:	e005      	b.n	8003ed8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ecc:	4b36      	ldr	r3, [pc, #216]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ef      	bne.n	8003eb8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ed8:	7bfb      	ldrb	r3, [r7, #15]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d15f      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d110      	bne.n	8003f06 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee4:	4b30      	ldr	r3, [pc, #192]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003eec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	6892      	ldr	r2, [r2, #8]
 8003ef4:	0211      	lsls	r1, r2, #8
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68d2      	ldr	r2, [r2, #12]
 8003efa:	06d2      	lsls	r2, r2, #27
 8003efc:	430a      	orrs	r2, r1
 8003efe:	492a      	ldr	r1, [pc, #168]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	610b      	str	r3, [r1, #16]
 8003f04:	e027      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d112      	bne.n	8003f32 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f0c:	4b26      	ldr	r3, [pc, #152]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003f14:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6892      	ldr	r2, [r2, #8]
 8003f1c:	0211      	lsls	r1, r2, #8
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	6912      	ldr	r2, [r2, #16]
 8003f22:	0852      	lsrs	r2, r2, #1
 8003f24:	3a01      	subs	r2, #1
 8003f26:	0552      	lsls	r2, r2, #21
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	491f      	ldr	r1, [pc, #124]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	610b      	str	r3, [r1, #16]
 8003f30:	e011      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f32:	4b1d      	ldr	r3, [pc, #116]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003f3a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6892      	ldr	r2, [r2, #8]
 8003f42:	0211      	lsls	r1, r2, #8
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6952      	ldr	r2, [r2, #20]
 8003f48:	0852      	lsrs	r2, r2, #1
 8003f4a:	3a01      	subs	r2, #1
 8003f4c:	0652      	lsls	r2, r2, #25
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	4915      	ldr	r1, [pc, #84]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f56:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a13      	ldr	r2, [pc, #76]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f60:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fd fac3 	bl	80014ec <HAL_GetTick>
 8003f66:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f68:	e009      	b.n	8003f7e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f6a:	f7fd fabf 	bl	80014ec <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d902      	bls.n	8003f7e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	73fb      	strb	r3, [r7, #15]
          break;
 8003f7c:	e005      	b.n	8003f8a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d0ef      	beq.n	8003f6a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f8a:	7bfb      	ldrb	r3, [r7, #15]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f90:	4b05      	ldr	r3, [pc, #20]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	4903      	ldr	r1, [pc, #12]	@ (8003fa8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3710      	adds	r7, #16
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	40021000 	.word	0x40021000

08003fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e095      	b.n	80040ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d108      	bne.n	8003fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fce:	d009      	beq.n	8003fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	61da      	str	r2, [r3, #28]
 8003fd6:	e005      	b.n	8003fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d106      	bne.n	8004004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc ffde 	bl	8000fc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800401a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004024:	d902      	bls.n	800402c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	e002      	b.n	8004032 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800402c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004030:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800403a:	d007      	beq.n	800404c <HAL_SPI_Init+0xa0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004044:	d002      	beq.n	800404c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	f003 0301 	and.w	r3, r3, #1
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408e:	ea42 0103 	orr.w	r1, r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004096:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	0c1b      	lsrs	r3, r3, #16
 80040a8:	f003 0204 	and.w	r2, r3, #4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	f003 0310 	and.w	r3, r3, #16
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80040c8:	ea42 0103 	orr.w	r1, r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e040      	b.n	8004186 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7fd f8b5 	bl	8001284 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2224      	movs	r2, #36	@ 0x24
 800411e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fb0b 	bl	8004754 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f8ae 	bl	80042a0 <UART_SetConfig>
 8004144:	4603      	mov	r3, r0
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e01b      	b.n	8004186 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800415c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800416c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fb8a 	bl	8004898 <UART_CheckIdleState>
 8004184:	4603      	mov	r3, r0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b08a      	sub	sp, #40	@ 0x28
 8004192:	af02      	add	r7, sp, #8
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	603b      	str	r3, [r7, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d177      	bne.n	8004296 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d002      	beq.n	80041b2 <HAL_UART_Transmit+0x24>
 80041ac:	88fb      	ldrh	r3, [r7, #6]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e070      	b.n	8004298 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2221      	movs	r2, #33	@ 0x21
 80041c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c4:	f7fd f992 	bl	80014ec <HAL_GetTick>
 80041c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	88fa      	ldrh	r2, [r7, #6]
 80041ce:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e2:	d108      	bne.n	80041f6 <HAL_UART_Transmit+0x68>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	e003      	b.n	80041fe <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041fe:	e02f      	b.n	8004260 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	2200      	movs	r2, #0
 8004208:	2180      	movs	r1, #128	@ 0x80
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fbec 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d004      	beq.n	8004220 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2220      	movs	r2, #32
 800421a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800421c:	2303      	movs	r3, #3
 800421e:	e03b      	b.n	8004298 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	881a      	ldrh	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004232:	b292      	uxth	r2, r2
 8004234:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	3302      	adds	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e007      	b.n	800424e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	3301      	adds	r3, #1
 800424c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1c9      	bne.n	8004200 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2200      	movs	r2, #0
 8004274:	2140      	movs	r1, #64	@ 0x40
 8004276:	68f8      	ldr	r0, [r7, #12]
 8004278:	f000 fbb6 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2220      	movs	r2, #32
 8004286:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e005      	b.n	8004298 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2220      	movs	r2, #32
 8004290:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004292:	2300      	movs	r3, #0
 8004294:	e000      	b.n	8004298 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004296:	2302      	movs	r3, #2
  }
}
 8004298:	4618      	mov	r0, r3
 800429a:	3720      	adds	r7, #32
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a4:	b08a      	sub	sp, #40	@ 0x28
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	431a      	orrs	r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b9e      	ldr	r3, [pc, #632]	@ (8004548 <UART_SetConfig+0x2a8>)
 80042d0:	4013      	ands	r3, r2
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042d8:	430b      	orrs	r3, r1
 80042da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a93      	ldr	r2, [pc, #588]	@ (800454c <UART_SetConfig+0x2ac>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004308:	4313      	orrs	r3, r2
 800430a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a8a      	ldr	r2, [pc, #552]	@ (8004550 <UART_SetConfig+0x2b0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d126      	bne.n	8004378 <UART_SetConfig+0xd8>
 800432a:	4b8a      	ldr	r3, [pc, #552]	@ (8004554 <UART_SetConfig+0x2b4>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b03      	cmp	r3, #3
 8004336:	d81b      	bhi.n	8004370 <UART_SetConfig+0xd0>
 8004338:	a201      	add	r2, pc, #4	@ (adr r2, 8004340 <UART_SetConfig+0xa0>)
 800433a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433e:	bf00      	nop
 8004340:	08004351 	.word	0x08004351
 8004344:	08004361 	.word	0x08004361
 8004348:	08004359 	.word	0x08004359
 800434c:	08004369 	.word	0x08004369
 8004350:	2301      	movs	r3, #1
 8004352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004356:	e0ab      	b.n	80044b0 <UART_SetConfig+0x210>
 8004358:	2302      	movs	r3, #2
 800435a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435e:	e0a7      	b.n	80044b0 <UART_SetConfig+0x210>
 8004360:	2304      	movs	r3, #4
 8004362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004366:	e0a3      	b.n	80044b0 <UART_SetConfig+0x210>
 8004368:	2308      	movs	r3, #8
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436e:	e09f      	b.n	80044b0 <UART_SetConfig+0x210>
 8004370:	2310      	movs	r3, #16
 8004372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004376:	e09b      	b.n	80044b0 <UART_SetConfig+0x210>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a76      	ldr	r2, [pc, #472]	@ (8004558 <UART_SetConfig+0x2b8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d138      	bne.n	80043f4 <UART_SetConfig+0x154>
 8004382:	4b74      	ldr	r3, [pc, #464]	@ (8004554 <UART_SetConfig+0x2b4>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f003 030c 	and.w	r3, r3, #12
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d82d      	bhi.n	80043ec <UART_SetConfig+0x14c>
 8004390:	a201      	add	r2, pc, #4	@ (adr r2, 8004398 <UART_SetConfig+0xf8>)
 8004392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004396:	bf00      	nop
 8004398:	080043cd 	.word	0x080043cd
 800439c:	080043ed 	.word	0x080043ed
 80043a0:	080043ed 	.word	0x080043ed
 80043a4:	080043ed 	.word	0x080043ed
 80043a8:	080043dd 	.word	0x080043dd
 80043ac:	080043ed 	.word	0x080043ed
 80043b0:	080043ed 	.word	0x080043ed
 80043b4:	080043ed 	.word	0x080043ed
 80043b8:	080043d5 	.word	0x080043d5
 80043bc:	080043ed 	.word	0x080043ed
 80043c0:	080043ed 	.word	0x080043ed
 80043c4:	080043ed 	.word	0x080043ed
 80043c8:	080043e5 	.word	0x080043e5
 80043cc:	2300      	movs	r3, #0
 80043ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d2:	e06d      	b.n	80044b0 <UART_SetConfig+0x210>
 80043d4:	2302      	movs	r3, #2
 80043d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043da:	e069      	b.n	80044b0 <UART_SetConfig+0x210>
 80043dc:	2304      	movs	r3, #4
 80043de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e2:	e065      	b.n	80044b0 <UART_SetConfig+0x210>
 80043e4:	2308      	movs	r3, #8
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e061      	b.n	80044b0 <UART_SetConfig+0x210>
 80043ec:	2310      	movs	r3, #16
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f2:	e05d      	b.n	80044b0 <UART_SetConfig+0x210>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a58      	ldr	r2, [pc, #352]	@ (800455c <UART_SetConfig+0x2bc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d125      	bne.n	800444a <UART_SetConfig+0x1aa>
 80043fe:	4b55      	ldr	r3, [pc, #340]	@ (8004554 <UART_SetConfig+0x2b4>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004404:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004408:	2b30      	cmp	r3, #48	@ 0x30
 800440a:	d016      	beq.n	800443a <UART_SetConfig+0x19a>
 800440c:	2b30      	cmp	r3, #48	@ 0x30
 800440e:	d818      	bhi.n	8004442 <UART_SetConfig+0x1a2>
 8004410:	2b20      	cmp	r3, #32
 8004412:	d00a      	beq.n	800442a <UART_SetConfig+0x18a>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d814      	bhi.n	8004442 <UART_SetConfig+0x1a2>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <UART_SetConfig+0x182>
 800441c:	2b10      	cmp	r3, #16
 800441e:	d008      	beq.n	8004432 <UART_SetConfig+0x192>
 8004420:	e00f      	b.n	8004442 <UART_SetConfig+0x1a2>
 8004422:	2300      	movs	r3, #0
 8004424:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004428:	e042      	b.n	80044b0 <UART_SetConfig+0x210>
 800442a:	2302      	movs	r3, #2
 800442c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004430:	e03e      	b.n	80044b0 <UART_SetConfig+0x210>
 8004432:	2304      	movs	r3, #4
 8004434:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004438:	e03a      	b.n	80044b0 <UART_SetConfig+0x210>
 800443a:	2308      	movs	r3, #8
 800443c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004440:	e036      	b.n	80044b0 <UART_SetConfig+0x210>
 8004442:	2310      	movs	r3, #16
 8004444:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004448:	e032      	b.n	80044b0 <UART_SetConfig+0x210>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3f      	ldr	r2, [pc, #252]	@ (800454c <UART_SetConfig+0x2ac>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d12a      	bne.n	80044aa <UART_SetConfig+0x20a>
 8004454:	4b3f      	ldr	r3, [pc, #252]	@ (8004554 <UART_SetConfig+0x2b4>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800445e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004462:	d01a      	beq.n	800449a <UART_SetConfig+0x1fa>
 8004464:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004468:	d81b      	bhi.n	80044a2 <UART_SetConfig+0x202>
 800446a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800446e:	d00c      	beq.n	800448a <UART_SetConfig+0x1ea>
 8004470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004474:	d815      	bhi.n	80044a2 <UART_SetConfig+0x202>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <UART_SetConfig+0x1e2>
 800447a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800447e:	d008      	beq.n	8004492 <UART_SetConfig+0x1f2>
 8004480:	e00f      	b.n	80044a2 <UART_SetConfig+0x202>
 8004482:	2300      	movs	r3, #0
 8004484:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004488:	e012      	b.n	80044b0 <UART_SetConfig+0x210>
 800448a:	2302      	movs	r3, #2
 800448c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004490:	e00e      	b.n	80044b0 <UART_SetConfig+0x210>
 8004492:	2304      	movs	r3, #4
 8004494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004498:	e00a      	b.n	80044b0 <UART_SetConfig+0x210>
 800449a:	2308      	movs	r3, #8
 800449c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a0:	e006      	b.n	80044b0 <UART_SetConfig+0x210>
 80044a2:	2310      	movs	r3, #16
 80044a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a8:	e002      	b.n	80044b0 <UART_SetConfig+0x210>
 80044aa:	2310      	movs	r3, #16
 80044ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a25      	ldr	r2, [pc, #148]	@ (800454c <UART_SetConfig+0x2ac>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	f040 808a 	bne.w	80045d0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d824      	bhi.n	800450e <UART_SetConfig+0x26e>
 80044c4:	a201      	add	r2, pc, #4	@ (adr r2, 80044cc <UART_SetConfig+0x22c>)
 80044c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ca:	bf00      	nop
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	0800450f 	.word	0x0800450f
 80044d4:	080044f9 	.word	0x080044f9
 80044d8:	0800450f 	.word	0x0800450f
 80044dc:	080044ff 	.word	0x080044ff
 80044e0:	0800450f 	.word	0x0800450f
 80044e4:	0800450f 	.word	0x0800450f
 80044e8:	0800450f 	.word	0x0800450f
 80044ec:	08004507 	.word	0x08004507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044f0:	f7ff f984 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 80044f4:	61f8      	str	r0, [r7, #28]
        break;
 80044f6:	e010      	b.n	800451a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044f8:	4b19      	ldr	r3, [pc, #100]	@ (8004560 <UART_SetConfig+0x2c0>)
 80044fa:	61fb      	str	r3, [r7, #28]
        break;
 80044fc:	e00d      	b.n	800451a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044fe:	f7ff f8e5 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8004502:	61f8      	str	r0, [r7, #28]
        break;
 8004504:	e009      	b.n	800451a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450a:	61fb      	str	r3, [r7, #28]
        break;
 800450c:	e005      	b.n	800451a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800450e:	2300      	movs	r3, #0
 8004510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004518:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 8109 	beq.w	8004734 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	429a      	cmp	r2, r3
 8004530:	d305      	bcc.n	800453e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004538:	69fa      	ldr	r2, [r7, #28]
 800453a:	429a      	cmp	r2, r3
 800453c:	d912      	bls.n	8004564 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004544:	e0f6      	b.n	8004734 <UART_SetConfig+0x494>
 8004546:	bf00      	nop
 8004548:	efff69f3 	.word	0xefff69f3
 800454c:	40008000 	.word	0x40008000
 8004550:	40013800 	.word	0x40013800
 8004554:	40021000 	.word	0x40021000
 8004558:	40004400 	.word	0x40004400
 800455c:	40004800 	.word	0x40004800
 8004560:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2200      	movs	r2, #0
 8004568:	461c      	mov	r4, r3
 800456a:	4615      	mov	r5, r2
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	022b      	lsls	r3, r5, #8
 8004576:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800457a:	0222      	lsls	r2, r4, #8
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	6849      	ldr	r1, [r1, #4]
 8004580:	0849      	lsrs	r1, r1, #1
 8004582:	2000      	movs	r0, #0
 8004584:	4688      	mov	r8, r1
 8004586:	4681      	mov	r9, r0
 8004588:	eb12 0a08 	adds.w	sl, r2, r8
 800458c:	eb43 0b09 	adc.w	fp, r3, r9
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800459e:	4650      	mov	r0, sl
 80045a0:	4659      	mov	r1, fp
 80045a2:	f7fb fe6d 	bl	8000280 <__aeabi_uldivmod>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4613      	mov	r3, r2
 80045ac:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045b4:	d308      	bcc.n	80045c8 <UART_SetConfig+0x328>
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045bc:	d204      	bcs.n	80045c8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	60da      	str	r2, [r3, #12]
 80045c6:	e0b5      	b.n	8004734 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045ce:	e0b1      	b.n	8004734 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d8:	d15d      	bne.n	8004696 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80045da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d827      	bhi.n	8004632 <UART_SetConfig+0x392>
 80045e2:	a201      	add	r2, pc, #4	@ (adr r2, 80045e8 <UART_SetConfig+0x348>)
 80045e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e8:	0800460d 	.word	0x0800460d
 80045ec:	08004615 	.word	0x08004615
 80045f0:	0800461d 	.word	0x0800461d
 80045f4:	08004633 	.word	0x08004633
 80045f8:	08004623 	.word	0x08004623
 80045fc:	08004633 	.word	0x08004633
 8004600:	08004633 	.word	0x08004633
 8004604:	08004633 	.word	0x08004633
 8004608:	0800462b 	.word	0x0800462b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800460c:	f7ff f8f6 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 8004610:	61f8      	str	r0, [r7, #28]
        break;
 8004612:	e014      	b.n	800463e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004614:	f7ff f908 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 8004618:	61f8      	str	r0, [r7, #28]
        break;
 800461a:	e010      	b.n	800463e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800461c:	4b4c      	ldr	r3, [pc, #304]	@ (8004750 <UART_SetConfig+0x4b0>)
 800461e:	61fb      	str	r3, [r7, #28]
        break;
 8004620:	e00d      	b.n	800463e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004622:	f7ff f853 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 8004626:	61f8      	str	r0, [r7, #28]
        break;
 8004628:	e009      	b.n	800463e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800462a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800462e:	61fb      	str	r3, [r7, #28]
        break;
 8004630:	e005      	b.n	800463e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800463c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d077      	beq.n	8004734 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	005a      	lsls	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	085b      	lsrs	r3, r3, #1
 800464e:	441a      	add	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	fbb2 f3f3 	udiv	r3, r2, r3
 8004658:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	2b0f      	cmp	r3, #15
 800465e:	d916      	bls.n	800468e <UART_SetConfig+0x3ee>
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004666:	d212      	bcs.n	800468e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f023 030f 	bic.w	r3, r3, #15
 8004670:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	b29a      	uxth	r2, r3
 800467e:	8afb      	ldrh	r3, [r7, #22]
 8004680:	4313      	orrs	r3, r2
 8004682:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	8afa      	ldrh	r2, [r7, #22]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e052      	b.n	8004734 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004694:	e04e      	b.n	8004734 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004696:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800469a:	2b08      	cmp	r3, #8
 800469c:	d827      	bhi.n	80046ee <UART_SetConfig+0x44e>
 800469e:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <UART_SetConfig+0x404>)
 80046a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046d9 	.word	0x080046d9
 80046b0:	080046ef 	.word	0x080046ef
 80046b4:	080046df 	.word	0x080046df
 80046b8:	080046ef 	.word	0x080046ef
 80046bc:	080046ef 	.word	0x080046ef
 80046c0:	080046ef 	.word	0x080046ef
 80046c4:	080046e7 	.word	0x080046e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c8:	f7ff f898 	bl	80037fc <HAL_RCC_GetPCLK1Freq>
 80046cc:	61f8      	str	r0, [r7, #28]
        break;
 80046ce:	e014      	b.n	80046fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d0:	f7ff f8aa 	bl	8003828 <HAL_RCC_GetPCLK2Freq>
 80046d4:	61f8      	str	r0, [r7, #28]
        break;
 80046d6:	e010      	b.n	80046fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d8:	4b1d      	ldr	r3, [pc, #116]	@ (8004750 <UART_SetConfig+0x4b0>)
 80046da:	61fb      	str	r3, [r7, #28]
        break;
 80046dc:	e00d      	b.n	80046fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046de:	f7fe fff5 	bl	80036cc <HAL_RCC_GetSysClockFreq>
 80046e2:	61f8      	str	r0, [r7, #28]
        break;
 80046e4:	e009      	b.n	80046fa <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ea:	61fb      	str	r3, [r7, #28]
        break;
 80046ec:	e005      	b.n	80046fa <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046f8:	bf00      	nop
    }

    if (pclk != 0U)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d019      	beq.n	8004734 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	085a      	lsrs	r2, r3, #1
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	441a      	add	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004712:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b0f      	cmp	r3, #15
 8004718:	d909      	bls.n	800472e <UART_SetConfig+0x48e>
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004720:	d205      	bcs.n	800472e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e002      	b.n	8004734 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004740:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004744:	4618      	mov	r0, r3
 8004746:	3728      	adds	r7, #40	@ 0x28
 8004748:	46bd      	mov	sp, r7
 800474a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474e:	bf00      	nop
 8004750:	00f42400 	.word	0x00f42400

08004754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01a      	beq.n	800486a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004852:	d10a      	bne.n	800486a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b098      	sub	sp, #96	@ 0x60
 800489c:	af02      	add	r7, sp, #8
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a8:	f7fc fe20 	bl	80014ec <HAL_GetTick>
 80048ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d12e      	bne.n	800491a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048c4:	2200      	movs	r2, #0
 80048c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f88c 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d021      	beq.n	800491a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80048f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e062      	b.n	80049e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0304 	and.w	r3, r3, #4
 8004924:	2b04      	cmp	r3, #4
 8004926:	d149      	bne.n	80049bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004928:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004930:	2200      	movs	r2, #0
 8004932:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f856 	bl	80049e8 <UART_WaitOnFlagUntilTimeout>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d03c      	beq.n	80049bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	623b      	str	r3, [r7, #32]
   return(result);
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004960:	633b      	str	r3, [r7, #48]	@ 0x30
 8004962:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004964:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004968:	e841 2300 	strex	r3, r2, [r1]
 800496c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1e6      	bne.n	8004942 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3308      	adds	r3, #8
 800497a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	60fb      	str	r3, [r7, #12]
   return(result);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	3308      	adds	r3, #8
 8004992:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004994:	61fa      	str	r2, [r7, #28]
 8004996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	69b9      	ldr	r1, [r7, #24]
 800499a:	69fa      	ldr	r2, [r7, #28]
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	617b      	str	r3, [r7, #20]
   return(result);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e5      	bne.n	8004974 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2220      	movs	r2, #32
 80049ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e011      	b.n	80049e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3758      	adds	r7, #88	@ 0x58
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049f8:	e04f      	b.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d04b      	beq.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a02:	f7fc fd73 	bl	80014ec <HAL_GetTick>
 8004a06:	4602      	mov	r2, r0
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d302      	bcc.n	8004a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d101      	bne.n	8004a1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	e04e      	b.n	8004aba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d037      	beq.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b80      	cmp	r3, #128	@ 0x80
 8004a2e:	d034      	beq.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b40      	cmp	r3, #64	@ 0x40
 8004a34:	d031      	beq.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d110      	bne.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2208      	movs	r2, #8
 8004a4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f838 	bl	8004ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2208      	movs	r2, #8
 8004a56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e029      	b.n	8004aba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a74:	d111      	bne.n	8004a9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f000 f81e 	bl	8004ac2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e00f      	b.n	8004aba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	79fb      	ldrb	r3, [r7, #7]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d0a0      	beq.n	80049fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b095      	sub	sp, #84	@ 0x54
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ada:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ae8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004aea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004aee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e6      	bne.n	8004aca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	e853 3f00 	ldrex	r3, [r3]
 8004b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3308      	adds	r3, #8
 8004b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b24:	e841 2300 	strex	r3, r2, [r1]
 8004b28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1e5      	bne.n	8004afc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d118      	bne.n	8004b6a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	e853 3f00 	ldrex	r3, [r3]
 8004b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f023 0310 	bic.w	r3, r3, #16
 8004b4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	461a      	mov	r2, r3
 8004b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b56:	61bb      	str	r3, [r7, #24]
 8004b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5a:	6979      	ldr	r1, [r7, #20]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	613b      	str	r3, [r7, #16]
   return(result);
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e6      	bne.n	8004b38 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b7e:	bf00      	nop
 8004b80:	3754      	adds	r7, #84	@ 0x54
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <_vsniprintf_r>:
 8004b8a:	b530      	push	{r4, r5, lr}
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	2c00      	cmp	r4, #0
 8004b90:	b09b      	sub	sp, #108	@ 0x6c
 8004b92:	4605      	mov	r5, r0
 8004b94:	461a      	mov	r2, r3
 8004b96:	da05      	bge.n	8004ba4 <_vsniprintf_r+0x1a>
 8004b98:	238b      	movs	r3, #139	@ 0x8b
 8004b9a:	6003      	str	r3, [r0, #0]
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	b01b      	add	sp, #108	@ 0x6c
 8004ba2:	bd30      	pop	{r4, r5, pc}
 8004ba4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004ba8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	9319      	str	r3, [sp, #100]	@ 0x64
 8004bb2:	bf14      	ite	ne
 8004bb4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004bb8:	4623      	moveq	r3, r4
 8004bba:	9302      	str	r3, [sp, #8]
 8004bbc:	9305      	str	r3, [sp, #20]
 8004bbe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004bc2:	9100      	str	r1, [sp, #0]
 8004bc4:	9104      	str	r1, [sp, #16]
 8004bc6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004bca:	4669      	mov	r1, sp
 8004bcc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8004bce:	f000 f9a1 	bl	8004f14 <_svfiprintf_r>
 8004bd2:	1c43      	adds	r3, r0, #1
 8004bd4:	bfbc      	itt	lt
 8004bd6:	238b      	movlt	r3, #139	@ 0x8b
 8004bd8:	602b      	strlt	r3, [r5, #0]
 8004bda:	2c00      	cmp	r4, #0
 8004bdc:	d0e0      	beq.n	8004ba0 <_vsniprintf_r+0x16>
 8004bde:	9b00      	ldr	r3, [sp, #0]
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e7dc      	b.n	8004ba0 <_vsniprintf_r+0x16>
	...

08004be8 <vsniprintf>:
 8004be8:	b507      	push	{r0, r1, r2, lr}
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4613      	mov	r3, r2
 8004bee:	460a      	mov	r2, r1
 8004bf0:	4601      	mov	r1, r0
 8004bf2:	4803      	ldr	r0, [pc, #12]	@ (8004c00 <vsniprintf+0x18>)
 8004bf4:	6800      	ldr	r0, [r0, #0]
 8004bf6:	f7ff ffc8 	bl	8004b8a <_vsniprintf_r>
 8004bfa:	b003      	add	sp, #12
 8004bfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c00:	2000000c 	.word	0x2000000c

08004c04 <memset>:
 8004c04:	4402      	add	r2, r0
 8004c06:	4603      	mov	r3, r0
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d100      	bne.n	8004c0e <memset+0xa>
 8004c0c:	4770      	bx	lr
 8004c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004c12:	e7f9      	b.n	8004c08 <memset+0x4>

08004c14 <__errno>:
 8004c14:	4b01      	ldr	r3, [pc, #4]	@ (8004c1c <__errno+0x8>)
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	2000000c 	.word	0x2000000c

08004c20 <__libc_init_array>:
 8004c20:	b570      	push	{r4, r5, r6, lr}
 8004c22:	4d0d      	ldr	r5, [pc, #52]	@ (8004c58 <__libc_init_array+0x38>)
 8004c24:	4c0d      	ldr	r4, [pc, #52]	@ (8004c5c <__libc_init_array+0x3c>)
 8004c26:	1b64      	subs	r4, r4, r5
 8004c28:	10a4      	asrs	r4, r4, #2
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	42a6      	cmp	r6, r4
 8004c2e:	d109      	bne.n	8004c44 <__libc_init_array+0x24>
 8004c30:	4d0b      	ldr	r5, [pc, #44]	@ (8004c60 <__libc_init_array+0x40>)
 8004c32:	4c0c      	ldr	r4, [pc, #48]	@ (8004c64 <__libc_init_array+0x44>)
 8004c34:	f000 fc64 	bl	8005500 <_init>
 8004c38:	1b64      	subs	r4, r4, r5
 8004c3a:	10a4      	asrs	r4, r4, #2
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	42a6      	cmp	r6, r4
 8004c40:	d105      	bne.n	8004c4e <__libc_init_array+0x2e>
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c48:	4798      	blx	r3
 8004c4a:	3601      	adds	r6, #1
 8004c4c:	e7ee      	b.n	8004c2c <__libc_init_array+0xc>
 8004c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c52:	4798      	blx	r3
 8004c54:	3601      	adds	r6, #1
 8004c56:	e7f2      	b.n	8004c3e <__libc_init_array+0x1e>
 8004c58:	080055c4 	.word	0x080055c4
 8004c5c:	080055c4 	.word	0x080055c4
 8004c60:	080055c4 	.word	0x080055c4
 8004c64:	080055c8 	.word	0x080055c8

08004c68 <__retarget_lock_acquire_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_release_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <_free_r>:
 8004c6c:	b538      	push	{r3, r4, r5, lr}
 8004c6e:	4605      	mov	r5, r0
 8004c70:	2900      	cmp	r1, #0
 8004c72:	d041      	beq.n	8004cf8 <_free_r+0x8c>
 8004c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c78:	1f0c      	subs	r4, r1, #4
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bfb8      	it	lt
 8004c7e:	18e4      	addlt	r4, r4, r3
 8004c80:	f000 f8e0 	bl	8004e44 <__malloc_lock>
 8004c84:	4a1d      	ldr	r2, [pc, #116]	@ (8004cfc <_free_r+0x90>)
 8004c86:	6813      	ldr	r3, [r2, #0]
 8004c88:	b933      	cbnz	r3, 8004c98 <_free_r+0x2c>
 8004c8a:	6063      	str	r3, [r4, #4]
 8004c8c:	6014      	str	r4, [r2, #0]
 8004c8e:	4628      	mov	r0, r5
 8004c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c94:	f000 b8dc 	b.w	8004e50 <__malloc_unlock>
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	d908      	bls.n	8004cae <_free_r+0x42>
 8004c9c:	6820      	ldr	r0, [r4, #0]
 8004c9e:	1821      	adds	r1, r4, r0
 8004ca0:	428b      	cmp	r3, r1
 8004ca2:	bf01      	itttt	eq
 8004ca4:	6819      	ldreq	r1, [r3, #0]
 8004ca6:	685b      	ldreq	r3, [r3, #4]
 8004ca8:	1809      	addeq	r1, r1, r0
 8004caa:	6021      	streq	r1, [r4, #0]
 8004cac:	e7ed      	b.n	8004c8a <_free_r+0x1e>
 8004cae:	461a      	mov	r2, r3
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	b10b      	cbz	r3, 8004cb8 <_free_r+0x4c>
 8004cb4:	42a3      	cmp	r3, r4
 8004cb6:	d9fa      	bls.n	8004cae <_free_r+0x42>
 8004cb8:	6811      	ldr	r1, [r2, #0]
 8004cba:	1850      	adds	r0, r2, r1
 8004cbc:	42a0      	cmp	r0, r4
 8004cbe:	d10b      	bne.n	8004cd8 <_free_r+0x6c>
 8004cc0:	6820      	ldr	r0, [r4, #0]
 8004cc2:	4401      	add	r1, r0
 8004cc4:	1850      	adds	r0, r2, r1
 8004cc6:	4283      	cmp	r3, r0
 8004cc8:	6011      	str	r1, [r2, #0]
 8004cca:	d1e0      	bne.n	8004c8e <_free_r+0x22>
 8004ccc:	6818      	ldr	r0, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	6053      	str	r3, [r2, #4]
 8004cd2:	4408      	add	r0, r1
 8004cd4:	6010      	str	r0, [r2, #0]
 8004cd6:	e7da      	b.n	8004c8e <_free_r+0x22>
 8004cd8:	d902      	bls.n	8004ce0 <_free_r+0x74>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	602b      	str	r3, [r5, #0]
 8004cde:	e7d6      	b.n	8004c8e <_free_r+0x22>
 8004ce0:	6820      	ldr	r0, [r4, #0]
 8004ce2:	1821      	adds	r1, r4, r0
 8004ce4:	428b      	cmp	r3, r1
 8004ce6:	bf04      	itt	eq
 8004ce8:	6819      	ldreq	r1, [r3, #0]
 8004cea:	685b      	ldreq	r3, [r3, #4]
 8004cec:	6063      	str	r3, [r4, #4]
 8004cee:	bf04      	itt	eq
 8004cf0:	1809      	addeq	r1, r1, r0
 8004cf2:	6021      	streq	r1, [r4, #0]
 8004cf4:	6054      	str	r4, [r2, #4]
 8004cf6:	e7ca      	b.n	8004c8e <_free_r+0x22>
 8004cf8:	bd38      	pop	{r3, r4, r5, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000418 	.word	0x20000418

08004d00 <sbrk_aligned>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	4e0f      	ldr	r6, [pc, #60]	@ (8004d40 <sbrk_aligned+0x40>)
 8004d04:	460c      	mov	r4, r1
 8004d06:	6831      	ldr	r1, [r6, #0]
 8004d08:	4605      	mov	r5, r0
 8004d0a:	b911      	cbnz	r1, 8004d12 <sbrk_aligned+0x12>
 8004d0c:	f000 fba4 	bl	8005458 <_sbrk_r>
 8004d10:	6030      	str	r0, [r6, #0]
 8004d12:	4621      	mov	r1, r4
 8004d14:	4628      	mov	r0, r5
 8004d16:	f000 fb9f 	bl	8005458 <_sbrk_r>
 8004d1a:	1c43      	adds	r3, r0, #1
 8004d1c:	d103      	bne.n	8004d26 <sbrk_aligned+0x26>
 8004d1e:	f04f 34ff 	mov.w	r4, #4294967295
 8004d22:	4620      	mov	r0, r4
 8004d24:	bd70      	pop	{r4, r5, r6, pc}
 8004d26:	1cc4      	adds	r4, r0, #3
 8004d28:	f024 0403 	bic.w	r4, r4, #3
 8004d2c:	42a0      	cmp	r0, r4
 8004d2e:	d0f8      	beq.n	8004d22 <sbrk_aligned+0x22>
 8004d30:	1a21      	subs	r1, r4, r0
 8004d32:	4628      	mov	r0, r5
 8004d34:	f000 fb90 	bl	8005458 <_sbrk_r>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d1f2      	bne.n	8004d22 <sbrk_aligned+0x22>
 8004d3c:	e7ef      	b.n	8004d1e <sbrk_aligned+0x1e>
 8004d3e:	bf00      	nop
 8004d40:	20000414 	.word	0x20000414

08004d44 <_malloc_r>:
 8004d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d48:	1ccd      	adds	r5, r1, #3
 8004d4a:	f025 0503 	bic.w	r5, r5, #3
 8004d4e:	3508      	adds	r5, #8
 8004d50:	2d0c      	cmp	r5, #12
 8004d52:	bf38      	it	cc
 8004d54:	250c      	movcc	r5, #12
 8004d56:	2d00      	cmp	r5, #0
 8004d58:	4606      	mov	r6, r0
 8004d5a:	db01      	blt.n	8004d60 <_malloc_r+0x1c>
 8004d5c:	42a9      	cmp	r1, r5
 8004d5e:	d904      	bls.n	8004d6a <_malloc_r+0x26>
 8004d60:	230c      	movs	r3, #12
 8004d62:	6033      	str	r3, [r6, #0]
 8004d64:	2000      	movs	r0, #0
 8004d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e40 <_malloc_r+0xfc>
 8004d6e:	f000 f869 	bl	8004e44 <__malloc_lock>
 8004d72:	f8d8 3000 	ldr.w	r3, [r8]
 8004d76:	461c      	mov	r4, r3
 8004d78:	bb44      	cbnz	r4, 8004dcc <_malloc_r+0x88>
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f7ff ffbf 	bl	8004d00 <sbrk_aligned>
 8004d82:	1c43      	adds	r3, r0, #1
 8004d84:	4604      	mov	r4, r0
 8004d86:	d158      	bne.n	8004e3a <_malloc_r+0xf6>
 8004d88:	f8d8 4000 	ldr.w	r4, [r8]
 8004d8c:	4627      	mov	r7, r4
 8004d8e:	2f00      	cmp	r7, #0
 8004d90:	d143      	bne.n	8004e1a <_malloc_r+0xd6>
 8004d92:	2c00      	cmp	r4, #0
 8004d94:	d04b      	beq.n	8004e2e <_malloc_r+0xea>
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	4639      	mov	r1, r7
 8004d9a:	4630      	mov	r0, r6
 8004d9c:	eb04 0903 	add.w	r9, r4, r3
 8004da0:	f000 fb5a 	bl	8005458 <_sbrk_r>
 8004da4:	4581      	cmp	r9, r0
 8004da6:	d142      	bne.n	8004e2e <_malloc_r+0xea>
 8004da8:	6821      	ldr	r1, [r4, #0]
 8004daa:	1a6d      	subs	r5, r5, r1
 8004dac:	4629      	mov	r1, r5
 8004dae:	4630      	mov	r0, r6
 8004db0:	f7ff ffa6 	bl	8004d00 <sbrk_aligned>
 8004db4:	3001      	adds	r0, #1
 8004db6:	d03a      	beq.n	8004e2e <_malloc_r+0xea>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	442b      	add	r3, r5
 8004dbc:	6023      	str	r3, [r4, #0]
 8004dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	bb62      	cbnz	r2, 8004e20 <_malloc_r+0xdc>
 8004dc6:	f8c8 7000 	str.w	r7, [r8]
 8004dca:	e00f      	b.n	8004dec <_malloc_r+0xa8>
 8004dcc:	6822      	ldr	r2, [r4, #0]
 8004dce:	1b52      	subs	r2, r2, r5
 8004dd0:	d420      	bmi.n	8004e14 <_malloc_r+0xd0>
 8004dd2:	2a0b      	cmp	r2, #11
 8004dd4:	d917      	bls.n	8004e06 <_malloc_r+0xc2>
 8004dd6:	1961      	adds	r1, r4, r5
 8004dd8:	42a3      	cmp	r3, r4
 8004dda:	6025      	str	r5, [r4, #0]
 8004ddc:	bf18      	it	ne
 8004dde:	6059      	strne	r1, [r3, #4]
 8004de0:	6863      	ldr	r3, [r4, #4]
 8004de2:	bf08      	it	eq
 8004de4:	f8c8 1000 	streq.w	r1, [r8]
 8004de8:	5162      	str	r2, [r4, r5]
 8004dea:	604b      	str	r3, [r1, #4]
 8004dec:	4630      	mov	r0, r6
 8004dee:	f000 f82f 	bl	8004e50 <__malloc_unlock>
 8004df2:	f104 000b 	add.w	r0, r4, #11
 8004df6:	1d23      	adds	r3, r4, #4
 8004df8:	f020 0007 	bic.w	r0, r0, #7
 8004dfc:	1ac2      	subs	r2, r0, r3
 8004dfe:	bf1c      	itt	ne
 8004e00:	1a1b      	subne	r3, r3, r0
 8004e02:	50a3      	strne	r3, [r4, r2]
 8004e04:	e7af      	b.n	8004d66 <_malloc_r+0x22>
 8004e06:	6862      	ldr	r2, [r4, #4]
 8004e08:	42a3      	cmp	r3, r4
 8004e0a:	bf0c      	ite	eq
 8004e0c:	f8c8 2000 	streq.w	r2, [r8]
 8004e10:	605a      	strne	r2, [r3, #4]
 8004e12:	e7eb      	b.n	8004dec <_malloc_r+0xa8>
 8004e14:	4623      	mov	r3, r4
 8004e16:	6864      	ldr	r4, [r4, #4]
 8004e18:	e7ae      	b.n	8004d78 <_malloc_r+0x34>
 8004e1a:	463c      	mov	r4, r7
 8004e1c:	687f      	ldr	r7, [r7, #4]
 8004e1e:	e7b6      	b.n	8004d8e <_malloc_r+0x4a>
 8004e20:	461a      	mov	r2, r3
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d1fb      	bne.n	8004e20 <_malloc_r+0xdc>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6053      	str	r3, [r2, #4]
 8004e2c:	e7de      	b.n	8004dec <_malloc_r+0xa8>
 8004e2e:	230c      	movs	r3, #12
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	4630      	mov	r0, r6
 8004e34:	f000 f80c 	bl	8004e50 <__malloc_unlock>
 8004e38:	e794      	b.n	8004d64 <_malloc_r+0x20>
 8004e3a:	6005      	str	r5, [r0, #0]
 8004e3c:	e7d6      	b.n	8004dec <_malloc_r+0xa8>
 8004e3e:	bf00      	nop
 8004e40:	20000418 	.word	0x20000418

08004e44 <__malloc_lock>:
 8004e44:	4801      	ldr	r0, [pc, #4]	@ (8004e4c <__malloc_lock+0x8>)
 8004e46:	f7ff bf0f 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8004e4a:	bf00      	nop
 8004e4c:	20000410 	.word	0x20000410

08004e50 <__malloc_unlock>:
 8004e50:	4801      	ldr	r0, [pc, #4]	@ (8004e58 <__malloc_unlock+0x8>)
 8004e52:	f7ff bf0a 	b.w	8004c6a <__retarget_lock_release_recursive>
 8004e56:	bf00      	nop
 8004e58:	20000410 	.word	0x20000410

08004e5c <__ssputs_r>:
 8004e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e60:	688e      	ldr	r6, [r1, #8]
 8004e62:	461f      	mov	r7, r3
 8004e64:	42be      	cmp	r6, r7
 8004e66:	680b      	ldr	r3, [r1, #0]
 8004e68:	4682      	mov	sl, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	4690      	mov	r8, r2
 8004e6e:	d82d      	bhi.n	8004ecc <__ssputs_r+0x70>
 8004e70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e78:	d026      	beq.n	8004ec8 <__ssputs_r+0x6c>
 8004e7a:	6965      	ldr	r5, [r4, #20]
 8004e7c:	6909      	ldr	r1, [r1, #16]
 8004e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e82:	eba3 0901 	sub.w	r9, r3, r1
 8004e86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e8a:	1c7b      	adds	r3, r7, #1
 8004e8c:	444b      	add	r3, r9
 8004e8e:	106d      	asrs	r5, r5, #1
 8004e90:	429d      	cmp	r5, r3
 8004e92:	bf38      	it	cc
 8004e94:	461d      	movcc	r5, r3
 8004e96:	0553      	lsls	r3, r2, #21
 8004e98:	d527      	bpl.n	8004eea <__ssputs_r+0x8e>
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	f7ff ff52 	bl	8004d44 <_malloc_r>
 8004ea0:	4606      	mov	r6, r0
 8004ea2:	b360      	cbz	r0, 8004efe <__ssputs_r+0xa2>
 8004ea4:	6921      	ldr	r1, [r4, #16]
 8004ea6:	464a      	mov	r2, r9
 8004ea8:	f000 fae6 	bl	8005478 <memcpy>
 8004eac:	89a3      	ldrh	r3, [r4, #12]
 8004eae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004eb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb6:	81a3      	strh	r3, [r4, #12]
 8004eb8:	6126      	str	r6, [r4, #16]
 8004eba:	6165      	str	r5, [r4, #20]
 8004ebc:	444e      	add	r6, r9
 8004ebe:	eba5 0509 	sub.w	r5, r5, r9
 8004ec2:	6026      	str	r6, [r4, #0]
 8004ec4:	60a5      	str	r5, [r4, #8]
 8004ec6:	463e      	mov	r6, r7
 8004ec8:	42be      	cmp	r6, r7
 8004eca:	d900      	bls.n	8004ece <__ssputs_r+0x72>
 8004ecc:	463e      	mov	r6, r7
 8004ece:	6820      	ldr	r0, [r4, #0]
 8004ed0:	4632      	mov	r2, r6
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	f000 faa6 	bl	8005424 <memmove>
 8004ed8:	68a3      	ldr	r3, [r4, #8]
 8004eda:	1b9b      	subs	r3, r3, r6
 8004edc:	60a3      	str	r3, [r4, #8]
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	4433      	add	r3, r6
 8004ee2:	6023      	str	r3, [r4, #0]
 8004ee4:	2000      	movs	r0, #0
 8004ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eea:	462a      	mov	r2, r5
 8004eec:	f000 fad2 	bl	8005494 <_realloc_r>
 8004ef0:	4606      	mov	r6, r0
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d1e0      	bne.n	8004eb8 <__ssputs_r+0x5c>
 8004ef6:	6921      	ldr	r1, [r4, #16]
 8004ef8:	4650      	mov	r0, sl
 8004efa:	f7ff feb7 	bl	8004c6c <_free_r>
 8004efe:	230c      	movs	r3, #12
 8004f00:	f8ca 3000 	str.w	r3, [sl]
 8004f04:	89a3      	ldrh	r3, [r4, #12]
 8004f06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f0a:	81a3      	strh	r3, [r4, #12]
 8004f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f10:	e7e9      	b.n	8004ee6 <__ssputs_r+0x8a>
	...

08004f14 <_svfiprintf_r>:
 8004f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f18:	4698      	mov	r8, r3
 8004f1a:	898b      	ldrh	r3, [r1, #12]
 8004f1c:	061b      	lsls	r3, r3, #24
 8004f1e:	b09d      	sub	sp, #116	@ 0x74
 8004f20:	4607      	mov	r7, r0
 8004f22:	460d      	mov	r5, r1
 8004f24:	4614      	mov	r4, r2
 8004f26:	d510      	bpl.n	8004f4a <_svfiprintf_r+0x36>
 8004f28:	690b      	ldr	r3, [r1, #16]
 8004f2a:	b973      	cbnz	r3, 8004f4a <_svfiprintf_r+0x36>
 8004f2c:	2140      	movs	r1, #64	@ 0x40
 8004f2e:	f7ff ff09 	bl	8004d44 <_malloc_r>
 8004f32:	6028      	str	r0, [r5, #0]
 8004f34:	6128      	str	r0, [r5, #16]
 8004f36:	b930      	cbnz	r0, 8004f46 <_svfiprintf_r+0x32>
 8004f38:	230c      	movs	r3, #12
 8004f3a:	603b      	str	r3, [r7, #0]
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	b01d      	add	sp, #116	@ 0x74
 8004f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f46:	2340      	movs	r3, #64	@ 0x40
 8004f48:	616b      	str	r3, [r5, #20]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f4e:	2320      	movs	r3, #32
 8004f50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f54:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f58:	2330      	movs	r3, #48	@ 0x30
 8004f5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050f8 <_svfiprintf_r+0x1e4>
 8004f5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f62:	f04f 0901 	mov.w	r9, #1
 8004f66:	4623      	mov	r3, r4
 8004f68:	469a      	mov	sl, r3
 8004f6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f6e:	b10a      	cbz	r2, 8004f74 <_svfiprintf_r+0x60>
 8004f70:	2a25      	cmp	r2, #37	@ 0x25
 8004f72:	d1f9      	bne.n	8004f68 <_svfiprintf_r+0x54>
 8004f74:	ebba 0b04 	subs.w	fp, sl, r4
 8004f78:	d00b      	beq.n	8004f92 <_svfiprintf_r+0x7e>
 8004f7a:	465b      	mov	r3, fp
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4638      	mov	r0, r7
 8004f82:	f7ff ff6b 	bl	8004e5c <__ssputs_r>
 8004f86:	3001      	adds	r0, #1
 8004f88:	f000 80a7 	beq.w	80050da <_svfiprintf_r+0x1c6>
 8004f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f8e:	445a      	add	r2, fp
 8004f90:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f92:	f89a 3000 	ldrb.w	r3, [sl]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 809f 	beq.w	80050da <_svfiprintf_r+0x1c6>
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa6:	f10a 0a01 	add.w	sl, sl, #1
 8004faa:	9304      	str	r3, [sp, #16]
 8004fac:	9307      	str	r3, [sp, #28]
 8004fae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004fb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8004fb4:	4654      	mov	r4, sl
 8004fb6:	2205      	movs	r2, #5
 8004fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fbc:	484e      	ldr	r0, [pc, #312]	@ (80050f8 <_svfiprintf_r+0x1e4>)
 8004fbe:	f7fb f90f 	bl	80001e0 <memchr>
 8004fc2:	9a04      	ldr	r2, [sp, #16]
 8004fc4:	b9d8      	cbnz	r0, 8004ffe <_svfiprintf_r+0xea>
 8004fc6:	06d0      	lsls	r0, r2, #27
 8004fc8:	bf44      	itt	mi
 8004fca:	2320      	movmi	r3, #32
 8004fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fd0:	0711      	lsls	r1, r2, #28
 8004fd2:	bf44      	itt	mi
 8004fd4:	232b      	movmi	r3, #43	@ 0x2b
 8004fd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004fda:	f89a 3000 	ldrb.w	r3, [sl]
 8004fde:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fe0:	d015      	beq.n	800500e <_svfiprintf_r+0xfa>
 8004fe2:	9a07      	ldr	r2, [sp, #28]
 8004fe4:	4654      	mov	r4, sl
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	f04f 0c0a 	mov.w	ip, #10
 8004fec:	4621      	mov	r1, r4
 8004fee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ff2:	3b30      	subs	r3, #48	@ 0x30
 8004ff4:	2b09      	cmp	r3, #9
 8004ff6:	d94b      	bls.n	8005090 <_svfiprintf_r+0x17c>
 8004ff8:	b1b0      	cbz	r0, 8005028 <_svfiprintf_r+0x114>
 8004ffa:	9207      	str	r2, [sp, #28]
 8004ffc:	e014      	b.n	8005028 <_svfiprintf_r+0x114>
 8004ffe:	eba0 0308 	sub.w	r3, r0, r8
 8005002:	fa09 f303 	lsl.w	r3, r9, r3
 8005006:	4313      	orrs	r3, r2
 8005008:	9304      	str	r3, [sp, #16]
 800500a:	46a2      	mov	sl, r4
 800500c:	e7d2      	b.n	8004fb4 <_svfiprintf_r+0xa0>
 800500e:	9b03      	ldr	r3, [sp, #12]
 8005010:	1d19      	adds	r1, r3, #4
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	9103      	str	r1, [sp, #12]
 8005016:	2b00      	cmp	r3, #0
 8005018:	bfbb      	ittet	lt
 800501a:	425b      	neglt	r3, r3
 800501c:	f042 0202 	orrlt.w	r2, r2, #2
 8005020:	9307      	strge	r3, [sp, #28]
 8005022:	9307      	strlt	r3, [sp, #28]
 8005024:	bfb8      	it	lt
 8005026:	9204      	strlt	r2, [sp, #16]
 8005028:	7823      	ldrb	r3, [r4, #0]
 800502a:	2b2e      	cmp	r3, #46	@ 0x2e
 800502c:	d10a      	bne.n	8005044 <_svfiprintf_r+0x130>
 800502e:	7863      	ldrb	r3, [r4, #1]
 8005030:	2b2a      	cmp	r3, #42	@ 0x2a
 8005032:	d132      	bne.n	800509a <_svfiprintf_r+0x186>
 8005034:	9b03      	ldr	r3, [sp, #12]
 8005036:	1d1a      	adds	r2, r3, #4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	9203      	str	r2, [sp, #12]
 800503c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005040:	3402      	adds	r4, #2
 8005042:	9305      	str	r3, [sp, #20]
 8005044:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005108 <_svfiprintf_r+0x1f4>
 8005048:	7821      	ldrb	r1, [r4, #0]
 800504a:	2203      	movs	r2, #3
 800504c:	4650      	mov	r0, sl
 800504e:	f7fb f8c7 	bl	80001e0 <memchr>
 8005052:	b138      	cbz	r0, 8005064 <_svfiprintf_r+0x150>
 8005054:	9b04      	ldr	r3, [sp, #16]
 8005056:	eba0 000a 	sub.w	r0, r0, sl
 800505a:	2240      	movs	r2, #64	@ 0x40
 800505c:	4082      	lsls	r2, r0
 800505e:	4313      	orrs	r3, r2
 8005060:	3401      	adds	r4, #1
 8005062:	9304      	str	r3, [sp, #16]
 8005064:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005068:	4824      	ldr	r0, [pc, #144]	@ (80050fc <_svfiprintf_r+0x1e8>)
 800506a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800506e:	2206      	movs	r2, #6
 8005070:	f7fb f8b6 	bl	80001e0 <memchr>
 8005074:	2800      	cmp	r0, #0
 8005076:	d036      	beq.n	80050e6 <_svfiprintf_r+0x1d2>
 8005078:	4b21      	ldr	r3, [pc, #132]	@ (8005100 <_svfiprintf_r+0x1ec>)
 800507a:	bb1b      	cbnz	r3, 80050c4 <_svfiprintf_r+0x1b0>
 800507c:	9b03      	ldr	r3, [sp, #12]
 800507e:	3307      	adds	r3, #7
 8005080:	f023 0307 	bic.w	r3, r3, #7
 8005084:	3308      	adds	r3, #8
 8005086:	9303      	str	r3, [sp, #12]
 8005088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800508a:	4433      	add	r3, r6
 800508c:	9309      	str	r3, [sp, #36]	@ 0x24
 800508e:	e76a      	b.n	8004f66 <_svfiprintf_r+0x52>
 8005090:	fb0c 3202 	mla	r2, ip, r2, r3
 8005094:	460c      	mov	r4, r1
 8005096:	2001      	movs	r0, #1
 8005098:	e7a8      	b.n	8004fec <_svfiprintf_r+0xd8>
 800509a:	2300      	movs	r3, #0
 800509c:	3401      	adds	r4, #1
 800509e:	9305      	str	r3, [sp, #20]
 80050a0:	4619      	mov	r1, r3
 80050a2:	f04f 0c0a 	mov.w	ip, #10
 80050a6:	4620      	mov	r0, r4
 80050a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050ac:	3a30      	subs	r2, #48	@ 0x30
 80050ae:	2a09      	cmp	r2, #9
 80050b0:	d903      	bls.n	80050ba <_svfiprintf_r+0x1a6>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0c6      	beq.n	8005044 <_svfiprintf_r+0x130>
 80050b6:	9105      	str	r1, [sp, #20]
 80050b8:	e7c4      	b.n	8005044 <_svfiprintf_r+0x130>
 80050ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80050be:	4604      	mov	r4, r0
 80050c0:	2301      	movs	r3, #1
 80050c2:	e7f0      	b.n	80050a6 <_svfiprintf_r+0x192>
 80050c4:	ab03      	add	r3, sp, #12
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	462a      	mov	r2, r5
 80050ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005104 <_svfiprintf_r+0x1f0>)
 80050cc:	a904      	add	r1, sp, #16
 80050ce:	4638      	mov	r0, r7
 80050d0:	f3af 8000 	nop.w
 80050d4:	1c42      	adds	r2, r0, #1
 80050d6:	4606      	mov	r6, r0
 80050d8:	d1d6      	bne.n	8005088 <_svfiprintf_r+0x174>
 80050da:	89ab      	ldrh	r3, [r5, #12]
 80050dc:	065b      	lsls	r3, r3, #25
 80050de:	f53f af2d 	bmi.w	8004f3c <_svfiprintf_r+0x28>
 80050e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80050e4:	e72c      	b.n	8004f40 <_svfiprintf_r+0x2c>
 80050e6:	ab03      	add	r3, sp, #12
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	462a      	mov	r2, r5
 80050ec:	4b05      	ldr	r3, [pc, #20]	@ (8005104 <_svfiprintf_r+0x1f0>)
 80050ee:	a904      	add	r1, sp, #16
 80050f0:	4638      	mov	r0, r7
 80050f2:	f000 f879 	bl	80051e8 <_printf_i>
 80050f6:	e7ed      	b.n	80050d4 <_svfiprintf_r+0x1c0>
 80050f8:	08005588 	.word	0x08005588
 80050fc:	08005592 	.word	0x08005592
 8005100:	00000000 	.word	0x00000000
 8005104:	08004e5d 	.word	0x08004e5d
 8005108:	0800558e 	.word	0x0800558e

0800510c <_printf_common>:
 800510c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005110:	4616      	mov	r6, r2
 8005112:	4698      	mov	r8, r3
 8005114:	688a      	ldr	r2, [r1, #8]
 8005116:	690b      	ldr	r3, [r1, #16]
 8005118:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800511c:	4293      	cmp	r3, r2
 800511e:	bfb8      	it	lt
 8005120:	4613      	movlt	r3, r2
 8005122:	6033      	str	r3, [r6, #0]
 8005124:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005128:	4607      	mov	r7, r0
 800512a:	460c      	mov	r4, r1
 800512c:	b10a      	cbz	r2, 8005132 <_printf_common+0x26>
 800512e:	3301      	adds	r3, #1
 8005130:	6033      	str	r3, [r6, #0]
 8005132:	6823      	ldr	r3, [r4, #0]
 8005134:	0699      	lsls	r1, r3, #26
 8005136:	bf42      	ittt	mi
 8005138:	6833      	ldrmi	r3, [r6, #0]
 800513a:	3302      	addmi	r3, #2
 800513c:	6033      	strmi	r3, [r6, #0]
 800513e:	6825      	ldr	r5, [r4, #0]
 8005140:	f015 0506 	ands.w	r5, r5, #6
 8005144:	d106      	bne.n	8005154 <_printf_common+0x48>
 8005146:	f104 0a19 	add.w	sl, r4, #25
 800514a:	68e3      	ldr	r3, [r4, #12]
 800514c:	6832      	ldr	r2, [r6, #0]
 800514e:	1a9b      	subs	r3, r3, r2
 8005150:	42ab      	cmp	r3, r5
 8005152:	dc26      	bgt.n	80051a2 <_printf_common+0x96>
 8005154:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005158:	6822      	ldr	r2, [r4, #0]
 800515a:	3b00      	subs	r3, #0
 800515c:	bf18      	it	ne
 800515e:	2301      	movne	r3, #1
 8005160:	0692      	lsls	r2, r2, #26
 8005162:	d42b      	bmi.n	80051bc <_printf_common+0xb0>
 8005164:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005168:	4641      	mov	r1, r8
 800516a:	4638      	mov	r0, r7
 800516c:	47c8      	blx	r9
 800516e:	3001      	adds	r0, #1
 8005170:	d01e      	beq.n	80051b0 <_printf_common+0xa4>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	6922      	ldr	r2, [r4, #16]
 8005176:	f003 0306 	and.w	r3, r3, #6
 800517a:	2b04      	cmp	r3, #4
 800517c:	bf02      	ittt	eq
 800517e:	68e5      	ldreq	r5, [r4, #12]
 8005180:	6833      	ldreq	r3, [r6, #0]
 8005182:	1aed      	subeq	r5, r5, r3
 8005184:	68a3      	ldr	r3, [r4, #8]
 8005186:	bf0c      	ite	eq
 8005188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800518c:	2500      	movne	r5, #0
 800518e:	4293      	cmp	r3, r2
 8005190:	bfc4      	itt	gt
 8005192:	1a9b      	subgt	r3, r3, r2
 8005194:	18ed      	addgt	r5, r5, r3
 8005196:	2600      	movs	r6, #0
 8005198:	341a      	adds	r4, #26
 800519a:	42b5      	cmp	r5, r6
 800519c:	d11a      	bne.n	80051d4 <_printf_common+0xc8>
 800519e:	2000      	movs	r0, #0
 80051a0:	e008      	b.n	80051b4 <_printf_common+0xa8>
 80051a2:	2301      	movs	r3, #1
 80051a4:	4652      	mov	r2, sl
 80051a6:	4641      	mov	r1, r8
 80051a8:	4638      	mov	r0, r7
 80051aa:	47c8      	blx	r9
 80051ac:	3001      	adds	r0, #1
 80051ae:	d103      	bne.n	80051b8 <_printf_common+0xac>
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b8:	3501      	adds	r5, #1
 80051ba:	e7c6      	b.n	800514a <_printf_common+0x3e>
 80051bc:	18e1      	adds	r1, r4, r3
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	2030      	movs	r0, #48	@ 0x30
 80051c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80051c6:	4422      	add	r2, r4
 80051c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80051cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80051d0:	3302      	adds	r3, #2
 80051d2:	e7c7      	b.n	8005164 <_printf_common+0x58>
 80051d4:	2301      	movs	r3, #1
 80051d6:	4622      	mov	r2, r4
 80051d8:	4641      	mov	r1, r8
 80051da:	4638      	mov	r0, r7
 80051dc:	47c8      	blx	r9
 80051de:	3001      	adds	r0, #1
 80051e0:	d0e6      	beq.n	80051b0 <_printf_common+0xa4>
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7d9      	b.n	800519a <_printf_common+0x8e>
	...

080051e8 <_printf_i>:
 80051e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051ec:	7e0f      	ldrb	r7, [r1, #24]
 80051ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80051f0:	2f78      	cmp	r7, #120	@ 0x78
 80051f2:	4691      	mov	r9, r2
 80051f4:	4680      	mov	r8, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	469a      	mov	sl, r3
 80051fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051fe:	d807      	bhi.n	8005210 <_printf_i+0x28>
 8005200:	2f62      	cmp	r7, #98	@ 0x62
 8005202:	d80a      	bhi.n	800521a <_printf_i+0x32>
 8005204:	2f00      	cmp	r7, #0
 8005206:	f000 80d1 	beq.w	80053ac <_printf_i+0x1c4>
 800520a:	2f58      	cmp	r7, #88	@ 0x58
 800520c:	f000 80b8 	beq.w	8005380 <_printf_i+0x198>
 8005210:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005214:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005218:	e03a      	b.n	8005290 <_printf_i+0xa8>
 800521a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800521e:	2b15      	cmp	r3, #21
 8005220:	d8f6      	bhi.n	8005210 <_printf_i+0x28>
 8005222:	a101      	add	r1, pc, #4	@ (adr r1, 8005228 <_printf_i+0x40>)
 8005224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005228:	08005281 	.word	0x08005281
 800522c:	08005295 	.word	0x08005295
 8005230:	08005211 	.word	0x08005211
 8005234:	08005211 	.word	0x08005211
 8005238:	08005211 	.word	0x08005211
 800523c:	08005211 	.word	0x08005211
 8005240:	08005295 	.word	0x08005295
 8005244:	08005211 	.word	0x08005211
 8005248:	08005211 	.word	0x08005211
 800524c:	08005211 	.word	0x08005211
 8005250:	08005211 	.word	0x08005211
 8005254:	08005393 	.word	0x08005393
 8005258:	080052bf 	.word	0x080052bf
 800525c:	0800534d 	.word	0x0800534d
 8005260:	08005211 	.word	0x08005211
 8005264:	08005211 	.word	0x08005211
 8005268:	080053b5 	.word	0x080053b5
 800526c:	08005211 	.word	0x08005211
 8005270:	080052bf 	.word	0x080052bf
 8005274:	08005211 	.word	0x08005211
 8005278:	08005211 	.word	0x08005211
 800527c:	08005355 	.word	0x08005355
 8005280:	6833      	ldr	r3, [r6, #0]
 8005282:	1d1a      	adds	r2, r3, #4
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6032      	str	r2, [r6, #0]
 8005288:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800528c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005290:	2301      	movs	r3, #1
 8005292:	e09c      	b.n	80053ce <_printf_i+0x1e6>
 8005294:	6833      	ldr	r3, [r6, #0]
 8005296:	6820      	ldr	r0, [r4, #0]
 8005298:	1d19      	adds	r1, r3, #4
 800529a:	6031      	str	r1, [r6, #0]
 800529c:	0606      	lsls	r6, r0, #24
 800529e:	d501      	bpl.n	80052a4 <_printf_i+0xbc>
 80052a0:	681d      	ldr	r5, [r3, #0]
 80052a2:	e003      	b.n	80052ac <_printf_i+0xc4>
 80052a4:	0645      	lsls	r5, r0, #25
 80052a6:	d5fb      	bpl.n	80052a0 <_printf_i+0xb8>
 80052a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052ac:	2d00      	cmp	r5, #0
 80052ae:	da03      	bge.n	80052b8 <_printf_i+0xd0>
 80052b0:	232d      	movs	r3, #45	@ 0x2d
 80052b2:	426d      	negs	r5, r5
 80052b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b8:	4858      	ldr	r0, [pc, #352]	@ (800541c <_printf_i+0x234>)
 80052ba:	230a      	movs	r3, #10
 80052bc:	e011      	b.n	80052e2 <_printf_i+0xfa>
 80052be:	6821      	ldr	r1, [r4, #0]
 80052c0:	6833      	ldr	r3, [r6, #0]
 80052c2:	0608      	lsls	r0, r1, #24
 80052c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80052c8:	d402      	bmi.n	80052d0 <_printf_i+0xe8>
 80052ca:	0649      	lsls	r1, r1, #25
 80052cc:	bf48      	it	mi
 80052ce:	b2ad      	uxthmi	r5, r5
 80052d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80052d2:	4852      	ldr	r0, [pc, #328]	@ (800541c <_printf_i+0x234>)
 80052d4:	6033      	str	r3, [r6, #0]
 80052d6:	bf14      	ite	ne
 80052d8:	230a      	movne	r3, #10
 80052da:	2308      	moveq	r3, #8
 80052dc:	2100      	movs	r1, #0
 80052de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80052e2:	6866      	ldr	r6, [r4, #4]
 80052e4:	60a6      	str	r6, [r4, #8]
 80052e6:	2e00      	cmp	r6, #0
 80052e8:	db05      	blt.n	80052f6 <_printf_i+0x10e>
 80052ea:	6821      	ldr	r1, [r4, #0]
 80052ec:	432e      	orrs	r6, r5
 80052ee:	f021 0104 	bic.w	r1, r1, #4
 80052f2:	6021      	str	r1, [r4, #0]
 80052f4:	d04b      	beq.n	800538e <_printf_i+0x1a6>
 80052f6:	4616      	mov	r6, r2
 80052f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80052fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005300:	5dc7      	ldrb	r7, [r0, r7]
 8005302:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005306:	462f      	mov	r7, r5
 8005308:	42bb      	cmp	r3, r7
 800530a:	460d      	mov	r5, r1
 800530c:	d9f4      	bls.n	80052f8 <_printf_i+0x110>
 800530e:	2b08      	cmp	r3, #8
 8005310:	d10b      	bne.n	800532a <_printf_i+0x142>
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	07df      	lsls	r7, r3, #31
 8005316:	d508      	bpl.n	800532a <_printf_i+0x142>
 8005318:	6923      	ldr	r3, [r4, #16]
 800531a:	6861      	ldr	r1, [r4, #4]
 800531c:	4299      	cmp	r1, r3
 800531e:	bfde      	ittt	le
 8005320:	2330      	movle	r3, #48	@ 0x30
 8005322:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005326:	f106 36ff 	addle.w	r6, r6, #4294967295
 800532a:	1b92      	subs	r2, r2, r6
 800532c:	6122      	str	r2, [r4, #16]
 800532e:	f8cd a000 	str.w	sl, [sp]
 8005332:	464b      	mov	r3, r9
 8005334:	aa03      	add	r2, sp, #12
 8005336:	4621      	mov	r1, r4
 8005338:	4640      	mov	r0, r8
 800533a:	f7ff fee7 	bl	800510c <_printf_common>
 800533e:	3001      	adds	r0, #1
 8005340:	d14a      	bne.n	80053d8 <_printf_i+0x1f0>
 8005342:	f04f 30ff 	mov.w	r0, #4294967295
 8005346:	b004      	add	sp, #16
 8005348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	f043 0320 	orr.w	r3, r3, #32
 8005352:	6023      	str	r3, [r4, #0]
 8005354:	4832      	ldr	r0, [pc, #200]	@ (8005420 <_printf_i+0x238>)
 8005356:	2778      	movs	r7, #120	@ 0x78
 8005358:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	6831      	ldr	r1, [r6, #0]
 8005360:	061f      	lsls	r7, r3, #24
 8005362:	f851 5b04 	ldr.w	r5, [r1], #4
 8005366:	d402      	bmi.n	800536e <_printf_i+0x186>
 8005368:	065f      	lsls	r7, r3, #25
 800536a:	bf48      	it	mi
 800536c:	b2ad      	uxthmi	r5, r5
 800536e:	6031      	str	r1, [r6, #0]
 8005370:	07d9      	lsls	r1, r3, #31
 8005372:	bf44      	itt	mi
 8005374:	f043 0320 	orrmi.w	r3, r3, #32
 8005378:	6023      	strmi	r3, [r4, #0]
 800537a:	b11d      	cbz	r5, 8005384 <_printf_i+0x19c>
 800537c:	2310      	movs	r3, #16
 800537e:	e7ad      	b.n	80052dc <_printf_i+0xf4>
 8005380:	4826      	ldr	r0, [pc, #152]	@ (800541c <_printf_i+0x234>)
 8005382:	e7e9      	b.n	8005358 <_printf_i+0x170>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	f023 0320 	bic.w	r3, r3, #32
 800538a:	6023      	str	r3, [r4, #0]
 800538c:	e7f6      	b.n	800537c <_printf_i+0x194>
 800538e:	4616      	mov	r6, r2
 8005390:	e7bd      	b.n	800530e <_printf_i+0x126>
 8005392:	6833      	ldr	r3, [r6, #0]
 8005394:	6825      	ldr	r5, [r4, #0]
 8005396:	6961      	ldr	r1, [r4, #20]
 8005398:	1d18      	adds	r0, r3, #4
 800539a:	6030      	str	r0, [r6, #0]
 800539c:	062e      	lsls	r6, r5, #24
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	d501      	bpl.n	80053a6 <_printf_i+0x1be>
 80053a2:	6019      	str	r1, [r3, #0]
 80053a4:	e002      	b.n	80053ac <_printf_i+0x1c4>
 80053a6:	0668      	lsls	r0, r5, #25
 80053a8:	d5fb      	bpl.n	80053a2 <_printf_i+0x1ba>
 80053aa:	8019      	strh	r1, [r3, #0]
 80053ac:	2300      	movs	r3, #0
 80053ae:	6123      	str	r3, [r4, #16]
 80053b0:	4616      	mov	r6, r2
 80053b2:	e7bc      	b.n	800532e <_printf_i+0x146>
 80053b4:	6833      	ldr	r3, [r6, #0]
 80053b6:	1d1a      	adds	r2, r3, #4
 80053b8:	6032      	str	r2, [r6, #0]
 80053ba:	681e      	ldr	r6, [r3, #0]
 80053bc:	6862      	ldr	r2, [r4, #4]
 80053be:	2100      	movs	r1, #0
 80053c0:	4630      	mov	r0, r6
 80053c2:	f7fa ff0d 	bl	80001e0 <memchr>
 80053c6:	b108      	cbz	r0, 80053cc <_printf_i+0x1e4>
 80053c8:	1b80      	subs	r0, r0, r6
 80053ca:	6060      	str	r0, [r4, #4]
 80053cc:	6863      	ldr	r3, [r4, #4]
 80053ce:	6123      	str	r3, [r4, #16]
 80053d0:	2300      	movs	r3, #0
 80053d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053d6:	e7aa      	b.n	800532e <_printf_i+0x146>
 80053d8:	6923      	ldr	r3, [r4, #16]
 80053da:	4632      	mov	r2, r6
 80053dc:	4649      	mov	r1, r9
 80053de:	4640      	mov	r0, r8
 80053e0:	47d0      	blx	sl
 80053e2:	3001      	adds	r0, #1
 80053e4:	d0ad      	beq.n	8005342 <_printf_i+0x15a>
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	079b      	lsls	r3, r3, #30
 80053ea:	d413      	bmi.n	8005414 <_printf_i+0x22c>
 80053ec:	68e0      	ldr	r0, [r4, #12]
 80053ee:	9b03      	ldr	r3, [sp, #12]
 80053f0:	4298      	cmp	r0, r3
 80053f2:	bfb8      	it	lt
 80053f4:	4618      	movlt	r0, r3
 80053f6:	e7a6      	b.n	8005346 <_printf_i+0x15e>
 80053f8:	2301      	movs	r3, #1
 80053fa:	4632      	mov	r2, r6
 80053fc:	4649      	mov	r1, r9
 80053fe:	4640      	mov	r0, r8
 8005400:	47d0      	blx	sl
 8005402:	3001      	adds	r0, #1
 8005404:	d09d      	beq.n	8005342 <_printf_i+0x15a>
 8005406:	3501      	adds	r5, #1
 8005408:	68e3      	ldr	r3, [r4, #12]
 800540a:	9903      	ldr	r1, [sp, #12]
 800540c:	1a5b      	subs	r3, r3, r1
 800540e:	42ab      	cmp	r3, r5
 8005410:	dcf2      	bgt.n	80053f8 <_printf_i+0x210>
 8005412:	e7eb      	b.n	80053ec <_printf_i+0x204>
 8005414:	2500      	movs	r5, #0
 8005416:	f104 0619 	add.w	r6, r4, #25
 800541a:	e7f5      	b.n	8005408 <_printf_i+0x220>
 800541c:	08005599 	.word	0x08005599
 8005420:	080055aa 	.word	0x080055aa

08005424 <memmove>:
 8005424:	4288      	cmp	r0, r1
 8005426:	b510      	push	{r4, lr}
 8005428:	eb01 0402 	add.w	r4, r1, r2
 800542c:	d902      	bls.n	8005434 <memmove+0x10>
 800542e:	4284      	cmp	r4, r0
 8005430:	4623      	mov	r3, r4
 8005432:	d807      	bhi.n	8005444 <memmove+0x20>
 8005434:	1e43      	subs	r3, r0, #1
 8005436:	42a1      	cmp	r1, r4
 8005438:	d008      	beq.n	800544c <memmove+0x28>
 800543a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800543e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005442:	e7f8      	b.n	8005436 <memmove+0x12>
 8005444:	4402      	add	r2, r0
 8005446:	4601      	mov	r1, r0
 8005448:	428a      	cmp	r2, r1
 800544a:	d100      	bne.n	800544e <memmove+0x2a>
 800544c:	bd10      	pop	{r4, pc}
 800544e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005456:	e7f7      	b.n	8005448 <memmove+0x24>

08005458 <_sbrk_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	@ (8005474 <_sbrk_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fb fe6a 	bl	800113c <_sbrk>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_sbrk_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_sbrk_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	2000040c 	.word	0x2000040c

08005478 <memcpy>:
 8005478:	440a      	add	r2, r1
 800547a:	4291      	cmp	r1, r2
 800547c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005480:	d100      	bne.n	8005484 <memcpy+0xc>
 8005482:	4770      	bx	lr
 8005484:	b510      	push	{r4, lr}
 8005486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800548e:	4291      	cmp	r1, r2
 8005490:	d1f9      	bne.n	8005486 <memcpy+0xe>
 8005492:	bd10      	pop	{r4, pc}

08005494 <_realloc_r>:
 8005494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005498:	4607      	mov	r7, r0
 800549a:	4614      	mov	r4, r2
 800549c:	460d      	mov	r5, r1
 800549e:	b921      	cbnz	r1, 80054aa <_realloc_r+0x16>
 80054a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a4:	4611      	mov	r1, r2
 80054a6:	f7ff bc4d 	b.w	8004d44 <_malloc_r>
 80054aa:	b92a      	cbnz	r2, 80054b8 <_realloc_r+0x24>
 80054ac:	f7ff fbde 	bl	8004c6c <_free_r>
 80054b0:	4625      	mov	r5, r4
 80054b2:	4628      	mov	r0, r5
 80054b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b8:	f000 f81a 	bl	80054f0 <_malloc_usable_size_r>
 80054bc:	4284      	cmp	r4, r0
 80054be:	4606      	mov	r6, r0
 80054c0:	d802      	bhi.n	80054c8 <_realloc_r+0x34>
 80054c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054c6:	d8f4      	bhi.n	80054b2 <_realloc_r+0x1e>
 80054c8:	4621      	mov	r1, r4
 80054ca:	4638      	mov	r0, r7
 80054cc:	f7ff fc3a 	bl	8004d44 <_malloc_r>
 80054d0:	4680      	mov	r8, r0
 80054d2:	b908      	cbnz	r0, 80054d8 <_realloc_r+0x44>
 80054d4:	4645      	mov	r5, r8
 80054d6:	e7ec      	b.n	80054b2 <_realloc_r+0x1e>
 80054d8:	42b4      	cmp	r4, r6
 80054da:	4622      	mov	r2, r4
 80054dc:	4629      	mov	r1, r5
 80054de:	bf28      	it	cs
 80054e0:	4632      	movcs	r2, r6
 80054e2:	f7ff ffc9 	bl	8005478 <memcpy>
 80054e6:	4629      	mov	r1, r5
 80054e8:	4638      	mov	r0, r7
 80054ea:	f7ff fbbf 	bl	8004c6c <_free_r>
 80054ee:	e7f1      	b.n	80054d4 <_realloc_r+0x40>

080054f0 <_malloc_usable_size_r>:
 80054f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f4:	1f18      	subs	r0, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bfbc      	itt	lt
 80054fa:	580b      	ldrlt	r3, [r1, r0]
 80054fc:	18c0      	addlt	r0, r0, r3
 80054fe:	4770      	bx	lr

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr

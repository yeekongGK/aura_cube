
AURA_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f7c  08008888  08008888  00009888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009804  08009804  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009804  08009804  0000a804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800980c  0800980c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800980c  0800980c  0000a80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009810  08009810  0000a810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009814  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  200001d4  080099e8  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000798  080099e8  0000b798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f26  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327d  00000000  00000000  0001f12a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  000223a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e33  00000000  00000000  00023620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000252ea  00000000  00000000  00024453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001783a  00000000  00000000  0004973d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d713b  00000000  00000000  00060f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001380b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c58  00000000  00000000  001380f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0013dd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008870 	.word	0x08008870

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08008870 	.word	0x08008870

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
 8000ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eea:	4b56      	ldr	r3, [pc, #344]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	4a55      	ldr	r2, [pc, #340]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000ef0:	f043 0304 	orr.w	r3, r3, #4
 8000ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef6:	4b53      	ldr	r3, [pc, #332]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	f003 0304 	and.w	r3, r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f02:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a4f      	ldr	r2, [pc, #316]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f1e:	4a49      	ldr	r2, [pc, #292]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f26:	4b47      	ldr	r3, [pc, #284]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f36:	4a43      	ldr	r2, [pc, #268]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f3e:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <MX_GPIO_Init+0x170>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_PSM_EINT_GPIO_Port, NB_PSM_EINT_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f50:	483d      	ldr	r0, [pc, #244]	@ (8001048 <MX_GPIO_Init+0x174>)
 8000f52:	f001 f9a3 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2146      	movs	r1, #70	@ 0x46
 8000f5a:	483c      	ldr	r0, [pc, #240]	@ (800104c <MX_GPIO_Init+0x178>)
 8000f5c:	f001 f99e 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NFC_PWR_Pin|NB_ONOFF_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000f66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6a:	f001 f997 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_RESET_GPIO_Port, NB_RESET_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2108      	movs	r1, #8
 8000f72:	4837      	ldr	r0, [pc, #220]	@ (8001050 <MX_GPIO_Init+0x17c>)
 8000f74:	f001 f992 	bl	800229c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NB_PSM_EINT_Pin */
  GPIO_InitStruct.Pin = NB_PSM_EINT_Pin;
 8000f78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_PSM_EINT_GPIO_Port, &GPIO_InitStruct);
 8000f8a:	f107 0314 	add.w	r3, r7, #20
 8000f8e:	4619      	mov	r1, r3
 8000f90:	482d      	ldr	r0, [pc, #180]	@ (8001048 <MX_GPIO_Init+0x174>)
 8000f92:	f001 f809 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT2_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin|MEMS_INT1_Pin;
 8000f96:	2303      	movs	r3, #3
 8000f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4829      	ldr	r0, [pc, #164]	@ (8001050 <MX_GPIO_Init+0x17c>)
 8000faa:	f000 fffd 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBATT_ADC_Pin NFC_BUSY_Pin COMP2_INP_CH1_Pin TAMPER_IN_Pin
                           VBATT_DET_Pin PWR_BY_MAG_Pin */
  GPIO_InitStruct.Pin = VBATT_ADC_Pin|NFC_BUSY_Pin|COMP2_INP_CH1_Pin|TAMPER_IN_Pin
 8000fae:	f640 132d 	movw	r3, #2349	@ 0x92d
 8000fb2:	617b      	str	r3, [r7, #20]
                          |VBATT_DET_Pin|PWR_BY_MAG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fc6:	f000 ffef 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NB_PWR_BYPASS_Pin NB_PWR_EN_Pin PWR_EN_Pin */
  GPIO_InitStruct.Pin = NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin;
 8000fca:	2346      	movs	r3, #70	@ 0x46
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481a      	ldr	r0, [pc, #104]	@ (800104c <MX_GPIO_Init+0x178>)
 8000fe2:	f000 ffe1 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_DT_Pin FUEL_GAUGE_ALRT_Pin RS_TAMPER_Pin */
  GPIO_InitStruct.Pin = SIM_DT_Pin|FUEL_GAUGE_ALRT_Pin|RS_TAMPER_Pin;
 8000fe6:	f249 0308 	movw	r3, #36872	@ 0x9008
 8000fea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4814      	ldr	r0, [pc, #80]	@ (800104c <MX_GPIO_Init+0x178>)
 8000ffc:	f000 ffd4 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_PWR_Pin NB_ONOFF_Pin */
  GPIO_InitStruct.Pin = NFC_PWR_Pin|NB_ONOFF_Pin;
 8001000:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001004:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800101c:	f000 ffc4 	bl	8001fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NB_RESET_Pin */
  GPIO_InitStruct.Pin = NB_RESET_Pin;
 8001020:	2308      	movs	r3, #8
 8001022:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_RESET_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	@ (8001050 <MX_GPIO_Init+0x17c>)
 8001038:	f000 ffb6 	bl	8001fa8 <HAL_GPIO_Init>

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	@ 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	48000800 	.word	0x48000800
 800104c:	48000400 	.word	0x48000400
 8001050:	48001c00 	.word	0x48001c00

08001054 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001058:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <MX_I2C1_Init+0x74>)
 800105a:	4a1c      	ldr	r2, [pc, #112]	@ (80010cc <MX_I2C1_Init+0x78>)
 800105c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 800105e:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <MX_I2C1_Init+0x74>)
 8001060:	4a1b      	ldr	r2, [pc, #108]	@ (80010d0 <MX_I2C1_Init+0x7c>)
 8001062:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <MX_I2C1_Init+0x74>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <MX_I2C1_Init+0x74>)
 800106c:	2201      	movs	r2, #1
 800106e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001070:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <MX_I2C1_Init+0x74>)
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_I2C1_Init+0x74>)
 8001078:	2200      	movs	r2, #0
 800107a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_I2C1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_I2C1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_I2C1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800108e:	480e      	ldr	r0, [pc, #56]	@ (80010c8 <MX_I2C1_Init+0x74>)
 8001090:	f001 f91c 	bl	80022cc <HAL_I2C_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800109a:	f000 fad9 	bl	8001650 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800109e:	2100      	movs	r1, #0
 80010a0:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <MX_I2C1_Init+0x74>)
 80010a2:	f001 ff8b 	bl	8002fbc <HAL_I2CEx_ConfigAnalogFilter>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010ac:	f000 fad0 	bl	8001650 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010b0:	2100      	movs	r1, #0
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_I2C1_Init+0x74>)
 80010b4:	f001 ffcd 	bl	8003052 <HAL_I2CEx_ConfigDigitalFilter>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010be:	f000 fac7 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200001f0 	.word	0x200001f0
 80010cc:	40005400 	.word	0x40005400
 80010d0:	00100d14 	.word	0x00100d14

080010d4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001148 <MX_I2C2_Init+0x74>)
 80010da:	4a1c      	ldr	r2, [pc, #112]	@ (800114c <MX_I2C2_Init+0x78>)
 80010dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 80010de:	4b1a      	ldr	r3, [pc, #104]	@ (8001148 <MX_I2C2_Init+0x74>)
 80010e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001150 <MX_I2C2_Init+0x7c>)
 80010e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80010e4:	4b18      	ldr	r3, [pc, #96]	@ (8001148 <MX_I2C2_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ea:	4b17      	ldr	r3, [pc, #92]	@ (8001148 <MX_I2C2_Init+0x74>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f0:	4b15      	ldr	r3, [pc, #84]	@ (8001148 <MX_I2C2_Init+0x74>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80010f6:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <MX_I2C2_Init+0x74>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <MX_I2C2_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001102:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <MX_I2C2_Init+0x74>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001108:	4b0f      	ldr	r3, [pc, #60]	@ (8001148 <MX_I2C2_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800110e:	480e      	ldr	r0, [pc, #56]	@ (8001148 <MX_I2C2_Init+0x74>)
 8001110:	f001 f8dc 	bl	80022cc <HAL_I2C_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800111a:	f000 fa99 	bl	8001650 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111e:	2100      	movs	r1, #0
 8001120:	4809      	ldr	r0, [pc, #36]	@ (8001148 <MX_I2C2_Init+0x74>)
 8001122:	f001 ff4b 	bl	8002fbc <HAL_I2CEx_ConfigAnalogFilter>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800112c:	f000 fa90 	bl	8001650 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001130:	2100      	movs	r1, #0
 8001132:	4805      	ldr	r0, [pc, #20]	@ (8001148 <MX_I2C2_Init+0x74>)
 8001134:	f001 ff8d 	bl	8003052 <HAL_I2CEx_ConfigDigitalFilter>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800113e:	f000 fa87 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000244 	.word	0x20000244
 800114c:	40005800 	.word	0x40005800
 8001150:	00100d14 	.word	0x00100d14

08001154 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b0a4      	sub	sp, #144	@ 0x90
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	2260      	movs	r2, #96	@ 0x60
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f005 faaf 	bl	80066d8 <memset>
  if(i2cHandle->Instance==I2C1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a41      	ldr	r2, [pc, #260]	@ (8001284 <HAL_I2C_MspInit+0x130>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d13b      	bne.n	80011fc <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001184:	2340      	movs	r3, #64	@ 0x40
 8001186:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001188:	2300      	movs	r3, #0
 800118a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4618      	mov	r0, r3
 8001192:	f002 ffdb 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800119c:	f000 fa58 	bl	8001650 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b39      	ldr	r3, [pc, #228]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 80011a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a4:	4a38      	ldr	r2, [pc, #224]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ac:	4b36      	ldr	r3, [pc, #216]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 80011ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|GPIO_PIN_9;
 80011b8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80011bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011be:	2312      	movs	r3, #18
 80011c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011d0:	2304      	movs	r3, #4
 80011d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011da:	4619      	mov	r1, r3
 80011dc:	482b      	ldr	r0, [pc, #172]	@ (800128c <HAL_I2C_MspInit+0x138>)
 80011de:	f000 fee3 	bl	8001fa8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011e2:	4b29      	ldr	r3, [pc, #164]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011e6:	4a28      	ldr	r2, [pc, #160]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 80011e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80011ee:	4b26      	ldr	r3, [pc, #152]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80011fa:	e03f      	b.n	800127c <HAL_I2C_MspInit+0x128>
  else if(i2cHandle->Instance==I2C2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a23      	ldr	r2, [pc, #140]	@ (8001290 <HAL_I2C_MspInit+0x13c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d13a      	bne.n	800127c <HAL_I2C_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001206:	2380      	movs	r3, #128	@ 0x80
 8001208:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800120a:	2300      	movs	r3, #0
 800120c:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4618      	mov	r0, r3
 8001214:	f002 ff9a 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 800121e:	f000 fa17 	bl	8001650 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 8001224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001226:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 8001230:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2SCL_Pin|I2C2_SDA_Pin;
 800123a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800123e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001240:	2312      	movs	r3, #18
 8001242:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001252:	2304      	movs	r3, #4
 8001254:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001258:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800125c:	4619      	mov	r1, r3
 800125e:	480b      	ldr	r0, [pc, #44]	@ (800128c <HAL_I2C_MspInit+0x138>)
 8001260:	f000 fea2 	bl	8001fa8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 8001266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001268:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 800126a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800126e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <HAL_I2C_MspInit+0x134>)
 8001272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
}
 800127c:	bf00      	nop
 800127e:	3790      	adds	r7, #144	@ 0x90
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40005400 	.word	0x40005400
 8001288:	40021000 	.word	0x40021000
 800128c:	48000400 	.word	0x48000400
 8001290:	40005800 	.word	0x40005800

08001294 <I2C1_MemWrite>:
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef I2C1_MemWrite(uint16_t _devAddr, uint16_t _memAddress, uint16_t _memAddSize, uint8_t *_pData, uint16_t _size, uint32_t _timeout)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af04      	add	r7, sp, #16
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4603      	mov	r3, r0
 800129e:	81fb      	strh	r3, [r7, #14]
 80012a0:	460b      	mov	r3, r1
 80012a2:	81bb      	strh	r3, [r7, #12]
 80012a4:	4613      	mov	r3, r2
 80012a6:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Write(&hi2c1, _devAddr, _memAddress, _memAddSize, (uint8_t *)_pData, _size, _timeout);
 80012a8:	8978      	ldrh	r0, [r7, #10]
 80012aa:	89ba      	ldrh	r2, [r7, #12]
 80012ac:	89f9      	ldrh	r1, [r7, #14]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	8b3b      	ldrh	r3, [r7, #24]
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4603      	mov	r3, r0
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <I2C1_MemWrite+0x38>)
 80012be:	f001 f8a1 	bl	8002404 <HAL_I2C_Mem_Write>
 80012c2:	4603      	mov	r3, r0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200001f0 	.word	0x200001f0

080012d0 <I2C1_MemRead>:

HAL_StatusTypeDef I2C1_MemRead(uint16_t _devAddr, uint16_t _memAddress, uint16_t _memAddSize, uint8_t *_pData, uint16_t _size, uint32_t _timeout)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b088      	sub	sp, #32
 80012d4:	af04      	add	r7, sp, #16
 80012d6:	607b      	str	r3, [r7, #4]
 80012d8:	4603      	mov	r3, r0
 80012da:	81fb      	strh	r3, [r7, #14]
 80012dc:	460b      	mov	r3, r1
 80012de:	81bb      	strh	r3, [r7, #12]
 80012e0:	4613      	mov	r3, r2
 80012e2:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Read(&hi2c1, _devAddr, _memAddress, _memAddSize, _pData, _size, _timeout );
 80012e4:	8978      	ldrh	r0, [r7, #10]
 80012e6:	89ba      	ldrh	r2, [r7, #12]
 80012e8:	89f9      	ldrh	r1, [r7, #14]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	9302      	str	r3, [sp, #8]
 80012ee:	8b3b      	ldrh	r3, [r7, #24]
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	9300      	str	r3, [sp, #0]
 80012f6:	4603      	mov	r3, r0
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <I2C1_MemRead+0x38>)
 80012fa:	f001 f997 	bl	800262c <HAL_I2C_Mem_Read>
 80012fe:	4603      	mov	r3, r0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200001f0 	.word	0x200001f0

0800130c <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001310:	4b16      	ldr	r3, [pc, #88]	@ (800136c <MX_LPTIM1_Init+0x60>)
 8001312:	4a17      	ldr	r2, [pc, #92]	@ (8001370 <MX_LPTIM1_Init+0x64>)
 8001314:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_LPTIM1_Init+0x60>)
 8001318:	2200      	movs	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 800131c:	4b13      	ldr	r3, [pc, #76]	@ (800136c <MX_LPTIM1_Init+0x60>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8001322:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_LPTIM1_Init+0x60>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <MX_LPTIM1_Init+0x60>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_LPTIM1_Init+0x60>)
 8001330:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001334:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001336:	4b0d      	ldr	r3, [pc, #52]	@ (800136c <MX_LPTIM1_Init+0x60>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 800133c:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <MX_LPTIM1_Init+0x60>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <MX_LPTIM1_Init+0x60>)
 8001344:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001348:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <MX_LPTIM1_Init+0x60>)
 800134c:	2200      	movs	r2, #0
 800134e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_LPTIM1_Init+0x60>)
 8001352:	2200      	movs	r2, #0
 8001354:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_LPTIM1_Init+0x60>)
 8001358:	f001 fec8 	bl	80030ec <HAL_LPTIM_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8001362:	f000 f975 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000298 	.word	0x20000298
 8001370:	40007c00 	.word	0x40007c00

08001374 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0a2      	sub	sp, #136	@ 0x88
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2260      	movs	r2, #96	@ 0x60
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f005 f99f 	bl	80066d8 <memset>
  if(lptimHandle->Instance==LPTIM1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a24      	ldr	r2, [pc, #144]	@ (8001430 <HAL_LPTIM_MspInit+0xbc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d140      	bne.n	8001426 <HAL_LPTIM_MspInit+0xb2>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80013a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 feca 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 80013be:	f000 f947 	bl	8001650 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80013c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001434 <HAL_LPTIM_MspInit+0xc0>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001434 <HAL_LPTIM_MspInit+0xc0>)
 80013c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80013cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_LPTIM_MspInit+0xc0>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	4b16      	ldr	r3, [pc, #88]	@ (8001434 <HAL_LPTIM_MspInit+0xc0>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	4a15      	ldr	r2, [pc, #84]	@ (8001434 <HAL_LPTIM_MspInit+0xc0>)
 80013e0:	f043 0302 	orr.w	r3, r3, #2
 80013e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013e6:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <HAL_LPTIM_MspInit+0xc0>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80013f2:	23a0      	movs	r3, #160	@ 0xa0
 80013f4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f6:	2302      	movs	r3, #2
 80013f8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001404:	2301      	movs	r3, #1
 8001406:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800140e:	4619      	mov	r1, r3
 8001410:	4809      	ldr	r0, [pc, #36]	@ (8001438 <HAL_LPTIM_MspInit+0xc4>)
 8001412:	f000 fdc9 	bl	8001fa8 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2041      	movs	r0, #65	@ 0x41
 800141c:	f000 fd8d 	bl	8001f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001420:	2041      	movs	r0, #65	@ 0x41
 8001422:	f000 fda6 	bl	8001f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001426:	bf00      	nop
 8001428:	3788      	adds	r7, #136	@ 0x88
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40007c00 	.word	0x40007c00
 8001434:	40021000 	.word	0x40021000
 8001438:	48000400 	.word	0x48000400

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001440:	b08a      	sub	sp, #40	@ 0x28
 8001442:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001444:	f000 fc05 	bl	8001c52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001448:	f000 f87c 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144c:	f7ff fd42 	bl	8000ed4 <MX_GPIO_Init>
MX_LPTIM1_Init();
 8001450:	f7ff ff5c 	bl	800130c <MX_LPTIM1_Init>
MX_I2C1_Init();
 8001454:	f7ff fdfe 	bl	8001054 <MX_I2C1_Init>
MX_I2C2_Init();
 8001458:	f7ff fe3c 	bl	80010d4 <MX_I2C2_Init>
MX_LPUART1_UART_Init();
 800145c:	f000 fad2 	bl	8001a04 <MX_LPUART1_UART_Init>
MX_USART1_UART_Init();
 8001460:	f000 fafc 	bl	8001a5c <MX_USART1_UART_Init>
MX_SPI1_Init();
 8001464:	f000 f8fa 	bl	800165c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BatteryMonitor_Init();
 8001468:	f004 fb55 	bl	8005b16 <BatteryMonitor_Init>

  for (uint16_t addr = 1; addr < 128; addr++)
 800146c:	2301      	movs	r3, #1
 800146e:	82fb      	strh	r3, [r7, #22]
 8001470:	e012      	b.n	8001498 <main+0x5c>
  {
	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(addr << 1), 2, 10) == HAL_OK)
 8001472:	8afb      	ldrh	r3, [r7, #22]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	b299      	uxth	r1, r3
 8001478:	230a      	movs	r3, #10
 800147a:	2202      	movs	r2, #2
 800147c:	482c      	ldr	r0, [pc, #176]	@ (8001530 <main+0xf4>)
 800147e:	f001 f9ef 	bl	8002860 <HAL_I2C_IsDeviceReady>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d104      	bne.n	8001492 <main+0x56>
	  {
		  UART_Printf("Found device at 0x%02X\r\n", addr);
 8001488:	8afb      	ldrh	r3, [r7, #22]
 800148a:	4619      	mov	r1, r3
 800148c:	4829      	ldr	r0, [pc, #164]	@ (8001534 <main+0xf8>)
 800148e:	f000 f8af 	bl	80015f0 <UART_Printf>
  for (uint16_t addr = 1; addr < 128; addr++)
 8001492:	8afb      	ldrh	r3, [r7, #22]
 8001494:	3301      	adds	r3, #1
 8001496:	82fb      	strh	r3, [r7, #22]
 8001498:	8afb      	ldrh	r3, [r7, #22]
 800149a:	2b7f      	cmp	r3, #127	@ 0x7f
 800149c:	d9e9      	bls.n	8001472 <main+0x36>
  //     maxim_max1726x_clear_por();               // Clear the POR flag
  //     UART_Printf("Initialization complete.\r\n");
  // } else {
  //     UART_Printf("No POR detected. MAX1726x already configured.\r\n");
  // }
  MAX17260_Register_printout();
 800149e:	f004 fae5 	bl	8005a6c <MAX17260_Register_printout>
    
    uint16_t vcell_raw;
    int16_t current_raw; // Current can be negative (discharging)

    // Read State of Charge (%) using the library's helper function
    soc_percentage = maxim_max1726x_get_repsoc();
 80014a2:	f004 fb5f 	bl	8005b64 <maxim_max1726x_get_repsoc>
 80014a6:	ed87 0a04 	vstr	s0, [r7, #16]

    // Read raw register values for Voltage and Current
    maxim_max1726x_read_reg(MAX1726X_VCELL_REG, &vcell_raw);
 80014aa:	1dbb      	adds	r3, r7, #6
 80014ac:	4619      	mov	r1, r3
 80014ae:	2009      	movs	r0, #9
 80014b0:	f004 fb43 	bl	8005b3a <maxim_max1726x_read_reg>
    maxim_max1726x_read_reg(MAX1726X_CURRENT_REG, (uint16_t*)&current_raw);
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	4619      	mov	r1, r3
 80014b8:	200a      	movs	r0, #10
 80014ba:	f004 fb3e 	bl	8005b3a <maxim_max1726x_read_reg>

    // Convert raw values to human-readable format
    // Datasheet: VCell LSB = 78.125 uV
    voltage_f = vcell_raw * 78.125f / 1000.0f; // Result in mV
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	ee07 3a90 	vmov	s15, r3
 80014c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014c8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001538 <main+0xfc>
 80014cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d0:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 800153c <main+0x100>
 80014d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014d8:	edc7 7a03 	vstr	s15, [r7, #12]
    
    // Datasheet: Current LSB = 1.5625 uV / Rsense. Assuming Rsense = 10mOhm (0.01 Ohm)
    // LSB = 1.5625uV / 0.01Ohm = 156.25 uA = 0.15625 mA
    current_f = current_raw * 0.15625f; // Result in mA
 80014dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014e0:	ee07 3a90 	vmov	s15, r3
 80014e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e8:	eeb4 7a04 	vmov.f32	s14, #68	@ 0x3e200000  0.1562500
 80014ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f0:	edc7 7a02 	vstr	s15, [r7, #8]

    // Print the results
    UART_Printf("SOC: %.2f%%, Voltage: %.0f mV, Current: %.2f mA\r\n", 
 80014f4:	6938      	ldr	r0, [r7, #16]
 80014f6:	f7ff f827 	bl	8000548 <__aeabi_f2d>
 80014fa:	4680      	mov	r8, r0
 80014fc:	4689      	mov	r9, r1
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f7ff f822 	bl	8000548 <__aeabi_f2d>
 8001504:	4604      	mov	r4, r0
 8001506:	460d      	mov	r5, r1
 8001508:	68b8      	ldr	r0, [r7, #8]
 800150a:	f7ff f81d 	bl	8000548 <__aeabi_f2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001516:	e9cd 4500 	strd	r4, r5, [sp]
 800151a:	4642      	mov	r2, r8
 800151c:	464b      	mov	r3, r9
 800151e:	4808      	ldr	r0, [pc, #32]	@ (8001540 <main+0x104>)
 8001520:	f000 f866 	bl	80015f0 <UART_Printf>
            soc_percentage, voltage_f, current_f);

    // Wait for a couple of seconds before the next reading
    HAL_Delay(2000);
 8001524:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001528:	f000 fc08 	bl	8001d3c <HAL_Delay>
  {
 800152c:	bf00      	nop
 800152e:	e7b8      	b.n	80014a2 <main+0x66>
 8001530:	200001f0 	.word	0x200001f0
 8001534:	08008888 	.word	0x08008888
 8001538:	429c4000 	.word	0x429c4000
 800153c:	447a0000 	.word	0x447a0000
 8001540:	080088a4 	.word	0x080088a4

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b096      	sub	sp, #88	@ 0x58
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	2244      	movs	r2, #68	@ 0x44
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f005 f8c0 	bl	80066d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001566:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800156a:	f001 ff61 	bl	8003430 <HAL_PWREx_ControlVoltageScaling>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001574:	f000 f86c 	bl	8001650 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001578:	f001 ff3c 	bl	80033f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800157c:	4b1b      	ldr	r3, [pc, #108]	@ (80015ec <SystemClock_Config+0xa8>)
 800157e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001582:	4a1a      	ldr	r2, [pc, #104]	@ (80015ec <SystemClock_Config+0xa8>)
 8001584:	f023 0318 	bic.w	r3, r3, #24
 8001588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800158c:	2314      	movs	r3, #20
 800158e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001590:	2301      	movs	r3, #1
 8001592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800159c:	2360      	movs	r3, #96	@ 0x60
 800159e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	4618      	mov	r0, r3
 80015aa:	f001 ff97 	bl	80034dc <HAL_RCC_OscConfig>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80015b4:	f000 f84c 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015b8:	230f      	movs	r3, #15
 80015ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015bc:	2300      	movs	r3, #0
 80015be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015cc:	463b      	mov	r3, r7
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fb97 	bl	8003d04 <HAL_RCC_ClockConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80015dc:	f000 f838 	bl	8001650 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80015e0:	f002 fffe 	bl	80045e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80015e4:	bf00      	nop
 80015e6:	3758      	adds	r7, #88	@ 0x58
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40021000 	.word	0x40021000

080015f0 <UART_Printf>:

/* USER CODE BEGIN 4 */

void UART_Printf(char *format, ...)
{
 80015f0:	b40f      	push	{r0, r1, r2, r3}
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b0c2      	sub	sp, #264	@ 0x108
 80015f6:	af00      	add	r7, sp, #0
  char str[256];
  va_list args;
  va_start(args, format);
 80015f8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80015fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001604:	601a      	str	r2, [r3, #0]
  vsnprintf(str, sizeof(str), format, args);
 8001606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800160a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800160e:	f107 0008 	add.w	r0, r7, #8
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001618:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800161c:	f005 f84e 	bl	80066bc <vsniprintf>
  va_end(args);

  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe fe23 	bl	8000270 <strlen>
 800162a:	4603      	mov	r3, r0
 800162c:	b29a      	uxth	r2, r3
 800162e:	f107 0108 	add.w	r1, r7, #8
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
 8001636:	4805      	ldr	r0, [pc, #20]	@ (800164c <UART_Printf+0x5c>)
 8001638:	f003 f9c5 	bl	80049c6 <HAL_UART_Transmit>
}
 800163c:	bf00      	nop
 800163e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001642:	46bd      	mov	sp, r7
 8001644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001648:	b004      	add	sp, #16
 800164a:	4770      	bx	lr
 800164c:	200003c0 	.word	0x200003c0

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <Error_Handler+0x8>

0800165c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <MX_SPI1_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001668:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001674:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001676:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800167a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_SPI1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_SPI1_Init+0x74>)
 800168a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800168e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_SPI1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016aa:	2207      	movs	r2, #7
 80016ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016b6:	2208      	movs	r2, #8
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016bc:	f003 f892 	bl	80047e4 <HAL_SPI_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f7ff ffc3 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200002d0 	.word	0x200002d0
 80016d4:	40013000 	.word	0x40013000

080016d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a25      	ldr	r2, [pc, #148]	@ (800178c <HAL_SPI_MspInit+0xb4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d144      	bne.n	8001784 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <HAL_SPI_MspInit+0xb8>)
 80016fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fe:	4a24      	ldr	r2, [pc, #144]	@ (8001790 <HAL_SPI_MspInit+0xb8>)
 8001700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001704:	6613      	str	r3, [r2, #96]	@ 0x60
 8001706:	4b22      	ldr	r3, [pc, #136]	@ (8001790 <HAL_SPI_MspInit+0xb8>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b1f      	ldr	r3, [pc, #124]	@ (8001790 <HAL_SPI_MspInit+0xb8>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001716:	4a1e      	ldr	r2, [pc, #120]	@ (8001790 <HAL_SPI_MspInit+0xb8>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800171e:	4b1c      	ldr	r3, [pc, #112]	@ (8001790 <HAL_SPI_MspInit+0xb8>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800172a:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_SPI_MspInit+0xb8>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172e:	4a18      	ldr	r2, [pc, #96]	@ (8001790 <HAL_SPI_MspInit+0xb8>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_SPI_MspInit+0xb8>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001742:	23c2      	movs	r3, #194	@ 0xc2
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001752:	2305      	movs	r3, #5
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001760:	f000 fc22 	bl	8001fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001764:	2301      	movs	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001770:	2303      	movs	r3, #3
 8001772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001774:	2305      	movs	r3, #5
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	4619      	mov	r1, r3
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <HAL_SPI_MspInit+0xbc>)
 8001780:	f000 fc12 	bl	8001fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	@ 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40013000 	.word	0x40013000
 8001790:	40021000 	.word	0x40021000
 8001794:	48000400 	.word	0x48000400

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <HAL_MspInit+0x44>)
 80017a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017a2:	4a0e      	ldr	r2, [pc, #56]	@ (80017dc <HAL_MspInit+0x44>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017aa:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <HAL_MspInit+0x44>)
 80017ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	607b      	str	r3, [r7, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <HAL_MspInit+0x44>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ba:	4a08      	ldr	r2, [pc, #32]	@ (80017dc <HAL_MspInit+0x44>)
 80017bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80017c2:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_MspInit+0x44>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40021000 	.word	0x40021000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <NMI_Handler+0x4>

080017e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <MemManage_Handler+0x4>

080017f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <UsageFault_Handler+0x4>

08001808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 fa61 	bl	8001cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <LPTIM1_IRQHandler+0x10>)
 8001846:	f001 fcf3 	bl	8003230 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000298 	.word	0x20000298

08001854 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return 1;
 8001858:	2301      	movs	r3, #1
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_kill>:

int _kill(int pid, int sig)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800186e:	f004 ff85 	bl	800677c <__errno>
 8001872:	4603      	mov	r3, r0
 8001874:	2216      	movs	r2, #22
 8001876:	601a      	str	r2, [r3, #0]
  return -1;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_exit>:

void _exit (int status)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffe7 	bl	8001864 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001896:	bf00      	nop
 8001898:	e7fd      	b.n	8001896 <_exit+0x12>

0800189a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e00a      	b.n	80018c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ac:	f3af 8000 	nop.w
 80018b0:	4601      	mov	r1, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	60ba      	str	r2, [r7, #8]
 80018b8:	b2ca      	uxtb	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dbf0      	blt.n	80018ac <_read+0x12>
  }

  return len;
 80018ca:	687b      	ldr	r3, [r7, #4]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	e009      	b.n	80018fa <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1c5a      	adds	r2, r3, #1
 80018ea:	60ba      	str	r2, [r7, #8]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	429a      	cmp	r2, r3
 8001900:	dbf1      	blt.n	80018e6 <_write+0x12>
  }
  return len;
 8001902:	687b      	ldr	r3, [r7, #4]
}
 8001904:	4618      	mov	r0, r3
 8001906:	3718      	adds	r7, #24
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <_close>:

int _close(int file)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001934:	605a      	str	r2, [r3, #4]
  return 0;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_isatty>:

int _isatty(int file)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800194c:	2301      	movs	r3, #1
}
 800194e:	4618      	mov	r0, r3
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195a:	b480      	push	{r7}
 800195c:	b085      	sub	sp, #20
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	60b9      	str	r1, [r7, #8]
 8001964:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800197c:	4a14      	ldr	r2, [pc, #80]	@ (80019d0 <_sbrk+0x5c>)
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <_sbrk+0x60>)
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001988:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <_sbrk+0x64>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d102      	bne.n	8001996 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001990:	4b11      	ldr	r3, [pc, #68]	@ (80019d8 <_sbrk+0x64>)
 8001992:	4a12      	ldr	r2, [pc, #72]	@ (80019dc <_sbrk+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001996:	4b10      	ldr	r3, [pc, #64]	@ (80019d8 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	693a      	ldr	r2, [r7, #16]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d207      	bcs.n	80019b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a4:	f004 feea 	bl	800677c <__errno>
 80019a8:	4603      	mov	r3, r0
 80019aa:	220c      	movs	r2, #12
 80019ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ae:	f04f 33ff 	mov.w	r3, #4294967295
 80019b2:	e009      	b.n	80019c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ba:	4b07      	ldr	r3, [pc, #28]	@ (80019d8 <_sbrk+0x64>)
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a05      	ldr	r2, [pc, #20]	@ (80019d8 <_sbrk+0x64>)
 80019c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c6:	68fb      	ldr	r3, [r7, #12]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	2000c000 	.word	0x2000c000
 80019d4:	00000400 	.word	0x00000400
 80019d8:	20000334 	.word	0x20000334
 80019dc:	20000798 	.word	0x20000798

080019e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019e4:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <SystemInit+0x20>)
 80019e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ea:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <SystemInit+0x20>)
 80019ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a0a:	4a13      	ldr	r2, [pc, #76]	@ (8001a58 <MX_LPUART1_UART_Init+0x54>)
 8001a0c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a10:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001a14:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001a28:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a2a:	220c      	movs	r2, #12
 8001a2c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a34:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <MX_LPUART1_UART_Init+0x50>)
 8001a42:	f002 ff72 	bl	800492a <HAL_UART_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001a4c:	f7ff fe00 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000338 	.word	0x20000338
 8001a58:	40008000 	.word	0x40008000

08001a5c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a62:	4a15      	ldr	r2, [pc, #84]	@ (8001ab8 <MX_USART1_UART_Init+0x5c>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a66:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a98:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a9e:	4805      	ldr	r0, [pc, #20]	@ (8001ab4 <MX_USART1_UART_Init+0x58>)
 8001aa0:	f002 ff43 	bl	800492a <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001aaa:	f7ff fdd1 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	200003c0 	.word	0x200003c0
 8001ab8:	40013800 	.word	0x40013800

08001abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0a4      	sub	sp, #144	@ 0x90
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2260      	movs	r2, #96	@ 0x60
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fdfb 	bl	80066d8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a42      	ldr	r2, [pc, #264]	@ (8001bf0 <HAL_UART_MspInit+0x134>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d13b      	bne.n	8001b64 <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001aec:	2320      	movs	r3, #32
 8001aee:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4618      	mov	r0, r3
 8001afa:	f002 fb27 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b04:	f7ff fda4 	bl	8001650 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001b08:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001b0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b0c:	4a39      	ldr	r2, [pc, #228]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001b14:	4b37      	ldr	r3, [pc, #220]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	61bb      	str	r3, [r7, #24]
 8001b1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b24:	4a33      	ldr	r2, [pc, #204]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b2c:	4b31      	ldr	r3, [pc, #196]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = LPUART1_RX_Pin|LPUART1_TX_Pin;
 8001b38:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b50:	2308      	movs	r3, #8
 8001b52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b56:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4826      	ldr	r0, [pc, #152]	@ (8001bf8 <HAL_UART_MspInit+0x13c>)
 8001b5e:	f000 fa23 	bl	8001fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b62:	e040      	b.n	8001be6 <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a24      	ldr	r2, [pc, #144]	@ (8001bfc <HAL_UART_MspInit+0x140>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d13b      	bne.n	8001be6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f002 fae6 	bl	800414c <HAL_RCCEx_PeriphCLKConfig>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001b86:	f7ff fd63 	bl	8001650 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b8e:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b94:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b96:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	4b14      	ldr	r3, [pc, #80]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba6:	4a13      	ldr	r2, [pc, #76]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bae:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_UART_MspInit+0x138>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001bba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001be2:	f000 f9e1 	bl	8001fa8 <HAL_GPIO_Init>
}
 8001be6:	bf00      	nop
 8001be8:	3790      	adds	r7, #144	@ 0x90
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40008000 	.word	0x40008000
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48000400 	.word	0x48000400
 8001bfc:	40013800 	.word	0x40013800

08001c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c04:	f7ff feec 	bl	80019e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c08:	480c      	ldr	r0, [pc, #48]	@ (8001c3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001c0a:	490d      	ldr	r1, [pc, #52]	@ (8001c40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <LoopForever+0xe>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c10:	e002      	b.n	8001c18 <LoopCopyDataInit>

08001c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c16:	3304      	adds	r3, #4

08001c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c1c:	d3f9      	bcc.n	8001c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c20:	4c0a      	ldr	r4, [pc, #40]	@ (8001c4c <LoopForever+0x16>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c24:	e001      	b.n	8001c2a <LoopFillZerobss>

08001c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c28:	3204      	adds	r2, #4

08001c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c2c:	d3fb      	bcc.n	8001c26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c2e:	f004 fdab 	bl	8006788 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c32:	f7ff fc03 	bl	800143c <main>

08001c36 <LoopForever>:

LoopForever:
    b LoopForever
 8001c36:	e7fe      	b.n	8001c36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001c3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c40:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c44:	08009814 	.word	0x08009814
  ldr r2, =_sbss
 8001c48:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c4c:	20000798 	.word	0x20000798

08001c50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c50:	e7fe      	b.n	8001c50 <ADC1_IRQHandler>

08001c52 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 f961 	bl	8001f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 f80e 	bl	8001c84 <HAL_InitTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	e001      	b.n	8001c78 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c74:	f7ff fd90 	bl	8001798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
	...

08001c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c90:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <HAL_InitTick+0x6c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d023      	beq.n	8001ce0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c98:	4b16      	ldr	r3, [pc, #88]	@ (8001cf4 <HAL_InitTick+0x70>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_InitTick+0x6c>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f000 f96d 	bl	8001f8e <HAL_SYSTICK_Config>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10f      	bne.n	8001cda <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d809      	bhi.n	8001cd4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f000 f937 	bl	8001f3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <HAL_InitTick+0x74>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e007      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	73fb      	strb	r3, [r7, #15]
 8001cd8:	e004      	b.n	8001ce4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	73fb      	strb	r3, [r7, #15]
 8001cde:	e001      	b.n	8001ce4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000008 	.word	0x20000008
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d00:	4b06      	ldr	r3, [pc, #24]	@ (8001d1c <HAL_IncTick+0x20>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <HAL_IncTick+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000448 	.word	0x20000448

08001d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return uwTick;
 8001d28:	4b03      	ldr	r3, [pc, #12]	@ (8001d38 <HAL_GetTick+0x14>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000448 	.word	0x20000448

08001d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d44:	f7ff ffee 	bl	8001d24 <HAL_GetTick>
 8001d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d54:	d005      	beq.n	8001d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d56:	4b0a      	ldr	r3, [pc, #40]	@ (8001d80 <HAL_Delay+0x44>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4413      	add	r3, r2
 8001d60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d62:	bf00      	nop
 8001d64:	f7ff ffde 	bl	8001d24 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d8f7      	bhi.n	8001d64 <HAL_Delay+0x28>
  {
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000008 	.word	0x20000008

08001d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da0:	4013      	ands	r3, r2
 8001da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001db6:	4a04      	ldr	r2, [pc, #16]	@ (8001dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	60d3      	str	r3, [r2, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd0:	4b04      	ldr	r3, [pc, #16]	@ (8001de4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	f003 0307 	and.w	r3, r3, #7
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	db0b      	blt.n	8001e12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfa:	79fb      	ldrb	r3, [r7, #7]
 8001dfc:	f003 021f 	and.w	r2, r3, #31
 8001e00:	4907      	ldr	r1, [pc, #28]	@ (8001e20 <__NVIC_EnableIRQ+0x38>)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	095b      	lsrs	r3, r3, #5
 8001e08:	2001      	movs	r0, #1
 8001e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000e100 	.word	0xe000e100

08001e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	6039      	str	r1, [r7, #0]
 8001e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db0a      	blt.n	8001e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	b2da      	uxtb	r2, r3
 8001e3c:	490c      	ldr	r1, [pc, #48]	@ (8001e70 <__NVIC_SetPriority+0x4c>)
 8001e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4c:	e00a      	b.n	8001e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <__NVIC_SetPriority+0x50>)
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	3b04      	subs	r3, #4
 8001e5c:	0112      	lsls	r2, r2, #4
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	761a      	strb	r2, [r3, #24]
}
 8001e64:	bf00      	nop
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr
 8001e70:	e000e100 	.word	0xe000e100
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b089      	sub	sp, #36	@ 0x24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f1c3 0307 	rsb	r3, r3, #7
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	bf28      	it	cs
 8001e96:	2304      	movcs	r3, #4
 8001e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	2b06      	cmp	r3, #6
 8001ea0:	d902      	bls.n	8001ea8 <NVIC_EncodePriority+0x30>
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3b03      	subs	r3, #3
 8001ea6:	e000      	b.n	8001eaa <NVIC_EncodePriority+0x32>
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	43da      	mvns	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	401a      	ands	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eca:	43d9      	mvns	r1, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	4313      	orrs	r3, r2
         );
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef0:	d301      	bcc.n	8001ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e00f      	b.n	8001f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	@ (8001f20 <SysTick_Config+0x40>)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efe:	210f      	movs	r1, #15
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295
 8001f04:	f7ff ff8e 	bl	8001e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <SysTick_Config+0x40>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0e:	4b04      	ldr	r3, [pc, #16]	@ (8001f20 <SysTick_Config+0x40>)
 8001f10:	2207      	movs	r2, #7
 8001f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	e000e010 	.word	0xe000e010

08001f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff29 	bl	8001d84 <__NVIC_SetPriorityGrouping>
}
 8001f32:	bf00      	nop
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	4603      	mov	r3, r0
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
 8001f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f4c:	f7ff ff3e 	bl	8001dcc <__NVIC_GetPriorityGrouping>
 8001f50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	68b9      	ldr	r1, [r7, #8]
 8001f56:	6978      	ldr	r0, [r7, #20]
 8001f58:	f7ff ff8e 	bl	8001e78 <NVIC_EncodePriority>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f62:	4611      	mov	r1, r2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff ff5d 	bl	8001e24 <__NVIC_SetPriority>
}
 8001f6a:	bf00      	nop
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	4603      	mov	r3, r0
 8001f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff31 	bl	8001de8 <__NVIC_EnableIRQ>
}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffa2 	bl	8001ee0 <SysTick_Config>
 8001f9c:	4603      	mov	r3, r0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b087      	sub	sp, #28
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fb6:	e154      	b.n	8002262 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 8146 	beq.w	800225c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d005      	beq.n	8001fe8 <HAL_GPIO_Init+0x40>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0303 	and.w	r3, r3, #3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d130      	bne.n	800204a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	2203      	movs	r2, #3
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800201e:	2201      	movs	r2, #1
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	091b      	lsrs	r3, r3, #4
 8002034:	f003 0201 	and.w	r2, r3, #1
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	4313      	orrs	r3, r2
 8002042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	693a      	ldr	r2, [r7, #16]
 8002048:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b03      	cmp	r3, #3
 8002054:	d017      	beq.n	8002086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	2203      	movs	r2, #3
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	4013      	ands	r3, r2
 800206c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	693a      	ldr	r2, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d123      	bne.n	80020da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	08da      	lsrs	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3208      	adds	r2, #8
 800209a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800209e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	08da      	lsrs	r2, r3, #3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3208      	adds	r2, #8
 80020d4:	6939      	ldr	r1, [r7, #16]
 80020d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4013      	ands	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0203 	and.w	r2, r3, #3
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	4313      	orrs	r3, r2
 8002106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002116:	2b00      	cmp	r3, #0
 8002118:	f000 80a0 	beq.w	800225c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211c:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <HAL_GPIO_Init+0x2d8>)
 800211e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002120:	4a57      	ldr	r2, [pc, #348]	@ (8002280 <HAL_GPIO_Init+0x2d8>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6613      	str	r3, [r2, #96]	@ 0x60
 8002128:	4b55      	ldr	r3, [pc, #340]	@ (8002280 <HAL_GPIO_Init+0x2d8>)
 800212a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002134:	4a53      	ldr	r2, [pc, #332]	@ (8002284 <HAL_GPIO_Init+0x2dc>)
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	3302      	adds	r3, #2
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	4013      	ands	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800215e:	d019      	beq.n	8002194 <HAL_GPIO_Init+0x1ec>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a49      	ldr	r2, [pc, #292]	@ (8002288 <HAL_GPIO_Init+0x2e0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d013      	beq.n	8002190 <HAL_GPIO_Init+0x1e8>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a48      	ldr	r2, [pc, #288]	@ (800228c <HAL_GPIO_Init+0x2e4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00d      	beq.n	800218c <HAL_GPIO_Init+0x1e4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a47      	ldr	r2, [pc, #284]	@ (8002290 <HAL_GPIO_Init+0x2e8>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <HAL_GPIO_Init+0x1e0>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a46      	ldr	r2, [pc, #280]	@ (8002294 <HAL_GPIO_Init+0x2ec>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_GPIO_Init+0x1dc>
 8002180:	2304      	movs	r3, #4
 8002182:	e008      	b.n	8002196 <HAL_GPIO_Init+0x1ee>
 8002184:	2307      	movs	r3, #7
 8002186:	e006      	b.n	8002196 <HAL_GPIO_Init+0x1ee>
 8002188:	2303      	movs	r3, #3
 800218a:	e004      	b.n	8002196 <HAL_GPIO_Init+0x1ee>
 800218c:	2302      	movs	r3, #2
 800218e:	e002      	b.n	8002196 <HAL_GPIO_Init+0x1ee>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_GPIO_Init+0x1ee>
 8002194:	2300      	movs	r3, #0
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	f002 0203 	and.w	r2, r2, #3
 800219c:	0092      	lsls	r2, r2, #2
 800219e:	4093      	lsls	r3, r2
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80021a6:	4937      	ldr	r1, [pc, #220]	@ (8002284 <HAL_GPIO_Init+0x2dc>)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	089b      	lsrs	r3, r3, #2
 80021ac:	3302      	adds	r3, #2
 80021ae:	693a      	ldr	r2, [r7, #16]
 80021b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021b4:	4b38      	ldr	r3, [pc, #224]	@ (8002298 <HAL_GPIO_Init+0x2f0>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	43db      	mvns	r3, r3
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021d8:	4a2f      	ldr	r2, [pc, #188]	@ (8002298 <HAL_GPIO_Init+0x2f0>)
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80021de:	4b2e      	ldr	r3, [pc, #184]	@ (8002298 <HAL_GPIO_Init+0x2f0>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002202:	4a25      	ldr	r2, [pc, #148]	@ (8002298 <HAL_GPIO_Init+0x2f0>)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002208:	4b23      	ldr	r3, [pc, #140]	@ (8002298 <HAL_GPIO_Init+0x2f0>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800222c:	4a1a      	ldr	r2, [pc, #104]	@ (8002298 <HAL_GPIO_Init+0x2f0>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_GPIO_Init+0x2f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002256:	4a10      	ldr	r2, [pc, #64]	@ (8002298 <HAL_GPIO_Init+0x2f0>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	f47f aea3 	bne.w	8001fb8 <HAL_GPIO_Init+0x10>
  }
}
 8002272:	bf00      	nop
 8002274:	bf00      	nop
 8002276:	371c      	adds	r7, #28
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40021000 	.word	0x40021000
 8002284:	40010000 	.word	0x40010000
 8002288:	48000400 	.word	0x48000400
 800228c:	48000800 	.word	0x48000800
 8002290:	48000c00 	.word	0x48000c00
 8002294:	48001000 	.word	0x48001000
 8002298:	40010400 	.word	0x40010400

0800229c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	460b      	mov	r3, r1
 80022a6:	807b      	strh	r3, [r7, #2]
 80022a8:	4613      	mov	r3, r2
 80022aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ac:	787b      	ldrb	r3, [r7, #1]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022b8:	e002      	b.n	80022c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ba:	887a      	ldrh	r2, [r7, #2]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e08d      	b.n	80023fa <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d106      	bne.n	80022f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe ff2e 	bl	8001154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	@ 0x24
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800231c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800232c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	e006      	b.n	8002354 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002352:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d108      	bne.n	800236e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	e007      	b.n	800237e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800237c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800238c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002390:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68da      	ldr	r2, [r3, #12]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	699b      	ldr	r3, [r3, #24]
 80023b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69d9      	ldr	r1, [r3, #28]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a1a      	ldr	r2, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2220      	movs	r2, #32
 80023e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
	...

08002404 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	4608      	mov	r0, r1
 800240e:	4611      	mov	r1, r2
 8002410:	461a      	mov	r2, r3
 8002412:	4603      	mov	r3, r0
 8002414:	817b      	strh	r3, [r7, #10]
 8002416:	460b      	mov	r3, r1
 8002418:	813b      	strh	r3, [r7, #8]
 800241a:	4613      	mov	r3, r2
 800241c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b20      	cmp	r3, #32
 8002428:	f040 80f9 	bne.w	800261e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_I2C_Mem_Write+0x34>
 8002432:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800243e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0ed      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800244a:	2b01      	cmp	r3, #1
 800244c:	d101      	bne.n	8002452 <HAL_I2C_Mem_Write+0x4e>
 800244e:	2302      	movs	r3, #2
 8002450:	e0e6      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800245a:	f7ff fc63 	bl	8001d24 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2319      	movs	r3, #25
 8002466:	2201      	movs	r2, #1
 8002468:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 fbaf 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e0d1      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2221      	movs	r2, #33	@ 0x21
 8002480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2240      	movs	r2, #64	@ 0x40
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a3a      	ldr	r2, [r7, #32]
 8002496:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800249c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024a4:	88f8      	ldrh	r0, [r7, #6]
 80024a6:	893a      	ldrh	r2, [r7, #8]
 80024a8:	8979      	ldrh	r1, [r7, #10]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	9301      	str	r3, [sp, #4]
 80024ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	4603      	mov	r3, r0
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 fabf 	bl	8002a38 <I2C_RequestMemoryWrite>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0a9      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	2bff      	cmp	r3, #255	@ 0xff
 80024d4:	d90e      	bls.n	80024f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	22ff      	movs	r2, #255	@ 0xff
 80024da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	8979      	ldrh	r1, [r7, #10]
 80024e4:	2300      	movs	r3, #0
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fd33 	bl	8002f58 <I2C_TransferConfig>
 80024f2:	e00f      	b.n	8002514 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002502:	b2da      	uxtb	r2, r3
 8002504:	8979      	ldrh	r1, [r7, #10]
 8002506:	2300      	movs	r3, #0
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fd22 	bl	8002f58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f000 fbb2 	bl	8002c82 <I2C_WaitOnTXISFlagUntilTimeout>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e07b      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002538:	1c5a      	adds	r2, r3, #1
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002550:	3b01      	subs	r3, #1
 8002552:	b29a      	uxth	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255c:	b29b      	uxth	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d034      	beq.n	80025cc <HAL_I2C_Mem_Write+0x1c8>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002566:	2b00      	cmp	r3, #0
 8002568:	d130      	bne.n	80025cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002570:	2200      	movs	r2, #0
 8002572:	2180      	movs	r1, #128	@ 0x80
 8002574:	68f8      	ldr	r0, [r7, #12]
 8002576:	f000 fb2b 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e04d      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	2bff      	cmp	r3, #255	@ 0xff
 800258c:	d90e      	bls.n	80025ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	22ff      	movs	r2, #255	@ 0xff
 8002592:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002598:	b2da      	uxtb	r2, r3
 800259a:	8979      	ldrh	r1, [r7, #10]
 800259c:	2300      	movs	r3, #0
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fcd7 	bl	8002f58 <I2C_TransferConfig>
 80025aa:	e00f      	b.n	80025cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	8979      	ldrh	r1, [r7, #10]
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	f000 fcc6 	bl	8002f58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d19e      	bne.n	8002514 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fb98 	bl	8002d10 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e01a      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2220      	movs	r2, #32
 80025f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6859      	ldr	r1, [r3, #4]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002628 <HAL_I2C_Mem_Write+0x224>)
 80025fe:	400b      	ands	r3, r1
 8002600:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800261a:	2300      	movs	r3, #0
 800261c:	e000      	b.n	8002620 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	fe00e800 	.word	0xfe00e800

0800262c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b20      	cmp	r3, #32
 8002650:	f040 80fd 	bne.w	800284e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_I2C_Mem_Read+0x34>
 800265a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002666:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0f1      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_I2C_Mem_Read+0x4e>
 8002676:	2302      	movs	r3, #2
 8002678:	e0ea      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002682:	f7ff fb4f 	bl	8001d24 <HAL_GetTick>
 8002686:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2319      	movs	r3, #25
 800268e:	2201      	movs	r2, #1
 8002690:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fa9b 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0d5      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2222      	movs	r2, #34	@ 0x22
 80026a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2240      	movs	r2, #64	@ 0x40
 80026b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a3a      	ldr	r2, [r7, #32]
 80026be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026cc:	88f8      	ldrh	r0, [r7, #6]
 80026ce:	893a      	ldrh	r2, [r7, #8]
 80026d0:	8979      	ldrh	r1, [r7, #10]
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	4603      	mov	r3, r0
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f9ff 	bl	8002ae0 <I2C_RequestMemoryRead>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0ad      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2bff      	cmp	r3, #255	@ 0xff
 80026fc:	d90e      	bls.n	800271c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002708:	b2da      	uxtb	r2, r3
 800270a:	8979      	ldrh	r1, [r7, #10]
 800270c:	4b52      	ldr	r3, [pc, #328]	@ (8002858 <HAL_I2C_Mem_Read+0x22c>)
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fc1f 	bl	8002f58 <I2C_TransferConfig>
 800271a:	e00f      	b.n	800273c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272a:	b2da      	uxtb	r2, r3
 800272c:	8979      	ldrh	r1, [r7, #10]
 800272e:	4b4a      	ldr	r3, [pc, #296]	@ (8002858 <HAL_I2C_Mem_Read+0x22c>)
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 fc0e 	bl	8002f58 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002742:	2200      	movs	r2, #0
 8002744:	2104      	movs	r1, #4
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fa42 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07c      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278c:	b29b      	uxth	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d034      	beq.n	80027fc <HAL_I2C_Mem_Read+0x1d0>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002796:	2b00      	cmp	r3, #0
 8002798:	d130      	bne.n	80027fc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027a0:	2200      	movs	r2, #0
 80027a2:	2180      	movs	r1, #128	@ 0x80
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fa13 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e04d      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	2bff      	cmp	r3, #255	@ 0xff
 80027bc:	d90e      	bls.n	80027dc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2201      	movs	r2, #1
 80027c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	8979      	ldrh	r1, [r7, #10]
 80027cc:	2300      	movs	r3, #0
 80027ce:	9300      	str	r3, [sp, #0]
 80027d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fbbf 	bl	8002f58 <I2C_TransferConfig>
 80027da:	e00f      	b.n	80027fc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	8979      	ldrh	r1, [r7, #10]
 80027ee:	2300      	movs	r3, #0
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fbae 	bl	8002f58 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d19a      	bne.n	800273c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fa80 	bl	8002d10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e01a      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2220      	movs	r2, #32
 8002820:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <HAL_I2C_Mem_Read+0x230>)
 800282e:	400b      	ands	r3, r1
 8002830:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	e000      	b.n	8002850 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800284e:	2302      	movs	r3, #2
  }
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	80002400 	.word	0x80002400
 800285c:	fe00e800 	.word	0xfe00e800

08002860 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	@ 0x28
 8002864:	af02      	add	r7, sp, #8
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	607a      	str	r2, [r7, #4]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	460b      	mov	r3, r1
 800286e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	f040 80d6 	bne.w	8002a2e <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800288c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002890:	d101      	bne.n	8002896 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002892:	2302      	movs	r3, #2
 8002894:	e0cc      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2C_IsDeviceReady+0x44>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e0c5      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x1d0>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2224      	movs	r2, #36	@ 0x24
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d107      	bne.n	80028d2 <HAL_I2C_IsDeviceReady+0x72>
 80028c2:	897b      	ldrh	r3, [r7, #10]
 80028c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80028d0:	e006      	b.n	80028e0 <HAL_I2C_IsDeviceReady+0x80>
 80028d2:	897b      	ldrh	r3, [r7, #10]
 80028d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80028dc:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80028e6:	f7ff fa1d 	bl	8001d24 <HAL_GetTick>
 80028ea:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b20      	cmp	r3, #32
 80028f8:	bf0c      	ite	eq
 80028fa:	2301      	moveq	r3, #1
 80028fc:	2300      	movne	r3, #0
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b10      	cmp	r3, #16
 800290e:	bf0c      	ite	eq
 8002910:	2301      	moveq	r3, #1
 8002912:	2300      	movne	r3, #0
 8002914:	b2db      	uxtb	r3, r3
 8002916:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002918:	e034      	b.n	8002984 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002920:	d01a      	beq.n	8002958 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002922:	f7ff f9ff 	bl	8001d24 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <HAL_I2C_IsDeviceReady+0xd8>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d10f      	bne.n	8002958 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002944:	f043 0220 	orr.w	r2, r3, #32
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e06b      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b20      	cmp	r3, #32
 8002964:	bf0c      	ite	eq
 8002966:	2301      	moveq	r3, #1
 8002968:	2300      	movne	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002984:	7ffb      	ldrb	r3, [r7, #31]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d102      	bne.n	8002990 <HAL_I2C_IsDeviceReady+0x130>
 800298a:	7fbb      	ldrb	r3, [r7, #30]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0c4      	beq.n	800291a <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b10      	cmp	r3, #16
 800299c:	d01a      	beq.n	80029d4 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	2120      	movs	r1, #32
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 f911 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e03b      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2220      	movs	r2, #32
 80029be:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80029d0:	2300      	movs	r3, #0
 80029d2:	e02d      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	2120      	movs	r1, #32
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f8f6 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e020      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2210      	movs	r2, #16
 80029f4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2220      	movs	r2, #32
 80029fc:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	3301      	adds	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	f63f af56 	bhi.w	80028ba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f043 0220 	orr.w	r2, r3, #32
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
  }
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af02      	add	r7, sp, #8
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	4608      	mov	r0, r1
 8002a42:	4611      	mov	r1, r2
 8002a44:	461a      	mov	r2, r3
 8002a46:	4603      	mov	r3, r0
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	813b      	strh	r3, [r7, #8]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a52:	88fb      	ldrh	r3, [r7, #6]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	8979      	ldrh	r1, [r7, #10]
 8002a58:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <I2C_RequestMemoryWrite+0xa4>)
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	f000 fa79 	bl	8002f58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	69b9      	ldr	r1, [r7, #24]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f909 	bl	8002c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e02c      	b.n	8002ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d105      	bne.n	8002a8c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a80:	893b      	ldrh	r3, [r7, #8]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a8a:	e015      	b.n	8002ab8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a8c:	893b      	ldrh	r3, [r7, #8]
 8002a8e:	0a1b      	lsrs	r3, r3, #8
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	69b9      	ldr	r1, [r7, #24]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f8ef 	bl	8002c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e012      	b.n	8002ad4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002aae:	893b      	ldrh	r3, [r7, #8]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2180      	movs	r1, #128	@ 0x80
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 f884 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	80002000 	.word	0x80002000

08002ae0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af02      	add	r7, sp, #8
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	4608      	mov	r0, r1
 8002aea:	4611      	mov	r1, r2
 8002aec:	461a      	mov	r2, r3
 8002aee:	4603      	mov	r3, r0
 8002af0:	817b      	strh	r3, [r7, #10]
 8002af2:	460b      	mov	r3, r1
 8002af4:	813b      	strh	r3, [r7, #8]
 8002af6:	4613      	mov	r3, r2
 8002af8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002afa:	88fb      	ldrh	r3, [r7, #6]
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	8979      	ldrh	r1, [r7, #10]
 8002b00:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <I2C_RequestMemoryRead+0xa4>)
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2300      	movs	r3, #0
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 fa26 	bl	8002f58 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f8b6 	bl	8002c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e02c      	b.n	8002b7a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d105      	bne.n	8002b32 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b26:	893b      	ldrh	r3, [r7, #8]
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b30:	e015      	b.n	8002b5e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b32:	893b      	ldrh	r3, [r7, #8]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	69b9      	ldr	r1, [r7, #24]
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f89c 	bl	8002c82 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e012      	b.n	8002b7a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b54:	893b      	ldrh	r3, [r7, #8]
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2200      	movs	r2, #0
 8002b66:	2140      	movs	r1, #64	@ 0x40
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f000 f831 	bl	8002bd0 <I2C_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e000      	b.n	8002b7a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	80002000 	.word	0x80002000

08002b88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d103      	bne.n	8002ba6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d007      	beq.n	8002bc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	619a      	str	r2, [r3, #24]
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be0:	e03b      	b.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	6839      	ldr	r1, [r7, #0]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8d6 	bl	8002d98 <I2C_IsErrorOccurred>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e041      	b.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d02d      	beq.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7ff f891 	bl	8001d24 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d122      	bne.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	bf0c      	ite	eq
 8002c24:	2301      	moveq	r3, #1
 8002c26:	2300      	movne	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d113      	bne.n	8002c5a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c36:	f043 0220 	orr.w	r2, r3, #32
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2220      	movs	r2, #32
 8002c42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e00f      	b.n	8002c7a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699a      	ldr	r2, [r3, #24]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4013      	ands	r3, r2
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d0b4      	beq.n	8002be2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b084      	sub	sp, #16
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	60f8      	str	r0, [r7, #12]
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c8e:	e033      	b.n	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	68b9      	ldr	r1, [r7, #8]
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 f87f 	bl	8002d98 <I2C_IsErrorOccurred>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d001      	beq.n	8002ca4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e031      	b.n	8002d08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002caa:	d025      	beq.n	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cac:	f7ff f83a 	bl	8001d24 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d302      	bcc.n	8002cc2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11a      	bne.n	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d013      	beq.n	8002cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd4:	f043 0220 	orr.w	r2, r3, #32
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e007      	b.n	8002d08 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d1c4      	bne.n	8002c90 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d1c:	e02f      	b.n	8002d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	68b9      	ldr	r1, [r7, #8]
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f838 	bl	8002d98 <I2C_IsErrorOccurred>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e02d      	b.n	8002d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d32:	f7fe fff7 	bl	8001d24 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d302      	bcc.n	8002d48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d11a      	bne.n	8002d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d013      	beq.n	8002d7e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2220      	movs	r2, #32
 8002d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e007      	b.n	8002d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f003 0320 	and.w	r3, r3, #32
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	d1c8      	bne.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	@ 0x28
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d068      	beq.n	8002e96 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2210      	movs	r2, #16
 8002dca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002dcc:	e049      	b.n	8002e62 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d045      	beq.n	8002e62 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7fe ffa5 	bl	8001d24 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_IsErrorOccurred+0x54>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d13a      	bne.n	8002e62 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002df6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dfe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e0e:	d121      	bne.n	8002e54 <I2C_IsErrorOccurred+0xbc>
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e16:	d01d      	beq.n	8002e54 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	2b20      	cmp	r3, #32
 8002e1c:	d01a      	beq.n	8002e54 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e2e:	f7fe ff79 	bl	8001d24 <HAL_GetTick>
 8002e32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e34:	e00e      	b.n	8002e54 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e36:	f7fe ff75 	bl	8001d24 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b19      	cmp	r3, #25
 8002e42:	d907      	bls.n	8002e54 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	f043 0320 	orr.w	r3, r3, #32
 8002e4a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e52:	e006      	b.n	8002e62 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d1e9      	bne.n	8002e36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d003      	beq.n	8002e78 <I2C_IsErrorOccurred+0xe0>
 8002e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d0aa      	beq.n	8002dce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2220      	movs	r2, #32
 8002e86:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f043 0304 	orr.w	r3, r3, #4
 8002e8e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002eb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00b      	beq.n	8002ee2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f043 0308 	orr.w	r3, r3, #8
 8002ed0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f043 0302 	orr.w	r3, r3, #2
 8002ef2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002efc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d01c      	beq.n	8002f46 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff fe3b 	bl	8002b88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <I2C_IsErrorOccurred+0x1bc>)
 8002f1e:	400b      	ands	r3, r1
 8002f20:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3728      	adds	r7, #40	@ 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	fe00e800 	.word	0xfe00e800

08002f58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	460b      	mov	r3, r1
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	4613      	mov	r3, r2
 8002f68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f70:	7a7b      	ldrb	r3, [r7, #9]
 8002f72:	041b      	lsls	r3, r3, #16
 8002f74:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	0d5b      	lsrs	r3, r3, #21
 8002f92:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002f96:	4b08      	ldr	r3, [pc, #32]	@ (8002fb8 <I2C_TransferConfig+0x60>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	ea02 0103 	and.w	r1, r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	03ff63ff 	.word	0x03ff63ff

08002fbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d138      	bne.n	8003044 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d101      	bne.n	8002fe0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fdc:	2302      	movs	r3, #2
 8002fde:	e032      	b.n	8003046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	@ 0x24
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 0201 	bic.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800300e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6819      	ldr	r1, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003040:	2300      	movs	r3, #0
 8003042:	e000      	b.n	8003046 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003044:	2302      	movs	r3, #2
  }
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003052:	b480      	push	{r7}
 8003054:	b085      	sub	sp, #20
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
 800305a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b20      	cmp	r3, #32
 8003066:	d139      	bne.n	80030dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003072:	2302      	movs	r3, #2
 8003074:	e033      	b.n	80030de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2224      	movs	r2, #36	@ 0x24
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	021b      	lsls	r3, r3, #8
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e08f      	b.n	800321e <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d106      	bne.n	800311e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fe f92b 	bl	8001374 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d004      	beq.n	8003140 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800313e:	d103      	bne.n	8003148 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f023 031e 	bic.w	r3, r3, #30
 8003146:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003150:	4293      	cmp	r3, r2
 8003152:	d005      	beq.n	8003160 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800315a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800315e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4b31      	ldr	r3, [pc, #196]	@ (8003228 <HAL_LPTIM_Init+0x13c>)
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003170:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003176:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 800317c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003182:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4313      	orrs	r3, r2
 8003188:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d107      	bne.n	80031a2 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800319a:	4313      	orrs	r3, r2
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d004      	beq.n	80031b4 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031b2:	d107      	bne.n	80031c4 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80031bc:	4313      	orrs	r3, r2
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00a      	beq.n	80031e6 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031d8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80031de:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a0e      	ldr	r2, [pc, #56]	@ (800322c <HAL_LPTIM_Init+0x140>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d108      	bne.n	800320a <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	621a      	str	r2, [r3, #32]
 8003208:	e004      	b.n	8003214 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003212:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	ff19f1fe 	.word	0xff19f1fe
 800322c:	40007c00 	.word	0x40007c00

08003230 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10d      	bne.n	8003262 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d106      	bne.n	8003262 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2201      	movs	r2, #1
 800325a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 f882 	bl	8003366 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b02      	cmp	r3, #2
 800326e:	d10d      	bne.n	800328c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b02      	cmp	r3, #2
 800327c:	d106      	bne.n	800328c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2202      	movs	r2, #2
 8003284:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f877 	bl	800337a <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b04      	cmp	r3, #4
 8003298:	d10d      	bne.n	80032b6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b04      	cmp	r3, #4
 80032a6:	d106      	bne.n	80032b6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2204      	movs	r2, #4
 80032ae:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f86c 	bl	800338e <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d10d      	bne.n	80032e0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0308 	and.w	r3, r3, #8
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d106      	bne.n	80032e0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2208      	movs	r2, #8
 80032d8:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f861 	bl	80033a2 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b10      	cmp	r3, #16
 80032ec:	d10d      	bne.n	800330a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b10      	cmp	r3, #16
 80032fa:	d106      	bne.n	800330a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2210      	movs	r2, #16
 8003302:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f856 	bl	80033b6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0320 	and.w	r3, r3, #32
 8003314:	2b20      	cmp	r3, #32
 8003316:	d10d      	bne.n	8003334 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b20      	cmp	r3, #32
 8003324:	d106      	bne.n	8003334 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2220      	movs	r2, #32
 800332c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f84b 	bl	80033ca <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800333e:	2b40      	cmp	r3, #64	@ 0x40
 8003340:	d10d      	bne.n	800335e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334c:	2b40      	cmp	r3, #64	@ 0x40
 800334e:	d106      	bne.n	800335e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2240      	movs	r2, #64	@ 0x40
 8003356:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f840 	bl	80033de <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}

08003366 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f8:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a04      	ldr	r2, [pc, #16]	@ (8003410 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40007000 	.word	0x40007000

08003414 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003418:	4b04      	ldr	r3, [pc, #16]	@ (800342c <HAL_PWREx_GetVoltageRange+0x18>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003420:	4618      	mov	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	40007000 	.word	0x40007000

08003430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800343e:	d130      	bne.n	80034a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003440:	4b23      	ldr	r3, [pc, #140]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003448:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800344c:	d038      	beq.n	80034c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800344e:	4b20      	ldr	r3, [pc, #128]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003456:	4a1e      	ldr	r2, [pc, #120]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003458:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800345e:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2232      	movs	r2, #50	@ 0x32
 8003464:	fb02 f303 	mul.w	r3, r2, r3
 8003468:	4a1b      	ldr	r2, [pc, #108]	@ (80034d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800346a:	fba2 2303 	umull	r2, r3, r2, r3
 800346e:	0c9b      	lsrs	r3, r3, #18
 8003470:	3301      	adds	r3, #1
 8003472:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003474:	e002      	b.n	800347c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3b01      	subs	r3, #1
 800347a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800347c:	4b14      	ldr	r3, [pc, #80]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003484:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003488:	d102      	bne.n	8003490 <HAL_PWREx_ControlVoltageScaling+0x60>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f2      	bne.n	8003476 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003490:	4b0f      	ldr	r3, [pc, #60]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349c:	d110      	bne.n	80034c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e00f      	b.n	80034c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80034a2:	4b0b      	ldr	r3, [pc, #44]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ae:	d007      	beq.n	80034c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034b0:	4b07      	ldr	r3, [pc, #28]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034b8:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80034ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	40007000 	.word	0x40007000
 80034d4:	20000000 	.word	0x20000000
 80034d8:	431bde83 	.word	0x431bde83

080034dc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d102      	bne.n	80034f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f000 bc02 	b.w	8003cf4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f0:	4b96      	ldr	r3, [pc, #600]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034fa:	4b94      	ldr	r3, [pc, #592]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80e4 	beq.w	80036da <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d007      	beq.n	8003528 <HAL_RCC_OscConfig+0x4c>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b0c      	cmp	r3, #12
 800351c:	f040 808b 	bne.w	8003636 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b01      	cmp	r3, #1
 8003524:	f040 8087 	bne.w	8003636 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003528:	4b88      	ldr	r3, [pc, #544]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_OscConfig+0x64>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e3d9      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1a      	ldr	r2, [r3, #32]
 8003544:	4b81      	ldr	r3, [pc, #516]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d004      	beq.n	800355a <HAL_RCC_OscConfig+0x7e>
 8003550:	4b7e      	ldr	r3, [pc, #504]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003558:	e005      	b.n	8003566 <HAL_RCC_OscConfig+0x8a>
 800355a:	4b7c      	ldr	r3, [pc, #496]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 800355c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003566:	4293      	cmp	r3, r2
 8003568:	d223      	bcs.n	80035b2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fd8c 	bl	800408c <RCC_SetFlashLatencyFromMSIRange>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e3ba      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800357e:	4b73      	ldr	r3, [pc, #460]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a72      	ldr	r2, [pc, #456]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003584:	f043 0308 	orr.w	r3, r3, #8
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	4b70      	ldr	r3, [pc, #448]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	496d      	ldr	r1, [pc, #436]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800359c:	4b6b      	ldr	r3, [pc, #428]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	4968      	ldr	r1, [pc, #416]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	604b      	str	r3, [r1, #4]
 80035b0:	e025      	b.n	80035fe <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b2:	4b66      	ldr	r3, [pc, #408]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a65      	ldr	r2, [pc, #404]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80035b8:	f043 0308 	orr.w	r3, r3, #8
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b63      	ldr	r3, [pc, #396]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	4960      	ldr	r1, [pc, #384]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035d0:	4b5e      	ldr	r3, [pc, #376]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	495b      	ldr	r1, [pc, #364]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fd4c 	bl	800408c <RCC_SetFlashLatencyFromMSIRange>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e37a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035fe:	f000 fc81 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003602:	4602      	mov	r2, r0
 8003604:	4b51      	ldr	r3, [pc, #324]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	4950      	ldr	r1, [pc, #320]	@ (8003750 <HAL_RCC_OscConfig+0x274>)
 8003610:	5ccb      	ldrb	r3, [r1, r3]
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a4e      	ldr	r2, [pc, #312]	@ (8003754 <HAL_RCC_OscConfig+0x278>)
 800361c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800361e:	4b4e      	ldr	r3, [pc, #312]	@ (8003758 <HAL_RCC_OscConfig+0x27c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe fb2e 	bl	8001c84 <HAL_InitTick>
 8003628:	4603      	mov	r3, r0
 800362a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800362c:	7bfb      	ldrb	r3, [r7, #15]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d052      	beq.n	80036d8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003632:	7bfb      	ldrb	r3, [r7, #15]
 8003634:	e35e      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d032      	beq.n	80036a4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800363e:	4b43      	ldr	r3, [pc, #268]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a42      	ldr	r2, [pc, #264]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800364a:	f7fe fb6b 	bl	8001d24 <HAL_GetTick>
 800364e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003650:	e008      	b.n	8003664 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003652:	f7fe fb67 	bl	8001d24 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e347      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003664:	4b39      	ldr	r3, [pc, #228]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0f0      	beq.n	8003652 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003670:	4b36      	ldr	r3, [pc, #216]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a35      	ldr	r2, [pc, #212]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003676:	f043 0308 	orr.w	r3, r3, #8
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	4b33      	ldr	r3, [pc, #204]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4930      	ldr	r1, [pc, #192]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800368e:	4b2f      	ldr	r3, [pc, #188]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	492b      	ldr	r1, [pc, #172]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
 80036a2:	e01a      	b.n	80036da <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036a4:	4b29      	ldr	r3, [pc, #164]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a28      	ldr	r2, [pc, #160]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036b0:	f7fe fb38 	bl	8001d24 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036b8:	f7fe fb34 	bl	8001d24 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e314      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036ca:	4b20      	ldr	r3, [pc, #128]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x1dc>
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d073      	beq.n	80037ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_OscConfig+0x21c>
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d10e      	bne.n	8003710 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d10b      	bne.n	8003710 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f8:	4b14      	ldr	r3, [pc, #80]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d063      	beq.n	80037cc <HAL_RCC_OscConfig+0x2f0>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d15f      	bne.n	80037cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e2f1      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003718:	d106      	bne.n	8003728 <HAL_RCC_OscConfig+0x24c>
 800371a:	4b0c      	ldr	r3, [pc, #48]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a0b      	ldr	r2, [pc, #44]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e025      	b.n	8003774 <HAL_RCC_OscConfig+0x298>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003730:	d114      	bne.n	800375c <HAL_RCC_OscConfig+0x280>
 8003732:	4b06      	ldr	r3, [pc, #24]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a05      	ldr	r2, [pc, #20]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b03      	ldr	r3, [pc, #12]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a02      	ldr	r2, [pc, #8]	@ (800374c <HAL_RCC_OscConfig+0x270>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e013      	b.n	8003774 <HAL_RCC_OscConfig+0x298>
 800374c:	40021000 	.word	0x40021000
 8003750:	08009448 	.word	0x08009448
 8003754:	20000000 	.word	0x20000000
 8003758:	20000004 	.word	0x20000004
 800375c:	4ba0      	ldr	r3, [pc, #640]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a9f      	ldr	r2, [pc, #636]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003766:	6013      	str	r3, [r2, #0]
 8003768:	4b9d      	ldr	r3, [pc, #628]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a9c      	ldr	r2, [pc, #624]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 800376e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d013      	beq.n	80037a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe fad2 	bl	8001d24 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003784:	f7fe face 	bl	8001d24 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b64      	cmp	r3, #100	@ 0x64
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e2ae      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003796:	4b92      	ldr	r3, [pc, #584]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x2a8>
 80037a2:	e014      	b.n	80037ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fe fabe 	bl	8001d24 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fe faba 	bl	8001d24 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	@ 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e29a      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037be:	4b88      	ldr	r3, [pc, #544]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x2d0>
 80037ca:	e000      	b.n	80037ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d060      	beq.n	800389c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b04      	cmp	r3, #4
 80037de:	d005      	beq.n	80037ec <HAL_RCC_OscConfig+0x310>
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d119      	bne.n	800381a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d116      	bne.n	800381a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037ec:	4b7c      	ldr	r3, [pc, #496]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_RCC_OscConfig+0x328>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e277      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003804:	4b76      	ldr	r3, [pc, #472]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	061b      	lsls	r3, r3, #24
 8003812:	4973      	ldr	r1, [pc, #460]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003814:	4313      	orrs	r3, r2
 8003816:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003818:	e040      	b.n	800389c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d023      	beq.n	800386a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003822:	4b6f      	ldr	r3, [pc, #444]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a6e      	ldr	r2, [pc, #440]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382e:	f7fe fa79 	bl	8001d24 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fe fa75 	bl	8001d24 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e255      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003848:	4b65      	ldr	r3, [pc, #404]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b62      	ldr	r3, [pc, #392]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	061b      	lsls	r3, r3, #24
 8003862:	495f      	ldr	r1, [pc, #380]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
 8003868:	e018      	b.n	800389c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b5d      	ldr	r3, [pc, #372]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a5c      	ldr	r2, [pc, #368]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003874:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003876:	f7fe fa55 	bl	8001d24 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800387e:	f7fe fa51 	bl	8001d24 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e231      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003890:	4b53      	ldr	r3, [pc, #332]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d03c      	beq.n	8003922 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01c      	beq.n	80038ea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b0:	4b4b      	ldr	r3, [pc, #300]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80038b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038b6:	4a4a      	ldr	r2, [pc, #296]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c0:	f7fe fa30 	bl	8001d24 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c8:	f7fe fa2c 	bl	8001d24 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e20c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038da:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80038dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ef      	beq.n	80038c8 <HAL_RCC_OscConfig+0x3ec>
 80038e8:	e01b      	b.n	8003922 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ea:	4b3d      	ldr	r3, [pc, #244]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80038ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038f0:	4a3b      	ldr	r2, [pc, #236]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fa:	f7fe fa13 	bl	8001d24 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003902:	f7fe fa0f 	bl	8001d24 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e1ef      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003914:	4b32      	ldr	r3, [pc, #200]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003916:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ef      	bne.n	8003902 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0304 	and.w	r3, r3, #4
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80a6 	beq.w	8003a7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003930:	2300      	movs	r3, #0
 8003932:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003934:	4b2a      	ldr	r3, [pc, #168]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10d      	bne.n	800395c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	4b27      	ldr	r3, [pc, #156]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	4a26      	ldr	r2, [pc, #152]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394a:	6593      	str	r3, [r2, #88]	@ 0x58
 800394c:	4b24      	ldr	r3, [pc, #144]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003958:	2301      	movs	r3, #1
 800395a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800395c:	4b21      	ldr	r3, [pc, #132]	@ (80039e4 <HAL_RCC_OscConfig+0x508>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003964:	2b00      	cmp	r3, #0
 8003966:	d118      	bne.n	800399a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003968:	4b1e      	ldr	r3, [pc, #120]	@ (80039e4 <HAL_RCC_OscConfig+0x508>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a1d      	ldr	r2, [pc, #116]	@ (80039e4 <HAL_RCC_OscConfig+0x508>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003972:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003974:	f7fe f9d6 	bl	8001d24 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397c:	f7fe f9d2 	bl	8001d24 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e1b2      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398e:	4b15      	ldr	r3, [pc, #84]	@ (80039e4 <HAL_RCC_OscConfig+0x508>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003996:	2b00      	cmp	r3, #0
 8003998:	d0f0      	beq.n	800397c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d108      	bne.n	80039b4 <HAL_RCC_OscConfig+0x4d8>
 80039a2:	4b0f      	ldr	r3, [pc, #60]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80039a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a8:	4a0d      	ldr	r2, [pc, #52]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039b2:	e029      	b.n	8003a08 <HAL_RCC_OscConfig+0x52c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d115      	bne.n	80039e8 <HAL_RCC_OscConfig+0x50c>
 80039bc:	4b08      	ldr	r3, [pc, #32]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c2:	4a07      	ldr	r2, [pc, #28]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80039c4:	f043 0304 	orr.w	r3, r3, #4
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039cc:	4b04      	ldr	r3, [pc, #16]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	4a03      	ldr	r2, [pc, #12]	@ (80039e0 <HAL_RCC_OscConfig+0x504>)
 80039d4:	f043 0301 	orr.w	r3, r3, #1
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039dc:	e014      	b.n	8003a08 <HAL_RCC_OscConfig+0x52c>
 80039de:	bf00      	nop
 80039e0:	40021000 	.word	0x40021000
 80039e4:	40007000 	.word	0x40007000
 80039e8:	4b9a      	ldr	r3, [pc, #616]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ee:	4a99      	ldr	r2, [pc, #612]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039f8:	4b96      	ldr	r3, [pc, #600]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fe:	4a95      	ldr	r2, [pc, #596]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003a00:	f023 0304 	bic.w	r3, r3, #4
 8003a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d016      	beq.n	8003a3e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a10:	f7fe f988 	bl	8001d24 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a18:	f7fe f984 	bl	8001d24 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e162      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2e:	4b89      	ldr	r3, [pc, #548]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ed      	beq.n	8003a18 <HAL_RCC_OscConfig+0x53c>
 8003a3c:	e015      	b.n	8003a6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3e:	f7fe f971 	bl	8001d24 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fe f96d 	bl	8001d24 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e14b      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a5c:	4b7d      	ldr	r3, [pc, #500]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ed      	bne.n	8003a46 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a6a:	7ffb      	ldrb	r3, [r7, #31]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a70:	4b78      	ldr	r3, [pc, #480]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a74:	4a77      	ldr	r2, [pc, #476]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a7a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d03c      	beq.n	8003b02 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01c      	beq.n	8003aca <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a90:	4b70      	ldr	r3, [pc, #448]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003a92:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a96:	4a6f      	ldr	r2, [pc, #444]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fe f940 	bl	8001d24 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aa8:	f7fe f93c 	bl	8001d24 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e11c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aba:	4b66      	ldr	r3, [pc, #408]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003abc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ac0:	f003 0302 	and.w	r3, r3, #2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ef      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x5cc>
 8003ac8:	e01b      	b.n	8003b02 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aca:	4b62      	ldr	r3, [pc, #392]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ad0:	4a60      	ldr	r2, [pc, #384]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003ad2:	f023 0301 	bic.w	r3, r3, #1
 8003ad6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ada:	f7fe f923 	bl	8001d24 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ae2:	f7fe f91f 	bl	8001d24 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e0ff      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003af4:	4b57      	ldr	r3, [pc, #348]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ef      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80f3 	beq.w	8003cf2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	f040 80c9 	bne.w	8003ca8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b16:	4b4f      	ldr	r3, [pc, #316]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f003 0203 	and.w	r2, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d12c      	bne.n	8003b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b34:	3b01      	subs	r3, #1
 8003b36:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d123      	bne.n	8003b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b46:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d11b      	bne.n	8003b84 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d113      	bne.n	8003b84 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b66:	085b      	lsrs	r3, r3, #1
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d109      	bne.n	8003b84 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d06b      	beq.n	8003c5c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	2b0c      	cmp	r3, #12
 8003b88:	d062      	beq.n	8003c50 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003b8a:	4b32      	ldr	r3, [pc, #200]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e0ac      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003ba0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ba4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ba6:	f7fe f8bd 	bl	8001d24 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bae:	f7fe f8b9 	bl	8001d24 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e099      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bc0:	4b24      	ldr	r3, [pc, #144]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1f0      	bne.n	8003bae <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bcc:	4b21      	ldr	r3, [pc, #132]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	4b21      	ldr	r3, [pc, #132]	@ (8003c58 <HAL_RCC_OscConfig+0x77c>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003bdc:	3a01      	subs	r2, #1
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	4311      	orrs	r1, r2
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003be6:	0212      	lsls	r2, r2, #8
 8003be8:	4311      	orrs	r1, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003bee:	0852      	lsrs	r2, r2, #1
 8003bf0:	3a01      	subs	r2, #1
 8003bf2:	0552      	lsls	r2, r2, #21
 8003bf4:	4311      	orrs	r1, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003bfa:	0852      	lsrs	r2, r2, #1
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	0652      	lsls	r2, r2, #25
 8003c00:	4311      	orrs	r1, r2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c06:	06d2      	lsls	r2, r2, #27
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	4912      	ldr	r1, [pc, #72]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c10:	4b10      	ldr	r3, [pc, #64]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a0f      	ldr	r2, [pc, #60]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003c16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c1a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a0c      	ldr	r2, [pc, #48]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003c22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c26:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c28:	f7fe f87c 	bl	8001d24 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c30:	f7fe f878 	bl	8001d24 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e058      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c42:	4b04      	ldr	r3, [pc, #16]	@ (8003c54 <HAL_RCC_OscConfig+0x778>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c4e:	e050      	b.n	8003cf2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e04f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
 8003c54:	40021000 	.word	0x40021000
 8003c58:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5c:	4b27      	ldr	r3, [pc, #156]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d144      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003c68:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a23      	ldr	r2, [pc, #140]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c74:	4b21      	ldr	r3, [pc, #132]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	4a20      	ldr	r2, [pc, #128]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003c7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c7e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c80:	f7fe f850 	bl	8001d24 <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c88:	f7fe f84c 	bl	8001d24 <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e02c      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9a:	4b18      	ldr	r3, [pc, #96]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0x7ac>
 8003ca6:	e024      	b.n	8003cf2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b0c      	cmp	r3, #12
 8003cac:	d01f      	beq.n	8003cee <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cae:	4b13      	ldr	r3, [pc, #76]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a12      	ldr	r2, [pc, #72]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003cb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cba:	f7fe f833 	bl	8001d24 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7fe f82f 	bl	8001d24 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e00f      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cd4:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1f0      	bne.n	8003cc2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003ce0:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003ce2:	68da      	ldr	r2, [r3, #12]
 8003ce4:	4905      	ldr	r1, [pc, #20]	@ (8003cfc <HAL_RCC_OscConfig+0x820>)
 8003ce6:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_RCC_OscConfig+0x824>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60cb      	str	r3, [r1, #12]
 8003cec:	e001      	b.n	8003cf2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3720      	adds	r7, #32
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40021000 	.word	0x40021000
 8003d00:	feeefffc 	.word	0xfeeefffc

08003d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0e7      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d18:	4b75      	ldr	r3, [pc, #468]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d910      	bls.n	8003d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d26:	4b72      	ldr	r3, [pc, #456]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 0207 	bic.w	r2, r3, #7
 8003d2e:	4970      	ldr	r1, [pc, #448]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b6e      	ldr	r3, [pc, #440]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0cf      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d010      	beq.n	8003d76 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689a      	ldr	r2, [r3, #8]
 8003d58:	4b66      	ldr	r3, [pc, #408]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d908      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d64:	4b63      	ldr	r3, [pc, #396]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	4960      	ldr	r1, [pc, #384]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d04c      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d107      	bne.n	8003d9a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d8a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d121      	bne.n	8003dda <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0a6      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d107      	bne.n	8003db2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003da2:	4b54      	ldr	r3, [pc, #336]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d115      	bne.n	8003dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e09a      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d107      	bne.n	8003dca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003dba:	4b4e      	ldr	r3, [pc, #312]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e08e      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dca:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e086      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dda:	4b46      	ldr	r3, [pc, #280]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f023 0203 	bic.w	r2, r3, #3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	4943      	ldr	r1, [pc, #268]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dec:	f7fd ff9a 	bl	8001d24 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fd ff96 	bl	8001d24 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e06e      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e0a:	4b3a      	ldr	r3, [pc, #232]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 020c 	and.w	r2, r3, #12
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d1eb      	bne.n	8003df4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d010      	beq.n	8003e4a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	4b31      	ldr	r3, [pc, #196]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d208      	bcs.n	8003e4a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e38:	4b2e      	ldr	r3, [pc, #184]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	492b      	ldr	r1, [pc, #172]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e4a:	4b29      	ldr	r3, [pc, #164]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d210      	bcs.n	8003e7a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e58:	4b25      	ldr	r3, [pc, #148]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f023 0207 	bic.w	r2, r3, #7
 8003e60:	4923      	ldr	r1, [pc, #140]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e68:	4b21      	ldr	r3, [pc, #132]	@ (8003ef0 <HAL_RCC_ClockConfig+0x1ec>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e036      	b.n	8003ee8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0304 	and.w	r3, r3, #4
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d008      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	4918      	ldr	r1, [pc, #96]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003e94:	4313      	orrs	r3, r2
 8003e96:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0308 	and.w	r3, r3, #8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ea4:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4910      	ldr	r1, [pc, #64]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eb8:	f000 f824 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8003ef4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	091b      	lsrs	r3, r3, #4
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	490b      	ldr	r1, [pc, #44]	@ (8003ef8 <HAL_RCC_ClockConfig+0x1f4>)
 8003eca:	5ccb      	ldrb	r3, [r1, r3]
 8003ecc:	f003 031f 	and.w	r3, r3, #31
 8003ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ed4:	4a09      	ldr	r2, [pc, #36]	@ (8003efc <HAL_RCC_ClockConfig+0x1f8>)
 8003ed6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ed8:	4b09      	ldr	r3, [pc, #36]	@ (8003f00 <HAL_RCC_ClockConfig+0x1fc>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fd fed1 	bl	8001c84 <HAL_InitTick>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	40022000 	.word	0x40022000
 8003ef4:	40021000 	.word	0x40021000
 8003ef8:	08009448 	.word	0x08009448
 8003efc:	20000000 	.word	0x20000000
 8003f00:	20000004 	.word	0x20000004

08003f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b089      	sub	sp, #36	@ 0x24
 8003f08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f12:	4b3e      	ldr	r3, [pc, #248]	@ (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f003 030c 	and.w	r3, r3, #12
 8003f1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	@ (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_RCC_GetSysClockFreq+0x34>
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b0c      	cmp	r3, #12
 8003f30:	d121      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d11e      	bne.n	8003f76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f38:	4b34      	ldr	r3, [pc, #208]	@ (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0308 	and.w	r3, r3, #8
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f44:	4b31      	ldr	r3, [pc, #196]	@ (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4a:	0a1b      	lsrs	r3, r3, #8
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	61fb      	str	r3, [r7, #28]
 8003f52:	e005      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f54:	4b2d      	ldr	r3, [pc, #180]	@ (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	091b      	lsrs	r3, r3, #4
 8003f5a:	f003 030f 	and.w	r3, r3, #15
 8003f5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003f60:	4a2b      	ldr	r2, [pc, #172]	@ (8004010 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f68:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10d      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d102      	bne.n	8003f82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f7c:	4b25      	ldr	r3, [pc, #148]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	e004      	b.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	2b08      	cmp	r3, #8
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f88:	4b23      	ldr	r3, [pc, #140]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x114>)
 8003f8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b0c      	cmp	r3, #12
 8003f90:	d134      	bne.n	8003ffc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f92:	4b1e      	ldr	r3, [pc, #120]	@ (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d003      	beq.n	8003faa <HAL_RCC_GetSysClockFreq+0xa6>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d003      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0xac>
 8003fa8:	e005      	b.n	8003fb6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003faa:	4b1a      	ldr	r3, [pc, #104]	@ (8004014 <HAL_RCC_GetSysClockFreq+0x110>)
 8003fac:	617b      	str	r3, [r7, #20]
      break;
 8003fae:	e005      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003fb0:	4b19      	ldr	r3, [pc, #100]	@ (8004018 <HAL_RCC_GetSysClockFreq+0x114>)
 8003fb2:	617b      	str	r3, [r7, #20]
      break;
 8003fb4:	e002      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	617b      	str	r3, [r7, #20]
      break;
 8003fba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fbc:	4b13      	ldr	r3, [pc, #76]	@ (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003fca:	4b10      	ldr	r3, [pc, #64]	@ (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	fb03 f202 	mul.w	r2, r3, r2
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800400c <HAL_RCC_GetSysClockFreq+0x108>)
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	0e5b      	lsrs	r3, r3, #25
 8003fe8:	f003 0303 	and.w	r3, r3, #3
 8003fec:	3301      	adds	r3, #1
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3724      	adds	r7, #36	@ 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40021000 	.word	0x40021000
 8004010:	08009460 	.word	0x08009460
 8004014:	00f42400 	.word	0x00f42400
 8004018:	007a1200 	.word	0x007a1200

0800401c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004020:	4b03      	ldr	r3, [pc, #12]	@ (8004030 <HAL_RCC_GetHCLKFreq+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000000 	.word	0x20000000

08004034 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004038:	f7ff fff0 	bl	800401c <HAL_RCC_GetHCLKFreq>
 800403c:	4602      	mov	r2, r0
 800403e:	4b06      	ldr	r3, [pc, #24]	@ (8004058 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	4904      	ldr	r1, [pc, #16]	@ (800405c <HAL_RCC_GetPCLK1Freq+0x28>)
 800404a:	5ccb      	ldrb	r3, [r1, r3]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40021000 	.word	0x40021000
 800405c:	08009458 	.word	0x08009458

08004060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004064:	f7ff ffda 	bl	800401c <HAL_RCC_GetHCLKFreq>
 8004068:	4602      	mov	r2, r0
 800406a:	4b06      	ldr	r3, [pc, #24]	@ (8004084 <HAL_RCC_GetPCLK2Freq+0x24>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	0adb      	lsrs	r3, r3, #11
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	4904      	ldr	r1, [pc, #16]	@ (8004088 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004076:	5ccb      	ldrb	r3, [r1, r3]
 8004078:	f003 031f 	and.w	r3, r3, #31
 800407c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004080:	4618      	mov	r0, r3
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	08009458 	.word	0x08009458

0800408c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004094:	2300      	movs	r3, #0
 8004096:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004098:	4b2a      	ldr	r3, [pc, #168]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800409c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80040a4:	f7ff f9b6 	bl	8003414 <HAL_PWREx_GetVoltageRange>
 80040a8:	6178      	str	r0, [r7, #20]
 80040aa:	e014      	b.n	80040d6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80040ac:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040b0:	4a24      	ldr	r2, [pc, #144]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b8:	4b22      	ldr	r3, [pc, #136]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80040c4:	f7ff f9a6 	bl	8003414 <HAL_PWREx_GetVoltageRange>
 80040c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80040ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004144 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040dc:	d10b      	bne.n	80040f6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2b80      	cmp	r3, #128	@ 0x80
 80040e2:	d919      	bls.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80040e8:	d902      	bls.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80040ea:	2302      	movs	r3, #2
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	e013      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80040f0:	2301      	movs	r3, #1
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	e010      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b80      	cmp	r3, #128	@ 0x80
 80040fa:	d902      	bls.n	8004102 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80040fc:	2303      	movs	r3, #3
 80040fe:	613b      	str	r3, [r7, #16]
 8004100:	e00a      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b80      	cmp	r3, #128	@ 0x80
 8004106:	d102      	bne.n	800410e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004108:	2302      	movs	r3, #2
 800410a:	613b      	str	r3, [r7, #16]
 800410c:	e004      	b.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b70      	cmp	r3, #112	@ 0x70
 8004112:	d101      	bne.n	8004118 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004114:	2301      	movs	r3, #1
 8004116:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004118:	4b0b      	ldr	r3, [pc, #44]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f023 0207 	bic.w	r2, r3, #7
 8004120:	4909      	ldr	r1, [pc, #36]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	4313      	orrs	r3, r2
 8004126:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004128:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0307 	and.w	r3, r3, #7
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40021000 	.word	0x40021000
 8004148:	40022000 	.word	0x40022000

0800414c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004154:	2300      	movs	r3, #0
 8004156:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004158:	2300      	movs	r3, #0
 800415a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004164:	2b00      	cmp	r3, #0
 8004166:	d031      	beq.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800416c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004170:	d01a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004172:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004176:	d814      	bhi.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800417c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004180:	d10f      	bne.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004182:	4b5d      	ldr	r3, [pc, #372]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4a5c      	ldr	r2, [pc, #368]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800418c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800418e:	e00c      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fa32 	bl	8004600 <RCCEx_PLLSAI1_Config>
 800419c:	4603      	mov	r3, r0
 800419e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80041a0:	e003      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	74fb      	strb	r3, [r7, #19]
      break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80041a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041aa:	7cfb      	ldrb	r3, [r7, #19]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041b0:	4b51      	ldr	r3, [pc, #324]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041be:	494e      	ldr	r1, [pc, #312]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041c6:	e001      	b.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c8:	7cfb      	ldrb	r3, [r7, #19]
 80041ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 809e 	beq.w	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041de:	4b46      	ldr	r3, [pc, #280]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80041ee:	2300      	movs	r3, #0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f4:	4b40      	ldr	r3, [pc, #256]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f8:	4a3f      	ldr	r2, [pc, #252]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004200:	4b3d      	ldr	r3, [pc, #244]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800420c:	2301      	movs	r3, #1
 800420e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004210:	4b3a      	ldr	r3, [pc, #232]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a39      	ldr	r2, [pc, #228]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004216:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800421c:	f7fd fd82 	bl	8001d24 <HAL_GetTick>
 8004220:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004222:	e009      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004224:	f7fd fd7e 	bl	8001d24 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d902      	bls.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	74fb      	strb	r3, [r7, #19]
        break;
 8004236:	e005      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004238:	4b30      	ldr	r3, [pc, #192]	@ (80042fc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0ef      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d15a      	bne.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800424a:	4b2b      	ldr	r3, [pc, #172]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800424c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004250:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004254:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01e      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	429a      	cmp	r2, r3
 8004264:	d019      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004266:	4b24      	ldr	r3, [pc, #144]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004270:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004272:	4b21      	ldr	r3, [pc, #132]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004278:	4a1f      	ldr	r2, [pc, #124]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800427a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800427e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004282:	4b1d      	ldr	r3, [pc, #116]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004288:	4a1b      	ldr	r2, [pc, #108]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800428a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004292:	4a19      	ldr	r2, [pc, #100]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d016      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a4:	f7fd fd3e 	bl	8001d24 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042aa:	e00b      	b.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fd fd3a 	bl	8001d24 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d902      	bls.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	74fb      	strb	r3, [r7, #19]
            break;
 80042c2:	e006      	b.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c4:	4b0c      	ldr	r3, [pc, #48]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0ec      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80042d2:	7cfb      	ldrb	r3, [r7, #19]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042d8:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042de:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e6:	4904      	ldr	r1, [pc, #16]	@ (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80042ee:	e009      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80042f0:	7cfb      	ldrb	r3, [r7, #19]
 80042f2:	74bb      	strb	r3, [r7, #18]
 80042f4:	e006      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80042f6:	bf00      	nop
 80042f8:	40021000 	.word	0x40021000
 80042fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004304:	7c7b      	ldrb	r3, [r7, #17]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d105      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800430a:	4b8d      	ldr	r3, [pc, #564]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800430c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430e:	4a8c      	ldr	r2, [pc, #560]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004310:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004314:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00a      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004322:	4b87      	ldr	r3, [pc, #540]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004328:	f023 0203 	bic.w	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	4983      	ldr	r1, [pc, #524]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004332:	4313      	orrs	r3, r2
 8004334:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00a      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004344:	4b7e      	ldr	r3, [pc, #504]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434a:	f023 020c 	bic.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	497b      	ldr	r1, [pc, #492]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0304 	and.w	r3, r3, #4
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004366:	4b76      	ldr	r3, [pc, #472]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004374:	4972      	ldr	r1, [pc, #456]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004388:	4b6d      	ldr	r3, [pc, #436]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004396:	496a      	ldr	r1, [pc, #424]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043aa:	4b65      	ldr	r3, [pc, #404]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	4961      	ldr	r1, [pc, #388]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80043cc:	4b5c      	ldr	r3, [pc, #368]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	4959      	ldr	r1, [pc, #356]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ee:	4b54      	ldr	r3, [pc, #336]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fc:	4950      	ldr	r1, [pc, #320]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004410:	4b4b      	ldr	r3, [pc, #300]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441e:	4948      	ldr	r1, [pc, #288]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004432:	4b43      	ldr	r3, [pc, #268]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004438:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	493f      	ldr	r1, [pc, #252]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d028      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004454:	4b3a      	ldr	r3, [pc, #232]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004462:	4937      	ldr	r1, [pc, #220]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800446e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004472:	d106      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004474:	4b32      	ldr	r3, [pc, #200]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a31      	ldr	r2, [pc, #196]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800447a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800447e:	60d3      	str	r3, [r2, #12]
 8004480:	e011      	b.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004486:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800448a:	d10c      	bne.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	3304      	adds	r3, #4
 8004490:	2101      	movs	r1, #1
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f8b4 	bl	8004600 <RCCEx_PLLSAI1_Config>
 8004498:	4603      	mov	r3, r0
 800449a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800449c:	7cfb      	ldrb	r3, [r7, #19]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 80044a2:	7cfb      	ldrb	r3, [r7, #19]
 80044a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d028      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044b2:	4b23      	ldr	r3, [pc, #140]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044c0:	491f      	ldr	r1, [pc, #124]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044d0:	d106      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80044d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044dc:	60d3      	str	r3, [r2, #12]
 80044de:	e011      	b.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80044e8:	d10c      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3304      	adds	r3, #4
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f000 f885 	bl	8004600 <RCCEx_PLLSAI1_Config>
 80044f6:	4603      	mov	r3, r0
 80044f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044fa:	7cfb      	ldrb	r3, [r7, #19]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8004500:	7cfb      	ldrb	r3, [r7, #19]
 8004502:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d02b      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004510:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004516:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800451e:	4908      	ldr	r1, [pc, #32]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800452a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800452e:	d109      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004530:	4b03      	ldr	r3, [pc, #12]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a02      	ldr	r2, [pc, #8]	@ (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004536:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800453a:	60d3      	str	r3, [r2, #12]
 800453c:	e014      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800453e:	bf00      	nop
 8004540:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004548:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800454c:	d10c      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	3304      	adds	r3, #4
 8004552:	2101      	movs	r1, #1
 8004554:	4618      	mov	r0, r3
 8004556:	f000 f853 	bl	8004600 <RCCEx_PLLSAI1_Config>
 800455a:	4603      	mov	r3, r0
 800455c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800455e:	7cfb      	ldrb	r3, [r7, #19]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01c      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004574:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004582:	4916      	ldr	r1, [pc, #88]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004584:	4313      	orrs	r3, r2
 8004586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004592:	d10c      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 f830 	bl	8004600 <RCCEx_PLLSAI1_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 80045aa:	7cfb      	ldrb	r3, [r7, #19]
 80045ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045ba:	4b08      	ldr	r3, [pc, #32]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c8:	4904      	ldr	r1, [pc, #16]	@ (80045dc <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40021000 	.word	0x40021000

080045e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80045e4:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a04      	ldr	r2, [pc, #16]	@ (80045fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80045ea:	f043 0304 	orr.w	r3, r3, #4
 80045ee:	6013      	str	r3, [r2, #0]
}
 80045f0:	bf00      	nop
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000

08004600 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800460e:	4b74      	ldr	r3, [pc, #464]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d018      	beq.n	800464c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800461a:	4b71      	ldr	r3, [pc, #452]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0203 	and.w	r2, r3, #3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d10d      	bne.n	8004646 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
       ||
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004632:	4b6b      	ldr	r3, [pc, #428]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	091b      	lsrs	r3, r3, #4
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
       ||
 8004642:	429a      	cmp	r2, r3
 8004644:	d047      	beq.n	80046d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
 800464a:	e044      	b.n	80046d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b03      	cmp	r3, #3
 8004652:	d018      	beq.n	8004686 <RCCEx_PLLSAI1_Config+0x86>
 8004654:	2b03      	cmp	r3, #3
 8004656:	d825      	bhi.n	80046a4 <RCCEx_PLLSAI1_Config+0xa4>
 8004658:	2b01      	cmp	r3, #1
 800465a:	d002      	beq.n	8004662 <RCCEx_PLLSAI1_Config+0x62>
 800465c:	2b02      	cmp	r3, #2
 800465e:	d009      	beq.n	8004674 <RCCEx_PLLSAI1_Config+0x74>
 8004660:	e020      	b.n	80046a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004662:	4b5f      	ldr	r3, [pc, #380]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d11d      	bne.n	80046aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004672:	e01a      	b.n	80046aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004674:	4b5a      	ldr	r3, [pc, #360]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800467c:	2b00      	cmp	r3, #0
 800467e:	d116      	bne.n	80046ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004684:	e013      	b.n	80046ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004686:	4b56      	ldr	r3, [pc, #344]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10f      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004692:	4b53      	ldr	r3, [pc, #332]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800469a:	2b00      	cmp	r3, #0
 800469c:	d109      	bne.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046a2:	e006      	b.n	80046b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	73fb      	strb	r3, [r7, #15]
      break;
 80046a8:	e004      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046aa:	bf00      	nop
 80046ac:	e002      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046ae:	bf00      	nop
 80046b0:	e000      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80046b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046b4:	7bfb      	ldrb	r3, [r7, #15]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10d      	bne.n	80046d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046ba:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	430b      	orrs	r3, r1
 80046d0:	4943      	ldr	r1, [pc, #268]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d17c      	bne.n	80047d6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046dc:	4b40      	ldr	r3, [pc, #256]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a3f      	ldr	r2, [pc, #252]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046e8:	f7fd fb1c 	bl	8001d24 <HAL_GetTick>
 80046ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046ee:	e009      	b.n	8004704 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046f0:	f7fd fb18 	bl	8001d24 <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d902      	bls.n	8004704 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	73fb      	strb	r3, [r7, #15]
        break;
 8004702:	e005      	b.n	8004710 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004704:	4b36      	ldr	r3, [pc, #216]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1ef      	bne.n	80046f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004710:	7bfb      	ldrb	r3, [r7, #15]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d15f      	bne.n	80047d6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d110      	bne.n	800473e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800471c:	4b30      	ldr	r3, [pc, #192]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004724:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6892      	ldr	r2, [r2, #8]
 800472c:	0211      	lsls	r1, r2, #8
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	06d2      	lsls	r2, r2, #27
 8004734:	430a      	orrs	r2, r1
 8004736:	492a      	ldr	r1, [pc, #168]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004738:	4313      	orrs	r3, r2
 800473a:	610b      	str	r3, [r1, #16]
 800473c:	e027      	b.n	800478e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d112      	bne.n	800476a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004744:	4b26      	ldr	r3, [pc, #152]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800474c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6892      	ldr	r2, [r2, #8]
 8004754:	0211      	lsls	r1, r2, #8
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6912      	ldr	r2, [r2, #16]
 800475a:	0852      	lsrs	r2, r2, #1
 800475c:	3a01      	subs	r2, #1
 800475e:	0552      	lsls	r2, r2, #21
 8004760:	430a      	orrs	r2, r1
 8004762:	491f      	ldr	r1, [pc, #124]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004764:	4313      	orrs	r3, r2
 8004766:	610b      	str	r3, [r1, #16]
 8004768:	e011      	b.n	800478e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800476a:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004772:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	6892      	ldr	r2, [r2, #8]
 800477a:	0211      	lsls	r1, r2, #8
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	6952      	ldr	r2, [r2, #20]
 8004780:	0852      	lsrs	r2, r2, #1
 8004782:	3a01      	subs	r2, #1
 8004784:	0652      	lsls	r2, r2, #25
 8004786:	430a      	orrs	r2, r1
 8004788:	4915      	ldr	r1, [pc, #84]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800478a:	4313      	orrs	r3, r2
 800478c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800478e:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a13      	ldr	r2, [pc, #76]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004794:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004798:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479a:	f7fd fac3 	bl	8001d24 <HAL_GetTick>
 800479e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047a0:	e009      	b.n	80047b6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047a2:	f7fd fabf 	bl	8001d24 <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	1ad3      	subs	r3, r2, r3
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d902      	bls.n	80047b6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	73fb      	strb	r3, [r7, #15]
          break;
 80047b4:	e005      	b.n	80047c2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b6:	4b0a      	ldr	r3, [pc, #40]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d0ef      	beq.n	80047a2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d106      	bne.n	80047d6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047c8:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	4903      	ldr	r1, [pc, #12]	@ (80047e0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000

080047e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e095      	b.n	8004922 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d108      	bne.n	8004810 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004806:	d009      	beq.n	800481c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	61da      	str	r2, [r3, #28]
 800480e:	e005      	b.n	800481c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc ff4e 	bl	80016d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004852:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800485c:	d902      	bls.n	8004864 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	e002      	b.n	800486a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004868:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004872:	d007      	beq.n	8004884 <HAL_SPI_Init+0xa0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800487c:	d002      	beq.n	8004884 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004894:	431a      	orrs	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	431a      	orrs	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	69db      	ldr	r3, [r3, #28]
 80048b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a1b      	ldr	r3, [r3, #32]
 80048c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048c6:	ea42 0103 	orr.w	r1, r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	699b      	ldr	r3, [r3, #24]
 80048de:	0c1b      	lsrs	r3, r3, #16
 80048e0:	f003 0204 	and.w	r2, r3, #4
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f2:	f003 0308 	and.w	r3, r3, #8
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004900:	ea42 0103 	orr.w	r1, r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e040      	b.n	80049be <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7fd f8b5 	bl	8001abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2224      	movs	r2, #36	@ 0x24
 8004956:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fb0b 	bl	8004f8c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f8ae 	bl	8004ad8 <UART_SetConfig>
 800497c:	4603      	mov	r3, r0
 800497e:	2b01      	cmp	r3, #1
 8004980:	d101      	bne.n	8004986 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e01b      	b.n	80049be <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004994:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fb8a 	bl	80050d0 <UART_CheckIdleState>
 80049bc:	4603      	mov	r3, r0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b08a      	sub	sp, #40	@ 0x28
 80049ca:	af02      	add	r7, sp, #8
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	603b      	str	r3, [r7, #0]
 80049d2:	4613      	mov	r3, r2
 80049d4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049da:	2b20      	cmp	r3, #32
 80049dc:	d177      	bne.n	8004ace <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_UART_Transmit+0x24>
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e070      	b.n	8004ad0 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2221      	movs	r2, #33	@ 0x21
 80049fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049fc:	f7fd f992 	bl	8001d24 <HAL_GetTick>
 8004a00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	88fa      	ldrh	r2, [r7, #6]
 8004a06:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	88fa      	ldrh	r2, [r7, #6]
 8004a0e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a1a:	d108      	bne.n	8004a2e <HAL_UART_Transmit+0x68>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d104      	bne.n	8004a2e <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	61bb      	str	r3, [r7, #24]
 8004a2c:	e003      	b.n	8004a36 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a36:	e02f      	b.n	8004a98 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	2180      	movs	r1, #128	@ 0x80
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fbec 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d004      	beq.n	8004a58 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e03b      	b.n	8004ad0 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	881a      	ldrh	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a6a:	b292      	uxth	r2, r2
 8004a6c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	3302      	adds	r3, #2
 8004a72:	61bb      	str	r3, [r7, #24]
 8004a74:	e007      	b.n	8004a86 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	781a      	ldrb	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3301      	adds	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a8c:	b29b      	uxth	r3, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d1c9      	bne.n	8004a38 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2140      	movs	r1, #64	@ 0x40
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	f000 fbb6 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d004      	beq.n	8004ac4 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2220      	movs	r2, #32
 8004abe:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e005      	b.n	8004ad0 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e000      	b.n	8004ad0 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004ace:	2302      	movs	r3, #2
  }
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004adc:	b08a      	sub	sp, #40	@ 0x28
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	689a      	ldr	r2, [r3, #8]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	431a      	orrs	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	431a      	orrs	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	4b9e      	ldr	r3, [pc, #632]	@ (8004d80 <UART_SetConfig+0x2a8>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b10:	430b      	orrs	r3, r1
 8004b12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a93      	ldr	r2, [pc, #588]	@ (8004d84 <UART_SetConfig+0x2ac>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b40:	4313      	orrs	r3, r2
 8004b42:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	430a      	orrs	r2, r1
 8004b56:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a8a      	ldr	r2, [pc, #552]	@ (8004d88 <UART_SetConfig+0x2b0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d126      	bne.n	8004bb0 <UART_SetConfig+0xd8>
 8004b62:	4b8a      	ldr	r3, [pc, #552]	@ (8004d8c <UART_SetConfig+0x2b4>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	2b03      	cmp	r3, #3
 8004b6e:	d81b      	bhi.n	8004ba8 <UART_SetConfig+0xd0>
 8004b70:	a201      	add	r2, pc, #4	@ (adr r2, 8004b78 <UART_SetConfig+0xa0>)
 8004b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b76:	bf00      	nop
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004b99 	.word	0x08004b99
 8004b80:	08004b91 	.word	0x08004b91
 8004b84:	08004ba1 	.word	0x08004ba1
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8e:	e0ab      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004b90:	2302      	movs	r3, #2
 8004b92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b96:	e0a7      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b9e:	e0a3      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ba6:	e09f      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bae:	e09b      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a76      	ldr	r2, [pc, #472]	@ (8004d90 <UART_SetConfig+0x2b8>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d138      	bne.n	8004c2c <UART_SetConfig+0x154>
 8004bba:	4b74      	ldr	r3, [pc, #464]	@ (8004d8c <UART_SetConfig+0x2b4>)
 8004bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc0:	f003 030c 	and.w	r3, r3, #12
 8004bc4:	2b0c      	cmp	r3, #12
 8004bc6:	d82d      	bhi.n	8004c24 <UART_SetConfig+0x14c>
 8004bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd0 <UART_SetConfig+0xf8>)
 8004bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bce:	bf00      	nop
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c25 	.word	0x08004c25
 8004bd8:	08004c25 	.word	0x08004c25
 8004bdc:	08004c25 	.word	0x08004c25
 8004be0:	08004c15 	.word	0x08004c15
 8004be4:	08004c25 	.word	0x08004c25
 8004be8:	08004c25 	.word	0x08004c25
 8004bec:	08004c25 	.word	0x08004c25
 8004bf0:	08004c0d 	.word	0x08004c0d
 8004bf4:	08004c25 	.word	0x08004c25
 8004bf8:	08004c25 	.word	0x08004c25
 8004bfc:	08004c25 	.word	0x08004c25
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0a:	e06d      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c12:	e069      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c14:	2304      	movs	r3, #4
 8004c16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1a:	e065      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c22:	e061      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c24:	2310      	movs	r3, #16
 8004c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c2a:	e05d      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a58      	ldr	r2, [pc, #352]	@ (8004d94 <UART_SetConfig+0x2bc>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d125      	bne.n	8004c82 <UART_SetConfig+0x1aa>
 8004c36:	4b55      	ldr	r3, [pc, #340]	@ (8004d8c <UART_SetConfig+0x2b4>)
 8004c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c3c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004c40:	2b30      	cmp	r3, #48	@ 0x30
 8004c42:	d016      	beq.n	8004c72 <UART_SetConfig+0x19a>
 8004c44:	2b30      	cmp	r3, #48	@ 0x30
 8004c46:	d818      	bhi.n	8004c7a <UART_SetConfig+0x1a2>
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d00a      	beq.n	8004c62 <UART_SetConfig+0x18a>
 8004c4c:	2b20      	cmp	r3, #32
 8004c4e:	d814      	bhi.n	8004c7a <UART_SetConfig+0x1a2>
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <UART_SetConfig+0x182>
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d008      	beq.n	8004c6a <UART_SetConfig+0x192>
 8004c58:	e00f      	b.n	8004c7a <UART_SetConfig+0x1a2>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c60:	e042      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c62:	2302      	movs	r3, #2
 8004c64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c68:	e03e      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c6a:	2304      	movs	r3, #4
 8004c6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c70:	e03a      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c72:	2308      	movs	r3, #8
 8004c74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c78:	e036      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c80:	e032      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a3f      	ldr	r2, [pc, #252]	@ (8004d84 <UART_SetConfig+0x2ac>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d12a      	bne.n	8004ce2 <UART_SetConfig+0x20a>
 8004c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8004d8c <UART_SetConfig+0x2b4>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c92:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c9a:	d01a      	beq.n	8004cd2 <UART_SetConfig+0x1fa>
 8004c9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ca0:	d81b      	bhi.n	8004cda <UART_SetConfig+0x202>
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca6:	d00c      	beq.n	8004cc2 <UART_SetConfig+0x1ea>
 8004ca8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cac:	d815      	bhi.n	8004cda <UART_SetConfig+0x202>
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <UART_SetConfig+0x1e2>
 8004cb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb6:	d008      	beq.n	8004cca <UART_SetConfig+0x1f2>
 8004cb8:	e00f      	b.n	8004cda <UART_SetConfig+0x202>
 8004cba:	2300      	movs	r3, #0
 8004cbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc0:	e012      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cc2:	2302      	movs	r3, #2
 8004cc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cc8:	e00e      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cca:	2304      	movs	r3, #4
 8004ccc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd0:	e00a      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cd8:	e006      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004cda:	2310      	movs	r3, #16
 8004cdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce0:	e002      	b.n	8004ce8 <UART_SetConfig+0x210>
 8004ce2:	2310      	movs	r3, #16
 8004ce4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a25      	ldr	r2, [pc, #148]	@ (8004d84 <UART_SetConfig+0x2ac>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	f040 808a 	bne.w	8004e08 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d824      	bhi.n	8004d46 <UART_SetConfig+0x26e>
 8004cfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004d04 <UART_SetConfig+0x22c>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d47 	.word	0x08004d47
 8004d0c:	08004d31 	.word	0x08004d31
 8004d10:	08004d47 	.word	0x08004d47
 8004d14:	08004d37 	.word	0x08004d37
 8004d18:	08004d47 	.word	0x08004d47
 8004d1c:	08004d47 	.word	0x08004d47
 8004d20:	08004d47 	.word	0x08004d47
 8004d24:	08004d3f 	.word	0x08004d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7ff f984 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8004d2c:	61f8      	str	r0, [r7, #28]
        break;
 8004d2e:	e010      	b.n	8004d52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d30:	4b19      	ldr	r3, [pc, #100]	@ (8004d98 <UART_SetConfig+0x2c0>)
 8004d32:	61fb      	str	r3, [r7, #28]
        break;
 8004d34:	e00d      	b.n	8004d52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d36:	f7ff f8e5 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8004d3a:	61f8      	str	r0, [r7, #28]
        break;
 8004d3c:	e009      	b.n	8004d52 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d42:	61fb      	str	r3, [r7, #28]
        break;
 8004d44:	e005      	b.n	8004d52 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8109 	beq.w	8004f6c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d305      	bcc.n	8004d76 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d912      	bls.n	8004d9c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d7c:	e0f6      	b.n	8004f6c <UART_SetConfig+0x494>
 8004d7e:	bf00      	nop
 8004d80:	efff69f3 	.word	0xefff69f3
 8004d84:	40008000 	.word	0x40008000
 8004d88:	40013800 	.word	0x40013800
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40004400 	.word	0x40004400
 8004d94:	40004800 	.word	0x40004800
 8004d98:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	461c      	mov	r4, r3
 8004da2:	4615      	mov	r5, r2
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	f04f 0300 	mov.w	r3, #0
 8004dac:	022b      	lsls	r3, r5, #8
 8004dae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004db2:	0222      	lsls	r2, r4, #8
 8004db4:	68f9      	ldr	r1, [r7, #12]
 8004db6:	6849      	ldr	r1, [r1, #4]
 8004db8:	0849      	lsrs	r1, r1, #1
 8004dba:	2000      	movs	r0, #0
 8004dbc:	4688      	mov	r8, r1
 8004dbe:	4681      	mov	r9, r0
 8004dc0:	eb12 0a08 	adds.w	sl, r2, r8
 8004dc4:	eb43 0b09 	adc.w	fp, r3, r9
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	607a      	str	r2, [r7, #4]
 8004dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd6:	4650      	mov	r0, sl
 8004dd8:	4659      	mov	r1, fp
 8004dda:	f7fb fee5 	bl	8000ba8 <__aeabi_uldivmod>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4613      	mov	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004dec:	d308      	bcc.n	8004e00 <UART_SetConfig+0x328>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004df4:	d204      	bcs.n	8004e00 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	e0b5      	b.n	8004f6c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e06:	e0b1      	b.n	8004f6c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e10:	d15d      	bne.n	8004ece <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8004e12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e16:	2b08      	cmp	r3, #8
 8004e18:	d827      	bhi.n	8004e6a <UART_SetConfig+0x392>
 8004e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e20 <UART_SetConfig+0x348>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004e45 	.word	0x08004e45
 8004e24:	08004e4d 	.word	0x08004e4d
 8004e28:	08004e55 	.word	0x08004e55
 8004e2c:	08004e6b 	.word	0x08004e6b
 8004e30:	08004e5b 	.word	0x08004e5b
 8004e34:	08004e6b 	.word	0x08004e6b
 8004e38:	08004e6b 	.word	0x08004e6b
 8004e3c:	08004e6b 	.word	0x08004e6b
 8004e40:	08004e63 	.word	0x08004e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e44:	f7ff f8f6 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8004e48:	61f8      	str	r0, [r7, #28]
        break;
 8004e4a:	e014      	b.n	8004e76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e4c:	f7ff f908 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8004e50:	61f8      	str	r0, [r7, #28]
        break;
 8004e52:	e010      	b.n	8004e76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e54:	4b4c      	ldr	r3, [pc, #304]	@ (8004f88 <UART_SetConfig+0x4b0>)
 8004e56:	61fb      	str	r3, [r7, #28]
        break;
 8004e58:	e00d      	b.n	8004e76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5a:	f7ff f853 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8004e5e:	61f8      	str	r0, [r7, #28]
        break;
 8004e60:	e009      	b.n	8004e76 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e66:	61fb      	str	r3, [r7, #28]
        break;
 8004e68:	e005      	b.n	8004e76 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d077      	beq.n	8004f6c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	005a      	lsls	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	085b      	lsrs	r3, r3, #1
 8004e86:	441a      	add	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e90:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b0f      	cmp	r3, #15
 8004e96:	d916      	bls.n	8004ec6 <UART_SetConfig+0x3ee>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e9e:	d212      	bcs.n	8004ec6 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f023 030f 	bic.w	r3, r3, #15
 8004ea8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	8afb      	ldrh	r3, [r7, #22]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	8afa      	ldrh	r2, [r7, #22]
 8004ec2:	60da      	str	r2, [r3, #12]
 8004ec4:	e052      	b.n	8004f6c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ecc:	e04e      	b.n	8004f6c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ece:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d827      	bhi.n	8004f26 <UART_SetConfig+0x44e>
 8004ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0x404>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f01 	.word	0x08004f01
 8004ee0:	08004f09 	.word	0x08004f09
 8004ee4:	08004f11 	.word	0x08004f11
 8004ee8:	08004f27 	.word	0x08004f27
 8004eec:	08004f17 	.word	0x08004f17
 8004ef0:	08004f27 	.word	0x08004f27
 8004ef4:	08004f27 	.word	0x08004f27
 8004ef8:	08004f27 	.word	0x08004f27
 8004efc:	08004f1f 	.word	0x08004f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f00:	f7ff f898 	bl	8004034 <HAL_RCC_GetPCLK1Freq>
 8004f04:	61f8      	str	r0, [r7, #28]
        break;
 8004f06:	e014      	b.n	8004f32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f08:	f7ff f8aa 	bl	8004060 <HAL_RCC_GetPCLK2Freq>
 8004f0c:	61f8      	str	r0, [r7, #28]
        break;
 8004f0e:	e010      	b.n	8004f32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f10:	4b1d      	ldr	r3, [pc, #116]	@ (8004f88 <UART_SetConfig+0x4b0>)
 8004f12:	61fb      	str	r3, [r7, #28]
        break;
 8004f14:	e00d      	b.n	8004f32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f16:	f7fe fff5 	bl	8003f04 <HAL_RCC_GetSysClockFreq>
 8004f1a:	61f8      	str	r0, [r7, #28]
        break;
 8004f1c:	e009      	b.n	8004f32 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f22:	61fb      	str	r3, [r7, #28]
        break;
 8004f24:	e005      	b.n	8004f32 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f30:	bf00      	nop
    }

    if (pclk != 0U)
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d019      	beq.n	8004f6c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	085a      	lsrs	r2, r3, #1
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	441a      	add	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b0f      	cmp	r3, #15
 8004f50:	d909      	bls.n	8004f66 <UART_SetConfig+0x48e>
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f58:	d205      	bcs.n	8004f66 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	b29a      	uxth	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60da      	str	r2, [r3, #12]
 8004f64:	e002      	b.n	8004f6c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f78:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3728      	adds	r7, #40	@ 0x28
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f86:	bf00      	nop
 8004f88:	00f42400 	.word	0x00f42400

08004f8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01a      	beq.n	80050a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800508a:	d10a      	bne.n	80050a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	430a      	orrs	r2, r1
 80050a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00a      	beq.n	80050c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	605a      	str	r2, [r3, #4]
  }
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b098      	sub	sp, #96	@ 0x60
 80050d4:	af02      	add	r7, sp, #8
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050e0:	f7fc fe20 	bl	8001d24 <HAL_GetTick>
 80050e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d12e      	bne.n	8005152 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050fc:	2200      	movs	r2, #0
 80050fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f88c 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d021      	beq.n	8005152 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800511c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005122:	653b      	str	r3, [r7, #80]	@ 0x50
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800512c:	647b      	str	r3, [r7, #68]	@ 0x44
 800512e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005132:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800513a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e6      	bne.n	800510e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e062      	b.n	8005218 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b04      	cmp	r3, #4
 800515e:	d149      	bne.n	80051f4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005160:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005168:	2200      	movs	r2, #0
 800516a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f856 	bl	8005220 <UART_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d03c      	beq.n	80051f4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	e853 3f00 	ldrex	r3, [r3]
 8005186:	623b      	str	r3, [r7, #32]
   return(result);
 8005188:	6a3b      	ldr	r3, [r7, #32]
 800518a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800518e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
 800519a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800519e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051a0:	e841 2300 	strex	r3, r2, [r1]
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1e6      	bne.n	800517a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3308      	adds	r3, #8
 80051b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	e853 3f00 	ldrex	r3, [r3]
 80051ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0301 	bic.w	r3, r3, #1
 80051c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051cc:	61fa      	str	r2, [r7, #28]
 80051ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d0:	69b9      	ldr	r1, [r7, #24]
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	e841 2300 	strex	r3, r2, [r1]
 80051d8:	617b      	str	r3, [r7, #20]
   return(result);
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d1e5      	bne.n	80051ac <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2220      	movs	r2, #32
 80051e4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e011      	b.n	8005218 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2220      	movs	r2, #32
 80051fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3758      	adds	r7, #88	@ 0x58
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005230:	e04f      	b.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005238:	d04b      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800523a:	f7fc fd73 	bl	8001d24 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	429a      	cmp	r2, r3
 8005248:	d302      	bcc.n	8005250 <UART_WaitOnFlagUntilTimeout+0x30>
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e04e      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d037      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b80      	cmp	r3, #128	@ 0x80
 8005266:	d034      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b40      	cmp	r3, #64	@ 0x40
 800526c:	d031      	beq.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b08      	cmp	r3, #8
 800527a:	d110      	bne.n	800529e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 f838 	bl	80052fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2208      	movs	r2, #8
 800528e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e029      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69db      	ldr	r3, [r3, #28]
 80052a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052ac:	d111      	bne.n	80052d2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 f81e 	bl	80052fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2220      	movs	r2, #32
 80052c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e00f      	b.n	80052f2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4013      	ands	r3, r2
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	429a      	cmp	r2, r3
 80052e0:	bf0c      	ite	eq
 80052e2:	2301      	moveq	r3, #1
 80052e4:	2300      	movne	r3, #0
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	461a      	mov	r2, r3
 80052ea:	79fb      	ldrb	r3, [r7, #7]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d0a0      	beq.n	8005232 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052fa:	b480      	push	{r7}
 80052fc:	b095      	sub	sp, #84	@ 0x54
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005320:	643b      	str	r3, [r7, #64]	@ 0x40
 8005322:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800532e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	3308      	adds	r3, #8
 800533a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	6a3b      	ldr	r3, [r7, #32]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	61fb      	str	r3, [r7, #28]
   return(result);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f023 0301 	bic.w	r3, r3, #1
 800534a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3308      	adds	r3, #8
 8005352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005354:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800535a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800536c:	2b01      	cmp	r3, #1
 800536e:	d118      	bne.n	80053a2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	60bb      	str	r3, [r7, #8]
   return(result);
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f023 0310 	bic.w	r3, r3, #16
 8005384:	647b      	str	r3, [r7, #68]	@ 0x44
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800538e:	61bb      	str	r3, [r7, #24]
 8005390:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6979      	ldr	r1, [r7, #20]
 8005394:	69ba      	ldr	r2, [r7, #24]
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	613b      	str	r3, [r7, #16]
   return(result);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e6      	bne.n	8005370 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053b6:	bf00      	nop
 80053b8:	3754      	adds	r7, #84	@ 0x54
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <i2c_init>:

/**
 * @brief Initializes the I2C peripheral.
 * @note  This is a placeholder. Implement with your hardware's I2C init code.
 */
static void i2c_init(void) {
 80053c2:	b480      	push	{r7}
 80053c4:	af00      	add	r7, sp, #0
    // Example: i2c_master_init(I2C_NUM_0, ...);
}
 80053c6:	bf00      	nop
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <i2c_write>:
 * @param reg_addr The register address to write to.
 * @param data A pointer to the data buffer to write.
 * @param len The number of bytes to write.
 * @return true on success, false on failure.
 */
static bool i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, uint16_t len) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	603a      	str	r2, [r7, #0]
 80053d8:	461a      	mov	r2, r3
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
 80053de:	460b      	mov	r3, r1
 80053e0:	71bb      	strb	r3, [r7, #6]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80bb      	strh	r3, [r7, #4]
    // This is a placeholder.
    // Implement this function using your platform's I2C write function.
    // It should handle the START, address, register, data, and STOP conditions.
     return I2C1_MemWrite(dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK;
 80053e6:	79fb      	ldrb	r3, [r7, #7]
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	b298      	uxth	r0, r3
 80053ee:	79bb      	ldrb	r3, [r7, #6]
 80053f0:	b299      	uxth	r1, r3
 80053f2:	2364      	movs	r3, #100	@ 0x64
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	88bb      	ldrh	r3, [r7, #4]
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f7fb ff49 	bl	8001294 <I2C1_MemWrite>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf0c      	ite	eq
 8005408:	2301      	moveq	r3, #1
 800540a:	2300      	movne	r3, #0
 800540c:	b2db      	uxtb	r3, r3
    //return true; // Assume success for now
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}

08005416 <i2c_read>:
 * @param reg_addr The register address to read from.
 * @param data A pointer to the buffer to store the read data.
 * @param len The number of bytes to read.
 * @return true on success, false on failure.
 */
static bool i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, uint16_t len) {
 8005416:	b580      	push	{r7, lr}
 8005418:	b084      	sub	sp, #16
 800541a:	af02      	add	r7, sp, #8
 800541c:	603a      	str	r2, [r7, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	4603      	mov	r3, r0
 8005422:	71fb      	strb	r3, [r7, #7]
 8005424:	460b      	mov	r3, r1
 8005426:	71bb      	strb	r3, [r7, #6]
 8005428:	4613      	mov	r3, r2
 800542a:	80bb      	strh	r3, [r7, #4]
    // This is a placeholder.
    // Implement this function using your platform's I2C read function.
    return I2C1_MemRead(dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK;
 800542c:	79fb      	ldrb	r3, [r7, #7]
 800542e:	b29b      	uxth	r3, r3
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	b298      	uxth	r0, r3
 8005434:	79bb      	ldrb	r3, [r7, #6]
 8005436:	b299      	uxth	r1, r3
 8005438:	2364      	movs	r3, #100	@ 0x64
 800543a:	9301      	str	r3, [sp, #4]
 800543c:	88bb      	ldrh	r3, [r7, #4]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	2201      	movs	r2, #1
 8005444:	f7fb ff44 	bl	80012d0 <I2C1_MemRead>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	bf0c      	ite	eq
 800544e:	2301      	moveq	r3, #1
 8005450:	2300      	movne	r3, #0
 8005452:	b2db      	uxtb	r3, r3
    //return true; // Assume success for now
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <delay_ms>:
/**
 * @brief Delays execution for a specified number of milliseconds.
 * @note This is a placeholder. Implement with your hardware's delay function.
 * @param ms Milliseconds to delay.
 */
static void delay_ms(uint32_t ms) {
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
    // Example: vTaskDelay(pdMS_TO_TICKS(ms)); or HAL_Delay(ms);
    volatile uint32_t i, j;
    for (i = 0; i < ms; i++) {
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	e00d      	b.n	8005486 <delay_ms+0x2a>
        for (j = 0; j < 1000; j++) {
 800546a:	2300      	movs	r3, #0
 800546c:	60bb      	str	r3, [r7, #8]
 800546e:	e003      	b.n	8005478 <delay_ms+0x1c>
            __asm__("nop");
 8005470:	bf00      	nop
        for (j = 0; j < 1000; j++) {
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	3301      	adds	r3, #1
 8005476:	60bb      	str	r3, [r7, #8]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800547e:	d3f7      	bcc.n	8005470 <delay_ms+0x14>
    for (i = 0; i < ms; i++) {
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3301      	adds	r3, #1
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	429a      	cmp	r2, r3
 800548c:	d8ed      	bhi.n	800546a <delay_ms+0xe>
        }
    }
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <MAX17260_Register_WriteSingle>:
//=============================================================================

/**
 * @brief Writes a single 16-bit value to a MAX17260 register.
 */
static bool MAX17260_Register_WriteSingle(uint8_t reg, uint16_t value) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	460a      	mov	r2, r1
 80054a6:	71fb      	strb	r3, [r7, #7]
 80054a8:	4613      	mov	r3, r2
 80054aa:	80bb      	strh	r3, [r7, #4]
    uint8_t buffer[2];
    // Little-endian format
    buffer[0] = value & 0xFF;
 80054ac:	88bb      	ldrh	r3, [r7, #4]
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	733b      	strb	r3, [r7, #12]
    buffer[1] = (value >> 8) & 0xFF;
 80054b2:	88bb      	ldrh	r3, [r7, #4]
 80054b4:	0a1b      	lsrs	r3, r3, #8
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	737b      	strb	r3, [r7, #13]
    return i2c_write(MAX17260_I2C_ADDRESS, reg, buffer, 2);
 80054bc:	f107 020c 	add.w	r2, r7, #12
 80054c0:	79f9      	ldrb	r1, [r7, #7]
 80054c2:	2302      	movs	r3, #2
 80054c4:	2036      	movs	r0, #54	@ 0x36
 80054c6:	f7ff ff83 	bl	80053d0 <i2c_write>
 80054ca:	4603      	mov	r3, r0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3710      	adds	r7, #16
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <MAX17260_Register_ReadSingle>:

/**
 * @brief Reads a single 16-bit value from a MAX17260 register.
 */
static bool MAX17260_Register_ReadSingle(uint8_t reg, uint16_t* value) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2];
    if (i2c_read(MAX17260_I2C_ADDRESS, reg, buffer, 2)) {
 80054e0:	f107 020c 	add.w	r2, r7, #12
 80054e4:	79f9      	ldrb	r1, [r7, #7]
 80054e6:	2302      	movs	r3, #2
 80054e8:	2036      	movs	r0, #54	@ 0x36
 80054ea:	f7ff ff94 	bl	8005416 <i2c_read>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00c      	beq.n	800550e <MAX17260_Register_ReadSingle+0x3a>
        // Little-endian format
        *value = (uint16_t)buffer[0] | ((uint16_t)buffer[1] << 8);
 80054f4:	7b3b      	ldrb	r3, [r7, #12]
 80054f6:	b21a      	sxth	r2, r3
 80054f8:	7b7b      	ldrb	r3, [r7, #13]
 80054fa:	b21b      	sxth	r3, r3
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	b21b      	sxth	r3, r3
 8005500:	4313      	orrs	r3, r2
 8005502:	b21b      	sxth	r3, r3
 8005504:	b29a      	uxth	r2, r3
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	801a      	strh	r2, [r3, #0]
        return true;
 800550a:	2301      	movs	r3, #1
 800550c:	e003      	b.n	8005516 <MAX17260_Register_ReadSingle+0x42>
    }
    *value = 0;
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2200      	movs	r2, #0
 8005512:	801a      	strh	r2, [r3, #0]
    return false;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <IsPOR>:

/**
 * @brief Checks if the MAX17260 has experienced a Power-On-Reset.
 */
static bool IsPOR(void) {
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
    uint16_t status_val = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	80fb      	strh	r3, [r7, #6]
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 8005528:	1dbb      	adds	r3, r7, #6
 800552a:	4619      	mov	r1, r3
 800552c:	2000      	movs	r0, #0
 800552e:	f7ff ffd1 	bl	80054d4 <MAX17260_Register_ReadSingle>
    // POR bit is bit 1 of the STATUS register
    return (status_val & (1 << 1)) != 0;
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <ClearPOR>:

/**
 * @brief Clears the Power-On-Reset flag in the STATUS register.
 */
static void ClearPOR(void) {
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
    uint16_t status_val = 0;
 8005550:	2300      	movs	r3, #0
 8005552:	80fb      	strh	r3, [r7, #6]
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 8005554:	1dbb      	adds	r3, r7, #6
 8005556:	4619      	mov	r1, r3
 8005558:	2000      	movs	r0, #0
 800555a:	f7ff ffbb 	bl	80054d4 <MAX17260_Register_ReadSingle>
    // Write the value back, but with the POR bit cleared
    MAX17260_Register_WriteSingle(STATUS, status_val & ~(1 << 1));
 800555e:	88fb      	ldrh	r3, [r7, #6]
 8005560:	f023 0302 	bic.w	r3, r3, #2
 8005564:	b29b      	uxth	r3, r3
 8005566:	4619      	mov	r1, r3
 8005568:	2000      	movs	r0, #0
 800556a:	f7ff ff97 	bl	800549c <MAX17260_Register_WriteSingle>
}
 800556e:	bf00      	nop
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <Print_MAX1726x_Config2>:
// MAX17260 DRIVER DEBUG
//=============================================================================


void Print_MAX1726x_Config2(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
    uint16_t config2_reg;

    // Read the current value from the config2 register
    // maxim_max1726x_read_reg(MAX1726X_CONFIG2_REG, &config2_reg);
    MAX17260_Register_ReadSingle(CONFIG2, &config2_reg);
 800557e:	1dbb      	adds	r3, r7, #6
 8005580:	4619      	mov	r1, r3
 8005582:	20bb      	movs	r0, #187	@ 0xbb
 8005584:	f7ff ffa6 	bl	80054d4 <MAX17260_Register_ReadSingle>

    UART_Printf("\r\n--- MAX1726x Config2 Register [0x%04X] ---\r\n", config2_reg);
 8005588:	88fb      	ldrh	r3, [r7, #6]
 800558a:	4619      	mov	r1, r3
 800558c:	4849      	ldr	r0, [pc, #292]	@ (80056b4 <Print_MAX1726x_Config2+0x13c>)
 800558e:	f7fc f82f 	bl	80015f0 <UART_Printf>
    UART_Printf("This register controls advanced model and IC features.\r\n");
 8005592:	4849      	ldr	r0, [pc, #292]	@ (80056b8 <Print_MAX1726x_Config2+0x140>)
 8005594:	f7fc f82c 	bl	80015f0 <UART_Printf>
    UART_Printf("----------------------------------------\r\n");
 8005598:	4848      	ldr	r0, [pc, #288]	@ (80056bc <Print_MAX1726x_Config2+0x144>)
 800559a:	f7fc f829 	bl	80015f0 <UART_Printf>

    // Bit 15: Enable Dynamic Power
    UART_Printf("[Bit 15] DP_EN    (Dynamic Power Enable) : %s\r\n",
                (config2_reg & (1 << 15)) ? "ENABLED" : "DISABLED");
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	b21b      	sxth	r3, r3
    UART_Printf("[Bit 15] DP_EN    (Dynamic Power Enable) : %s\r\n",
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	da01      	bge.n	80055aa <Print_MAX1726x_Config2+0x32>
 80055a6:	4b46      	ldr	r3, [pc, #280]	@ (80056c0 <Print_MAX1726x_Config2+0x148>)
 80055a8:	e000      	b.n	80055ac <Print_MAX1726x_Config2+0x34>
 80055aa:	4b46      	ldr	r3, [pc, #280]	@ (80056c4 <Print_MAX1726x_Config2+0x14c>)
 80055ac:	4619      	mov	r1, r3
 80055ae:	4846      	ldr	r0, [pc, #280]	@ (80056c8 <Print_MAX1726x_Config2+0x150>)
 80055b0:	f7fc f81e 	bl	80015f0 <UART_Printf>

    // Bit 14: Enable AtRate Function
    UART_Printf("[Bit 14] AtRateEn (AtRate Function En)  : %s\r\n",
                (config2_reg & (1 << 14)) ? "ENABLED" : "DISABLED");
 80055b4:	88fb      	ldrh	r3, [r7, #6]
 80055b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    UART_Printf("[Bit 14] AtRateEn (AtRate Function En)  : %s\r\n",
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <Print_MAX1726x_Config2+0x4a>
 80055be:	4b40      	ldr	r3, [pc, #256]	@ (80056c0 <Print_MAX1726x_Config2+0x148>)
 80055c0:	e000      	b.n	80055c4 <Print_MAX1726x_Config2+0x4c>
 80055c2:	4b40      	ldr	r3, [pc, #256]	@ (80056c4 <Print_MAX1726x_Config2+0x14c>)
 80055c4:	4619      	mov	r1, r3
 80055c6:	4841      	ldr	r0, [pc, #260]	@ (80056cc <Print_MAX1726x_Config2+0x154>)
 80055c8:	f7fc f812 	bl	80015f0 <UART_Printf>
                
    // Bit 12: Enable Constant-Power Load Model
    UART_Printf("[Bit 12] CP_EN    (Constant Power Model) : %s\r\n",
                (config2_reg & (1 << 12)) ? "ENABLED" : "DISABLED");
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    UART_Printf("[Bit 12] CP_EN    (Constant Power Model) : %s\r\n",
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <Print_MAX1726x_Config2+0x62>
 80055d6:	4b3a      	ldr	r3, [pc, #232]	@ (80056c0 <Print_MAX1726x_Config2+0x148>)
 80055d8:	e000      	b.n	80055dc <Print_MAX1726x_Config2+0x64>
 80055da:	4b3a      	ldr	r3, [pc, #232]	@ (80056c4 <Print_MAX1726x_Config2+0x14c>)
 80055dc:	4619      	mov	r1, r3
 80055de:	483c      	ldr	r0, [pc, #240]	@ (80056d0 <Print_MAX1726x_Config2+0x158>)
 80055e0:	f7fc f806 	bl	80015f0 <UART_Printf>
                
    // Bit 10: I2C Timeout Disable
    UART_Printf("[Bit 10] TMOUT_DIS(I2C Timeout Disable)  : %s\r\n",
                (config2_reg & (1 << 10)) ? "DISABLED" : "ENABLED");
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
    UART_Printf("[Bit 10] TMOUT_DIS(I2C Timeout Disable)  : %s\r\n",
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <Print_MAX1726x_Config2+0x7a>
 80055ee:	4b35      	ldr	r3, [pc, #212]	@ (80056c4 <Print_MAX1726x_Config2+0x14c>)
 80055f0:	e000      	b.n	80055f4 <Print_MAX1726x_Config2+0x7c>
 80055f2:	4b33      	ldr	r3, [pc, #204]	@ (80056c0 <Print_MAX1726x_Config2+0x148>)
 80055f4:	4619      	mov	r1, r3
 80055f6:	4837      	ldr	r0, [pc, #220]	@ (80056d4 <Print_MAX1726x_Config2+0x15c>)
 80055f8:	f7fb fffa 	bl	80015f0 <UART_Printf>
                
    // Bit 9: Enable Thermistor Simulation
    UART_Printf("[Bit 9]  TS_EN    (Thermistor Sim En)    : %s\r\n",
                (config2_reg & (1 << 9)) ? "ENABLED" : "DISABLED");
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
    UART_Printf("[Bit 9]  TS_EN    (Thermistor Sim En)    : %s\r\n",
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <Print_MAX1726x_Config2+0x92>
 8005606:	4b2e      	ldr	r3, [pc, #184]	@ (80056c0 <Print_MAX1726x_Config2+0x148>)
 8005608:	e000      	b.n	800560c <Print_MAX1726x_Config2+0x94>
 800560a:	4b2e      	ldr	r3, [pc, #184]	@ (80056c4 <Print_MAX1726x_Config2+0x14c>)
 800560c:	4619      	mov	r1, r3
 800560e:	4832      	ldr	r0, [pc, #200]	@ (80056d8 <Print_MAX1726x_Config2+0x160>)
 8005610:	f7fb ffee 	bl	80015f0 <UART_Printf>

    // Bit 8: Enable State of Health (SoH) Compensation
    UART_Printf("[Bit 8]  SOH_EN   (SoH Compensation En)  : %s\r\n",
                (config2_reg & (1 << 8)) ? "ENABLED" : "DISABLED");
 8005614:	88fb      	ldrh	r3, [r7, #6]
 8005616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    UART_Printf("[Bit 8]  SOH_EN   (SoH Compensation En)  : %s\r\n",
 800561a:	2b00      	cmp	r3, #0
 800561c:	d001      	beq.n	8005622 <Print_MAX1726x_Config2+0xaa>
 800561e:	4b28      	ldr	r3, [pc, #160]	@ (80056c0 <Print_MAX1726x_Config2+0x148>)
 8005620:	e000      	b.n	8005624 <Print_MAX1726x_Config2+0xac>
 8005622:	4b28      	ldr	r3, [pc, #160]	@ (80056c4 <Print_MAX1726x_Config2+0x14c>)
 8005624:	4619      	mov	r1, r3
 8005626:	482d      	ldr	r0, [pc, #180]	@ (80056dc <Print_MAX1726x_Config2+0x164>)
 8005628:	f7fb ffe2 	bl	80015f0 <UART_Printf>

    // Bit 7: Force EZ Config Load
    UART_Printf("[Bit 7]  LDMDL    (Load Model Command)   : %s - Writing '1' reloads EZ config.\r\n",
                (config2_reg & (1 << 7)) ? "ACTIVE" : "IDLE");
 800562c:	88fb      	ldrh	r3, [r7, #6]
 800562e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    UART_Printf("[Bit 7]  LDMDL    (Load Model Command)   : %s - Writing '1' reloads EZ config.\r\n",
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <Print_MAX1726x_Config2+0xc2>
 8005636:	4b2a      	ldr	r3, [pc, #168]	@ (80056e0 <Print_MAX1726x_Config2+0x168>)
 8005638:	e000      	b.n	800563c <Print_MAX1726x_Config2+0xc4>
 800563a:	4b2a      	ldr	r3, [pc, #168]	@ (80056e4 <Print_MAX1726x_Config2+0x16c>)
 800563c:	4619      	mov	r1, r3
 800563e:	482a      	ldr	r0, [pc, #168]	@ (80056e8 <Print_MAX1726x_Config2+0x170>)
 8005640:	f7fb ffd6 	bl	80015f0 <UART_Printf>

    // Bit 5: Enable Ripple and Particle Filter
    UART_Printf("[Bit 5]  RI_EN    (Ripple Filter En)     : %s\r\n",
                (config2_reg & (1 << 5)) ? "ENABLED" : "DISABLED");
 8005644:	88fb      	ldrh	r3, [r7, #6]
 8005646:	f003 0320 	and.w	r3, r3, #32
    UART_Printf("[Bit 5]  RI_EN    (Ripple Filter En)     : %s\r\n",
 800564a:	2b00      	cmp	r3, #0
 800564c:	d001      	beq.n	8005652 <Print_MAX1726x_Config2+0xda>
 800564e:	4b1c      	ldr	r3, [pc, #112]	@ (80056c0 <Print_MAX1726x_Config2+0x148>)
 8005650:	e000      	b.n	8005654 <Print_MAX1726x_Config2+0xdc>
 8005652:	4b1c      	ldr	r3, [pc, #112]	@ (80056c4 <Print_MAX1726x_Config2+0x14c>)
 8005654:	4619      	mov	r1, r3
 8005656:	4825      	ldr	r0, [pc, #148]	@ (80056ec <Print_MAX1726x_Config2+0x174>)
 8005658:	f7fb ffca 	bl	80015f0 <UART_Printf>

    // Bit 4: Enable Current-Voltage Synchronization
    UART_Printf("[Bit 4]  CVSYNC_EN(CV Sync Enable)       : %s\r\n",
                (config2_reg & (1 << 4)) ? "ENABLED" : "DISABLED");
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	f003 0310 	and.w	r3, r3, #16
    UART_Printf("[Bit 4]  CVSYNC_EN(CV Sync Enable)       : %s\r\n",
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <Print_MAX1726x_Config2+0xf2>
 8005666:	4b16      	ldr	r3, [pc, #88]	@ (80056c0 <Print_MAX1726x_Config2+0x148>)
 8005668:	e000      	b.n	800566c <Print_MAX1726x_Config2+0xf4>
 800566a:	4b16      	ldr	r3, [pc, #88]	@ (80056c4 <Print_MAX1726x_Config2+0x14c>)
 800566c:	4619      	mov	r1, r3
 800566e:	4820      	ldr	r0, [pc, #128]	@ (80056f0 <Print_MAX1726x_Config2+0x178>)
 8005670:	f7fb ffbe 	bl	80015f0 <UART_Printf>
    
    // Bit 3: Disable Model Comp Learning
    UART_Printf("[Bit 3]  MOD_DIS  (Model Learning Dis)   : %s\r\n",
                (config2_reg & (1 << 3)) ? "LEARNING DISABLED" : "LEARNING ENABLED");
 8005674:	88fb      	ldrh	r3, [r7, #6]
 8005676:	f003 0308 	and.w	r3, r3, #8
    UART_Printf("[Bit 3]  MOD_DIS  (Model Learning Dis)   : %s\r\n",
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <Print_MAX1726x_Config2+0x10a>
 800567e:	4b1d      	ldr	r3, [pc, #116]	@ (80056f4 <Print_MAX1726x_Config2+0x17c>)
 8005680:	e000      	b.n	8005684 <Print_MAX1726x_Config2+0x10c>
 8005682:	4b1d      	ldr	r3, [pc, #116]	@ (80056f8 <Print_MAX1726x_Config2+0x180>)
 8005684:	4619      	mov	r1, r3
 8005686:	481d      	ldr	r0, [pc, #116]	@ (80056fc <Print_MAX1726x_Config2+0x184>)
 8005688:	f7fb ffb2 	bl	80015f0 <UART_Printf>
    
    // Bit 1: ADC Offset Correction Disable
    UART_Printf("[Bit 1]  ADC_DIS  (ADC Offset Corr Dis)  : %s\r\n",
                (config2_reg & (1 << 1)) ? "DISABLED" : "ENABLED");
 800568c:	88fb      	ldrh	r3, [r7, #6]
 800568e:	f003 0302 	and.w	r3, r3, #2
    UART_Printf("[Bit 1]  ADC_DIS  (ADC Offset Corr Dis)  : %s\r\n",
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <Print_MAX1726x_Config2+0x122>
 8005696:	4b0b      	ldr	r3, [pc, #44]	@ (80056c4 <Print_MAX1726x_Config2+0x14c>)
 8005698:	e000      	b.n	800569c <Print_MAX1726x_Config2+0x124>
 800569a:	4b09      	ldr	r3, [pc, #36]	@ (80056c0 <Print_MAX1726x_Config2+0x148>)
 800569c:	4619      	mov	r1, r3
 800569e:	4818      	ldr	r0, [pc, #96]	@ (8005700 <Print_MAX1726x_Config2+0x188>)
 80056a0:	f7fb ffa6 	bl	80015f0 <UART_Printf>

    UART_Printf("----------------------------------------\r\n\r\n");
 80056a4:	4817      	ldr	r0, [pc, #92]	@ (8005704 <Print_MAX1726x_Config2+0x18c>)
 80056a6:	f7fb ffa3 	bl	80015f0 <UART_Printf>
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	080088d8 	.word	0x080088d8
 80056b8:	08008908 	.word	0x08008908
 80056bc:	08008944 	.word	0x08008944
 80056c0:	08008970 	.word	0x08008970
 80056c4:	08008978 	.word	0x08008978
 80056c8:	08008984 	.word	0x08008984
 80056cc:	080089b4 	.word	0x080089b4
 80056d0:	080089e4 	.word	0x080089e4
 80056d4:	08008a14 	.word	0x08008a14
 80056d8:	08008a44 	.word	0x08008a44
 80056dc:	08008a74 	.word	0x08008a74
 80056e0:	08008aa4 	.word	0x08008aa4
 80056e4:	08008aac 	.word	0x08008aac
 80056e8:	08008ab4 	.word	0x08008ab4
 80056ec:	08008b08 	.word	0x08008b08
 80056f0:	08008b38 	.word	0x08008b38
 80056f4:	08008b68 	.word	0x08008b68
 80056f8:	08008b7c 	.word	0x08008b7c
 80056fc:	08008b90 	.word	0x08008b90
 8005700:	08008bc0 	.word	0x08008bc0
 8005704:	08008bf0 	.word	0x08008bf0

08005708 <Print_MAX1726x_Config>:

void Print_MAX1726x_Config(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
    uint16_t config_reg;
    const char* temp_src;

    // Read the current value from the config register
    // maxim_max1726x_read_reg(MAX1726X_CONFIG_REG, &config_reg);
    MAX17260_Register_ReadSingle(CONFIG, &config_reg);
 800570e:	1cbb      	adds	r3, r7, #2
 8005710:	4619      	mov	r1, r3
 8005712:	201d      	movs	r0, #29
 8005714:	f7ff fede 	bl	80054d4 <MAX17260_Register_ReadSingle>

    UART_Printf("\r\n--- MAX1726x Config Register [0x%04X] ---\r\n", config_reg);
 8005718:	887b      	ldrh	r3, [r7, #2]
 800571a:	4619      	mov	r1, r3
 800571c:	4845      	ldr	r0, [pc, #276]	@ (8005834 <Print_MAX1726x_Config+0x12c>)
 800571e:	f7fb ff67 	bl	80015f0 <UART_Printf>
    UART_Printf("This register controls alerts and operating modes.\r\n");
 8005722:	4845      	ldr	r0, [pc, #276]	@ (8005838 <Print_MAX1726x_Config+0x130>)
 8005724:	f7fb ff64 	bl	80015f0 <UART_Printf>
    UART_Printf("----------------------------------------\r\n");
 8005728:	4844      	ldr	r0, [pc, #272]	@ (800583c <Print_MAX1726x_Config+0x134>)
 800572a:	f7fb ff61 	bl	80015f0 <UART_Printf>

    // Bit 14: SOC Change Alert Enable
    UART_Printf("[Bit 14] S_INT    (SOC Change Alert En)  : %s\r\n",
                (config_reg & (1 << 14)) ? "ENABLED" : "DISABLED");
 800572e:	887b      	ldrh	r3, [r7, #2]
 8005730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    UART_Printf("[Bit 14] S_INT    (SOC Change Alert En)  : %s\r\n",
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <Print_MAX1726x_Config+0x34>
 8005738:	4b41      	ldr	r3, [pc, #260]	@ (8005840 <Print_MAX1726x_Config+0x138>)
 800573a:	e000      	b.n	800573e <Print_MAX1726x_Config+0x36>
 800573c:	4b41      	ldr	r3, [pc, #260]	@ (8005844 <Print_MAX1726x_Config+0x13c>)
 800573e:	4619      	mov	r1, r3
 8005740:	4841      	ldr	r0, [pc, #260]	@ (8005848 <Print_MAX1726x_Config+0x140>)
 8005742:	f7fb ff55 	bl	80015f0 <UART_Printf>

    // Bit 13: Thermistor Enable
    UART_Printf("[Bit 13] T_EN     (Thermistor Enable)    : %s\r\n",
                (config_reg & (1 << 13)) ? "ENABLED (External)" : "DISABLED (Internal sensor)");
 8005746:	887b      	ldrh	r3, [r7, #2]
 8005748:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    UART_Printf("[Bit 13] T_EN     (Thermistor Enable)    : %s\r\n",
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <Print_MAX1726x_Config+0x4c>
 8005750:	4b3e      	ldr	r3, [pc, #248]	@ (800584c <Print_MAX1726x_Config+0x144>)
 8005752:	e000      	b.n	8005756 <Print_MAX1726x_Config+0x4e>
 8005754:	4b3e      	ldr	r3, [pc, #248]	@ (8005850 <Print_MAX1726x_Config+0x148>)
 8005756:	4619      	mov	r1, r3
 8005758:	483e      	ldr	r0, [pc, #248]	@ (8005854 <Print_MAX1726x_Config+0x14c>)
 800575a:	f7fb ff49 	bl	80015f0 <UART_Printf>

    // Bit 12: Peak Current Alert Enable
    UART_Printf("[Bit 12] PA_EN    (Peak Current Alert En): %s\r\n",
                (config_reg & (1 << 12)) ? "ENABLED" : "DISABLED");
 800575e:	887b      	ldrh	r3, [r7, #2]
 8005760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    UART_Printf("[Bit 12] PA_EN    (Peak Current Alert En): %s\r\n",
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <Print_MAX1726x_Config+0x64>
 8005768:	4b35      	ldr	r3, [pc, #212]	@ (8005840 <Print_MAX1726x_Config+0x138>)
 800576a:	e000      	b.n	800576e <Print_MAX1726x_Config+0x66>
 800576c:	4b35      	ldr	r3, [pc, #212]	@ (8005844 <Print_MAX1726x_Config+0x13c>)
 800576e:	4619      	mov	r1, r3
 8005770:	4839      	ldr	r0, [pc, #228]	@ (8005858 <Print_MAX1726x_Config+0x150>)
 8005772:	f7fb ff3d 	bl	80015f0 <UART_Printf>

    // Bit 11: Temperature Channel Assignment
    if (config_reg & (1 << 13)) { // T_EN is enabled (external)
 8005776:	887b      	ldrh	r3, [r7, #2]
 8005778:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d009      	beq.n	8005794 <Print_MAX1726x_Config+0x8c>
        temp_src = (config_reg & (1 << 11)) ? "THRM2 pin" : "THRM1 pin";
 8005780:	887b      	ldrh	r3, [r7, #2]
 8005782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <Print_MAX1726x_Config+0x86>
 800578a:	4b34      	ldr	r3, [pc, #208]	@ (800585c <Print_MAX1726x_Config+0x154>)
 800578c:	e000      	b.n	8005790 <Print_MAX1726x_Config+0x88>
 800578e:	4b34      	ldr	r3, [pc, #208]	@ (8005860 <Print_MAX1726x_Config+0x158>)
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	e008      	b.n	80057a6 <Print_MAX1726x_Config+0x9e>
    } else { // T_EN is disabled (internal)
        temp_src = (config_reg & (1 << 11)) ? "Die Temp" : "V_CELL Temp";
 8005794:	887b      	ldrh	r3, [r7, #2]
 8005796:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800579a:	2b00      	cmp	r3, #0
 800579c:	d001      	beq.n	80057a2 <Print_MAX1726x_Config+0x9a>
 800579e:	4b31      	ldr	r3, [pc, #196]	@ (8005864 <Print_MAX1726x_Config+0x15c>)
 80057a0:	e000      	b.n	80057a4 <Print_MAX1726x_Config+0x9c>
 80057a2:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <Print_MAX1726x_Config+0x160>)
 80057a4:	607b      	str	r3, [r7, #4]
    }
    UART_Printf("[Bit 11] T_SEL    (Temp Source Select)   : %s\r\n", temp_src);
 80057a6:	6879      	ldr	r1, [r7, #4]
 80057a8:	4830      	ldr	r0, [pc, #192]	@ (800586c <Print_MAX1726x_Config+0x164>)
 80057aa:	f7fb ff21 	bl	80015f0 <UART_Printf>

    // Bit 8: Enable Sticky Alerts
    UART_Printf("[Bit 8]  Sticky   (Sticky Alerts)        : %s - If enabled, alert flags are not auto-cleared.\r\n",
                (config_reg & (1 << 8)) ? "ENABLED" : "DISABLED");
 80057ae:	887b      	ldrh	r3, [r7, #2]
 80057b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    UART_Printf("[Bit 8]  Sticky   (Sticky Alerts)        : %s - If enabled, alert flags are not auto-cleared.\r\n",
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <Print_MAX1726x_Config+0xb4>
 80057b8:	4b21      	ldr	r3, [pc, #132]	@ (8005840 <Print_MAX1726x_Config+0x138>)
 80057ba:	e000      	b.n	80057be <Print_MAX1726x_Config+0xb6>
 80057bc:	4b21      	ldr	r3, [pc, #132]	@ (8005844 <Print_MAX1726x_Config+0x13c>)
 80057be:	4619      	mov	r1, r3
 80057c0:	482b      	ldr	r0, [pc, #172]	@ (8005870 <Print_MAX1726x_Config+0x168>)
 80057c2:	f7fb ff15 	bl	80015f0 <UART_Printf>
                
    // Bit 3: ALRT Pin Enable
    UART_Printf("[Bit 3]  A_EN     (ALRT Pin Enable)      : %s - If enabled, the ALRT pin will assert on alerts.\r\n",
                (config_reg & (1 << 3)) ? "ENABLED" : "DISABLED");
 80057c6:	887b      	ldrh	r3, [r7, #2]
 80057c8:	f003 0308 	and.w	r3, r3, #8
    UART_Printf("[Bit 3]  A_EN     (ALRT Pin Enable)      : %s - If enabled, the ALRT pin will assert on alerts.\r\n",
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <Print_MAX1726x_Config+0xcc>
 80057d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005840 <Print_MAX1726x_Config+0x138>)
 80057d2:	e000      	b.n	80057d6 <Print_MAX1726x_Config+0xce>
 80057d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005844 <Print_MAX1726x_Config+0x13c>)
 80057d6:	4619      	mov	r1, r3
 80057d8:	4826      	ldr	r0, [pc, #152]	@ (8005874 <Print_MAX1726x_Config+0x16c>)
 80057da:	f7fb ff09 	bl	80015f0 <UART_Printf>

    // Bit 2: State of Charge Alert Enable
    UART_Printf("[Bit 2]  S_EN     (SOC Alert En)         : %s - For main SOC threshold (SAlrtTh).\r\n",
                (config_reg & (1 << 2)) ? "ENABLED" : "DISABLED");
 80057de:	887b      	ldrh	r3, [r7, #2]
 80057e0:	f003 0304 	and.w	r3, r3, #4
    UART_Printf("[Bit 2]  S_EN     (SOC Alert En)         : %s - For main SOC threshold (SAlrtTh).\r\n",
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <Print_MAX1726x_Config+0xe4>
 80057e8:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <Print_MAX1726x_Config+0x138>)
 80057ea:	e000      	b.n	80057ee <Print_MAX1726x_Config+0xe6>
 80057ec:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <Print_MAX1726x_Config+0x13c>)
 80057ee:	4619      	mov	r1, r3
 80057f0:	4821      	ldr	r0, [pc, #132]	@ (8005878 <Print_MAX1726x_Config+0x170>)
 80057f2:	f7fb fefd 	bl	80015f0 <UART_Printf>
                
    // Bit 1: Temperature Alert Enable
    UART_Printf("[Bit 1]  TALRT_EN (Temperature Alert En) : %s\r\n",
                (config_reg & (1 << 1)) ? "ENABLED" : "DISABLED");
 80057f6:	887b      	ldrh	r3, [r7, #2]
 80057f8:	f003 0302 	and.w	r3, r3, #2
    UART_Printf("[Bit 1]  TALRT_EN (Temperature Alert En) : %s\r\n",
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <Print_MAX1726x_Config+0xfc>
 8005800:	4b0f      	ldr	r3, [pc, #60]	@ (8005840 <Print_MAX1726x_Config+0x138>)
 8005802:	e000      	b.n	8005806 <Print_MAX1726x_Config+0xfe>
 8005804:	4b0f      	ldr	r3, [pc, #60]	@ (8005844 <Print_MAX1726x_Config+0x13c>)
 8005806:	4619      	mov	r1, r3
 8005808:	481c      	ldr	r0, [pc, #112]	@ (800587c <Print_MAX1726x_Config+0x174>)
 800580a:	f7fb fef1 	bl	80015f0 <UART_Printf>

    // Bit 0: Voltage Alert Enable
    UART_Printf("[Bit 0]  VALRT_EN (Voltage Alert En)     : %s\r\n",
                (config_reg & (1 << 0)) ? "ENABLED" : "DISABLED");
 800580e:	887b      	ldrh	r3, [r7, #2]
 8005810:	f003 0301 	and.w	r3, r3, #1
    UART_Printf("[Bit 0]  VALRT_EN (Voltage Alert En)     : %s\r\n",
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <Print_MAX1726x_Config+0x114>
 8005818:	4b09      	ldr	r3, [pc, #36]	@ (8005840 <Print_MAX1726x_Config+0x138>)
 800581a:	e000      	b.n	800581e <Print_MAX1726x_Config+0x116>
 800581c:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <Print_MAX1726x_Config+0x13c>)
 800581e:	4619      	mov	r1, r3
 8005820:	4817      	ldr	r0, [pc, #92]	@ (8005880 <Print_MAX1726x_Config+0x178>)
 8005822:	f7fb fee5 	bl	80015f0 <UART_Printf>

    UART_Printf("----------------------------------------\r\n\r\n");
 8005826:	4817      	ldr	r0, [pc, #92]	@ (8005884 <Print_MAX1726x_Config+0x17c>)
 8005828:	f7fb fee2 	bl	80015f0 <UART_Printf>
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	08008c20 	.word	0x08008c20
 8005838:	08008c50 	.word	0x08008c50
 800583c:	08008944 	.word	0x08008944
 8005840:	08008970 	.word	0x08008970
 8005844:	08008978 	.word	0x08008978
 8005848:	08008c88 	.word	0x08008c88
 800584c:	08008cb8 	.word	0x08008cb8
 8005850:	08008ccc 	.word	0x08008ccc
 8005854:	08008ce8 	.word	0x08008ce8
 8005858:	08008d18 	.word	0x08008d18
 800585c:	08008d48 	.word	0x08008d48
 8005860:	08008d54 	.word	0x08008d54
 8005864:	08008d60 	.word	0x08008d60
 8005868:	08008d6c 	.word	0x08008d6c
 800586c:	08008d78 	.word	0x08008d78
 8005870:	08008da8 	.word	0x08008da8
 8005874:	08008e08 	.word	0x08008e08
 8005878:	08008e6c 	.word	0x08008e6c
 800587c:	08008ec0 	.word	0x08008ec0
 8005880:	08008ef0 	.word	0x08008ef0
 8005884:	08008bf0 	.word	0x08008bf0

08005888 <Print_MAX1726x_Status>:

void Print_MAX1726x_Status(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
    uint16_t status_reg;

    // Read the current value from the status register
    // maxim_max1726x_read_reg(MAX1726X_STATUS_REG, &status_reg);
    MAX17260_Register_ReadSingle(STATUS, &status_reg);
 800588e:	1dbb      	adds	r3, r7, #6
 8005890:	4619      	mov	r1, r3
 8005892:	2000      	movs	r0, #0
 8005894:	f7ff fe1e 	bl	80054d4 <MAX17260_Register_ReadSingle>

    UART_Printf("\r\n--- MAX1726x Status Register [0x%04X] ---\r\n", status_reg);
 8005898:	88fb      	ldrh	r3, [r7, #6]
 800589a:	4619      	mov	r1, r3
 800589c:	485e      	ldr	r0, [pc, #376]	@ (8005a18 <Print_MAX1726x_Status+0x190>)
 800589e:	f7fb fea7 	bl	80015f0 <UART_Printf>

    // Check each bit and print its meaning and state (1=SET, 0=NOT SET)

    // Bit 15: Battery Insertion
    UART_Printf("[Bit 15] Bst      (Battery Status Alert) : %s - Set on battery insertion.\r\n",
                (status_reg & (1 << 15)) ? "SET" : "NOT SET");
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	b21b      	sxth	r3, r3
    UART_Printf("[Bit 15] Bst      (Battery Status Alert) : %s - Set on battery insertion.\r\n",
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	da01      	bge.n	80058ae <Print_MAX1726x_Status+0x26>
 80058aa:	4b5c      	ldr	r3, [pc, #368]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 80058ac:	e000      	b.n	80058b0 <Print_MAX1726x_Status+0x28>
 80058ae:	4b5c      	ldr	r3, [pc, #368]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 80058b0:	4619      	mov	r1, r3
 80058b2:	485c      	ldr	r0, [pc, #368]	@ (8005a24 <Print_MAX1726x_Status+0x19c>)
 80058b4:	f7fb fe9c 	bl	80015f0 <UART_Printf>
    // UART_Printf("[Bit 14] Sc       (State of Charge Alert): %s - 1%% SOC change or charging termination.\r\n",
    //             (status_reg & (1 << 14)) ? "SET" : "NOT SET");

    // Bit 13: Peak Current Alert
    UART_Printf("[Bit 13] PA       (Peak Current Alert)   : %s - Sustained peak current exceeded.\r\n",
                (status_reg & (1 << 13)) ? "SET" : "NOT SET");
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    UART_Printf("[Bit 13] PA       (Peak Current Alert)   : %s - Sustained peak current exceeded.\r\n",
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <Print_MAX1726x_Status+0x3e>
 80058c2:	4b56      	ldr	r3, [pc, #344]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 80058c4:	e000      	b.n	80058c8 <Print_MAX1726x_Status+0x40>
 80058c6:	4b56      	ldr	r3, [pc, #344]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 80058c8:	4619      	mov	r1, r3
 80058ca:	4857      	ldr	r0, [pc, #348]	@ (8005a28 <Print_MAX1726x_Status+0x1a0>)
 80058cc:	f7fb fe90 	bl	80015f0 <UART_Printf>

    // Bit 12: Temperature Alert
    UART_Printf("[Bit 12] TA       (Temperature Alert)    : %s - Temperature threshold exceeded.\r\n",
                (status_reg & (1 << 12)) ? "SET" : "NOT SET");
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    UART_Printf("[Bit 12] TA       (Temperature Alert)    : %s - Temperature threshold exceeded.\r\n",
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d001      	beq.n	80058de <Print_MAX1726x_Status+0x56>
 80058da:	4b50      	ldr	r3, [pc, #320]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 80058dc:	e000      	b.n	80058e0 <Print_MAX1726x_Status+0x58>
 80058de:	4b50      	ldr	r3, [pc, #320]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 80058e0:	4619      	mov	r1, r3
 80058e2:	4852      	ldr	r0, [pc, #328]	@ (8005a2c <Print_MAX1726x_Status+0x1a4>)
 80058e4:	f7fb fe84 	bl	80015f0 <UART_Printf>

    // Bit 11: Voltage Alert
    UART_Printf("[Bit 11] VA       (Voltage Alert)        : %s - Voltage threshold exceeded.\r\n",
                (status_reg & (1 << 11)) ? "SET" : "NOT SET");
 80058e8:	88fb      	ldrh	r3, [r7, #6]
 80058ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
    UART_Printf("[Bit 11] VA       (Voltage Alert)        : %s - Voltage threshold exceeded.\r\n",
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <Print_MAX1726x_Status+0x6e>
 80058f2:	4b4a      	ldr	r3, [pc, #296]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 80058f4:	e000      	b.n	80058f8 <Print_MAX1726x_Status+0x70>
 80058f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 80058f8:	4619      	mov	r1, r3
 80058fa:	484d      	ldr	r0, [pc, #308]	@ (8005a30 <Print_MAX1726x_Status+0x1a8>)
 80058fc:	f7fb fe78 	bl	80015f0 <UART_Printf>

    // Bit 10: Current Alert
    UART_Printf("[Bit 10] CA       (Current Alert)        : %s - Current threshold exceeded.\r\n",
                (status_reg & (1 << 10)) ? "SET" : "NOT SET");
 8005900:	88fb      	ldrh	r3, [r7, #6]
 8005902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
    UART_Printf("[Bit 10] CA       (Current Alert)        : %s - Current threshold exceeded.\r\n",
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <Print_MAX1726x_Status+0x86>
 800590a:	4b44      	ldr	r3, [pc, #272]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 800590c:	e000      	b.n	8005910 <Print_MAX1726x_Status+0x88>
 800590e:	4b44      	ldr	r3, [pc, #272]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 8005910:	4619      	mov	r1, r3
 8005912:	4848      	ldr	r0, [pc, #288]	@ (8005a34 <Print_MAX1726x_Status+0x1ac>)
 8005914:	f7fb fe6c 	bl	80015f0 <UART_Printf>

    // Bit 9: Delta SOC Interrupt
    UART_Printf("[Bit 9]  dSOCi    (Delta SOC Interrupt)  : %s - RepSOC changed by 1%%.\r\n",
                (status_reg & (1 << 9)) ? "SET" : "NOT SET");
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
    UART_Printf("[Bit 9]  dSOCi    (Delta SOC Interrupt)  : %s - RepSOC changed by 1%%.\r\n",
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <Print_MAX1726x_Status+0x9e>
 8005922:	4b3e      	ldr	r3, [pc, #248]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 8005924:	e000      	b.n	8005928 <Print_MAX1726x_Status+0xa0>
 8005926:	4b3e      	ldr	r3, [pc, #248]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 8005928:	4619      	mov	r1, r3
 800592a:	4843      	ldr	r0, [pc, #268]	@ (8005a38 <Print_MAX1726x_Status+0x1b0>)
 800592c:	f7fb fe60 	bl	80015f0 <UART_Printf>

    // Bit 8: Min Current Alert
    UART_Printf("[Bit 8]  Imn      (Min Current Alert)    : %s - Current fell below min threshold.\r\n",
                (status_reg & (1 << 8)) ? "SET" : "NOT SET");
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    UART_Printf("[Bit 8]  Imn      (Min Current Alert)    : %s - Current fell below min threshold.\r\n",
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <Print_MAX1726x_Status+0xb6>
 800593a:	4b38      	ldr	r3, [pc, #224]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 800593c:	e000      	b.n	8005940 <Print_MAX1726x_Status+0xb8>
 800593e:	4b38      	ldr	r3, [pc, #224]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 8005940:	4619      	mov	r1, r3
 8005942:	483e      	ldr	r0, [pc, #248]	@ (8005a3c <Print_MAX1726x_Status+0x1b4>)
 8005944:	f7fb fe54 	bl	80015f0 <UART_Printf>

    // Bit 7: Max Current Alert
    UART_Printf("[Bit 7]  Imx      (Max Current Alert)    : %s - Current rose above max threshold.\r\n",
                (status_reg & (1 << 7)) ? "SET" : "NOT SET");
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    UART_Printf("[Bit 7]  Imx      (Max Current Alert)    : %s - Current rose above max threshold.\r\n",
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <Print_MAX1726x_Status+0xce>
 8005952:	4b32      	ldr	r3, [pc, #200]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 8005954:	e000      	b.n	8005958 <Print_MAX1726x_Status+0xd0>
 8005956:	4b32      	ldr	r3, [pc, #200]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 8005958:	4619      	mov	r1, r3
 800595a:	4839      	ldr	r0, [pc, #228]	@ (8005a40 <Print_MAX1726x_Status+0x1b8>)
 800595c:	f7fb fe48 	bl	80015f0 <UART_Printf>

    // Bit 6: Min Temperature Alert
    UART_Printf("[Bit 6]  Tmn      (Min Temp Alert)       : %s - Temp fell below min threshold.\r\n",
                (status_reg & (1 << 6)) ? "SET" : "NOT SET");
 8005960:	88fb      	ldrh	r3, [r7, #6]
 8005962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    UART_Printf("[Bit 6]  Tmn      (Min Temp Alert)       : %s - Temp fell below min threshold.\r\n",
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <Print_MAX1726x_Status+0xe6>
 800596a:	4b2c      	ldr	r3, [pc, #176]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 800596c:	e000      	b.n	8005970 <Print_MAX1726x_Status+0xe8>
 800596e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 8005970:	4619      	mov	r1, r3
 8005972:	4834      	ldr	r0, [pc, #208]	@ (8005a44 <Print_MAX1726x_Status+0x1bc>)
 8005974:	f7fb fe3c 	bl	80015f0 <UART_Printf>

    // Bit 5: Max Temperature Alert
    UART_Printf("[Bit 5]  Tmx      (Max Temp Alert)       : %s - Temp rose above max threshold.\r\n",
                (status_reg & (1 << 5)) ? "SET" : "NOT SET");
 8005978:	88fb      	ldrh	r3, [r7, #6]
 800597a:	f003 0320 	and.w	r3, r3, #32
    UART_Printf("[Bit 5]  Tmx      (Max Temp Alert)       : %s - Temp rose above max threshold.\r\n",
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <Print_MAX1726x_Status+0xfe>
 8005982:	4b26      	ldr	r3, [pc, #152]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 8005984:	e000      	b.n	8005988 <Print_MAX1726x_Status+0x100>
 8005986:	4b26      	ldr	r3, [pc, #152]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 8005988:	4619      	mov	r1, r3
 800598a:	482f      	ldr	r0, [pc, #188]	@ (8005a48 <Print_MAX1726x_Status+0x1c0>)
 800598c:	f7fb fe30 	bl	80015f0 <UART_Printf>

    // Bit 4: Min Voltage Alert
    UART_Printf("[Bit 4]  Vmn      (Min Voltage Alert)    : %s - Voltage fell below min threshold.\r\n",
                (status_reg & (1 << 4)) ? "SET" : "NOT SET");
 8005990:	88fb      	ldrh	r3, [r7, #6]
 8005992:	f003 0310 	and.w	r3, r3, #16
    UART_Printf("[Bit 4]  Vmn      (Min Voltage Alert)    : %s - Voltage fell below min threshold.\r\n",
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <Print_MAX1726x_Status+0x116>
 800599a:	4b20      	ldr	r3, [pc, #128]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 800599c:	e000      	b.n	80059a0 <Print_MAX1726x_Status+0x118>
 800599e:	4b20      	ldr	r3, [pc, #128]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 80059a0:	4619      	mov	r1, r3
 80059a2:	482a      	ldr	r0, [pc, #168]	@ (8005a4c <Print_MAX1726x_Status+0x1c4>)
 80059a4:	f7fb fe24 	bl	80015f0 <UART_Printf>

    // Bit 3: Max Voltage Alert
    UART_Printf("[Bit 3]  Vmx      (Max Voltage Alert)    : %s - Voltage rose above max threshold.\r\n",
                (status_reg & (1 << 3)) ? "SET" : "NOT SET");
 80059a8:	88fb      	ldrh	r3, [r7, #6]
 80059aa:	f003 0308 	and.w	r3, r3, #8
    UART_Printf("[Bit 3]  Vmx      (Max Voltage Alert)    : %s - Voltage rose above max threshold.\r\n",
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <Print_MAX1726x_Status+0x12e>
 80059b2:	4b1a      	ldr	r3, [pc, #104]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 80059b4:	e000      	b.n	80059b8 <Print_MAX1726x_Status+0x130>
 80059b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 80059b8:	4619      	mov	r1, r3
 80059ba:	4825      	ldr	r0, [pc, #148]	@ (8005a50 <Print_MAX1726x_Status+0x1c8>)
 80059bc:	f7fb fe18 	bl	80015f0 <UART_Printf>

    // Bit 2: State of Charge Alert
    UART_Printf("[Bit 2]  dSOC     (SOC Alert)            : %s - RepSOC crossed main SOC threshold.\r\n",
                (status_reg & (1 << 2)) ? "SET" : "NOT SET");
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	f003 0304 	and.w	r3, r3, #4
    UART_Printf("[Bit 2]  dSOC     (SOC Alert)            : %s - RepSOC crossed main SOC threshold.\r\n",
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <Print_MAX1726x_Status+0x146>
 80059ca:	4b14      	ldr	r3, [pc, #80]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 80059cc:	e000      	b.n	80059d0 <Print_MAX1726x_Status+0x148>
 80059ce:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 80059d0:	4619      	mov	r1, r3
 80059d2:	4820      	ldr	r0, [pc, #128]	@ (8005a54 <Print_MAX1726x_Status+0x1cc>)
 80059d4:	f7fb fe0c 	bl	80015f0 <UART_Printf>

    // Bit 1: Power On Reset
    UART_Printf("[Bit 1]  POR      (Power On Reset)       : %s - Chip has reset since last cleared.\r\n",
                (status_reg & (1 << 1)) ? "SET" : "NOT SET");
 80059d8:	88fb      	ldrh	r3, [r7, #6]
 80059da:	f003 0302 	and.w	r3, r3, #2
    UART_Printf("[Bit 1]  POR      (Power On Reset)       : %s - Chip has reset since last cleared.\r\n",
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d001      	beq.n	80059e6 <Print_MAX1726x_Status+0x15e>
 80059e2:	4b0e      	ldr	r3, [pc, #56]	@ (8005a1c <Print_MAX1726x_Status+0x194>)
 80059e4:	e000      	b.n	80059e8 <Print_MAX1726x_Status+0x160>
 80059e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005a20 <Print_MAX1726x_Status+0x198>)
 80059e8:	4619      	mov	r1, r3
 80059ea:	481b      	ldr	r0, [pc, #108]	@ (8005a58 <Print_MAX1726x_Status+0x1d0>)
 80059ec:	f7fb fe00 	bl	80015f0 <UART_Printf>

    // Bit 0: Battery Presence
    UART_Printf("[Bit 0]  BATT_PRES(Battery Presence)     : %s - Indicates if battery is present.\r\n",
                (status_reg & (1 << 0)) ? "PRESENT" : "ABSENT");
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	f003 0301 	and.w	r3, r3, #1
    UART_Printf("[Bit 0]  BATT_PRES(Battery Presence)     : %s - Indicates if battery is present.\r\n",
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <Print_MAX1726x_Status+0x176>
 80059fa:	4b18      	ldr	r3, [pc, #96]	@ (8005a5c <Print_MAX1726x_Status+0x1d4>)
 80059fc:	e000      	b.n	8005a00 <Print_MAX1726x_Status+0x178>
 80059fe:	4b18      	ldr	r3, [pc, #96]	@ (8005a60 <Print_MAX1726x_Status+0x1d8>)
 8005a00:	4619      	mov	r1, r3
 8005a02:	4818      	ldr	r0, [pc, #96]	@ (8005a64 <Print_MAX1726x_Status+0x1dc>)
 8005a04:	f7fb fdf4 	bl	80015f0 <UART_Printf>

    UART_Printf("----------------------------------------\r\n\r\n");
 8005a08:	4817      	ldr	r0, [pc, #92]	@ (8005a68 <Print_MAX1726x_Status+0x1e0>)
 8005a0a:	f7fb fdf1 	bl	80015f0 <UART_Printf>
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	08008f20 	.word	0x08008f20
 8005a1c:	08008f50 	.word	0x08008f50
 8005a20:	08008f54 	.word	0x08008f54
 8005a24:	08008f5c 	.word	0x08008f5c
 8005a28:	08008fa8 	.word	0x08008fa8
 8005a2c:	08008ffc 	.word	0x08008ffc
 8005a30:	08009050 	.word	0x08009050
 8005a34:	080090a0 	.word	0x080090a0
 8005a38:	080090f0 	.word	0x080090f0
 8005a3c:	0800913c 	.word	0x0800913c
 8005a40:	08009190 	.word	0x08009190
 8005a44:	080091e4 	.word	0x080091e4
 8005a48:	08009238 	.word	0x08009238
 8005a4c:	0800928c 	.word	0x0800928c
 8005a50:	080092e0 	.word	0x080092e0
 8005a54:	08009334 	.word	0x08009334
 8005a58:	0800938c 	.word	0x0800938c
 8005a5c:	080093e4 	.word	0x080093e4
 8005a60:	080093ec 	.word	0x080093ec
 8005a64:	080093f4 	.word	0x080093f4
 8005a68:	08008bf0 	.word	0x08008bf0

08005a6c <MAX17260_Register_printout>:

void MAX17260_Register_printout(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
    Print_MAX1726x_Status();
 8005a70:	f7ff ff0a 	bl	8005888 <Print_MAX1726x_Status>
    Print_MAX1726x_Config();
 8005a74:	f7ff fe48 	bl	8005708 <Print_MAX1726x_Config>
    Print_MAX1726x_Config2();
 8005a78:	f7ff fd7e 	bl	8005578 <Print_MAX1726x_Config2>
}
 8005a7c:	bf00      	nop
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <LWInit>:
 * @brief Performs the initial configuration of the MAX17260.
 *
 * This sequence is extracted from the `BATTSENSOR_LWInit` function and is
 * critical for setting up the device's model and configuration.
 */
static void LWInit(void) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
    int16_t value;

    // Exit hibernate mode sequence
    MAX17260_Register_WriteSingle(SOFT_WAKEUP, 0x90);
 8005a86:	2190      	movs	r1, #144	@ 0x90
 8005a88:	2060      	movs	r0, #96	@ 0x60
 8005a8a:	f7ff fd07 	bl	800549c <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(HIB_CFG, 0x00);
 8005a8e:	2100      	movs	r1, #0
 8005a90:	20ba      	movs	r0, #186	@ 0xba
 8005a92:	f7ff fd03 	bl	800549c <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(SOFT_WAKEUP, 0x00);
 8005a96:	2100      	movs	r1, #0
 8005a98:	2060      	movs	r0, #96	@ 0x60
 8005a9a:	f7ff fcff 	bl	800549c <MAX17260_Register_WriteSingle>

    // Initial config values from original file
    MAX17260_Register_WriteSingle(DESIGN_CAP, 0x7FF8);
 8005a9e:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 8005aa2:	2018      	movs	r0, #24
 8005aa4:	f7ff fcfa 	bl	800549c <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(I_CHG_TERM, 0x0000);
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	201e      	movs	r0, #30
 8005aac:	f7ff fcf6 	bl	800549c <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(V_EMPTY, 0x9661);
 8005ab0:	f249 6161 	movw	r1, #38497	@ 0x9661
 8005ab4:	203a      	movs	r0, #58	@ 0x3a
 8005ab6:	f7ff fcf1 	bl	800549c <MAX17260_Register_WriteSingle>

    // Write to ModelCfg and wait for it to clear
    MAX17260_Register_WriteSingle(MODEL_CFG, 0x8000);
 8005aba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005abe:	20db      	movs	r0, #219	@ 0xdb
 8005ac0:	f7ff fcec 	bl	800549c <MAX17260_Register_WriteSingle>
    do {
        MAX17260_Register_ReadSingle(MODEL_CFG, (uint16_t*)&value);
 8005ac4:	1dbb      	adds	r3, r7, #6
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	20db      	movs	r0, #219	@ 0xdb
 8005aca:	f7ff fd03 	bl	80054d4 <MAX17260_Register_ReadSingle>
    } while (value != 0x0000);
 8005ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f6      	bne.n	8005ac4 <LWInit+0x44>

    uint16_t status_val;
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 8005ad6:	1d3b      	adds	r3, r7, #4
 8005ad8:	4619      	mov	r1, r3
 8005ada:	2000      	movs	r0, #0
 8005adc:	f7ff fcfa 	bl	80054d4 <MAX17260_Register_ReadSingle>
    MAX17260_Register_WriteSingle(STATUS, status_val & ~(1 << 1)); // Clear POR bit
 8005ae0:	88bb      	ldrh	r3, [r7, #4]
 8005ae2:	f023 0302 	bic.w	r3, r3, #2
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	4619      	mov	r1, r3
 8005aea:	2000      	movs	r0, #0
 8005aec:	f7ff fcd6 	bl	800549c <MAX17260_Register_WriteSingle>

    MAX17260_Register_WriteSingle(HIB_CFG, 0x870C);
 8005af0:	f248 710c 	movw	r1, #34572	@ 0x870c
 8005af4:	20ba      	movs	r0, #186	@ 0xba
 8005af6:	f7ff fcd1 	bl	800549c <MAX17260_Register_WriteSingle>
    
    // Write final configuration
    MAX17260_Register_WriteSingle(CONFIG2, 0x0658);
 8005afa:	f44f 61cb 	mov.w	r1, #1624	@ 0x658
 8005afe:	20bb      	movs	r0, #187	@ 0xbb
 8005b00:	f7ff fccc 	bl	800549c <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(MODEL_CFG, 0x8000);
 8005b04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b08:	20db      	movs	r0, #219	@ 0xdb
 8005b0a:	f7ff fcc7 	bl	800549c <MAX17260_Register_WriteSingle>
}
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <BatteryMonitor_Init>:

//=============================================================================
// PUBLIC FUNCTION IMPLEMENTATIONS
//=============================================================================

void BatteryMonitor_Init(void) {
 8005b16:	b580      	push	{r7, lr}
 8005b18:	af00      	add	r7, sp, #0
    i2c_init();
 8005b1a:	f7ff fc52 	bl	80053c2 <i2c_init>

    // Small delay to ensure the sensor is ready after power-up.
    delay_ms(10);
 8005b1e:	200a      	movs	r0, #10
 8005b20:	f7ff fc9c 	bl	800545c <delay_ms>

    if (IsPOR()) {
 8005b24:	f7ff fcfb 	bl	800551e <IsPOR>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <BatteryMonitor_Init+0x20>
        LWInit();
 8005b2e:	f7ff ffa7 	bl	8005a80 <LWInit>
        ClearPOR();
 8005b32:	f7ff fd0a 	bl	800554a <ClearPOR>
    }
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <maxim_max1726x_read_reg>:
	                  100);                     // A standard timeout in ms
}

/* ************************************************************************* */
void maxim_max1726x_read_reg(uint8_t reg_addr, uint16_t *reg_data)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af02      	add	r7, sp, #8
 8005b40:	4603      	mov	r3, r0
 8005b42:	6039      	str	r1, [r7, #0]
 8005b44:	71fb      	strb	r3, [r7, #7]
//
//	maxim_max32660_i2c1_read(MAX1726X_I2C_ADDR, i2c_data, 2, 0);
//
//	*reg_data = i2c_data[1];
//	*reg_data = ((*reg_data)<<8) | i2c_data[0];
	I2C1_MemRead(MAX1726X_I2C_ADDR,         // The I2C device address (0x6C)
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	b299      	uxth	r1, r3
 8005b4a:	2364      	movs	r3, #100	@ 0x64
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	2302      	movs	r3, #2
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2201      	movs	r2, #1
 8005b56:	206c      	movs	r0, #108	@ 0x6c
 8005b58:	f7fb fbba 	bl	80012d0 <I2C1_MemRead>
	                 reg_addr,                  // The register address to read from
	                 I2C_MEMADD_SIZE_8BIT,      // The register address is 8 bits
	                 (uint8_t *)reg_data,       // A pointer to store the received data
	                 2,                         // We are reading 2 bytes
	                 100);                      // A standard timeout in ms
}
 8005b5c:	bf00      	nop
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <maxim_max1726x_get_repsoc>:
	return repcap;
}

/* ************************************************************************* */
float maxim_max1726x_get_repsoc(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
	float repsoc;
	maxim_max1726x_read_reg(MAX1726X_REPSOC_REG, &max1726x_regs[MAX1726X_REPSOC_REG]);
 8005b6a:	490c      	ldr	r1, [pc, #48]	@ (8005b9c <maxim_max1726x_get_repsoc+0x38>)
 8005b6c:	2006      	movs	r0, #6
 8005b6e:	f7ff ffe4 	bl	8005b3a <maxim_max1726x_read_reg>

	repsoc = (float)max1726x_regs[MAX1726X_REPSOC_REG] / 256.0f;
 8005b72:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <maxim_max1726x_get_repsoc+0x3c>)
 8005b74:	899b      	ldrh	r3, [r3, #12]
 8005b76:	ee07 3a90 	vmov	s15, r3
 8005b7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b7e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005ba4 <maxim_max1726x_get_repsoc+0x40>
 8005b82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b86:	edc7 7a01 	vstr	s15, [r7, #4]
	return repsoc;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	ee07 3a90 	vmov	s15, r3
}
 8005b90:	eeb0 0a67 	vmov.f32	s0, s15
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20000458 	.word	0x20000458
 8005ba0:	2000044c 	.word	0x2000044c
 8005ba4:	43800000 	.word	0x43800000

08005ba8 <__cvt>:
 8005ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	ec57 6b10 	vmov	r6, r7, d0
 8005bb0:	2f00      	cmp	r7, #0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	463b      	mov	r3, r7
 8005bb8:	bfbb      	ittet	lt
 8005bba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005bbe:	461f      	movlt	r7, r3
 8005bc0:	2300      	movge	r3, #0
 8005bc2:	232d      	movlt	r3, #45	@ 0x2d
 8005bc4:	700b      	strb	r3, [r1, #0]
 8005bc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bc8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005bcc:	4691      	mov	r9, r2
 8005bce:	f023 0820 	bic.w	r8, r3, #32
 8005bd2:	bfbc      	itt	lt
 8005bd4:	4632      	movlt	r2, r6
 8005bd6:	4616      	movlt	r6, r2
 8005bd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bdc:	d005      	beq.n	8005bea <__cvt+0x42>
 8005bde:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005be2:	d100      	bne.n	8005be6 <__cvt+0x3e>
 8005be4:	3401      	adds	r4, #1
 8005be6:	2102      	movs	r1, #2
 8005be8:	e000      	b.n	8005bec <__cvt+0x44>
 8005bea:	2103      	movs	r1, #3
 8005bec:	ab03      	add	r3, sp, #12
 8005bee:	9301      	str	r3, [sp, #4]
 8005bf0:	ab02      	add	r3, sp, #8
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	ec47 6b10 	vmov	d0, r6, r7
 8005bf8:	4653      	mov	r3, sl
 8005bfa:	4622      	mov	r2, r4
 8005bfc:	f000 fe74 	bl	80068e8 <_dtoa_r>
 8005c00:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005c04:	4605      	mov	r5, r0
 8005c06:	d119      	bne.n	8005c3c <__cvt+0x94>
 8005c08:	f019 0f01 	tst.w	r9, #1
 8005c0c:	d00e      	beq.n	8005c2c <__cvt+0x84>
 8005c0e:	eb00 0904 	add.w	r9, r0, r4
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	4630      	mov	r0, r6
 8005c18:	4639      	mov	r1, r7
 8005c1a:	f7fa ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c1e:	b108      	cbz	r0, 8005c24 <__cvt+0x7c>
 8005c20:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c24:	2230      	movs	r2, #48	@ 0x30
 8005c26:	9b03      	ldr	r3, [sp, #12]
 8005c28:	454b      	cmp	r3, r9
 8005c2a:	d31e      	bcc.n	8005c6a <__cvt+0xc2>
 8005c2c:	9b03      	ldr	r3, [sp, #12]
 8005c2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c30:	1b5b      	subs	r3, r3, r5
 8005c32:	4628      	mov	r0, r5
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	b004      	add	sp, #16
 8005c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005c40:	eb00 0904 	add.w	r9, r0, r4
 8005c44:	d1e5      	bne.n	8005c12 <__cvt+0x6a>
 8005c46:	7803      	ldrb	r3, [r0, #0]
 8005c48:	2b30      	cmp	r3, #48	@ 0x30
 8005c4a:	d10a      	bne.n	8005c62 <__cvt+0xba>
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	2300      	movs	r3, #0
 8005c50:	4630      	mov	r0, r6
 8005c52:	4639      	mov	r1, r7
 8005c54:	f7fa ff38 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c58:	b918      	cbnz	r0, 8005c62 <__cvt+0xba>
 8005c5a:	f1c4 0401 	rsb	r4, r4, #1
 8005c5e:	f8ca 4000 	str.w	r4, [sl]
 8005c62:	f8da 3000 	ldr.w	r3, [sl]
 8005c66:	4499      	add	r9, r3
 8005c68:	e7d3      	b.n	8005c12 <__cvt+0x6a>
 8005c6a:	1c59      	adds	r1, r3, #1
 8005c6c:	9103      	str	r1, [sp, #12]
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	e7d9      	b.n	8005c26 <__cvt+0x7e>

08005c72 <__exponent>:
 8005c72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c74:	2900      	cmp	r1, #0
 8005c76:	bfba      	itte	lt
 8005c78:	4249      	neglt	r1, r1
 8005c7a:	232d      	movlt	r3, #45	@ 0x2d
 8005c7c:	232b      	movge	r3, #43	@ 0x2b
 8005c7e:	2909      	cmp	r1, #9
 8005c80:	7002      	strb	r2, [r0, #0]
 8005c82:	7043      	strb	r3, [r0, #1]
 8005c84:	dd29      	ble.n	8005cda <__exponent+0x68>
 8005c86:	f10d 0307 	add.w	r3, sp, #7
 8005c8a:	461d      	mov	r5, r3
 8005c8c:	270a      	movs	r7, #10
 8005c8e:	461a      	mov	r2, r3
 8005c90:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c94:	fb07 1416 	mls	r4, r7, r6, r1
 8005c98:	3430      	adds	r4, #48	@ 0x30
 8005c9a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c9e:	460c      	mov	r4, r1
 8005ca0:	2c63      	cmp	r4, #99	@ 0x63
 8005ca2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	dcf1      	bgt.n	8005c8e <__exponent+0x1c>
 8005caa:	3130      	adds	r1, #48	@ 0x30
 8005cac:	1e94      	subs	r4, r2, #2
 8005cae:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005cb2:	1c41      	adds	r1, r0, #1
 8005cb4:	4623      	mov	r3, r4
 8005cb6:	42ab      	cmp	r3, r5
 8005cb8:	d30a      	bcc.n	8005cd0 <__exponent+0x5e>
 8005cba:	f10d 0309 	add.w	r3, sp, #9
 8005cbe:	1a9b      	subs	r3, r3, r2
 8005cc0:	42ac      	cmp	r4, r5
 8005cc2:	bf88      	it	hi
 8005cc4:	2300      	movhi	r3, #0
 8005cc6:	3302      	adds	r3, #2
 8005cc8:	4403      	add	r3, r0
 8005cca:	1a18      	subs	r0, r3, r0
 8005ccc:	b003      	add	sp, #12
 8005cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cd0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005cd4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005cd8:	e7ed      	b.n	8005cb6 <__exponent+0x44>
 8005cda:	2330      	movs	r3, #48	@ 0x30
 8005cdc:	3130      	adds	r1, #48	@ 0x30
 8005cde:	7083      	strb	r3, [r0, #2]
 8005ce0:	70c1      	strb	r1, [r0, #3]
 8005ce2:	1d03      	adds	r3, r0, #4
 8005ce4:	e7f1      	b.n	8005cca <__exponent+0x58>
	...

08005ce8 <_printf_float>:
 8005ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cec:	b08d      	sub	sp, #52	@ 0x34
 8005cee:	460c      	mov	r4, r1
 8005cf0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005cf4:	4616      	mov	r6, r2
 8005cf6:	461f      	mov	r7, r3
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	f000 fcf5 	bl	80066e8 <_localeconv_r>
 8005cfe:	6803      	ldr	r3, [r0, #0]
 8005d00:	9304      	str	r3, [sp, #16]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fa fab4 	bl	8000270 <strlen>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d10:	9005      	str	r0, [sp, #20]
 8005d12:	3307      	adds	r3, #7
 8005d14:	f023 0307 	bic.w	r3, r3, #7
 8005d18:	f103 0208 	add.w	r2, r3, #8
 8005d1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005d20:	f8d4 b000 	ldr.w	fp, [r4]
 8005d24:	f8c8 2000 	str.w	r2, [r8]
 8005d28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005d30:	9307      	str	r3, [sp, #28]
 8005d32:	f8cd 8018 	str.w	r8, [sp, #24]
 8005d36:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005d3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d3e:	4b9c      	ldr	r3, [pc, #624]	@ (8005fb0 <_printf_float+0x2c8>)
 8005d40:	f04f 32ff 	mov.w	r2, #4294967295
 8005d44:	f7fa fef2 	bl	8000b2c <__aeabi_dcmpun>
 8005d48:	bb70      	cbnz	r0, 8005da8 <_printf_float+0xc0>
 8005d4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d4e:	4b98      	ldr	r3, [pc, #608]	@ (8005fb0 <_printf_float+0x2c8>)
 8005d50:	f04f 32ff 	mov.w	r2, #4294967295
 8005d54:	f7fa fecc 	bl	8000af0 <__aeabi_dcmple>
 8005d58:	bb30      	cbnz	r0, 8005da8 <_printf_float+0xc0>
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4640      	mov	r0, r8
 8005d60:	4649      	mov	r1, r9
 8005d62:	f7fa febb 	bl	8000adc <__aeabi_dcmplt>
 8005d66:	b110      	cbz	r0, 8005d6e <_printf_float+0x86>
 8005d68:	232d      	movs	r3, #45	@ 0x2d
 8005d6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d6e:	4a91      	ldr	r2, [pc, #580]	@ (8005fb4 <_printf_float+0x2cc>)
 8005d70:	4b91      	ldr	r3, [pc, #580]	@ (8005fb8 <_printf_float+0x2d0>)
 8005d72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d76:	bf8c      	ite	hi
 8005d78:	4690      	movhi	r8, r2
 8005d7a:	4698      	movls	r8, r3
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	f02b 0304 	bic.w	r3, fp, #4
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	f04f 0900 	mov.w	r9, #0
 8005d8a:	9700      	str	r7, [sp, #0]
 8005d8c:	4633      	mov	r3, r6
 8005d8e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d90:	4621      	mov	r1, r4
 8005d92:	4628      	mov	r0, r5
 8005d94:	f000 f9d2 	bl	800613c <_printf_common>
 8005d98:	3001      	adds	r0, #1
 8005d9a:	f040 808d 	bne.w	8005eb8 <_printf_float+0x1d0>
 8005d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005da2:	b00d      	add	sp, #52	@ 0x34
 8005da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	4640      	mov	r0, r8
 8005dae:	4649      	mov	r1, r9
 8005db0:	f7fa febc 	bl	8000b2c <__aeabi_dcmpun>
 8005db4:	b140      	cbz	r0, 8005dc8 <_printf_float+0xe0>
 8005db6:	464b      	mov	r3, r9
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	bfbc      	itt	lt
 8005dbc:	232d      	movlt	r3, #45	@ 0x2d
 8005dbe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8005fbc <_printf_float+0x2d4>)
 8005dc4:	4b7e      	ldr	r3, [pc, #504]	@ (8005fc0 <_printf_float+0x2d8>)
 8005dc6:	e7d4      	b.n	8005d72 <_printf_float+0x8a>
 8005dc8:	6863      	ldr	r3, [r4, #4]
 8005dca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005dce:	9206      	str	r2, [sp, #24]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	d13b      	bne.n	8005e4c <_printf_float+0x164>
 8005dd4:	2306      	movs	r3, #6
 8005dd6:	6063      	str	r3, [r4, #4]
 8005dd8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005ddc:	2300      	movs	r3, #0
 8005dde:	6022      	str	r2, [r4, #0]
 8005de0:	9303      	str	r3, [sp, #12]
 8005de2:	ab0a      	add	r3, sp, #40	@ 0x28
 8005de4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005de8:	ab09      	add	r3, sp, #36	@ 0x24
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	6861      	ldr	r1, [r4, #4]
 8005dee:	ec49 8b10 	vmov	d0, r8, r9
 8005df2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005df6:	4628      	mov	r0, r5
 8005df8:	f7ff fed6 	bl	8005ba8 <__cvt>
 8005dfc:	9b06      	ldr	r3, [sp, #24]
 8005dfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005e00:	2b47      	cmp	r3, #71	@ 0x47
 8005e02:	4680      	mov	r8, r0
 8005e04:	d129      	bne.n	8005e5a <_printf_float+0x172>
 8005e06:	1cc8      	adds	r0, r1, #3
 8005e08:	db02      	blt.n	8005e10 <_printf_float+0x128>
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	4299      	cmp	r1, r3
 8005e0e:	dd41      	ble.n	8005e94 <_printf_float+0x1ac>
 8005e10:	f1aa 0a02 	sub.w	sl, sl, #2
 8005e14:	fa5f fa8a 	uxtb.w	sl, sl
 8005e18:	3901      	subs	r1, #1
 8005e1a:	4652      	mov	r2, sl
 8005e1c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005e20:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e22:	f7ff ff26 	bl	8005c72 <__exponent>
 8005e26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005e28:	1813      	adds	r3, r2, r0
 8005e2a:	2a01      	cmp	r2, #1
 8005e2c:	4681      	mov	r9, r0
 8005e2e:	6123      	str	r3, [r4, #16]
 8005e30:	dc02      	bgt.n	8005e38 <_printf_float+0x150>
 8005e32:	6822      	ldr	r2, [r4, #0]
 8005e34:	07d2      	lsls	r2, r2, #31
 8005e36:	d501      	bpl.n	8005e3c <_printf_float+0x154>
 8005e38:	3301      	adds	r3, #1
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d0a2      	beq.n	8005d8a <_printf_float+0xa2>
 8005e44:	232d      	movs	r3, #45	@ 0x2d
 8005e46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e4a:	e79e      	b.n	8005d8a <_printf_float+0xa2>
 8005e4c:	9a06      	ldr	r2, [sp, #24]
 8005e4e:	2a47      	cmp	r2, #71	@ 0x47
 8005e50:	d1c2      	bne.n	8005dd8 <_printf_float+0xf0>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1c0      	bne.n	8005dd8 <_printf_float+0xf0>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e7bd      	b.n	8005dd6 <_printf_float+0xee>
 8005e5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e5e:	d9db      	bls.n	8005e18 <_printf_float+0x130>
 8005e60:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005e64:	d118      	bne.n	8005e98 <_printf_float+0x1b0>
 8005e66:	2900      	cmp	r1, #0
 8005e68:	6863      	ldr	r3, [r4, #4]
 8005e6a:	dd0b      	ble.n	8005e84 <_printf_float+0x19c>
 8005e6c:	6121      	str	r1, [r4, #16]
 8005e6e:	b913      	cbnz	r3, 8005e76 <_printf_float+0x18e>
 8005e70:	6822      	ldr	r2, [r4, #0]
 8005e72:	07d0      	lsls	r0, r2, #31
 8005e74:	d502      	bpl.n	8005e7c <_printf_float+0x194>
 8005e76:	3301      	adds	r3, #1
 8005e78:	440b      	add	r3, r1
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e7e:	f04f 0900 	mov.w	r9, #0
 8005e82:	e7db      	b.n	8005e3c <_printf_float+0x154>
 8005e84:	b913      	cbnz	r3, 8005e8c <_printf_float+0x1a4>
 8005e86:	6822      	ldr	r2, [r4, #0]
 8005e88:	07d2      	lsls	r2, r2, #31
 8005e8a:	d501      	bpl.n	8005e90 <_printf_float+0x1a8>
 8005e8c:	3302      	adds	r3, #2
 8005e8e:	e7f4      	b.n	8005e7a <_printf_float+0x192>
 8005e90:	2301      	movs	r3, #1
 8005e92:	e7f2      	b.n	8005e7a <_printf_float+0x192>
 8005e94:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e9a:	4299      	cmp	r1, r3
 8005e9c:	db05      	blt.n	8005eaa <_printf_float+0x1c2>
 8005e9e:	6823      	ldr	r3, [r4, #0]
 8005ea0:	6121      	str	r1, [r4, #16]
 8005ea2:	07d8      	lsls	r0, r3, #31
 8005ea4:	d5ea      	bpl.n	8005e7c <_printf_float+0x194>
 8005ea6:	1c4b      	adds	r3, r1, #1
 8005ea8:	e7e7      	b.n	8005e7a <_printf_float+0x192>
 8005eaa:	2900      	cmp	r1, #0
 8005eac:	bfd4      	ite	le
 8005eae:	f1c1 0202 	rsble	r2, r1, #2
 8005eb2:	2201      	movgt	r2, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	e7e0      	b.n	8005e7a <_printf_float+0x192>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	055a      	lsls	r2, r3, #21
 8005ebc:	d407      	bmi.n	8005ece <_printf_float+0x1e6>
 8005ebe:	6923      	ldr	r3, [r4, #16]
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d12b      	bne.n	8005f24 <_printf_float+0x23c>
 8005ecc:	e767      	b.n	8005d9e <_printf_float+0xb6>
 8005ece:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ed2:	f240 80dd 	bls.w	8006090 <_printf_float+0x3a8>
 8005ed6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005eda:	2200      	movs	r2, #0
 8005edc:	2300      	movs	r3, #0
 8005ede:	f7fa fdf3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d033      	beq.n	8005f4e <_printf_float+0x266>
 8005ee6:	4a37      	ldr	r2, [pc, #220]	@ (8005fc4 <_printf_float+0x2dc>)
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4631      	mov	r1, r6
 8005eec:	4628      	mov	r0, r5
 8005eee:	47b8      	blx	r7
 8005ef0:	3001      	adds	r0, #1
 8005ef2:	f43f af54 	beq.w	8005d9e <_printf_float+0xb6>
 8005ef6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005efa:	4543      	cmp	r3, r8
 8005efc:	db02      	blt.n	8005f04 <_printf_float+0x21c>
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	07d8      	lsls	r0, r3, #31
 8005f02:	d50f      	bpl.n	8005f24 <_printf_float+0x23c>
 8005f04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f08:	4631      	mov	r1, r6
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	47b8      	blx	r7
 8005f0e:	3001      	adds	r0, #1
 8005f10:	f43f af45 	beq.w	8005d9e <_printf_float+0xb6>
 8005f14:	f04f 0900 	mov.w	r9, #0
 8005f18:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f1c:	f104 0a1a 	add.w	sl, r4, #26
 8005f20:	45c8      	cmp	r8, r9
 8005f22:	dc09      	bgt.n	8005f38 <_printf_float+0x250>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	079b      	lsls	r3, r3, #30
 8005f28:	f100 8103 	bmi.w	8006132 <_printf_float+0x44a>
 8005f2c:	68e0      	ldr	r0, [r4, #12]
 8005f2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f30:	4298      	cmp	r0, r3
 8005f32:	bfb8      	it	lt
 8005f34:	4618      	movlt	r0, r3
 8005f36:	e734      	b.n	8005da2 <_printf_float+0xba>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	4652      	mov	r2, sl
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b8      	blx	r7
 8005f42:	3001      	adds	r0, #1
 8005f44:	f43f af2b 	beq.w	8005d9e <_printf_float+0xb6>
 8005f48:	f109 0901 	add.w	r9, r9, #1
 8005f4c:	e7e8      	b.n	8005f20 <_printf_float+0x238>
 8005f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	dc39      	bgt.n	8005fc8 <_printf_float+0x2e0>
 8005f54:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc4 <_printf_float+0x2dc>)
 8005f56:	2301      	movs	r3, #1
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4628      	mov	r0, r5
 8005f5c:	47b8      	blx	r7
 8005f5e:	3001      	adds	r0, #1
 8005f60:	f43f af1d 	beq.w	8005d9e <_printf_float+0xb6>
 8005f64:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005f68:	ea59 0303 	orrs.w	r3, r9, r3
 8005f6c:	d102      	bne.n	8005f74 <_printf_float+0x28c>
 8005f6e:	6823      	ldr	r3, [r4, #0]
 8005f70:	07d9      	lsls	r1, r3, #31
 8005f72:	d5d7      	bpl.n	8005f24 <_printf_float+0x23c>
 8005f74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f78:	4631      	mov	r1, r6
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	47b8      	blx	r7
 8005f7e:	3001      	adds	r0, #1
 8005f80:	f43f af0d 	beq.w	8005d9e <_printf_float+0xb6>
 8005f84:	f04f 0a00 	mov.w	sl, #0
 8005f88:	f104 0b1a 	add.w	fp, r4, #26
 8005f8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f8e:	425b      	negs	r3, r3
 8005f90:	4553      	cmp	r3, sl
 8005f92:	dc01      	bgt.n	8005f98 <_printf_float+0x2b0>
 8005f94:	464b      	mov	r3, r9
 8005f96:	e793      	b.n	8005ec0 <_printf_float+0x1d8>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	465a      	mov	r2, fp
 8005f9c:	4631      	mov	r1, r6
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	47b8      	blx	r7
 8005fa2:	3001      	adds	r0, #1
 8005fa4:	f43f aefb 	beq.w	8005d9e <_printf_float+0xb6>
 8005fa8:	f10a 0a01 	add.w	sl, sl, #1
 8005fac:	e7ee      	b.n	8005f8c <_printf_float+0x2a4>
 8005fae:	bf00      	nop
 8005fb0:	7fefffff 	.word	0x7fefffff
 8005fb4:	08009494 	.word	0x08009494
 8005fb8:	08009490 	.word	0x08009490
 8005fbc:	0800949c 	.word	0x0800949c
 8005fc0:	08009498 	.word	0x08009498
 8005fc4:	080094a0 	.word	0x080094a0
 8005fc8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005fce:	4553      	cmp	r3, sl
 8005fd0:	bfa8      	it	ge
 8005fd2:	4653      	movge	r3, sl
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	4699      	mov	r9, r3
 8005fd8:	dc36      	bgt.n	8006048 <_printf_float+0x360>
 8005fda:	f04f 0b00 	mov.w	fp, #0
 8005fde:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fe2:	f104 021a 	add.w	r2, r4, #26
 8005fe6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005fe8:	9306      	str	r3, [sp, #24]
 8005fea:	eba3 0309 	sub.w	r3, r3, r9
 8005fee:	455b      	cmp	r3, fp
 8005ff0:	dc31      	bgt.n	8006056 <_printf_float+0x36e>
 8005ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff4:	459a      	cmp	sl, r3
 8005ff6:	dc3a      	bgt.n	800606e <_printf_float+0x386>
 8005ff8:	6823      	ldr	r3, [r4, #0]
 8005ffa:	07da      	lsls	r2, r3, #31
 8005ffc:	d437      	bmi.n	800606e <_printf_float+0x386>
 8005ffe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006000:	ebaa 0903 	sub.w	r9, sl, r3
 8006004:	9b06      	ldr	r3, [sp, #24]
 8006006:	ebaa 0303 	sub.w	r3, sl, r3
 800600a:	4599      	cmp	r9, r3
 800600c:	bfa8      	it	ge
 800600e:	4699      	movge	r9, r3
 8006010:	f1b9 0f00 	cmp.w	r9, #0
 8006014:	dc33      	bgt.n	800607e <_printf_float+0x396>
 8006016:	f04f 0800 	mov.w	r8, #0
 800601a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800601e:	f104 0b1a 	add.w	fp, r4, #26
 8006022:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006024:	ebaa 0303 	sub.w	r3, sl, r3
 8006028:	eba3 0309 	sub.w	r3, r3, r9
 800602c:	4543      	cmp	r3, r8
 800602e:	f77f af79 	ble.w	8005f24 <_printf_float+0x23c>
 8006032:	2301      	movs	r3, #1
 8006034:	465a      	mov	r2, fp
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f aeae 	beq.w	8005d9e <_printf_float+0xb6>
 8006042:	f108 0801 	add.w	r8, r8, #1
 8006046:	e7ec      	b.n	8006022 <_printf_float+0x33a>
 8006048:	4642      	mov	r2, r8
 800604a:	4631      	mov	r1, r6
 800604c:	4628      	mov	r0, r5
 800604e:	47b8      	blx	r7
 8006050:	3001      	adds	r0, #1
 8006052:	d1c2      	bne.n	8005fda <_printf_float+0x2f2>
 8006054:	e6a3      	b.n	8005d9e <_printf_float+0xb6>
 8006056:	2301      	movs	r3, #1
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	9206      	str	r2, [sp, #24]
 800605e:	47b8      	blx	r7
 8006060:	3001      	adds	r0, #1
 8006062:	f43f ae9c 	beq.w	8005d9e <_printf_float+0xb6>
 8006066:	9a06      	ldr	r2, [sp, #24]
 8006068:	f10b 0b01 	add.w	fp, fp, #1
 800606c:	e7bb      	b.n	8005fe6 <_printf_float+0x2fe>
 800606e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	d1c0      	bne.n	8005ffe <_printf_float+0x316>
 800607c:	e68f      	b.n	8005d9e <_printf_float+0xb6>
 800607e:	9a06      	ldr	r2, [sp, #24]
 8006080:	464b      	mov	r3, r9
 8006082:	4442      	add	r2, r8
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	d1c3      	bne.n	8006016 <_printf_float+0x32e>
 800608e:	e686      	b.n	8005d9e <_printf_float+0xb6>
 8006090:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006094:	f1ba 0f01 	cmp.w	sl, #1
 8006098:	dc01      	bgt.n	800609e <_printf_float+0x3b6>
 800609a:	07db      	lsls	r3, r3, #31
 800609c:	d536      	bpl.n	800610c <_printf_float+0x424>
 800609e:	2301      	movs	r3, #1
 80060a0:	4642      	mov	r2, r8
 80060a2:	4631      	mov	r1, r6
 80060a4:	4628      	mov	r0, r5
 80060a6:	47b8      	blx	r7
 80060a8:	3001      	adds	r0, #1
 80060aa:	f43f ae78 	beq.w	8005d9e <_printf_float+0xb6>
 80060ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060b2:	4631      	mov	r1, r6
 80060b4:	4628      	mov	r0, r5
 80060b6:	47b8      	blx	r7
 80060b8:	3001      	adds	r0, #1
 80060ba:	f43f ae70 	beq.w	8005d9e <_printf_float+0xb6>
 80060be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80060c2:	2200      	movs	r2, #0
 80060c4:	2300      	movs	r3, #0
 80060c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060ca:	f7fa fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80060ce:	b9c0      	cbnz	r0, 8006102 <_printf_float+0x41a>
 80060d0:	4653      	mov	r3, sl
 80060d2:	f108 0201 	add.w	r2, r8, #1
 80060d6:	4631      	mov	r1, r6
 80060d8:	4628      	mov	r0, r5
 80060da:	47b8      	blx	r7
 80060dc:	3001      	adds	r0, #1
 80060de:	d10c      	bne.n	80060fa <_printf_float+0x412>
 80060e0:	e65d      	b.n	8005d9e <_printf_float+0xb6>
 80060e2:	2301      	movs	r3, #1
 80060e4:	465a      	mov	r2, fp
 80060e6:	4631      	mov	r1, r6
 80060e8:	4628      	mov	r0, r5
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	f43f ae56 	beq.w	8005d9e <_printf_float+0xb6>
 80060f2:	f108 0801 	add.w	r8, r8, #1
 80060f6:	45d0      	cmp	r8, sl
 80060f8:	dbf3      	blt.n	80060e2 <_printf_float+0x3fa>
 80060fa:	464b      	mov	r3, r9
 80060fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006100:	e6df      	b.n	8005ec2 <_printf_float+0x1da>
 8006102:	f04f 0800 	mov.w	r8, #0
 8006106:	f104 0b1a 	add.w	fp, r4, #26
 800610a:	e7f4      	b.n	80060f6 <_printf_float+0x40e>
 800610c:	2301      	movs	r3, #1
 800610e:	4642      	mov	r2, r8
 8006110:	e7e1      	b.n	80060d6 <_printf_float+0x3ee>
 8006112:	2301      	movs	r3, #1
 8006114:	464a      	mov	r2, r9
 8006116:	4631      	mov	r1, r6
 8006118:	4628      	mov	r0, r5
 800611a:	47b8      	blx	r7
 800611c:	3001      	adds	r0, #1
 800611e:	f43f ae3e 	beq.w	8005d9e <_printf_float+0xb6>
 8006122:	f108 0801 	add.w	r8, r8, #1
 8006126:	68e3      	ldr	r3, [r4, #12]
 8006128:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800612a:	1a5b      	subs	r3, r3, r1
 800612c:	4543      	cmp	r3, r8
 800612e:	dcf0      	bgt.n	8006112 <_printf_float+0x42a>
 8006130:	e6fc      	b.n	8005f2c <_printf_float+0x244>
 8006132:	f04f 0800 	mov.w	r8, #0
 8006136:	f104 0919 	add.w	r9, r4, #25
 800613a:	e7f4      	b.n	8006126 <_printf_float+0x43e>

0800613c <_printf_common>:
 800613c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006140:	4616      	mov	r6, r2
 8006142:	4698      	mov	r8, r3
 8006144:	688a      	ldr	r2, [r1, #8]
 8006146:	690b      	ldr	r3, [r1, #16]
 8006148:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800614c:	4293      	cmp	r3, r2
 800614e:	bfb8      	it	lt
 8006150:	4613      	movlt	r3, r2
 8006152:	6033      	str	r3, [r6, #0]
 8006154:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006158:	4607      	mov	r7, r0
 800615a:	460c      	mov	r4, r1
 800615c:	b10a      	cbz	r2, 8006162 <_printf_common+0x26>
 800615e:	3301      	adds	r3, #1
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	6823      	ldr	r3, [r4, #0]
 8006164:	0699      	lsls	r1, r3, #26
 8006166:	bf42      	ittt	mi
 8006168:	6833      	ldrmi	r3, [r6, #0]
 800616a:	3302      	addmi	r3, #2
 800616c:	6033      	strmi	r3, [r6, #0]
 800616e:	6825      	ldr	r5, [r4, #0]
 8006170:	f015 0506 	ands.w	r5, r5, #6
 8006174:	d106      	bne.n	8006184 <_printf_common+0x48>
 8006176:	f104 0a19 	add.w	sl, r4, #25
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	6832      	ldr	r2, [r6, #0]
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	42ab      	cmp	r3, r5
 8006182:	dc26      	bgt.n	80061d2 <_printf_common+0x96>
 8006184:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006188:	6822      	ldr	r2, [r4, #0]
 800618a:	3b00      	subs	r3, #0
 800618c:	bf18      	it	ne
 800618e:	2301      	movne	r3, #1
 8006190:	0692      	lsls	r2, r2, #26
 8006192:	d42b      	bmi.n	80061ec <_printf_common+0xb0>
 8006194:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006198:	4641      	mov	r1, r8
 800619a:	4638      	mov	r0, r7
 800619c:	47c8      	blx	r9
 800619e:	3001      	adds	r0, #1
 80061a0:	d01e      	beq.n	80061e0 <_printf_common+0xa4>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	6922      	ldr	r2, [r4, #16]
 80061a6:	f003 0306 	and.w	r3, r3, #6
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	bf02      	ittt	eq
 80061ae:	68e5      	ldreq	r5, [r4, #12]
 80061b0:	6833      	ldreq	r3, [r6, #0]
 80061b2:	1aed      	subeq	r5, r5, r3
 80061b4:	68a3      	ldr	r3, [r4, #8]
 80061b6:	bf0c      	ite	eq
 80061b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061bc:	2500      	movne	r5, #0
 80061be:	4293      	cmp	r3, r2
 80061c0:	bfc4      	itt	gt
 80061c2:	1a9b      	subgt	r3, r3, r2
 80061c4:	18ed      	addgt	r5, r5, r3
 80061c6:	2600      	movs	r6, #0
 80061c8:	341a      	adds	r4, #26
 80061ca:	42b5      	cmp	r5, r6
 80061cc:	d11a      	bne.n	8006204 <_printf_common+0xc8>
 80061ce:	2000      	movs	r0, #0
 80061d0:	e008      	b.n	80061e4 <_printf_common+0xa8>
 80061d2:	2301      	movs	r3, #1
 80061d4:	4652      	mov	r2, sl
 80061d6:	4641      	mov	r1, r8
 80061d8:	4638      	mov	r0, r7
 80061da:	47c8      	blx	r9
 80061dc:	3001      	adds	r0, #1
 80061de:	d103      	bne.n	80061e8 <_printf_common+0xac>
 80061e0:	f04f 30ff 	mov.w	r0, #4294967295
 80061e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e8:	3501      	adds	r5, #1
 80061ea:	e7c6      	b.n	800617a <_printf_common+0x3e>
 80061ec:	18e1      	adds	r1, r4, r3
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	2030      	movs	r0, #48	@ 0x30
 80061f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061f6:	4422      	add	r2, r4
 80061f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006200:	3302      	adds	r3, #2
 8006202:	e7c7      	b.n	8006194 <_printf_common+0x58>
 8006204:	2301      	movs	r3, #1
 8006206:	4622      	mov	r2, r4
 8006208:	4641      	mov	r1, r8
 800620a:	4638      	mov	r0, r7
 800620c:	47c8      	blx	r9
 800620e:	3001      	adds	r0, #1
 8006210:	d0e6      	beq.n	80061e0 <_printf_common+0xa4>
 8006212:	3601      	adds	r6, #1
 8006214:	e7d9      	b.n	80061ca <_printf_common+0x8e>
	...

08006218 <_printf_i>:
 8006218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800621c:	7e0f      	ldrb	r7, [r1, #24]
 800621e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006220:	2f78      	cmp	r7, #120	@ 0x78
 8006222:	4691      	mov	r9, r2
 8006224:	4680      	mov	r8, r0
 8006226:	460c      	mov	r4, r1
 8006228:	469a      	mov	sl, r3
 800622a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800622e:	d807      	bhi.n	8006240 <_printf_i+0x28>
 8006230:	2f62      	cmp	r7, #98	@ 0x62
 8006232:	d80a      	bhi.n	800624a <_printf_i+0x32>
 8006234:	2f00      	cmp	r7, #0
 8006236:	f000 80d1 	beq.w	80063dc <_printf_i+0x1c4>
 800623a:	2f58      	cmp	r7, #88	@ 0x58
 800623c:	f000 80b8 	beq.w	80063b0 <_printf_i+0x198>
 8006240:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006244:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006248:	e03a      	b.n	80062c0 <_printf_i+0xa8>
 800624a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800624e:	2b15      	cmp	r3, #21
 8006250:	d8f6      	bhi.n	8006240 <_printf_i+0x28>
 8006252:	a101      	add	r1, pc, #4	@ (adr r1, 8006258 <_printf_i+0x40>)
 8006254:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006258:	080062b1 	.word	0x080062b1
 800625c:	080062c5 	.word	0x080062c5
 8006260:	08006241 	.word	0x08006241
 8006264:	08006241 	.word	0x08006241
 8006268:	08006241 	.word	0x08006241
 800626c:	08006241 	.word	0x08006241
 8006270:	080062c5 	.word	0x080062c5
 8006274:	08006241 	.word	0x08006241
 8006278:	08006241 	.word	0x08006241
 800627c:	08006241 	.word	0x08006241
 8006280:	08006241 	.word	0x08006241
 8006284:	080063c3 	.word	0x080063c3
 8006288:	080062ef 	.word	0x080062ef
 800628c:	0800637d 	.word	0x0800637d
 8006290:	08006241 	.word	0x08006241
 8006294:	08006241 	.word	0x08006241
 8006298:	080063e5 	.word	0x080063e5
 800629c:	08006241 	.word	0x08006241
 80062a0:	080062ef 	.word	0x080062ef
 80062a4:	08006241 	.word	0x08006241
 80062a8:	08006241 	.word	0x08006241
 80062ac:	08006385 	.word	0x08006385
 80062b0:	6833      	ldr	r3, [r6, #0]
 80062b2:	1d1a      	adds	r2, r3, #4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6032      	str	r2, [r6, #0]
 80062b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062c0:	2301      	movs	r3, #1
 80062c2:	e09c      	b.n	80063fe <_printf_i+0x1e6>
 80062c4:	6833      	ldr	r3, [r6, #0]
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	1d19      	adds	r1, r3, #4
 80062ca:	6031      	str	r1, [r6, #0]
 80062cc:	0606      	lsls	r6, r0, #24
 80062ce:	d501      	bpl.n	80062d4 <_printf_i+0xbc>
 80062d0:	681d      	ldr	r5, [r3, #0]
 80062d2:	e003      	b.n	80062dc <_printf_i+0xc4>
 80062d4:	0645      	lsls	r5, r0, #25
 80062d6:	d5fb      	bpl.n	80062d0 <_printf_i+0xb8>
 80062d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062dc:	2d00      	cmp	r5, #0
 80062de:	da03      	bge.n	80062e8 <_printf_i+0xd0>
 80062e0:	232d      	movs	r3, #45	@ 0x2d
 80062e2:	426d      	negs	r5, r5
 80062e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062e8:	4858      	ldr	r0, [pc, #352]	@ (800644c <_printf_i+0x234>)
 80062ea:	230a      	movs	r3, #10
 80062ec:	e011      	b.n	8006312 <_printf_i+0xfa>
 80062ee:	6821      	ldr	r1, [r4, #0]
 80062f0:	6833      	ldr	r3, [r6, #0]
 80062f2:	0608      	lsls	r0, r1, #24
 80062f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80062f8:	d402      	bmi.n	8006300 <_printf_i+0xe8>
 80062fa:	0649      	lsls	r1, r1, #25
 80062fc:	bf48      	it	mi
 80062fe:	b2ad      	uxthmi	r5, r5
 8006300:	2f6f      	cmp	r7, #111	@ 0x6f
 8006302:	4852      	ldr	r0, [pc, #328]	@ (800644c <_printf_i+0x234>)
 8006304:	6033      	str	r3, [r6, #0]
 8006306:	bf14      	ite	ne
 8006308:	230a      	movne	r3, #10
 800630a:	2308      	moveq	r3, #8
 800630c:	2100      	movs	r1, #0
 800630e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006312:	6866      	ldr	r6, [r4, #4]
 8006314:	60a6      	str	r6, [r4, #8]
 8006316:	2e00      	cmp	r6, #0
 8006318:	db05      	blt.n	8006326 <_printf_i+0x10e>
 800631a:	6821      	ldr	r1, [r4, #0]
 800631c:	432e      	orrs	r6, r5
 800631e:	f021 0104 	bic.w	r1, r1, #4
 8006322:	6021      	str	r1, [r4, #0]
 8006324:	d04b      	beq.n	80063be <_printf_i+0x1a6>
 8006326:	4616      	mov	r6, r2
 8006328:	fbb5 f1f3 	udiv	r1, r5, r3
 800632c:	fb03 5711 	mls	r7, r3, r1, r5
 8006330:	5dc7      	ldrb	r7, [r0, r7]
 8006332:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006336:	462f      	mov	r7, r5
 8006338:	42bb      	cmp	r3, r7
 800633a:	460d      	mov	r5, r1
 800633c:	d9f4      	bls.n	8006328 <_printf_i+0x110>
 800633e:	2b08      	cmp	r3, #8
 8006340:	d10b      	bne.n	800635a <_printf_i+0x142>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	07df      	lsls	r7, r3, #31
 8006346:	d508      	bpl.n	800635a <_printf_i+0x142>
 8006348:	6923      	ldr	r3, [r4, #16]
 800634a:	6861      	ldr	r1, [r4, #4]
 800634c:	4299      	cmp	r1, r3
 800634e:	bfde      	ittt	le
 8006350:	2330      	movle	r3, #48	@ 0x30
 8006352:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006356:	f106 36ff 	addle.w	r6, r6, #4294967295
 800635a:	1b92      	subs	r2, r2, r6
 800635c:	6122      	str	r2, [r4, #16]
 800635e:	f8cd a000 	str.w	sl, [sp]
 8006362:	464b      	mov	r3, r9
 8006364:	aa03      	add	r2, sp, #12
 8006366:	4621      	mov	r1, r4
 8006368:	4640      	mov	r0, r8
 800636a:	f7ff fee7 	bl	800613c <_printf_common>
 800636e:	3001      	adds	r0, #1
 8006370:	d14a      	bne.n	8006408 <_printf_i+0x1f0>
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	b004      	add	sp, #16
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	6823      	ldr	r3, [r4, #0]
 800637e:	f043 0320 	orr.w	r3, r3, #32
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	4832      	ldr	r0, [pc, #200]	@ (8006450 <_printf_i+0x238>)
 8006386:	2778      	movs	r7, #120	@ 0x78
 8006388:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800638c:	6823      	ldr	r3, [r4, #0]
 800638e:	6831      	ldr	r1, [r6, #0]
 8006390:	061f      	lsls	r7, r3, #24
 8006392:	f851 5b04 	ldr.w	r5, [r1], #4
 8006396:	d402      	bmi.n	800639e <_printf_i+0x186>
 8006398:	065f      	lsls	r7, r3, #25
 800639a:	bf48      	it	mi
 800639c:	b2ad      	uxthmi	r5, r5
 800639e:	6031      	str	r1, [r6, #0]
 80063a0:	07d9      	lsls	r1, r3, #31
 80063a2:	bf44      	itt	mi
 80063a4:	f043 0320 	orrmi.w	r3, r3, #32
 80063a8:	6023      	strmi	r3, [r4, #0]
 80063aa:	b11d      	cbz	r5, 80063b4 <_printf_i+0x19c>
 80063ac:	2310      	movs	r3, #16
 80063ae:	e7ad      	b.n	800630c <_printf_i+0xf4>
 80063b0:	4826      	ldr	r0, [pc, #152]	@ (800644c <_printf_i+0x234>)
 80063b2:	e7e9      	b.n	8006388 <_printf_i+0x170>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	f023 0320 	bic.w	r3, r3, #32
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	e7f6      	b.n	80063ac <_printf_i+0x194>
 80063be:	4616      	mov	r6, r2
 80063c0:	e7bd      	b.n	800633e <_printf_i+0x126>
 80063c2:	6833      	ldr	r3, [r6, #0]
 80063c4:	6825      	ldr	r5, [r4, #0]
 80063c6:	6961      	ldr	r1, [r4, #20]
 80063c8:	1d18      	adds	r0, r3, #4
 80063ca:	6030      	str	r0, [r6, #0]
 80063cc:	062e      	lsls	r6, r5, #24
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	d501      	bpl.n	80063d6 <_printf_i+0x1be>
 80063d2:	6019      	str	r1, [r3, #0]
 80063d4:	e002      	b.n	80063dc <_printf_i+0x1c4>
 80063d6:	0668      	lsls	r0, r5, #25
 80063d8:	d5fb      	bpl.n	80063d2 <_printf_i+0x1ba>
 80063da:	8019      	strh	r1, [r3, #0]
 80063dc:	2300      	movs	r3, #0
 80063de:	6123      	str	r3, [r4, #16]
 80063e0:	4616      	mov	r6, r2
 80063e2:	e7bc      	b.n	800635e <_printf_i+0x146>
 80063e4:	6833      	ldr	r3, [r6, #0]
 80063e6:	1d1a      	adds	r2, r3, #4
 80063e8:	6032      	str	r2, [r6, #0]
 80063ea:	681e      	ldr	r6, [r3, #0]
 80063ec:	6862      	ldr	r2, [r4, #4]
 80063ee:	2100      	movs	r1, #0
 80063f0:	4630      	mov	r0, r6
 80063f2:	f7f9 feed 	bl	80001d0 <memchr>
 80063f6:	b108      	cbz	r0, 80063fc <_printf_i+0x1e4>
 80063f8:	1b80      	subs	r0, r0, r6
 80063fa:	6060      	str	r0, [r4, #4]
 80063fc:	6863      	ldr	r3, [r4, #4]
 80063fe:	6123      	str	r3, [r4, #16]
 8006400:	2300      	movs	r3, #0
 8006402:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006406:	e7aa      	b.n	800635e <_printf_i+0x146>
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	4632      	mov	r2, r6
 800640c:	4649      	mov	r1, r9
 800640e:	4640      	mov	r0, r8
 8006410:	47d0      	blx	sl
 8006412:	3001      	adds	r0, #1
 8006414:	d0ad      	beq.n	8006372 <_printf_i+0x15a>
 8006416:	6823      	ldr	r3, [r4, #0]
 8006418:	079b      	lsls	r3, r3, #30
 800641a:	d413      	bmi.n	8006444 <_printf_i+0x22c>
 800641c:	68e0      	ldr	r0, [r4, #12]
 800641e:	9b03      	ldr	r3, [sp, #12]
 8006420:	4298      	cmp	r0, r3
 8006422:	bfb8      	it	lt
 8006424:	4618      	movlt	r0, r3
 8006426:	e7a6      	b.n	8006376 <_printf_i+0x15e>
 8006428:	2301      	movs	r3, #1
 800642a:	4632      	mov	r2, r6
 800642c:	4649      	mov	r1, r9
 800642e:	4640      	mov	r0, r8
 8006430:	47d0      	blx	sl
 8006432:	3001      	adds	r0, #1
 8006434:	d09d      	beq.n	8006372 <_printf_i+0x15a>
 8006436:	3501      	adds	r5, #1
 8006438:	68e3      	ldr	r3, [r4, #12]
 800643a:	9903      	ldr	r1, [sp, #12]
 800643c:	1a5b      	subs	r3, r3, r1
 800643e:	42ab      	cmp	r3, r5
 8006440:	dcf2      	bgt.n	8006428 <_printf_i+0x210>
 8006442:	e7eb      	b.n	800641c <_printf_i+0x204>
 8006444:	2500      	movs	r5, #0
 8006446:	f104 0619 	add.w	r6, r4, #25
 800644a:	e7f5      	b.n	8006438 <_printf_i+0x220>
 800644c:	080094a2 	.word	0x080094a2
 8006450:	080094b3 	.word	0x080094b3

08006454 <std>:
 8006454:	2300      	movs	r3, #0
 8006456:	b510      	push	{r4, lr}
 8006458:	4604      	mov	r4, r0
 800645a:	e9c0 3300 	strd	r3, r3, [r0]
 800645e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006462:	6083      	str	r3, [r0, #8]
 8006464:	8181      	strh	r1, [r0, #12]
 8006466:	6643      	str	r3, [r0, #100]	@ 0x64
 8006468:	81c2      	strh	r2, [r0, #14]
 800646a:	6183      	str	r3, [r0, #24]
 800646c:	4619      	mov	r1, r3
 800646e:	2208      	movs	r2, #8
 8006470:	305c      	adds	r0, #92	@ 0x5c
 8006472:	f000 f931 	bl	80066d8 <memset>
 8006476:	4b0d      	ldr	r3, [pc, #52]	@ (80064ac <std+0x58>)
 8006478:	6263      	str	r3, [r4, #36]	@ 0x24
 800647a:	4b0d      	ldr	r3, [pc, #52]	@ (80064b0 <std+0x5c>)
 800647c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800647e:	4b0d      	ldr	r3, [pc, #52]	@ (80064b4 <std+0x60>)
 8006480:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006482:	4b0d      	ldr	r3, [pc, #52]	@ (80064b8 <std+0x64>)
 8006484:	6323      	str	r3, [r4, #48]	@ 0x30
 8006486:	4b0d      	ldr	r3, [pc, #52]	@ (80064bc <std+0x68>)
 8006488:	6224      	str	r4, [r4, #32]
 800648a:	429c      	cmp	r4, r3
 800648c:	d006      	beq.n	800649c <std+0x48>
 800648e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006492:	4294      	cmp	r4, r2
 8006494:	d002      	beq.n	800649c <std+0x48>
 8006496:	33d0      	adds	r3, #208	@ 0xd0
 8006498:	429c      	cmp	r4, r3
 800649a:	d105      	bne.n	80064a8 <std+0x54>
 800649c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a4:	f000 b994 	b.w	80067d0 <__retarget_lock_init_recursive>
 80064a8:	bd10      	pop	{r4, pc}
 80064aa:	bf00      	nop
 80064ac:	080065d9 	.word	0x080065d9
 80064b0:	080065fb 	.word	0x080065fb
 80064b4:	08006633 	.word	0x08006633
 80064b8:	08006657 	.word	0x08006657
 80064bc:	2000064c 	.word	0x2000064c

080064c0 <stdio_exit_handler>:
 80064c0:	4a02      	ldr	r2, [pc, #8]	@ (80064cc <stdio_exit_handler+0xc>)
 80064c2:	4903      	ldr	r1, [pc, #12]	@ (80064d0 <stdio_exit_handler+0x10>)
 80064c4:	4803      	ldr	r0, [pc, #12]	@ (80064d4 <stdio_exit_handler+0x14>)
 80064c6:	f000 b869 	b.w	800659c <_fwalk_sglue>
 80064ca:	bf00      	nop
 80064cc:	2000000c 	.word	0x2000000c
 80064d0:	08008135 	.word	0x08008135
 80064d4:	2000001c 	.word	0x2000001c

080064d8 <cleanup_stdio>:
 80064d8:	6841      	ldr	r1, [r0, #4]
 80064da:	4b0c      	ldr	r3, [pc, #48]	@ (800650c <cleanup_stdio+0x34>)
 80064dc:	4299      	cmp	r1, r3
 80064de:	b510      	push	{r4, lr}
 80064e0:	4604      	mov	r4, r0
 80064e2:	d001      	beq.n	80064e8 <cleanup_stdio+0x10>
 80064e4:	f001 fe26 	bl	8008134 <_fflush_r>
 80064e8:	68a1      	ldr	r1, [r4, #8]
 80064ea:	4b09      	ldr	r3, [pc, #36]	@ (8006510 <cleanup_stdio+0x38>)
 80064ec:	4299      	cmp	r1, r3
 80064ee:	d002      	beq.n	80064f6 <cleanup_stdio+0x1e>
 80064f0:	4620      	mov	r0, r4
 80064f2:	f001 fe1f 	bl	8008134 <_fflush_r>
 80064f6:	68e1      	ldr	r1, [r4, #12]
 80064f8:	4b06      	ldr	r3, [pc, #24]	@ (8006514 <cleanup_stdio+0x3c>)
 80064fa:	4299      	cmp	r1, r3
 80064fc:	d004      	beq.n	8006508 <cleanup_stdio+0x30>
 80064fe:	4620      	mov	r0, r4
 8006500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006504:	f001 be16 	b.w	8008134 <_fflush_r>
 8006508:	bd10      	pop	{r4, pc}
 800650a:	bf00      	nop
 800650c:	2000064c 	.word	0x2000064c
 8006510:	200006b4 	.word	0x200006b4
 8006514:	2000071c 	.word	0x2000071c

08006518 <global_stdio_init.part.0>:
 8006518:	b510      	push	{r4, lr}
 800651a:	4b0b      	ldr	r3, [pc, #44]	@ (8006548 <global_stdio_init.part.0+0x30>)
 800651c:	4c0b      	ldr	r4, [pc, #44]	@ (800654c <global_stdio_init.part.0+0x34>)
 800651e:	4a0c      	ldr	r2, [pc, #48]	@ (8006550 <global_stdio_init.part.0+0x38>)
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	4620      	mov	r0, r4
 8006524:	2200      	movs	r2, #0
 8006526:	2104      	movs	r1, #4
 8006528:	f7ff ff94 	bl	8006454 <std>
 800652c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006530:	2201      	movs	r2, #1
 8006532:	2109      	movs	r1, #9
 8006534:	f7ff ff8e 	bl	8006454 <std>
 8006538:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800653c:	2202      	movs	r2, #2
 800653e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006542:	2112      	movs	r1, #18
 8006544:	f7ff bf86 	b.w	8006454 <std>
 8006548:	20000784 	.word	0x20000784
 800654c:	2000064c 	.word	0x2000064c
 8006550:	080064c1 	.word	0x080064c1

08006554 <__sfp_lock_acquire>:
 8006554:	4801      	ldr	r0, [pc, #4]	@ (800655c <__sfp_lock_acquire+0x8>)
 8006556:	f000 b93c 	b.w	80067d2 <__retarget_lock_acquire_recursive>
 800655a:	bf00      	nop
 800655c:	2000078d 	.word	0x2000078d

08006560 <__sfp_lock_release>:
 8006560:	4801      	ldr	r0, [pc, #4]	@ (8006568 <__sfp_lock_release+0x8>)
 8006562:	f000 b937 	b.w	80067d4 <__retarget_lock_release_recursive>
 8006566:	bf00      	nop
 8006568:	2000078d 	.word	0x2000078d

0800656c <__sinit>:
 800656c:	b510      	push	{r4, lr}
 800656e:	4604      	mov	r4, r0
 8006570:	f7ff fff0 	bl	8006554 <__sfp_lock_acquire>
 8006574:	6a23      	ldr	r3, [r4, #32]
 8006576:	b11b      	cbz	r3, 8006580 <__sinit+0x14>
 8006578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800657c:	f7ff bff0 	b.w	8006560 <__sfp_lock_release>
 8006580:	4b04      	ldr	r3, [pc, #16]	@ (8006594 <__sinit+0x28>)
 8006582:	6223      	str	r3, [r4, #32]
 8006584:	4b04      	ldr	r3, [pc, #16]	@ (8006598 <__sinit+0x2c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f5      	bne.n	8006578 <__sinit+0xc>
 800658c:	f7ff ffc4 	bl	8006518 <global_stdio_init.part.0>
 8006590:	e7f2      	b.n	8006578 <__sinit+0xc>
 8006592:	bf00      	nop
 8006594:	080064d9 	.word	0x080064d9
 8006598:	20000784 	.word	0x20000784

0800659c <_fwalk_sglue>:
 800659c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065a0:	4607      	mov	r7, r0
 80065a2:	4688      	mov	r8, r1
 80065a4:	4614      	mov	r4, r2
 80065a6:	2600      	movs	r6, #0
 80065a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065ac:	f1b9 0901 	subs.w	r9, r9, #1
 80065b0:	d505      	bpl.n	80065be <_fwalk_sglue+0x22>
 80065b2:	6824      	ldr	r4, [r4, #0]
 80065b4:	2c00      	cmp	r4, #0
 80065b6:	d1f7      	bne.n	80065a8 <_fwalk_sglue+0xc>
 80065b8:	4630      	mov	r0, r6
 80065ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065be:	89ab      	ldrh	r3, [r5, #12]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d907      	bls.n	80065d4 <_fwalk_sglue+0x38>
 80065c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065c8:	3301      	adds	r3, #1
 80065ca:	d003      	beq.n	80065d4 <_fwalk_sglue+0x38>
 80065cc:	4629      	mov	r1, r5
 80065ce:	4638      	mov	r0, r7
 80065d0:	47c0      	blx	r8
 80065d2:	4306      	orrs	r6, r0
 80065d4:	3568      	adds	r5, #104	@ 0x68
 80065d6:	e7e9      	b.n	80065ac <_fwalk_sglue+0x10>

080065d8 <__sread>:
 80065d8:	b510      	push	{r4, lr}
 80065da:	460c      	mov	r4, r1
 80065dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e0:	f000 f8a8 	bl	8006734 <_read_r>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	bfab      	itete	ge
 80065e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065ea:	89a3      	ldrhlt	r3, [r4, #12]
 80065ec:	181b      	addge	r3, r3, r0
 80065ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065f2:	bfac      	ite	ge
 80065f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065f6:	81a3      	strhlt	r3, [r4, #12]
 80065f8:	bd10      	pop	{r4, pc}

080065fa <__swrite>:
 80065fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fe:	461f      	mov	r7, r3
 8006600:	898b      	ldrh	r3, [r1, #12]
 8006602:	05db      	lsls	r3, r3, #23
 8006604:	4605      	mov	r5, r0
 8006606:	460c      	mov	r4, r1
 8006608:	4616      	mov	r6, r2
 800660a:	d505      	bpl.n	8006618 <__swrite+0x1e>
 800660c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006610:	2302      	movs	r3, #2
 8006612:	2200      	movs	r2, #0
 8006614:	f000 f87c 	bl	8006710 <_lseek_r>
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800661e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006622:	81a3      	strh	r3, [r4, #12]
 8006624:	4632      	mov	r2, r6
 8006626:	463b      	mov	r3, r7
 8006628:	4628      	mov	r0, r5
 800662a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800662e:	f000 b893 	b.w	8006758 <_write_r>

08006632 <__sseek>:
 8006632:	b510      	push	{r4, lr}
 8006634:	460c      	mov	r4, r1
 8006636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800663a:	f000 f869 	bl	8006710 <_lseek_r>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	89a3      	ldrh	r3, [r4, #12]
 8006642:	bf15      	itete	ne
 8006644:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006646:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800664a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800664e:	81a3      	strheq	r3, [r4, #12]
 8006650:	bf18      	it	ne
 8006652:	81a3      	strhne	r3, [r4, #12]
 8006654:	bd10      	pop	{r4, pc}

08006656 <__sclose>:
 8006656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665a:	f000 b849 	b.w	80066f0 <_close_r>

0800665e <_vsniprintf_r>:
 800665e:	b530      	push	{r4, r5, lr}
 8006660:	4614      	mov	r4, r2
 8006662:	2c00      	cmp	r4, #0
 8006664:	b09b      	sub	sp, #108	@ 0x6c
 8006666:	4605      	mov	r5, r0
 8006668:	461a      	mov	r2, r3
 800666a:	da05      	bge.n	8006678 <_vsniprintf_r+0x1a>
 800666c:	238b      	movs	r3, #139	@ 0x8b
 800666e:	6003      	str	r3, [r0, #0]
 8006670:	f04f 30ff 	mov.w	r0, #4294967295
 8006674:	b01b      	add	sp, #108	@ 0x6c
 8006676:	bd30      	pop	{r4, r5, pc}
 8006678:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800667c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	9319      	str	r3, [sp, #100]	@ 0x64
 8006686:	bf14      	ite	ne
 8006688:	f104 33ff 	addne.w	r3, r4, #4294967295
 800668c:	4623      	moveq	r3, r4
 800668e:	9302      	str	r3, [sp, #8]
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006696:	9100      	str	r1, [sp, #0]
 8006698:	9104      	str	r1, [sp, #16]
 800669a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800669e:	4669      	mov	r1, sp
 80066a0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80066a2:	f001 fbc7 	bl	8007e34 <_svfiprintf_r>
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	bfbc      	itt	lt
 80066aa:	238b      	movlt	r3, #139	@ 0x8b
 80066ac:	602b      	strlt	r3, [r5, #0]
 80066ae:	2c00      	cmp	r4, #0
 80066b0:	d0e0      	beq.n	8006674 <_vsniprintf_r+0x16>
 80066b2:	9b00      	ldr	r3, [sp, #0]
 80066b4:	2200      	movs	r2, #0
 80066b6:	701a      	strb	r2, [r3, #0]
 80066b8:	e7dc      	b.n	8006674 <_vsniprintf_r+0x16>
	...

080066bc <vsniprintf>:
 80066bc:	b507      	push	{r0, r1, r2, lr}
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	4613      	mov	r3, r2
 80066c2:	460a      	mov	r2, r1
 80066c4:	4601      	mov	r1, r0
 80066c6:	4803      	ldr	r0, [pc, #12]	@ (80066d4 <vsniprintf+0x18>)
 80066c8:	6800      	ldr	r0, [r0, #0]
 80066ca:	f7ff ffc8 	bl	800665e <_vsniprintf_r>
 80066ce:	b003      	add	sp, #12
 80066d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80066d4:	20000018 	.word	0x20000018

080066d8 <memset>:
 80066d8:	4402      	add	r2, r0
 80066da:	4603      	mov	r3, r0
 80066dc:	4293      	cmp	r3, r2
 80066de:	d100      	bne.n	80066e2 <memset+0xa>
 80066e0:	4770      	bx	lr
 80066e2:	f803 1b01 	strb.w	r1, [r3], #1
 80066e6:	e7f9      	b.n	80066dc <memset+0x4>

080066e8 <_localeconv_r>:
 80066e8:	4800      	ldr	r0, [pc, #0]	@ (80066ec <_localeconv_r+0x4>)
 80066ea:	4770      	bx	lr
 80066ec:	20000158 	.word	0x20000158

080066f0 <_close_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d06      	ldr	r5, [pc, #24]	@ (800670c <_close_r+0x1c>)
 80066f4:	2300      	movs	r3, #0
 80066f6:	4604      	mov	r4, r0
 80066f8:	4608      	mov	r0, r1
 80066fa:	602b      	str	r3, [r5, #0]
 80066fc:	f7fb f906 	bl	800190c <_close>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_close_r+0x1a>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_close_r+0x1a>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	20000788 	.word	0x20000788

08006710 <_lseek_r>:
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	4d07      	ldr	r5, [pc, #28]	@ (8006730 <_lseek_r+0x20>)
 8006714:	4604      	mov	r4, r0
 8006716:	4608      	mov	r0, r1
 8006718:	4611      	mov	r1, r2
 800671a:	2200      	movs	r2, #0
 800671c:	602a      	str	r2, [r5, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f7fb f91b 	bl	800195a <_lseek>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d102      	bne.n	800672e <_lseek_r+0x1e>
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	b103      	cbz	r3, 800672e <_lseek_r+0x1e>
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	bd38      	pop	{r3, r4, r5, pc}
 8006730:	20000788 	.word	0x20000788

08006734 <_read_r>:
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4d07      	ldr	r5, [pc, #28]	@ (8006754 <_read_r+0x20>)
 8006738:	4604      	mov	r4, r0
 800673a:	4608      	mov	r0, r1
 800673c:	4611      	mov	r1, r2
 800673e:	2200      	movs	r2, #0
 8006740:	602a      	str	r2, [r5, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	f7fb f8a9 	bl	800189a <_read>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_read_r+0x1e>
 800674c:	682b      	ldr	r3, [r5, #0]
 800674e:	b103      	cbz	r3, 8006752 <_read_r+0x1e>
 8006750:	6023      	str	r3, [r4, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	20000788 	.word	0x20000788

08006758 <_write_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4d07      	ldr	r5, [pc, #28]	@ (8006778 <_write_r+0x20>)
 800675c:	4604      	mov	r4, r0
 800675e:	4608      	mov	r0, r1
 8006760:	4611      	mov	r1, r2
 8006762:	2200      	movs	r2, #0
 8006764:	602a      	str	r2, [r5, #0]
 8006766:	461a      	mov	r2, r3
 8006768:	f7fb f8b4 	bl	80018d4 <_write>
 800676c:	1c43      	adds	r3, r0, #1
 800676e:	d102      	bne.n	8006776 <_write_r+0x1e>
 8006770:	682b      	ldr	r3, [r5, #0]
 8006772:	b103      	cbz	r3, 8006776 <_write_r+0x1e>
 8006774:	6023      	str	r3, [r4, #0]
 8006776:	bd38      	pop	{r3, r4, r5, pc}
 8006778:	20000788 	.word	0x20000788

0800677c <__errno>:
 800677c:	4b01      	ldr	r3, [pc, #4]	@ (8006784 <__errno+0x8>)
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000018 	.word	0x20000018

08006788 <__libc_init_array>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	4d0d      	ldr	r5, [pc, #52]	@ (80067c0 <__libc_init_array+0x38>)
 800678c:	4c0d      	ldr	r4, [pc, #52]	@ (80067c4 <__libc_init_array+0x3c>)
 800678e:	1b64      	subs	r4, r4, r5
 8006790:	10a4      	asrs	r4, r4, #2
 8006792:	2600      	movs	r6, #0
 8006794:	42a6      	cmp	r6, r4
 8006796:	d109      	bne.n	80067ac <__libc_init_array+0x24>
 8006798:	4d0b      	ldr	r5, [pc, #44]	@ (80067c8 <__libc_init_array+0x40>)
 800679a:	4c0c      	ldr	r4, [pc, #48]	@ (80067cc <__libc_init_array+0x44>)
 800679c:	f002 f868 	bl	8008870 <_init>
 80067a0:	1b64      	subs	r4, r4, r5
 80067a2:	10a4      	asrs	r4, r4, #2
 80067a4:	2600      	movs	r6, #0
 80067a6:	42a6      	cmp	r6, r4
 80067a8:	d105      	bne.n	80067b6 <__libc_init_array+0x2e>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b0:	4798      	blx	r3
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7ee      	b.n	8006794 <__libc_init_array+0xc>
 80067b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ba:	4798      	blx	r3
 80067bc:	3601      	adds	r6, #1
 80067be:	e7f2      	b.n	80067a6 <__libc_init_array+0x1e>
 80067c0:	0800980c 	.word	0x0800980c
 80067c4:	0800980c 	.word	0x0800980c
 80067c8:	0800980c 	.word	0x0800980c
 80067cc:	08009810 	.word	0x08009810

080067d0 <__retarget_lock_init_recursive>:
 80067d0:	4770      	bx	lr

080067d2 <__retarget_lock_acquire_recursive>:
 80067d2:	4770      	bx	lr

080067d4 <__retarget_lock_release_recursive>:
 80067d4:	4770      	bx	lr

080067d6 <quorem>:
 80067d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	6903      	ldr	r3, [r0, #16]
 80067dc:	690c      	ldr	r4, [r1, #16]
 80067de:	42a3      	cmp	r3, r4
 80067e0:	4607      	mov	r7, r0
 80067e2:	db7e      	blt.n	80068e2 <quorem+0x10c>
 80067e4:	3c01      	subs	r4, #1
 80067e6:	f101 0814 	add.w	r8, r1, #20
 80067ea:	00a3      	lsls	r3, r4, #2
 80067ec:	f100 0514 	add.w	r5, r0, #20
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006800:	3301      	adds	r3, #1
 8006802:	429a      	cmp	r2, r3
 8006804:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006808:	fbb2 f6f3 	udiv	r6, r2, r3
 800680c:	d32e      	bcc.n	800686c <quorem+0x96>
 800680e:	f04f 0a00 	mov.w	sl, #0
 8006812:	46c4      	mov	ip, r8
 8006814:	46ae      	mov	lr, r5
 8006816:	46d3      	mov	fp, sl
 8006818:	f85c 3b04 	ldr.w	r3, [ip], #4
 800681c:	b298      	uxth	r0, r3
 800681e:	fb06 a000 	mla	r0, r6, r0, sl
 8006822:	0c02      	lsrs	r2, r0, #16
 8006824:	0c1b      	lsrs	r3, r3, #16
 8006826:	fb06 2303 	mla	r3, r6, r3, r2
 800682a:	f8de 2000 	ldr.w	r2, [lr]
 800682e:	b280      	uxth	r0, r0
 8006830:	b292      	uxth	r2, r2
 8006832:	1a12      	subs	r2, r2, r0
 8006834:	445a      	add	r2, fp
 8006836:	f8de 0000 	ldr.w	r0, [lr]
 800683a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800683e:	b29b      	uxth	r3, r3
 8006840:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006844:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006848:	b292      	uxth	r2, r2
 800684a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800684e:	45e1      	cmp	r9, ip
 8006850:	f84e 2b04 	str.w	r2, [lr], #4
 8006854:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006858:	d2de      	bcs.n	8006818 <quorem+0x42>
 800685a:	9b00      	ldr	r3, [sp, #0]
 800685c:	58eb      	ldr	r3, [r5, r3]
 800685e:	b92b      	cbnz	r3, 800686c <quorem+0x96>
 8006860:	9b01      	ldr	r3, [sp, #4]
 8006862:	3b04      	subs	r3, #4
 8006864:	429d      	cmp	r5, r3
 8006866:	461a      	mov	r2, r3
 8006868:	d32f      	bcc.n	80068ca <quorem+0xf4>
 800686a:	613c      	str	r4, [r7, #16]
 800686c:	4638      	mov	r0, r7
 800686e:	f001 f97d 	bl	8007b6c <__mcmp>
 8006872:	2800      	cmp	r0, #0
 8006874:	db25      	blt.n	80068c2 <quorem+0xec>
 8006876:	4629      	mov	r1, r5
 8006878:	2000      	movs	r0, #0
 800687a:	f858 2b04 	ldr.w	r2, [r8], #4
 800687e:	f8d1 c000 	ldr.w	ip, [r1]
 8006882:	fa1f fe82 	uxth.w	lr, r2
 8006886:	fa1f f38c 	uxth.w	r3, ip
 800688a:	eba3 030e 	sub.w	r3, r3, lr
 800688e:	4403      	add	r3, r0
 8006890:	0c12      	lsrs	r2, r2, #16
 8006892:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006896:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800689a:	b29b      	uxth	r3, r3
 800689c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068a0:	45c1      	cmp	r9, r8
 80068a2:	f841 3b04 	str.w	r3, [r1], #4
 80068a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80068aa:	d2e6      	bcs.n	800687a <quorem+0xa4>
 80068ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068b4:	b922      	cbnz	r2, 80068c0 <quorem+0xea>
 80068b6:	3b04      	subs	r3, #4
 80068b8:	429d      	cmp	r5, r3
 80068ba:	461a      	mov	r2, r3
 80068bc:	d30b      	bcc.n	80068d6 <quorem+0x100>
 80068be:	613c      	str	r4, [r7, #16]
 80068c0:	3601      	adds	r6, #1
 80068c2:	4630      	mov	r0, r6
 80068c4:	b003      	add	sp, #12
 80068c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	3b04      	subs	r3, #4
 80068ce:	2a00      	cmp	r2, #0
 80068d0:	d1cb      	bne.n	800686a <quorem+0x94>
 80068d2:	3c01      	subs	r4, #1
 80068d4:	e7c6      	b.n	8006864 <quorem+0x8e>
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	3b04      	subs	r3, #4
 80068da:	2a00      	cmp	r2, #0
 80068dc:	d1ef      	bne.n	80068be <quorem+0xe8>
 80068de:	3c01      	subs	r4, #1
 80068e0:	e7ea      	b.n	80068b8 <quorem+0xe2>
 80068e2:	2000      	movs	r0, #0
 80068e4:	e7ee      	b.n	80068c4 <quorem+0xee>
	...

080068e8 <_dtoa_r>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	69c7      	ldr	r7, [r0, #28]
 80068ee:	b097      	sub	sp, #92	@ 0x5c
 80068f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80068f4:	ec55 4b10 	vmov	r4, r5, d0
 80068f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80068fa:	9107      	str	r1, [sp, #28]
 80068fc:	4681      	mov	r9, r0
 80068fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8006900:	9311      	str	r3, [sp, #68]	@ 0x44
 8006902:	b97f      	cbnz	r7, 8006924 <_dtoa_r+0x3c>
 8006904:	2010      	movs	r0, #16
 8006906:	f000 fe09 	bl	800751c <malloc>
 800690a:	4602      	mov	r2, r0
 800690c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006910:	b920      	cbnz	r0, 800691c <_dtoa_r+0x34>
 8006912:	4ba9      	ldr	r3, [pc, #676]	@ (8006bb8 <_dtoa_r+0x2d0>)
 8006914:	21ef      	movs	r1, #239	@ 0xef
 8006916:	48a9      	ldr	r0, [pc, #676]	@ (8006bbc <_dtoa_r+0x2d4>)
 8006918:	f001 fc6c 	bl	80081f4 <__assert_func>
 800691c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006920:	6007      	str	r7, [r0, #0]
 8006922:	60c7      	str	r7, [r0, #12]
 8006924:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	b159      	cbz	r1, 8006944 <_dtoa_r+0x5c>
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	604a      	str	r2, [r1, #4]
 8006930:	2301      	movs	r3, #1
 8006932:	4093      	lsls	r3, r2
 8006934:	608b      	str	r3, [r1, #8]
 8006936:	4648      	mov	r0, r9
 8006938:	f000 fee6 	bl	8007708 <_Bfree>
 800693c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]
 8006944:	1e2b      	subs	r3, r5, #0
 8006946:	bfb9      	ittee	lt
 8006948:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800694c:	9305      	strlt	r3, [sp, #20]
 800694e:	2300      	movge	r3, #0
 8006950:	6033      	strge	r3, [r6, #0]
 8006952:	9f05      	ldr	r7, [sp, #20]
 8006954:	4b9a      	ldr	r3, [pc, #616]	@ (8006bc0 <_dtoa_r+0x2d8>)
 8006956:	bfbc      	itt	lt
 8006958:	2201      	movlt	r2, #1
 800695a:	6032      	strlt	r2, [r6, #0]
 800695c:	43bb      	bics	r3, r7
 800695e:	d112      	bne.n	8006986 <_dtoa_r+0x9e>
 8006960:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006962:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800696c:	4323      	orrs	r3, r4
 800696e:	f000 855a 	beq.w	8007426 <_dtoa_r+0xb3e>
 8006972:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006974:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006bd4 <_dtoa_r+0x2ec>
 8006978:	2b00      	cmp	r3, #0
 800697a:	f000 855c 	beq.w	8007436 <_dtoa_r+0xb4e>
 800697e:	f10a 0303 	add.w	r3, sl, #3
 8006982:	f000 bd56 	b.w	8007432 <_dtoa_r+0xb4a>
 8006986:	ed9d 7b04 	vldr	d7, [sp, #16]
 800698a:	2200      	movs	r2, #0
 800698c:	ec51 0b17 	vmov	r0, r1, d7
 8006990:	2300      	movs	r3, #0
 8006992:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006996:	f7fa f897 	bl	8000ac8 <__aeabi_dcmpeq>
 800699a:	4680      	mov	r8, r0
 800699c:	b158      	cbz	r0, 80069b6 <_dtoa_r+0xce>
 800699e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80069a0:	2301      	movs	r3, #1
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069a6:	b113      	cbz	r3, 80069ae <_dtoa_r+0xc6>
 80069a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80069aa:	4b86      	ldr	r3, [pc, #536]	@ (8006bc4 <_dtoa_r+0x2dc>)
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006bd8 <_dtoa_r+0x2f0>
 80069b2:	f000 bd40 	b.w	8007436 <_dtoa_r+0xb4e>
 80069b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80069ba:	aa14      	add	r2, sp, #80	@ 0x50
 80069bc:	a915      	add	r1, sp, #84	@ 0x54
 80069be:	4648      	mov	r0, r9
 80069c0:	f001 f984 	bl	8007ccc <__d2b>
 80069c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80069c8:	9002      	str	r0, [sp, #8]
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	d078      	beq.n	8006ac0 <_dtoa_r+0x1d8>
 80069ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80069d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069e8:	4619      	mov	r1, r3
 80069ea:	2200      	movs	r2, #0
 80069ec:	4b76      	ldr	r3, [pc, #472]	@ (8006bc8 <_dtoa_r+0x2e0>)
 80069ee:	f7f9 fc4b 	bl	8000288 <__aeabi_dsub>
 80069f2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006ba0 <_dtoa_r+0x2b8>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f7f9 fdfe 	bl	80005f8 <__aeabi_dmul>
 80069fc:	a36a      	add	r3, pc, #424	@ (adr r3, 8006ba8 <_dtoa_r+0x2c0>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	f7f9 fc43 	bl	800028c <__adddf3>
 8006a06:	4604      	mov	r4, r0
 8006a08:	4630      	mov	r0, r6
 8006a0a:	460d      	mov	r5, r1
 8006a0c:	f7f9 fd8a 	bl	8000524 <__aeabi_i2d>
 8006a10:	a367      	add	r3, pc, #412	@ (adr r3, 8006bb0 <_dtoa_r+0x2c8>)
 8006a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a16:	f7f9 fdef 	bl	80005f8 <__aeabi_dmul>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4620      	mov	r0, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	f7f9 fc33 	bl	800028c <__adddf3>
 8006a26:	4604      	mov	r4, r0
 8006a28:	460d      	mov	r5, r1
 8006a2a:	f7fa f895 	bl	8000b58 <__aeabi_d2iz>
 8006a2e:	2200      	movs	r2, #0
 8006a30:	4607      	mov	r7, r0
 8006a32:	2300      	movs	r3, #0
 8006a34:	4620      	mov	r0, r4
 8006a36:	4629      	mov	r1, r5
 8006a38:	f7fa f850 	bl	8000adc <__aeabi_dcmplt>
 8006a3c:	b140      	cbz	r0, 8006a50 <_dtoa_r+0x168>
 8006a3e:	4638      	mov	r0, r7
 8006a40:	f7f9 fd70 	bl	8000524 <__aeabi_i2d>
 8006a44:	4622      	mov	r2, r4
 8006a46:	462b      	mov	r3, r5
 8006a48:	f7fa f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a4c:	b900      	cbnz	r0, 8006a50 <_dtoa_r+0x168>
 8006a4e:	3f01      	subs	r7, #1
 8006a50:	2f16      	cmp	r7, #22
 8006a52:	d852      	bhi.n	8006afa <_dtoa_r+0x212>
 8006a54:	4b5d      	ldr	r3, [pc, #372]	@ (8006bcc <_dtoa_r+0x2e4>)
 8006a56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a62:	f7fa f83b 	bl	8000adc <__aeabi_dcmplt>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d049      	beq.n	8006afe <_dtoa_r+0x216>
 8006a6a:	3f01      	subs	r7, #1
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a72:	1b9b      	subs	r3, r3, r6
 8006a74:	1e5a      	subs	r2, r3, #1
 8006a76:	bf45      	ittet	mi
 8006a78:	f1c3 0301 	rsbmi	r3, r3, #1
 8006a7c:	9300      	strmi	r3, [sp, #0]
 8006a7e:	2300      	movpl	r3, #0
 8006a80:	2300      	movmi	r3, #0
 8006a82:	9206      	str	r2, [sp, #24]
 8006a84:	bf54      	ite	pl
 8006a86:	9300      	strpl	r3, [sp, #0]
 8006a88:	9306      	strmi	r3, [sp, #24]
 8006a8a:	2f00      	cmp	r7, #0
 8006a8c:	db39      	blt.n	8006b02 <_dtoa_r+0x21a>
 8006a8e:	9b06      	ldr	r3, [sp, #24]
 8006a90:	970d      	str	r7, [sp, #52]	@ 0x34
 8006a92:	443b      	add	r3, r7
 8006a94:	9306      	str	r3, [sp, #24]
 8006a96:	2300      	movs	r3, #0
 8006a98:	9308      	str	r3, [sp, #32]
 8006a9a:	9b07      	ldr	r3, [sp, #28]
 8006a9c:	2b09      	cmp	r3, #9
 8006a9e:	d863      	bhi.n	8006b68 <_dtoa_r+0x280>
 8006aa0:	2b05      	cmp	r3, #5
 8006aa2:	bfc4      	itt	gt
 8006aa4:	3b04      	subgt	r3, #4
 8006aa6:	9307      	strgt	r3, [sp, #28]
 8006aa8:	9b07      	ldr	r3, [sp, #28]
 8006aaa:	f1a3 0302 	sub.w	r3, r3, #2
 8006aae:	bfcc      	ite	gt
 8006ab0:	2400      	movgt	r4, #0
 8006ab2:	2401      	movle	r4, #1
 8006ab4:	2b03      	cmp	r3, #3
 8006ab6:	d863      	bhi.n	8006b80 <_dtoa_r+0x298>
 8006ab8:	e8df f003 	tbb	[pc, r3]
 8006abc:	2b375452 	.word	0x2b375452
 8006ac0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006ac4:	441e      	add	r6, r3
 8006ac6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	bfc1      	itttt	gt
 8006ace:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006ad2:	409f      	lslgt	r7, r3
 8006ad4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ad8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006adc:	bfd6      	itet	le
 8006ade:	f1c3 0320 	rsble	r3, r3, #32
 8006ae2:	ea47 0003 	orrgt.w	r0, r7, r3
 8006ae6:	fa04 f003 	lslle.w	r0, r4, r3
 8006aea:	f7f9 fd0b 	bl	8000504 <__aeabi_ui2d>
 8006aee:	2201      	movs	r2, #1
 8006af0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006af4:	3e01      	subs	r6, #1
 8006af6:	9212      	str	r2, [sp, #72]	@ 0x48
 8006af8:	e776      	b.n	80069e8 <_dtoa_r+0x100>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e7b7      	b.n	8006a6e <_dtoa_r+0x186>
 8006afe:	9010      	str	r0, [sp, #64]	@ 0x40
 8006b00:	e7b6      	b.n	8006a70 <_dtoa_r+0x188>
 8006b02:	9b00      	ldr	r3, [sp, #0]
 8006b04:	1bdb      	subs	r3, r3, r7
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	427b      	negs	r3, r7
 8006b0a:	9308      	str	r3, [sp, #32]
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006b10:	e7c3      	b.n	8006a9a <_dtoa_r+0x1b2>
 8006b12:	2301      	movs	r3, #1
 8006b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b18:	eb07 0b03 	add.w	fp, r7, r3
 8006b1c:	f10b 0301 	add.w	r3, fp, #1
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	9303      	str	r3, [sp, #12]
 8006b24:	bfb8      	it	lt
 8006b26:	2301      	movlt	r3, #1
 8006b28:	e006      	b.n	8006b38 <_dtoa_r+0x250>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	dd28      	ble.n	8006b86 <_dtoa_r+0x29e>
 8006b34:	469b      	mov	fp, r3
 8006b36:	9303      	str	r3, [sp, #12]
 8006b38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	2204      	movs	r2, #4
 8006b40:	f102 0514 	add.w	r5, r2, #20
 8006b44:	429d      	cmp	r5, r3
 8006b46:	d926      	bls.n	8006b96 <_dtoa_r+0x2ae>
 8006b48:	6041      	str	r1, [r0, #4]
 8006b4a:	4648      	mov	r0, r9
 8006b4c:	f000 fd9c 	bl	8007688 <_Balloc>
 8006b50:	4682      	mov	sl, r0
 8006b52:	2800      	cmp	r0, #0
 8006b54:	d142      	bne.n	8006bdc <_dtoa_r+0x2f4>
 8006b56:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd0 <_dtoa_r+0x2e8>)
 8006b58:	4602      	mov	r2, r0
 8006b5a:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b5e:	e6da      	b.n	8006916 <_dtoa_r+0x2e>
 8006b60:	2300      	movs	r3, #0
 8006b62:	e7e3      	b.n	8006b2c <_dtoa_r+0x244>
 8006b64:	2300      	movs	r3, #0
 8006b66:	e7d5      	b.n	8006b14 <_dtoa_r+0x22c>
 8006b68:	2401      	movs	r4, #1
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	9307      	str	r3, [sp, #28]
 8006b6e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006b70:	f04f 3bff 	mov.w	fp, #4294967295
 8006b74:	2200      	movs	r2, #0
 8006b76:	f8cd b00c 	str.w	fp, [sp, #12]
 8006b7a:	2312      	movs	r3, #18
 8006b7c:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b7e:	e7db      	b.n	8006b38 <_dtoa_r+0x250>
 8006b80:	2301      	movs	r3, #1
 8006b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b84:	e7f4      	b.n	8006b70 <_dtoa_r+0x288>
 8006b86:	f04f 0b01 	mov.w	fp, #1
 8006b8a:	f8cd b00c 	str.w	fp, [sp, #12]
 8006b8e:	465b      	mov	r3, fp
 8006b90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006b94:	e7d0      	b.n	8006b38 <_dtoa_r+0x250>
 8006b96:	3101      	adds	r1, #1
 8006b98:	0052      	lsls	r2, r2, #1
 8006b9a:	e7d1      	b.n	8006b40 <_dtoa_r+0x258>
 8006b9c:	f3af 8000 	nop.w
 8006ba0:	636f4361 	.word	0x636f4361
 8006ba4:	3fd287a7 	.word	0x3fd287a7
 8006ba8:	8b60c8b3 	.word	0x8b60c8b3
 8006bac:	3fc68a28 	.word	0x3fc68a28
 8006bb0:	509f79fb 	.word	0x509f79fb
 8006bb4:	3fd34413 	.word	0x3fd34413
 8006bb8:	080094d1 	.word	0x080094d1
 8006bbc:	080094e8 	.word	0x080094e8
 8006bc0:	7ff00000 	.word	0x7ff00000
 8006bc4:	080094a1 	.word	0x080094a1
 8006bc8:	3ff80000 	.word	0x3ff80000
 8006bcc:	08009638 	.word	0x08009638
 8006bd0:	08009540 	.word	0x08009540
 8006bd4:	080094cd 	.word	0x080094cd
 8006bd8:	080094a0 	.word	0x080094a0
 8006bdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006be0:	6018      	str	r0, [r3, #0]
 8006be2:	9b03      	ldr	r3, [sp, #12]
 8006be4:	2b0e      	cmp	r3, #14
 8006be6:	f200 80a1 	bhi.w	8006d2c <_dtoa_r+0x444>
 8006bea:	2c00      	cmp	r4, #0
 8006bec:	f000 809e 	beq.w	8006d2c <_dtoa_r+0x444>
 8006bf0:	2f00      	cmp	r7, #0
 8006bf2:	dd33      	ble.n	8006c5c <_dtoa_r+0x374>
 8006bf4:	4b9c      	ldr	r3, [pc, #624]	@ (8006e68 <_dtoa_r+0x580>)
 8006bf6:	f007 020f 	and.w	r2, r7, #15
 8006bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bfe:	ed93 7b00 	vldr	d7, [r3]
 8006c02:	05f8      	lsls	r0, r7, #23
 8006c04:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006c08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006c0c:	d516      	bpl.n	8006c3c <_dtoa_r+0x354>
 8006c0e:	4b97      	ldr	r3, [pc, #604]	@ (8006e6c <_dtoa_r+0x584>)
 8006c10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006c18:	f7f9 fe18 	bl	800084c <__aeabi_ddiv>
 8006c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c20:	f004 040f 	and.w	r4, r4, #15
 8006c24:	2603      	movs	r6, #3
 8006c26:	4d91      	ldr	r5, [pc, #580]	@ (8006e6c <_dtoa_r+0x584>)
 8006c28:	b954      	cbnz	r4, 8006c40 <_dtoa_r+0x358>
 8006c2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c32:	f7f9 fe0b 	bl	800084c <__aeabi_ddiv>
 8006c36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c3a:	e028      	b.n	8006c8e <_dtoa_r+0x3a6>
 8006c3c:	2602      	movs	r6, #2
 8006c3e:	e7f2      	b.n	8006c26 <_dtoa_r+0x33e>
 8006c40:	07e1      	lsls	r1, r4, #31
 8006c42:	d508      	bpl.n	8006c56 <_dtoa_r+0x36e>
 8006c44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006c48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c4c:	f7f9 fcd4 	bl	80005f8 <__aeabi_dmul>
 8006c50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006c54:	3601      	adds	r6, #1
 8006c56:	1064      	asrs	r4, r4, #1
 8006c58:	3508      	adds	r5, #8
 8006c5a:	e7e5      	b.n	8006c28 <_dtoa_r+0x340>
 8006c5c:	f000 80af 	beq.w	8006dbe <_dtoa_r+0x4d6>
 8006c60:	427c      	negs	r4, r7
 8006c62:	4b81      	ldr	r3, [pc, #516]	@ (8006e68 <_dtoa_r+0x580>)
 8006c64:	4d81      	ldr	r5, [pc, #516]	@ (8006e6c <_dtoa_r+0x584>)
 8006c66:	f004 020f 	and.w	r2, r4, #15
 8006c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c76:	f7f9 fcbf 	bl	80005f8 <__aeabi_dmul>
 8006c7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c7e:	1124      	asrs	r4, r4, #4
 8006c80:	2300      	movs	r3, #0
 8006c82:	2602      	movs	r6, #2
 8006c84:	2c00      	cmp	r4, #0
 8006c86:	f040 808f 	bne.w	8006da8 <_dtoa_r+0x4c0>
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1d3      	bne.n	8006c36 <_dtoa_r+0x34e>
 8006c8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8094 	beq.w	8006dc2 <_dtoa_r+0x4da>
 8006c9a:	4b75      	ldr	r3, [pc, #468]	@ (8006e70 <_dtoa_r+0x588>)
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 ff1b 	bl	8000adc <__aeabi_dcmplt>
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	f000 808b 	beq.w	8006dc2 <_dtoa_r+0x4da>
 8006cac:	9b03      	ldr	r3, [sp, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8087 	beq.w	8006dc2 <_dtoa_r+0x4da>
 8006cb4:	f1bb 0f00 	cmp.w	fp, #0
 8006cb8:	dd34      	ble.n	8006d24 <_dtoa_r+0x43c>
 8006cba:	4620      	mov	r0, r4
 8006cbc:	4b6d      	ldr	r3, [pc, #436]	@ (8006e74 <_dtoa_r+0x58c>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	f7f9 fc99 	bl	80005f8 <__aeabi_dmul>
 8006cc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006cca:	f107 38ff 	add.w	r8, r7, #4294967295
 8006cce:	3601      	adds	r6, #1
 8006cd0:	465c      	mov	r4, fp
 8006cd2:	4630      	mov	r0, r6
 8006cd4:	f7f9 fc26 	bl	8000524 <__aeabi_i2d>
 8006cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cdc:	f7f9 fc8c 	bl	80005f8 <__aeabi_dmul>
 8006ce0:	4b65      	ldr	r3, [pc, #404]	@ (8006e78 <_dtoa_r+0x590>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f7f9 fad2 	bl	800028c <__adddf3>
 8006ce8:	4605      	mov	r5, r0
 8006cea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cee:	2c00      	cmp	r4, #0
 8006cf0:	d16a      	bne.n	8006dc8 <_dtoa_r+0x4e0>
 8006cf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cf6:	4b61      	ldr	r3, [pc, #388]	@ (8006e7c <_dtoa_r+0x594>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f7f9 fac5 	bl	8000288 <__aeabi_dsub>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d06:	462a      	mov	r2, r5
 8006d08:	4633      	mov	r3, r6
 8006d0a:	f7f9 ff05 	bl	8000b18 <__aeabi_dcmpgt>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	f040 8298 	bne.w	8007244 <_dtoa_r+0x95c>
 8006d14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d18:	462a      	mov	r2, r5
 8006d1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006d1e:	f7f9 fedd 	bl	8000adc <__aeabi_dcmplt>
 8006d22:	bb38      	cbnz	r0, 8006d74 <_dtoa_r+0x48c>
 8006d24:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006d28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f2c0 8157 	blt.w	8006fe2 <_dtoa_r+0x6fa>
 8006d34:	2f0e      	cmp	r7, #14
 8006d36:	f300 8154 	bgt.w	8006fe2 <_dtoa_r+0x6fa>
 8006d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8006e68 <_dtoa_r+0x580>)
 8006d3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d40:	ed93 7b00 	vldr	d7, [r3]
 8006d44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	ed8d 7b00 	vstr	d7, [sp]
 8006d4c:	f280 80e5 	bge.w	8006f1a <_dtoa_r+0x632>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f300 80e1 	bgt.w	8006f1a <_dtoa_r+0x632>
 8006d58:	d10c      	bne.n	8006d74 <_dtoa_r+0x48c>
 8006d5a:	4b48      	ldr	r3, [pc, #288]	@ (8006e7c <_dtoa_r+0x594>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	ec51 0b17 	vmov	r0, r1, d7
 8006d62:	f7f9 fc49 	bl	80005f8 <__aeabi_dmul>
 8006d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6a:	f7f9 fecb 	bl	8000b04 <__aeabi_dcmpge>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	f000 8266 	beq.w	8007240 <_dtoa_r+0x958>
 8006d74:	2400      	movs	r4, #0
 8006d76:	4625      	mov	r5, r4
 8006d78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d7a:	4656      	mov	r6, sl
 8006d7c:	ea6f 0803 	mvn.w	r8, r3
 8006d80:	2700      	movs	r7, #0
 8006d82:	4621      	mov	r1, r4
 8006d84:	4648      	mov	r0, r9
 8006d86:	f000 fcbf 	bl	8007708 <_Bfree>
 8006d8a:	2d00      	cmp	r5, #0
 8006d8c:	f000 80bd 	beq.w	8006f0a <_dtoa_r+0x622>
 8006d90:	b12f      	cbz	r7, 8006d9e <_dtoa_r+0x4b6>
 8006d92:	42af      	cmp	r7, r5
 8006d94:	d003      	beq.n	8006d9e <_dtoa_r+0x4b6>
 8006d96:	4639      	mov	r1, r7
 8006d98:	4648      	mov	r0, r9
 8006d9a:	f000 fcb5 	bl	8007708 <_Bfree>
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4648      	mov	r0, r9
 8006da2:	f000 fcb1 	bl	8007708 <_Bfree>
 8006da6:	e0b0      	b.n	8006f0a <_dtoa_r+0x622>
 8006da8:	07e2      	lsls	r2, r4, #31
 8006daa:	d505      	bpl.n	8006db8 <_dtoa_r+0x4d0>
 8006dac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006db0:	f7f9 fc22 	bl	80005f8 <__aeabi_dmul>
 8006db4:	3601      	adds	r6, #1
 8006db6:	2301      	movs	r3, #1
 8006db8:	1064      	asrs	r4, r4, #1
 8006dba:	3508      	adds	r5, #8
 8006dbc:	e762      	b.n	8006c84 <_dtoa_r+0x39c>
 8006dbe:	2602      	movs	r6, #2
 8006dc0:	e765      	b.n	8006c8e <_dtoa_r+0x3a6>
 8006dc2:	9c03      	ldr	r4, [sp, #12]
 8006dc4:	46b8      	mov	r8, r7
 8006dc6:	e784      	b.n	8006cd2 <_dtoa_r+0x3ea>
 8006dc8:	4b27      	ldr	r3, [pc, #156]	@ (8006e68 <_dtoa_r+0x580>)
 8006dca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006dd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dd4:	4454      	add	r4, sl
 8006dd6:	2900      	cmp	r1, #0
 8006dd8:	d054      	beq.n	8006e84 <_dtoa_r+0x59c>
 8006dda:	4929      	ldr	r1, [pc, #164]	@ (8006e80 <_dtoa_r+0x598>)
 8006ddc:	2000      	movs	r0, #0
 8006dde:	f7f9 fd35 	bl	800084c <__aeabi_ddiv>
 8006de2:	4633      	mov	r3, r6
 8006de4:	462a      	mov	r2, r5
 8006de6:	f7f9 fa4f 	bl	8000288 <__aeabi_dsub>
 8006dea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006dee:	4656      	mov	r6, sl
 8006df0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006df4:	f7f9 feb0 	bl	8000b58 <__aeabi_d2iz>
 8006df8:	4605      	mov	r5, r0
 8006dfa:	f7f9 fb93 	bl	8000524 <__aeabi_i2d>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e06:	f7f9 fa3f 	bl	8000288 <__aeabi_dsub>
 8006e0a:	3530      	adds	r5, #48	@ 0x30
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e14:	f806 5b01 	strb.w	r5, [r6], #1
 8006e18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e1c:	f7f9 fe5e 	bl	8000adc <__aeabi_dcmplt>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d172      	bne.n	8006f0a <_dtoa_r+0x622>
 8006e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e28:	4911      	ldr	r1, [pc, #68]	@ (8006e70 <_dtoa_r+0x588>)
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	f7f9 fa2c 	bl	8000288 <__aeabi_dsub>
 8006e30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e34:	f7f9 fe52 	bl	8000adc <__aeabi_dcmplt>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f040 80b4 	bne.w	8006fa6 <_dtoa_r+0x6be>
 8006e3e:	42a6      	cmp	r6, r4
 8006e40:	f43f af70 	beq.w	8006d24 <_dtoa_r+0x43c>
 8006e44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e48:	4b0a      	ldr	r3, [pc, #40]	@ (8006e74 <_dtoa_r+0x58c>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f7f9 fbd4 	bl	80005f8 <__aeabi_dmul>
 8006e50:	4b08      	ldr	r3, [pc, #32]	@ (8006e74 <_dtoa_r+0x58c>)
 8006e52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e56:	2200      	movs	r2, #0
 8006e58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e5c:	f7f9 fbcc 	bl	80005f8 <__aeabi_dmul>
 8006e60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e64:	e7c4      	b.n	8006df0 <_dtoa_r+0x508>
 8006e66:	bf00      	nop
 8006e68:	08009638 	.word	0x08009638
 8006e6c:	08009610 	.word	0x08009610
 8006e70:	3ff00000 	.word	0x3ff00000
 8006e74:	40240000 	.word	0x40240000
 8006e78:	401c0000 	.word	0x401c0000
 8006e7c:	40140000 	.word	0x40140000
 8006e80:	3fe00000 	.word	0x3fe00000
 8006e84:	4631      	mov	r1, r6
 8006e86:	4628      	mov	r0, r5
 8006e88:	f7f9 fbb6 	bl	80005f8 <__aeabi_dmul>
 8006e8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e90:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006e92:	4656      	mov	r6, sl
 8006e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e98:	f7f9 fe5e 	bl	8000b58 <__aeabi_d2iz>
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	f7f9 fb41 	bl	8000524 <__aeabi_i2d>
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006eaa:	f7f9 f9ed 	bl	8000288 <__aeabi_dsub>
 8006eae:	3530      	adds	r5, #48	@ 0x30
 8006eb0:	f806 5b01 	strb.w	r5, [r6], #1
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	42a6      	cmp	r6, r4
 8006eba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ebe:	f04f 0200 	mov.w	r2, #0
 8006ec2:	d124      	bne.n	8006f0e <_dtoa_r+0x626>
 8006ec4:	4baf      	ldr	r3, [pc, #700]	@ (8007184 <_dtoa_r+0x89c>)
 8006ec6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006eca:	f7f9 f9df 	bl	800028c <__adddf3>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ed6:	f7f9 fe1f 	bl	8000b18 <__aeabi_dcmpgt>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d163      	bne.n	8006fa6 <_dtoa_r+0x6be>
 8006ede:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ee2:	49a8      	ldr	r1, [pc, #672]	@ (8007184 <_dtoa_r+0x89c>)
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	f7f9 f9cf 	bl	8000288 <__aeabi_dsub>
 8006eea:	4602      	mov	r2, r0
 8006eec:	460b      	mov	r3, r1
 8006eee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ef2:	f7f9 fdf3 	bl	8000adc <__aeabi_dcmplt>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	f43f af14 	beq.w	8006d24 <_dtoa_r+0x43c>
 8006efc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006efe:	1e73      	subs	r3, r6, #1
 8006f00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f06:	2b30      	cmp	r3, #48	@ 0x30
 8006f08:	d0f8      	beq.n	8006efc <_dtoa_r+0x614>
 8006f0a:	4647      	mov	r7, r8
 8006f0c:	e03b      	b.n	8006f86 <_dtoa_r+0x69e>
 8006f0e:	4b9e      	ldr	r3, [pc, #632]	@ (8007188 <_dtoa_r+0x8a0>)
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f18:	e7bc      	b.n	8006e94 <_dtoa_r+0x5ac>
 8006f1a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006f1e:	4656      	mov	r6, sl
 8006f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f24:	4620      	mov	r0, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7f9 fc90 	bl	800084c <__aeabi_ddiv>
 8006f2c:	f7f9 fe14 	bl	8000b58 <__aeabi_d2iz>
 8006f30:	4680      	mov	r8, r0
 8006f32:	f7f9 faf7 	bl	8000524 <__aeabi_i2d>
 8006f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f3a:	f7f9 fb5d 	bl	80005f8 <__aeabi_dmul>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4620      	mov	r0, r4
 8006f44:	4629      	mov	r1, r5
 8006f46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006f4a:	f7f9 f99d 	bl	8000288 <__aeabi_dsub>
 8006f4e:	f806 4b01 	strb.w	r4, [r6], #1
 8006f52:	9d03      	ldr	r5, [sp, #12]
 8006f54:	eba6 040a 	sub.w	r4, r6, sl
 8006f58:	42a5      	cmp	r5, r4
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	d133      	bne.n	8006fc8 <_dtoa_r+0x6e0>
 8006f60:	f7f9 f994 	bl	800028c <__adddf3>
 8006f64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f68:	4604      	mov	r4, r0
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	f7f9 fdd4 	bl	8000b18 <__aeabi_dcmpgt>
 8006f70:	b9c0      	cbnz	r0, 8006fa4 <_dtoa_r+0x6bc>
 8006f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7f9 fda5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f7e:	b110      	cbz	r0, 8006f86 <_dtoa_r+0x69e>
 8006f80:	f018 0f01 	tst.w	r8, #1
 8006f84:	d10e      	bne.n	8006fa4 <_dtoa_r+0x6bc>
 8006f86:	9902      	ldr	r1, [sp, #8]
 8006f88:	4648      	mov	r0, r9
 8006f8a:	f000 fbbd 	bl	8007708 <_Bfree>
 8006f8e:	2300      	movs	r3, #0
 8006f90:	7033      	strb	r3, [r6, #0]
 8006f92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f94:	3701      	adds	r7, #1
 8006f96:	601f      	str	r7, [r3, #0]
 8006f98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 824b 	beq.w	8007436 <_dtoa_r+0xb4e>
 8006fa0:	601e      	str	r6, [r3, #0]
 8006fa2:	e248      	b.n	8007436 <_dtoa_r+0xb4e>
 8006fa4:	46b8      	mov	r8, r7
 8006fa6:	4633      	mov	r3, r6
 8006fa8:	461e      	mov	r6, r3
 8006faa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006fae:	2a39      	cmp	r2, #57	@ 0x39
 8006fb0:	d106      	bne.n	8006fc0 <_dtoa_r+0x6d8>
 8006fb2:	459a      	cmp	sl, r3
 8006fb4:	d1f8      	bne.n	8006fa8 <_dtoa_r+0x6c0>
 8006fb6:	2230      	movs	r2, #48	@ 0x30
 8006fb8:	f108 0801 	add.w	r8, r8, #1
 8006fbc:	f88a 2000 	strb.w	r2, [sl]
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	3201      	adds	r2, #1
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e7a0      	b.n	8006f0a <_dtoa_r+0x622>
 8006fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8007188 <_dtoa_r+0x8a0>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f7f9 fb14 	bl	80005f8 <__aeabi_dmul>
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	f7f9 fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d09f      	beq.n	8006f20 <_dtoa_r+0x638>
 8006fe0:	e7d1      	b.n	8006f86 <_dtoa_r+0x69e>
 8006fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fe4:	2a00      	cmp	r2, #0
 8006fe6:	f000 80ea 	beq.w	80071be <_dtoa_r+0x8d6>
 8006fea:	9a07      	ldr	r2, [sp, #28]
 8006fec:	2a01      	cmp	r2, #1
 8006fee:	f300 80cd 	bgt.w	800718c <_dtoa_r+0x8a4>
 8006ff2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ff4:	2a00      	cmp	r2, #0
 8006ff6:	f000 80c1 	beq.w	800717c <_dtoa_r+0x894>
 8006ffa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ffe:	9c08      	ldr	r4, [sp, #32]
 8007000:	9e00      	ldr	r6, [sp, #0]
 8007002:	9a00      	ldr	r2, [sp, #0]
 8007004:	441a      	add	r2, r3
 8007006:	9200      	str	r2, [sp, #0]
 8007008:	9a06      	ldr	r2, [sp, #24]
 800700a:	2101      	movs	r1, #1
 800700c:	441a      	add	r2, r3
 800700e:	4648      	mov	r0, r9
 8007010:	9206      	str	r2, [sp, #24]
 8007012:	f000 fc2d 	bl	8007870 <__i2b>
 8007016:	4605      	mov	r5, r0
 8007018:	b166      	cbz	r6, 8007034 <_dtoa_r+0x74c>
 800701a:	9b06      	ldr	r3, [sp, #24]
 800701c:	2b00      	cmp	r3, #0
 800701e:	dd09      	ble.n	8007034 <_dtoa_r+0x74c>
 8007020:	42b3      	cmp	r3, r6
 8007022:	9a00      	ldr	r2, [sp, #0]
 8007024:	bfa8      	it	ge
 8007026:	4633      	movge	r3, r6
 8007028:	1ad2      	subs	r2, r2, r3
 800702a:	9200      	str	r2, [sp, #0]
 800702c:	9a06      	ldr	r2, [sp, #24]
 800702e:	1af6      	subs	r6, r6, r3
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	9306      	str	r3, [sp, #24]
 8007034:	9b08      	ldr	r3, [sp, #32]
 8007036:	b30b      	cbz	r3, 800707c <_dtoa_r+0x794>
 8007038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800703a:	2b00      	cmp	r3, #0
 800703c:	f000 80c6 	beq.w	80071cc <_dtoa_r+0x8e4>
 8007040:	2c00      	cmp	r4, #0
 8007042:	f000 80c0 	beq.w	80071c6 <_dtoa_r+0x8de>
 8007046:	4629      	mov	r1, r5
 8007048:	4622      	mov	r2, r4
 800704a:	4648      	mov	r0, r9
 800704c:	f000 fcc8 	bl	80079e0 <__pow5mult>
 8007050:	9a02      	ldr	r2, [sp, #8]
 8007052:	4601      	mov	r1, r0
 8007054:	4605      	mov	r5, r0
 8007056:	4648      	mov	r0, r9
 8007058:	f000 fc20 	bl	800789c <__multiply>
 800705c:	9902      	ldr	r1, [sp, #8]
 800705e:	4680      	mov	r8, r0
 8007060:	4648      	mov	r0, r9
 8007062:	f000 fb51 	bl	8007708 <_Bfree>
 8007066:	9b08      	ldr	r3, [sp, #32]
 8007068:	1b1b      	subs	r3, r3, r4
 800706a:	9308      	str	r3, [sp, #32]
 800706c:	f000 80b1 	beq.w	80071d2 <_dtoa_r+0x8ea>
 8007070:	9a08      	ldr	r2, [sp, #32]
 8007072:	4641      	mov	r1, r8
 8007074:	4648      	mov	r0, r9
 8007076:	f000 fcb3 	bl	80079e0 <__pow5mult>
 800707a:	9002      	str	r0, [sp, #8]
 800707c:	2101      	movs	r1, #1
 800707e:	4648      	mov	r0, r9
 8007080:	f000 fbf6 	bl	8007870 <__i2b>
 8007084:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007086:	4604      	mov	r4, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 81d8 	beq.w	800743e <_dtoa_r+0xb56>
 800708e:	461a      	mov	r2, r3
 8007090:	4601      	mov	r1, r0
 8007092:	4648      	mov	r0, r9
 8007094:	f000 fca4 	bl	80079e0 <__pow5mult>
 8007098:	9b07      	ldr	r3, [sp, #28]
 800709a:	2b01      	cmp	r3, #1
 800709c:	4604      	mov	r4, r0
 800709e:	f300 809f 	bgt.w	80071e0 <_dtoa_r+0x8f8>
 80070a2:	9b04      	ldr	r3, [sp, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f040 8097 	bne.w	80071d8 <_dtoa_r+0x8f0>
 80070aa:	9b05      	ldr	r3, [sp, #20]
 80070ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f040 8093 	bne.w	80071dc <_dtoa_r+0x8f4>
 80070b6:	9b05      	ldr	r3, [sp, #20]
 80070b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070bc:	0d1b      	lsrs	r3, r3, #20
 80070be:	051b      	lsls	r3, r3, #20
 80070c0:	b133      	cbz	r3, 80070d0 <_dtoa_r+0x7e8>
 80070c2:	9b00      	ldr	r3, [sp, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	9b06      	ldr	r3, [sp, #24]
 80070ca:	3301      	adds	r3, #1
 80070cc:	9306      	str	r3, [sp, #24]
 80070ce:	2301      	movs	r3, #1
 80070d0:	9308      	str	r3, [sp, #32]
 80070d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f000 81b8 	beq.w	800744a <_dtoa_r+0xb62>
 80070da:	6923      	ldr	r3, [r4, #16]
 80070dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070e0:	6918      	ldr	r0, [r3, #16]
 80070e2:	f000 fb79 	bl	80077d8 <__hi0bits>
 80070e6:	f1c0 0020 	rsb	r0, r0, #32
 80070ea:	9b06      	ldr	r3, [sp, #24]
 80070ec:	4418      	add	r0, r3
 80070ee:	f010 001f 	ands.w	r0, r0, #31
 80070f2:	f000 8082 	beq.w	80071fa <_dtoa_r+0x912>
 80070f6:	f1c0 0320 	rsb	r3, r0, #32
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	dd73      	ble.n	80071e6 <_dtoa_r+0x8fe>
 80070fe:	9b00      	ldr	r3, [sp, #0]
 8007100:	f1c0 001c 	rsb	r0, r0, #28
 8007104:	4403      	add	r3, r0
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	9b06      	ldr	r3, [sp, #24]
 800710a:	4403      	add	r3, r0
 800710c:	4406      	add	r6, r0
 800710e:	9306      	str	r3, [sp, #24]
 8007110:	9b00      	ldr	r3, [sp, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	dd05      	ble.n	8007122 <_dtoa_r+0x83a>
 8007116:	9902      	ldr	r1, [sp, #8]
 8007118:	461a      	mov	r2, r3
 800711a:	4648      	mov	r0, r9
 800711c:	f000 fcba 	bl	8007a94 <__lshift>
 8007120:	9002      	str	r0, [sp, #8]
 8007122:	9b06      	ldr	r3, [sp, #24]
 8007124:	2b00      	cmp	r3, #0
 8007126:	dd05      	ble.n	8007134 <_dtoa_r+0x84c>
 8007128:	4621      	mov	r1, r4
 800712a:	461a      	mov	r2, r3
 800712c:	4648      	mov	r0, r9
 800712e:	f000 fcb1 	bl	8007a94 <__lshift>
 8007132:	4604      	mov	r4, r0
 8007134:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007136:	2b00      	cmp	r3, #0
 8007138:	d061      	beq.n	80071fe <_dtoa_r+0x916>
 800713a:	9802      	ldr	r0, [sp, #8]
 800713c:	4621      	mov	r1, r4
 800713e:	f000 fd15 	bl	8007b6c <__mcmp>
 8007142:	2800      	cmp	r0, #0
 8007144:	da5b      	bge.n	80071fe <_dtoa_r+0x916>
 8007146:	2300      	movs	r3, #0
 8007148:	9902      	ldr	r1, [sp, #8]
 800714a:	220a      	movs	r2, #10
 800714c:	4648      	mov	r0, r9
 800714e:	f000 fafd 	bl	800774c <__multadd>
 8007152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007154:	9002      	str	r0, [sp, #8]
 8007156:	f107 38ff 	add.w	r8, r7, #4294967295
 800715a:	2b00      	cmp	r3, #0
 800715c:	f000 8177 	beq.w	800744e <_dtoa_r+0xb66>
 8007160:	4629      	mov	r1, r5
 8007162:	2300      	movs	r3, #0
 8007164:	220a      	movs	r2, #10
 8007166:	4648      	mov	r0, r9
 8007168:	f000 faf0 	bl	800774c <__multadd>
 800716c:	f1bb 0f00 	cmp.w	fp, #0
 8007170:	4605      	mov	r5, r0
 8007172:	dc6f      	bgt.n	8007254 <_dtoa_r+0x96c>
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	2b02      	cmp	r3, #2
 8007178:	dc49      	bgt.n	800720e <_dtoa_r+0x926>
 800717a:	e06b      	b.n	8007254 <_dtoa_r+0x96c>
 800717c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800717e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007182:	e73c      	b.n	8006ffe <_dtoa_r+0x716>
 8007184:	3fe00000 	.word	0x3fe00000
 8007188:	40240000 	.word	0x40240000
 800718c:	9b03      	ldr	r3, [sp, #12]
 800718e:	1e5c      	subs	r4, r3, #1
 8007190:	9b08      	ldr	r3, [sp, #32]
 8007192:	42a3      	cmp	r3, r4
 8007194:	db09      	blt.n	80071aa <_dtoa_r+0x8c2>
 8007196:	1b1c      	subs	r4, r3, r4
 8007198:	9b03      	ldr	r3, [sp, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	f6bf af30 	bge.w	8007000 <_dtoa_r+0x718>
 80071a0:	9b00      	ldr	r3, [sp, #0]
 80071a2:	9a03      	ldr	r2, [sp, #12]
 80071a4:	1a9e      	subs	r6, r3, r2
 80071a6:	2300      	movs	r3, #0
 80071a8:	e72b      	b.n	8007002 <_dtoa_r+0x71a>
 80071aa:	9b08      	ldr	r3, [sp, #32]
 80071ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071ae:	9408      	str	r4, [sp, #32]
 80071b0:	1ae3      	subs	r3, r4, r3
 80071b2:	441a      	add	r2, r3
 80071b4:	9e00      	ldr	r6, [sp, #0]
 80071b6:	9b03      	ldr	r3, [sp, #12]
 80071b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80071ba:	2400      	movs	r4, #0
 80071bc:	e721      	b.n	8007002 <_dtoa_r+0x71a>
 80071be:	9c08      	ldr	r4, [sp, #32]
 80071c0:	9e00      	ldr	r6, [sp, #0]
 80071c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80071c4:	e728      	b.n	8007018 <_dtoa_r+0x730>
 80071c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80071ca:	e751      	b.n	8007070 <_dtoa_r+0x788>
 80071cc:	9a08      	ldr	r2, [sp, #32]
 80071ce:	9902      	ldr	r1, [sp, #8]
 80071d0:	e750      	b.n	8007074 <_dtoa_r+0x78c>
 80071d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80071d6:	e751      	b.n	800707c <_dtoa_r+0x794>
 80071d8:	2300      	movs	r3, #0
 80071da:	e779      	b.n	80070d0 <_dtoa_r+0x7e8>
 80071dc:	9b04      	ldr	r3, [sp, #16]
 80071de:	e777      	b.n	80070d0 <_dtoa_r+0x7e8>
 80071e0:	2300      	movs	r3, #0
 80071e2:	9308      	str	r3, [sp, #32]
 80071e4:	e779      	b.n	80070da <_dtoa_r+0x7f2>
 80071e6:	d093      	beq.n	8007110 <_dtoa_r+0x828>
 80071e8:	9a00      	ldr	r2, [sp, #0]
 80071ea:	331c      	adds	r3, #28
 80071ec:	441a      	add	r2, r3
 80071ee:	9200      	str	r2, [sp, #0]
 80071f0:	9a06      	ldr	r2, [sp, #24]
 80071f2:	441a      	add	r2, r3
 80071f4:	441e      	add	r6, r3
 80071f6:	9206      	str	r2, [sp, #24]
 80071f8:	e78a      	b.n	8007110 <_dtoa_r+0x828>
 80071fa:	4603      	mov	r3, r0
 80071fc:	e7f4      	b.n	80071e8 <_dtoa_r+0x900>
 80071fe:	9b03      	ldr	r3, [sp, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	46b8      	mov	r8, r7
 8007204:	dc20      	bgt.n	8007248 <_dtoa_r+0x960>
 8007206:	469b      	mov	fp, r3
 8007208:	9b07      	ldr	r3, [sp, #28]
 800720a:	2b02      	cmp	r3, #2
 800720c:	dd1e      	ble.n	800724c <_dtoa_r+0x964>
 800720e:	f1bb 0f00 	cmp.w	fp, #0
 8007212:	f47f adb1 	bne.w	8006d78 <_dtoa_r+0x490>
 8007216:	4621      	mov	r1, r4
 8007218:	465b      	mov	r3, fp
 800721a:	2205      	movs	r2, #5
 800721c:	4648      	mov	r0, r9
 800721e:	f000 fa95 	bl	800774c <__multadd>
 8007222:	4601      	mov	r1, r0
 8007224:	4604      	mov	r4, r0
 8007226:	9802      	ldr	r0, [sp, #8]
 8007228:	f000 fca0 	bl	8007b6c <__mcmp>
 800722c:	2800      	cmp	r0, #0
 800722e:	f77f ada3 	ble.w	8006d78 <_dtoa_r+0x490>
 8007232:	4656      	mov	r6, sl
 8007234:	2331      	movs	r3, #49	@ 0x31
 8007236:	f806 3b01 	strb.w	r3, [r6], #1
 800723a:	f108 0801 	add.w	r8, r8, #1
 800723e:	e59f      	b.n	8006d80 <_dtoa_r+0x498>
 8007240:	9c03      	ldr	r4, [sp, #12]
 8007242:	46b8      	mov	r8, r7
 8007244:	4625      	mov	r5, r4
 8007246:	e7f4      	b.n	8007232 <_dtoa_r+0x94a>
 8007248:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800724c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	f000 8101 	beq.w	8007456 <_dtoa_r+0xb6e>
 8007254:	2e00      	cmp	r6, #0
 8007256:	dd05      	ble.n	8007264 <_dtoa_r+0x97c>
 8007258:	4629      	mov	r1, r5
 800725a:	4632      	mov	r2, r6
 800725c:	4648      	mov	r0, r9
 800725e:	f000 fc19 	bl	8007a94 <__lshift>
 8007262:	4605      	mov	r5, r0
 8007264:	9b08      	ldr	r3, [sp, #32]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d05c      	beq.n	8007324 <_dtoa_r+0xa3c>
 800726a:	6869      	ldr	r1, [r5, #4]
 800726c:	4648      	mov	r0, r9
 800726e:	f000 fa0b 	bl	8007688 <_Balloc>
 8007272:	4606      	mov	r6, r0
 8007274:	b928      	cbnz	r0, 8007282 <_dtoa_r+0x99a>
 8007276:	4b82      	ldr	r3, [pc, #520]	@ (8007480 <_dtoa_r+0xb98>)
 8007278:	4602      	mov	r2, r0
 800727a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800727e:	f7ff bb4a 	b.w	8006916 <_dtoa_r+0x2e>
 8007282:	692a      	ldr	r2, [r5, #16]
 8007284:	3202      	adds	r2, #2
 8007286:	0092      	lsls	r2, r2, #2
 8007288:	f105 010c 	add.w	r1, r5, #12
 800728c:	300c      	adds	r0, #12
 800728e:	f000 ffa3 	bl	80081d8 <memcpy>
 8007292:	2201      	movs	r2, #1
 8007294:	4631      	mov	r1, r6
 8007296:	4648      	mov	r0, r9
 8007298:	f000 fbfc 	bl	8007a94 <__lshift>
 800729c:	f10a 0301 	add.w	r3, sl, #1
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	eb0a 030b 	add.w	r3, sl, fp
 80072a6:	9308      	str	r3, [sp, #32]
 80072a8:	9b04      	ldr	r3, [sp, #16]
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	462f      	mov	r7, r5
 80072b0:	9306      	str	r3, [sp, #24]
 80072b2:	4605      	mov	r5, r0
 80072b4:	9b00      	ldr	r3, [sp, #0]
 80072b6:	9802      	ldr	r0, [sp, #8]
 80072b8:	4621      	mov	r1, r4
 80072ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80072be:	f7ff fa8a 	bl	80067d6 <quorem>
 80072c2:	4603      	mov	r3, r0
 80072c4:	3330      	adds	r3, #48	@ 0x30
 80072c6:	9003      	str	r0, [sp, #12]
 80072c8:	4639      	mov	r1, r7
 80072ca:	9802      	ldr	r0, [sp, #8]
 80072cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ce:	f000 fc4d 	bl	8007b6c <__mcmp>
 80072d2:	462a      	mov	r2, r5
 80072d4:	9004      	str	r0, [sp, #16]
 80072d6:	4621      	mov	r1, r4
 80072d8:	4648      	mov	r0, r9
 80072da:	f000 fc63 	bl	8007ba4 <__mdiff>
 80072de:	68c2      	ldr	r2, [r0, #12]
 80072e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e2:	4606      	mov	r6, r0
 80072e4:	bb02      	cbnz	r2, 8007328 <_dtoa_r+0xa40>
 80072e6:	4601      	mov	r1, r0
 80072e8:	9802      	ldr	r0, [sp, #8]
 80072ea:	f000 fc3f 	bl	8007b6c <__mcmp>
 80072ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f0:	4602      	mov	r2, r0
 80072f2:	4631      	mov	r1, r6
 80072f4:	4648      	mov	r0, r9
 80072f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80072f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80072fa:	f000 fa05 	bl	8007708 <_Bfree>
 80072fe:	9b07      	ldr	r3, [sp, #28]
 8007300:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007302:	9e00      	ldr	r6, [sp, #0]
 8007304:	ea42 0103 	orr.w	r1, r2, r3
 8007308:	9b06      	ldr	r3, [sp, #24]
 800730a:	4319      	orrs	r1, r3
 800730c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730e:	d10d      	bne.n	800732c <_dtoa_r+0xa44>
 8007310:	2b39      	cmp	r3, #57	@ 0x39
 8007312:	d027      	beq.n	8007364 <_dtoa_r+0xa7c>
 8007314:	9a04      	ldr	r2, [sp, #16]
 8007316:	2a00      	cmp	r2, #0
 8007318:	dd01      	ble.n	800731e <_dtoa_r+0xa36>
 800731a:	9b03      	ldr	r3, [sp, #12]
 800731c:	3331      	adds	r3, #49	@ 0x31
 800731e:	f88b 3000 	strb.w	r3, [fp]
 8007322:	e52e      	b.n	8006d82 <_dtoa_r+0x49a>
 8007324:	4628      	mov	r0, r5
 8007326:	e7b9      	b.n	800729c <_dtoa_r+0x9b4>
 8007328:	2201      	movs	r2, #1
 800732a:	e7e2      	b.n	80072f2 <_dtoa_r+0xa0a>
 800732c:	9904      	ldr	r1, [sp, #16]
 800732e:	2900      	cmp	r1, #0
 8007330:	db04      	blt.n	800733c <_dtoa_r+0xa54>
 8007332:	9807      	ldr	r0, [sp, #28]
 8007334:	4301      	orrs	r1, r0
 8007336:	9806      	ldr	r0, [sp, #24]
 8007338:	4301      	orrs	r1, r0
 800733a:	d120      	bne.n	800737e <_dtoa_r+0xa96>
 800733c:	2a00      	cmp	r2, #0
 800733e:	ddee      	ble.n	800731e <_dtoa_r+0xa36>
 8007340:	9902      	ldr	r1, [sp, #8]
 8007342:	9300      	str	r3, [sp, #0]
 8007344:	2201      	movs	r2, #1
 8007346:	4648      	mov	r0, r9
 8007348:	f000 fba4 	bl	8007a94 <__lshift>
 800734c:	4621      	mov	r1, r4
 800734e:	9002      	str	r0, [sp, #8]
 8007350:	f000 fc0c 	bl	8007b6c <__mcmp>
 8007354:	2800      	cmp	r0, #0
 8007356:	9b00      	ldr	r3, [sp, #0]
 8007358:	dc02      	bgt.n	8007360 <_dtoa_r+0xa78>
 800735a:	d1e0      	bne.n	800731e <_dtoa_r+0xa36>
 800735c:	07da      	lsls	r2, r3, #31
 800735e:	d5de      	bpl.n	800731e <_dtoa_r+0xa36>
 8007360:	2b39      	cmp	r3, #57	@ 0x39
 8007362:	d1da      	bne.n	800731a <_dtoa_r+0xa32>
 8007364:	2339      	movs	r3, #57	@ 0x39
 8007366:	f88b 3000 	strb.w	r3, [fp]
 800736a:	4633      	mov	r3, r6
 800736c:	461e      	mov	r6, r3
 800736e:	3b01      	subs	r3, #1
 8007370:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007374:	2a39      	cmp	r2, #57	@ 0x39
 8007376:	d04e      	beq.n	8007416 <_dtoa_r+0xb2e>
 8007378:	3201      	adds	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
 800737c:	e501      	b.n	8006d82 <_dtoa_r+0x49a>
 800737e:	2a00      	cmp	r2, #0
 8007380:	dd03      	ble.n	800738a <_dtoa_r+0xaa2>
 8007382:	2b39      	cmp	r3, #57	@ 0x39
 8007384:	d0ee      	beq.n	8007364 <_dtoa_r+0xa7c>
 8007386:	3301      	adds	r3, #1
 8007388:	e7c9      	b.n	800731e <_dtoa_r+0xa36>
 800738a:	9a00      	ldr	r2, [sp, #0]
 800738c:	9908      	ldr	r1, [sp, #32]
 800738e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007392:	428a      	cmp	r2, r1
 8007394:	d028      	beq.n	80073e8 <_dtoa_r+0xb00>
 8007396:	9902      	ldr	r1, [sp, #8]
 8007398:	2300      	movs	r3, #0
 800739a:	220a      	movs	r2, #10
 800739c:	4648      	mov	r0, r9
 800739e:	f000 f9d5 	bl	800774c <__multadd>
 80073a2:	42af      	cmp	r7, r5
 80073a4:	9002      	str	r0, [sp, #8]
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	f04f 020a 	mov.w	r2, #10
 80073ae:	4639      	mov	r1, r7
 80073b0:	4648      	mov	r0, r9
 80073b2:	d107      	bne.n	80073c4 <_dtoa_r+0xadc>
 80073b4:	f000 f9ca 	bl	800774c <__multadd>
 80073b8:	4607      	mov	r7, r0
 80073ba:	4605      	mov	r5, r0
 80073bc:	9b00      	ldr	r3, [sp, #0]
 80073be:	3301      	adds	r3, #1
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	e777      	b.n	80072b4 <_dtoa_r+0x9cc>
 80073c4:	f000 f9c2 	bl	800774c <__multadd>
 80073c8:	4629      	mov	r1, r5
 80073ca:	4607      	mov	r7, r0
 80073cc:	2300      	movs	r3, #0
 80073ce:	220a      	movs	r2, #10
 80073d0:	4648      	mov	r0, r9
 80073d2:	f000 f9bb 	bl	800774c <__multadd>
 80073d6:	4605      	mov	r5, r0
 80073d8:	e7f0      	b.n	80073bc <_dtoa_r+0xad4>
 80073da:	f1bb 0f00 	cmp.w	fp, #0
 80073de:	bfcc      	ite	gt
 80073e0:	465e      	movgt	r6, fp
 80073e2:	2601      	movle	r6, #1
 80073e4:	4456      	add	r6, sl
 80073e6:	2700      	movs	r7, #0
 80073e8:	9902      	ldr	r1, [sp, #8]
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	2201      	movs	r2, #1
 80073ee:	4648      	mov	r0, r9
 80073f0:	f000 fb50 	bl	8007a94 <__lshift>
 80073f4:	4621      	mov	r1, r4
 80073f6:	9002      	str	r0, [sp, #8]
 80073f8:	f000 fbb8 	bl	8007b6c <__mcmp>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	dcb4      	bgt.n	800736a <_dtoa_r+0xa82>
 8007400:	d102      	bne.n	8007408 <_dtoa_r+0xb20>
 8007402:	9b00      	ldr	r3, [sp, #0]
 8007404:	07db      	lsls	r3, r3, #31
 8007406:	d4b0      	bmi.n	800736a <_dtoa_r+0xa82>
 8007408:	4633      	mov	r3, r6
 800740a:	461e      	mov	r6, r3
 800740c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007410:	2a30      	cmp	r2, #48	@ 0x30
 8007412:	d0fa      	beq.n	800740a <_dtoa_r+0xb22>
 8007414:	e4b5      	b.n	8006d82 <_dtoa_r+0x49a>
 8007416:	459a      	cmp	sl, r3
 8007418:	d1a8      	bne.n	800736c <_dtoa_r+0xa84>
 800741a:	2331      	movs	r3, #49	@ 0x31
 800741c:	f108 0801 	add.w	r8, r8, #1
 8007420:	f88a 3000 	strb.w	r3, [sl]
 8007424:	e4ad      	b.n	8006d82 <_dtoa_r+0x49a>
 8007426:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007428:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007484 <_dtoa_r+0xb9c>
 800742c:	b11b      	cbz	r3, 8007436 <_dtoa_r+0xb4e>
 800742e:	f10a 0308 	add.w	r3, sl, #8
 8007432:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	4650      	mov	r0, sl
 8007438:	b017      	add	sp, #92	@ 0x5c
 800743a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	2b01      	cmp	r3, #1
 8007442:	f77f ae2e 	ble.w	80070a2 <_dtoa_r+0x7ba>
 8007446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007448:	9308      	str	r3, [sp, #32]
 800744a:	2001      	movs	r0, #1
 800744c:	e64d      	b.n	80070ea <_dtoa_r+0x802>
 800744e:	f1bb 0f00 	cmp.w	fp, #0
 8007452:	f77f aed9 	ble.w	8007208 <_dtoa_r+0x920>
 8007456:	4656      	mov	r6, sl
 8007458:	9802      	ldr	r0, [sp, #8]
 800745a:	4621      	mov	r1, r4
 800745c:	f7ff f9bb 	bl	80067d6 <quorem>
 8007460:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007464:	f806 3b01 	strb.w	r3, [r6], #1
 8007468:	eba6 020a 	sub.w	r2, r6, sl
 800746c:	4593      	cmp	fp, r2
 800746e:	ddb4      	ble.n	80073da <_dtoa_r+0xaf2>
 8007470:	9902      	ldr	r1, [sp, #8]
 8007472:	2300      	movs	r3, #0
 8007474:	220a      	movs	r2, #10
 8007476:	4648      	mov	r0, r9
 8007478:	f000 f968 	bl	800774c <__multadd>
 800747c:	9002      	str	r0, [sp, #8]
 800747e:	e7eb      	b.n	8007458 <_dtoa_r+0xb70>
 8007480:	08009540 	.word	0x08009540
 8007484:	080094c4 	.word	0x080094c4

08007488 <_free_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4605      	mov	r5, r0
 800748c:	2900      	cmp	r1, #0
 800748e:	d041      	beq.n	8007514 <_free_r+0x8c>
 8007490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007494:	1f0c      	subs	r4, r1, #4
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfb8      	it	lt
 800749a:	18e4      	addlt	r4, r4, r3
 800749c:	f000 f8e8 	bl	8007670 <__malloc_lock>
 80074a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007518 <_free_r+0x90>)
 80074a2:	6813      	ldr	r3, [r2, #0]
 80074a4:	b933      	cbnz	r3, 80074b4 <_free_r+0x2c>
 80074a6:	6063      	str	r3, [r4, #4]
 80074a8:	6014      	str	r4, [r2, #0]
 80074aa:	4628      	mov	r0, r5
 80074ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074b0:	f000 b8e4 	b.w	800767c <__malloc_unlock>
 80074b4:	42a3      	cmp	r3, r4
 80074b6:	d908      	bls.n	80074ca <_free_r+0x42>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	1821      	adds	r1, r4, r0
 80074bc:	428b      	cmp	r3, r1
 80074be:	bf01      	itttt	eq
 80074c0:	6819      	ldreq	r1, [r3, #0]
 80074c2:	685b      	ldreq	r3, [r3, #4]
 80074c4:	1809      	addeq	r1, r1, r0
 80074c6:	6021      	streq	r1, [r4, #0]
 80074c8:	e7ed      	b.n	80074a6 <_free_r+0x1e>
 80074ca:	461a      	mov	r2, r3
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	b10b      	cbz	r3, 80074d4 <_free_r+0x4c>
 80074d0:	42a3      	cmp	r3, r4
 80074d2:	d9fa      	bls.n	80074ca <_free_r+0x42>
 80074d4:	6811      	ldr	r1, [r2, #0]
 80074d6:	1850      	adds	r0, r2, r1
 80074d8:	42a0      	cmp	r0, r4
 80074da:	d10b      	bne.n	80074f4 <_free_r+0x6c>
 80074dc:	6820      	ldr	r0, [r4, #0]
 80074de:	4401      	add	r1, r0
 80074e0:	1850      	adds	r0, r2, r1
 80074e2:	4283      	cmp	r3, r0
 80074e4:	6011      	str	r1, [r2, #0]
 80074e6:	d1e0      	bne.n	80074aa <_free_r+0x22>
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	6053      	str	r3, [r2, #4]
 80074ee:	4408      	add	r0, r1
 80074f0:	6010      	str	r0, [r2, #0]
 80074f2:	e7da      	b.n	80074aa <_free_r+0x22>
 80074f4:	d902      	bls.n	80074fc <_free_r+0x74>
 80074f6:	230c      	movs	r3, #12
 80074f8:	602b      	str	r3, [r5, #0]
 80074fa:	e7d6      	b.n	80074aa <_free_r+0x22>
 80074fc:	6820      	ldr	r0, [r4, #0]
 80074fe:	1821      	adds	r1, r4, r0
 8007500:	428b      	cmp	r3, r1
 8007502:	bf04      	itt	eq
 8007504:	6819      	ldreq	r1, [r3, #0]
 8007506:	685b      	ldreq	r3, [r3, #4]
 8007508:	6063      	str	r3, [r4, #4]
 800750a:	bf04      	itt	eq
 800750c:	1809      	addeq	r1, r1, r0
 800750e:	6021      	streq	r1, [r4, #0]
 8007510:	6054      	str	r4, [r2, #4]
 8007512:	e7ca      	b.n	80074aa <_free_r+0x22>
 8007514:	bd38      	pop	{r3, r4, r5, pc}
 8007516:	bf00      	nop
 8007518:	20000794 	.word	0x20000794

0800751c <malloc>:
 800751c:	4b02      	ldr	r3, [pc, #8]	@ (8007528 <malloc+0xc>)
 800751e:	4601      	mov	r1, r0
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f000 b825 	b.w	8007570 <_malloc_r>
 8007526:	bf00      	nop
 8007528:	20000018 	.word	0x20000018

0800752c <sbrk_aligned>:
 800752c:	b570      	push	{r4, r5, r6, lr}
 800752e:	4e0f      	ldr	r6, [pc, #60]	@ (800756c <sbrk_aligned+0x40>)
 8007530:	460c      	mov	r4, r1
 8007532:	6831      	ldr	r1, [r6, #0]
 8007534:	4605      	mov	r5, r0
 8007536:	b911      	cbnz	r1, 800753e <sbrk_aligned+0x12>
 8007538:	f000 fe3e 	bl	80081b8 <_sbrk_r>
 800753c:	6030      	str	r0, [r6, #0]
 800753e:	4621      	mov	r1, r4
 8007540:	4628      	mov	r0, r5
 8007542:	f000 fe39 	bl	80081b8 <_sbrk_r>
 8007546:	1c43      	adds	r3, r0, #1
 8007548:	d103      	bne.n	8007552 <sbrk_aligned+0x26>
 800754a:	f04f 34ff 	mov.w	r4, #4294967295
 800754e:	4620      	mov	r0, r4
 8007550:	bd70      	pop	{r4, r5, r6, pc}
 8007552:	1cc4      	adds	r4, r0, #3
 8007554:	f024 0403 	bic.w	r4, r4, #3
 8007558:	42a0      	cmp	r0, r4
 800755a:	d0f8      	beq.n	800754e <sbrk_aligned+0x22>
 800755c:	1a21      	subs	r1, r4, r0
 800755e:	4628      	mov	r0, r5
 8007560:	f000 fe2a 	bl	80081b8 <_sbrk_r>
 8007564:	3001      	adds	r0, #1
 8007566:	d1f2      	bne.n	800754e <sbrk_aligned+0x22>
 8007568:	e7ef      	b.n	800754a <sbrk_aligned+0x1e>
 800756a:	bf00      	nop
 800756c:	20000790 	.word	0x20000790

08007570 <_malloc_r>:
 8007570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007574:	1ccd      	adds	r5, r1, #3
 8007576:	f025 0503 	bic.w	r5, r5, #3
 800757a:	3508      	adds	r5, #8
 800757c:	2d0c      	cmp	r5, #12
 800757e:	bf38      	it	cc
 8007580:	250c      	movcc	r5, #12
 8007582:	2d00      	cmp	r5, #0
 8007584:	4606      	mov	r6, r0
 8007586:	db01      	blt.n	800758c <_malloc_r+0x1c>
 8007588:	42a9      	cmp	r1, r5
 800758a:	d904      	bls.n	8007596 <_malloc_r+0x26>
 800758c:	230c      	movs	r3, #12
 800758e:	6033      	str	r3, [r6, #0]
 8007590:	2000      	movs	r0, #0
 8007592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007596:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800766c <_malloc_r+0xfc>
 800759a:	f000 f869 	bl	8007670 <__malloc_lock>
 800759e:	f8d8 3000 	ldr.w	r3, [r8]
 80075a2:	461c      	mov	r4, r3
 80075a4:	bb44      	cbnz	r4, 80075f8 <_malloc_r+0x88>
 80075a6:	4629      	mov	r1, r5
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7ff ffbf 	bl	800752c <sbrk_aligned>
 80075ae:	1c43      	adds	r3, r0, #1
 80075b0:	4604      	mov	r4, r0
 80075b2:	d158      	bne.n	8007666 <_malloc_r+0xf6>
 80075b4:	f8d8 4000 	ldr.w	r4, [r8]
 80075b8:	4627      	mov	r7, r4
 80075ba:	2f00      	cmp	r7, #0
 80075bc:	d143      	bne.n	8007646 <_malloc_r+0xd6>
 80075be:	2c00      	cmp	r4, #0
 80075c0:	d04b      	beq.n	800765a <_malloc_r+0xea>
 80075c2:	6823      	ldr	r3, [r4, #0]
 80075c4:	4639      	mov	r1, r7
 80075c6:	4630      	mov	r0, r6
 80075c8:	eb04 0903 	add.w	r9, r4, r3
 80075cc:	f000 fdf4 	bl	80081b8 <_sbrk_r>
 80075d0:	4581      	cmp	r9, r0
 80075d2:	d142      	bne.n	800765a <_malloc_r+0xea>
 80075d4:	6821      	ldr	r1, [r4, #0]
 80075d6:	1a6d      	subs	r5, r5, r1
 80075d8:	4629      	mov	r1, r5
 80075da:	4630      	mov	r0, r6
 80075dc:	f7ff ffa6 	bl	800752c <sbrk_aligned>
 80075e0:	3001      	adds	r0, #1
 80075e2:	d03a      	beq.n	800765a <_malloc_r+0xea>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	442b      	add	r3, r5
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	f8d8 3000 	ldr.w	r3, [r8]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	bb62      	cbnz	r2, 800764c <_malloc_r+0xdc>
 80075f2:	f8c8 7000 	str.w	r7, [r8]
 80075f6:	e00f      	b.n	8007618 <_malloc_r+0xa8>
 80075f8:	6822      	ldr	r2, [r4, #0]
 80075fa:	1b52      	subs	r2, r2, r5
 80075fc:	d420      	bmi.n	8007640 <_malloc_r+0xd0>
 80075fe:	2a0b      	cmp	r2, #11
 8007600:	d917      	bls.n	8007632 <_malloc_r+0xc2>
 8007602:	1961      	adds	r1, r4, r5
 8007604:	42a3      	cmp	r3, r4
 8007606:	6025      	str	r5, [r4, #0]
 8007608:	bf18      	it	ne
 800760a:	6059      	strne	r1, [r3, #4]
 800760c:	6863      	ldr	r3, [r4, #4]
 800760e:	bf08      	it	eq
 8007610:	f8c8 1000 	streq.w	r1, [r8]
 8007614:	5162      	str	r2, [r4, r5]
 8007616:	604b      	str	r3, [r1, #4]
 8007618:	4630      	mov	r0, r6
 800761a:	f000 f82f 	bl	800767c <__malloc_unlock>
 800761e:	f104 000b 	add.w	r0, r4, #11
 8007622:	1d23      	adds	r3, r4, #4
 8007624:	f020 0007 	bic.w	r0, r0, #7
 8007628:	1ac2      	subs	r2, r0, r3
 800762a:	bf1c      	itt	ne
 800762c:	1a1b      	subne	r3, r3, r0
 800762e:	50a3      	strne	r3, [r4, r2]
 8007630:	e7af      	b.n	8007592 <_malloc_r+0x22>
 8007632:	6862      	ldr	r2, [r4, #4]
 8007634:	42a3      	cmp	r3, r4
 8007636:	bf0c      	ite	eq
 8007638:	f8c8 2000 	streq.w	r2, [r8]
 800763c:	605a      	strne	r2, [r3, #4]
 800763e:	e7eb      	b.n	8007618 <_malloc_r+0xa8>
 8007640:	4623      	mov	r3, r4
 8007642:	6864      	ldr	r4, [r4, #4]
 8007644:	e7ae      	b.n	80075a4 <_malloc_r+0x34>
 8007646:	463c      	mov	r4, r7
 8007648:	687f      	ldr	r7, [r7, #4]
 800764a:	e7b6      	b.n	80075ba <_malloc_r+0x4a>
 800764c:	461a      	mov	r2, r3
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	42a3      	cmp	r3, r4
 8007652:	d1fb      	bne.n	800764c <_malloc_r+0xdc>
 8007654:	2300      	movs	r3, #0
 8007656:	6053      	str	r3, [r2, #4]
 8007658:	e7de      	b.n	8007618 <_malloc_r+0xa8>
 800765a:	230c      	movs	r3, #12
 800765c:	6033      	str	r3, [r6, #0]
 800765e:	4630      	mov	r0, r6
 8007660:	f000 f80c 	bl	800767c <__malloc_unlock>
 8007664:	e794      	b.n	8007590 <_malloc_r+0x20>
 8007666:	6005      	str	r5, [r0, #0]
 8007668:	e7d6      	b.n	8007618 <_malloc_r+0xa8>
 800766a:	bf00      	nop
 800766c:	20000794 	.word	0x20000794

08007670 <__malloc_lock>:
 8007670:	4801      	ldr	r0, [pc, #4]	@ (8007678 <__malloc_lock+0x8>)
 8007672:	f7ff b8ae 	b.w	80067d2 <__retarget_lock_acquire_recursive>
 8007676:	bf00      	nop
 8007678:	2000078c 	.word	0x2000078c

0800767c <__malloc_unlock>:
 800767c:	4801      	ldr	r0, [pc, #4]	@ (8007684 <__malloc_unlock+0x8>)
 800767e:	f7ff b8a9 	b.w	80067d4 <__retarget_lock_release_recursive>
 8007682:	bf00      	nop
 8007684:	2000078c 	.word	0x2000078c

08007688 <_Balloc>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	69c6      	ldr	r6, [r0, #28]
 800768c:	4604      	mov	r4, r0
 800768e:	460d      	mov	r5, r1
 8007690:	b976      	cbnz	r6, 80076b0 <_Balloc+0x28>
 8007692:	2010      	movs	r0, #16
 8007694:	f7ff ff42 	bl	800751c <malloc>
 8007698:	4602      	mov	r2, r0
 800769a:	61e0      	str	r0, [r4, #28]
 800769c:	b920      	cbnz	r0, 80076a8 <_Balloc+0x20>
 800769e:	4b18      	ldr	r3, [pc, #96]	@ (8007700 <_Balloc+0x78>)
 80076a0:	4818      	ldr	r0, [pc, #96]	@ (8007704 <_Balloc+0x7c>)
 80076a2:	216b      	movs	r1, #107	@ 0x6b
 80076a4:	f000 fda6 	bl	80081f4 <__assert_func>
 80076a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076ac:	6006      	str	r6, [r0, #0]
 80076ae:	60c6      	str	r6, [r0, #12]
 80076b0:	69e6      	ldr	r6, [r4, #28]
 80076b2:	68f3      	ldr	r3, [r6, #12]
 80076b4:	b183      	cbz	r3, 80076d8 <_Balloc+0x50>
 80076b6:	69e3      	ldr	r3, [r4, #28]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076be:	b9b8      	cbnz	r0, 80076f0 <_Balloc+0x68>
 80076c0:	2101      	movs	r1, #1
 80076c2:	fa01 f605 	lsl.w	r6, r1, r5
 80076c6:	1d72      	adds	r2, r6, #5
 80076c8:	0092      	lsls	r2, r2, #2
 80076ca:	4620      	mov	r0, r4
 80076cc:	f000 fdb0 	bl	8008230 <_calloc_r>
 80076d0:	b160      	cbz	r0, 80076ec <_Balloc+0x64>
 80076d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076d6:	e00e      	b.n	80076f6 <_Balloc+0x6e>
 80076d8:	2221      	movs	r2, #33	@ 0x21
 80076da:	2104      	movs	r1, #4
 80076dc:	4620      	mov	r0, r4
 80076de:	f000 fda7 	bl	8008230 <_calloc_r>
 80076e2:	69e3      	ldr	r3, [r4, #28]
 80076e4:	60f0      	str	r0, [r6, #12]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d1e4      	bne.n	80076b6 <_Balloc+0x2e>
 80076ec:	2000      	movs	r0, #0
 80076ee:	bd70      	pop	{r4, r5, r6, pc}
 80076f0:	6802      	ldr	r2, [r0, #0]
 80076f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80076f6:	2300      	movs	r3, #0
 80076f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80076fc:	e7f7      	b.n	80076ee <_Balloc+0x66>
 80076fe:	bf00      	nop
 8007700:	080094d1 	.word	0x080094d1
 8007704:	08009551 	.word	0x08009551

08007708 <_Bfree>:
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	69c6      	ldr	r6, [r0, #28]
 800770c:	4605      	mov	r5, r0
 800770e:	460c      	mov	r4, r1
 8007710:	b976      	cbnz	r6, 8007730 <_Bfree+0x28>
 8007712:	2010      	movs	r0, #16
 8007714:	f7ff ff02 	bl	800751c <malloc>
 8007718:	4602      	mov	r2, r0
 800771a:	61e8      	str	r0, [r5, #28]
 800771c:	b920      	cbnz	r0, 8007728 <_Bfree+0x20>
 800771e:	4b09      	ldr	r3, [pc, #36]	@ (8007744 <_Bfree+0x3c>)
 8007720:	4809      	ldr	r0, [pc, #36]	@ (8007748 <_Bfree+0x40>)
 8007722:	218f      	movs	r1, #143	@ 0x8f
 8007724:	f000 fd66 	bl	80081f4 <__assert_func>
 8007728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800772c:	6006      	str	r6, [r0, #0]
 800772e:	60c6      	str	r6, [r0, #12]
 8007730:	b13c      	cbz	r4, 8007742 <_Bfree+0x3a>
 8007732:	69eb      	ldr	r3, [r5, #28]
 8007734:	6862      	ldr	r2, [r4, #4]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800773c:	6021      	str	r1, [r4, #0]
 800773e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	080094d1 	.word	0x080094d1
 8007748:	08009551 	.word	0x08009551

0800774c <__multadd>:
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	690d      	ldr	r5, [r1, #16]
 8007752:	4607      	mov	r7, r0
 8007754:	460c      	mov	r4, r1
 8007756:	461e      	mov	r6, r3
 8007758:	f101 0c14 	add.w	ip, r1, #20
 800775c:	2000      	movs	r0, #0
 800775e:	f8dc 3000 	ldr.w	r3, [ip]
 8007762:	b299      	uxth	r1, r3
 8007764:	fb02 6101 	mla	r1, r2, r1, r6
 8007768:	0c1e      	lsrs	r6, r3, #16
 800776a:	0c0b      	lsrs	r3, r1, #16
 800776c:	fb02 3306 	mla	r3, r2, r6, r3
 8007770:	b289      	uxth	r1, r1
 8007772:	3001      	adds	r0, #1
 8007774:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007778:	4285      	cmp	r5, r0
 800777a:	f84c 1b04 	str.w	r1, [ip], #4
 800777e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007782:	dcec      	bgt.n	800775e <__multadd+0x12>
 8007784:	b30e      	cbz	r6, 80077ca <__multadd+0x7e>
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	42ab      	cmp	r3, r5
 800778a:	dc19      	bgt.n	80077c0 <__multadd+0x74>
 800778c:	6861      	ldr	r1, [r4, #4]
 800778e:	4638      	mov	r0, r7
 8007790:	3101      	adds	r1, #1
 8007792:	f7ff ff79 	bl	8007688 <_Balloc>
 8007796:	4680      	mov	r8, r0
 8007798:	b928      	cbnz	r0, 80077a6 <__multadd+0x5a>
 800779a:	4602      	mov	r2, r0
 800779c:	4b0c      	ldr	r3, [pc, #48]	@ (80077d0 <__multadd+0x84>)
 800779e:	480d      	ldr	r0, [pc, #52]	@ (80077d4 <__multadd+0x88>)
 80077a0:	21ba      	movs	r1, #186	@ 0xba
 80077a2:	f000 fd27 	bl	80081f4 <__assert_func>
 80077a6:	6922      	ldr	r2, [r4, #16]
 80077a8:	3202      	adds	r2, #2
 80077aa:	f104 010c 	add.w	r1, r4, #12
 80077ae:	0092      	lsls	r2, r2, #2
 80077b0:	300c      	adds	r0, #12
 80077b2:	f000 fd11 	bl	80081d8 <memcpy>
 80077b6:	4621      	mov	r1, r4
 80077b8:	4638      	mov	r0, r7
 80077ba:	f7ff ffa5 	bl	8007708 <_Bfree>
 80077be:	4644      	mov	r4, r8
 80077c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077c4:	3501      	adds	r5, #1
 80077c6:	615e      	str	r6, [r3, #20]
 80077c8:	6125      	str	r5, [r4, #16]
 80077ca:	4620      	mov	r0, r4
 80077cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077d0:	08009540 	.word	0x08009540
 80077d4:	08009551 	.word	0x08009551

080077d8 <__hi0bits>:
 80077d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80077dc:	4603      	mov	r3, r0
 80077de:	bf36      	itet	cc
 80077e0:	0403      	lslcc	r3, r0, #16
 80077e2:	2000      	movcs	r0, #0
 80077e4:	2010      	movcc	r0, #16
 80077e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077ea:	bf3c      	itt	cc
 80077ec:	021b      	lslcc	r3, r3, #8
 80077ee:	3008      	addcc	r0, #8
 80077f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80077f4:	bf3c      	itt	cc
 80077f6:	011b      	lslcc	r3, r3, #4
 80077f8:	3004      	addcc	r0, #4
 80077fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077fe:	bf3c      	itt	cc
 8007800:	009b      	lslcc	r3, r3, #2
 8007802:	3002      	addcc	r0, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	db05      	blt.n	8007814 <__hi0bits+0x3c>
 8007808:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800780c:	f100 0001 	add.w	r0, r0, #1
 8007810:	bf08      	it	eq
 8007812:	2020      	moveq	r0, #32
 8007814:	4770      	bx	lr

08007816 <__lo0bits>:
 8007816:	6803      	ldr	r3, [r0, #0]
 8007818:	4602      	mov	r2, r0
 800781a:	f013 0007 	ands.w	r0, r3, #7
 800781e:	d00b      	beq.n	8007838 <__lo0bits+0x22>
 8007820:	07d9      	lsls	r1, r3, #31
 8007822:	d421      	bmi.n	8007868 <__lo0bits+0x52>
 8007824:	0798      	lsls	r0, r3, #30
 8007826:	bf49      	itett	mi
 8007828:	085b      	lsrmi	r3, r3, #1
 800782a:	089b      	lsrpl	r3, r3, #2
 800782c:	2001      	movmi	r0, #1
 800782e:	6013      	strmi	r3, [r2, #0]
 8007830:	bf5c      	itt	pl
 8007832:	6013      	strpl	r3, [r2, #0]
 8007834:	2002      	movpl	r0, #2
 8007836:	4770      	bx	lr
 8007838:	b299      	uxth	r1, r3
 800783a:	b909      	cbnz	r1, 8007840 <__lo0bits+0x2a>
 800783c:	0c1b      	lsrs	r3, r3, #16
 800783e:	2010      	movs	r0, #16
 8007840:	b2d9      	uxtb	r1, r3
 8007842:	b909      	cbnz	r1, 8007848 <__lo0bits+0x32>
 8007844:	3008      	adds	r0, #8
 8007846:	0a1b      	lsrs	r3, r3, #8
 8007848:	0719      	lsls	r1, r3, #28
 800784a:	bf04      	itt	eq
 800784c:	091b      	lsreq	r3, r3, #4
 800784e:	3004      	addeq	r0, #4
 8007850:	0799      	lsls	r1, r3, #30
 8007852:	bf04      	itt	eq
 8007854:	089b      	lsreq	r3, r3, #2
 8007856:	3002      	addeq	r0, #2
 8007858:	07d9      	lsls	r1, r3, #31
 800785a:	d403      	bmi.n	8007864 <__lo0bits+0x4e>
 800785c:	085b      	lsrs	r3, r3, #1
 800785e:	f100 0001 	add.w	r0, r0, #1
 8007862:	d003      	beq.n	800786c <__lo0bits+0x56>
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	4770      	bx	lr
 8007868:	2000      	movs	r0, #0
 800786a:	4770      	bx	lr
 800786c:	2020      	movs	r0, #32
 800786e:	4770      	bx	lr

08007870 <__i2b>:
 8007870:	b510      	push	{r4, lr}
 8007872:	460c      	mov	r4, r1
 8007874:	2101      	movs	r1, #1
 8007876:	f7ff ff07 	bl	8007688 <_Balloc>
 800787a:	4602      	mov	r2, r0
 800787c:	b928      	cbnz	r0, 800788a <__i2b+0x1a>
 800787e:	4b05      	ldr	r3, [pc, #20]	@ (8007894 <__i2b+0x24>)
 8007880:	4805      	ldr	r0, [pc, #20]	@ (8007898 <__i2b+0x28>)
 8007882:	f240 1145 	movw	r1, #325	@ 0x145
 8007886:	f000 fcb5 	bl	80081f4 <__assert_func>
 800788a:	2301      	movs	r3, #1
 800788c:	6144      	str	r4, [r0, #20]
 800788e:	6103      	str	r3, [r0, #16]
 8007890:	bd10      	pop	{r4, pc}
 8007892:	bf00      	nop
 8007894:	08009540 	.word	0x08009540
 8007898:	08009551 	.word	0x08009551

0800789c <__multiply>:
 800789c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a0:	4617      	mov	r7, r2
 80078a2:	690a      	ldr	r2, [r1, #16]
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	bfa8      	it	ge
 80078aa:	463b      	movge	r3, r7
 80078ac:	4689      	mov	r9, r1
 80078ae:	bfa4      	itt	ge
 80078b0:	460f      	movge	r7, r1
 80078b2:	4699      	movge	r9, r3
 80078b4:	693d      	ldr	r5, [r7, #16]
 80078b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	6879      	ldr	r1, [r7, #4]
 80078be:	eb05 060a 	add.w	r6, r5, sl
 80078c2:	42b3      	cmp	r3, r6
 80078c4:	b085      	sub	sp, #20
 80078c6:	bfb8      	it	lt
 80078c8:	3101      	addlt	r1, #1
 80078ca:	f7ff fedd 	bl	8007688 <_Balloc>
 80078ce:	b930      	cbnz	r0, 80078de <__multiply+0x42>
 80078d0:	4602      	mov	r2, r0
 80078d2:	4b41      	ldr	r3, [pc, #260]	@ (80079d8 <__multiply+0x13c>)
 80078d4:	4841      	ldr	r0, [pc, #260]	@ (80079dc <__multiply+0x140>)
 80078d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80078da:	f000 fc8b 	bl	80081f4 <__assert_func>
 80078de:	f100 0414 	add.w	r4, r0, #20
 80078e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80078e6:	4623      	mov	r3, r4
 80078e8:	2200      	movs	r2, #0
 80078ea:	4573      	cmp	r3, lr
 80078ec:	d320      	bcc.n	8007930 <__multiply+0x94>
 80078ee:	f107 0814 	add.w	r8, r7, #20
 80078f2:	f109 0114 	add.w	r1, r9, #20
 80078f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80078fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	1beb      	subs	r3, r5, r7
 8007902:	3b15      	subs	r3, #21
 8007904:	f023 0303 	bic.w	r3, r3, #3
 8007908:	3304      	adds	r3, #4
 800790a:	3715      	adds	r7, #21
 800790c:	42bd      	cmp	r5, r7
 800790e:	bf38      	it	cc
 8007910:	2304      	movcc	r3, #4
 8007912:	9301      	str	r3, [sp, #4]
 8007914:	9b02      	ldr	r3, [sp, #8]
 8007916:	9103      	str	r1, [sp, #12]
 8007918:	428b      	cmp	r3, r1
 800791a:	d80c      	bhi.n	8007936 <__multiply+0x9a>
 800791c:	2e00      	cmp	r6, #0
 800791e:	dd03      	ble.n	8007928 <__multiply+0x8c>
 8007920:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007924:	2b00      	cmp	r3, #0
 8007926:	d055      	beq.n	80079d4 <__multiply+0x138>
 8007928:	6106      	str	r6, [r0, #16]
 800792a:	b005      	add	sp, #20
 800792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007930:	f843 2b04 	str.w	r2, [r3], #4
 8007934:	e7d9      	b.n	80078ea <__multiply+0x4e>
 8007936:	f8b1 a000 	ldrh.w	sl, [r1]
 800793a:	f1ba 0f00 	cmp.w	sl, #0
 800793e:	d01f      	beq.n	8007980 <__multiply+0xe4>
 8007940:	46c4      	mov	ip, r8
 8007942:	46a1      	mov	r9, r4
 8007944:	2700      	movs	r7, #0
 8007946:	f85c 2b04 	ldr.w	r2, [ip], #4
 800794a:	f8d9 3000 	ldr.w	r3, [r9]
 800794e:	fa1f fb82 	uxth.w	fp, r2
 8007952:	b29b      	uxth	r3, r3
 8007954:	fb0a 330b 	mla	r3, sl, fp, r3
 8007958:	443b      	add	r3, r7
 800795a:	f8d9 7000 	ldr.w	r7, [r9]
 800795e:	0c12      	lsrs	r2, r2, #16
 8007960:	0c3f      	lsrs	r7, r7, #16
 8007962:	fb0a 7202 	mla	r2, sl, r2, r7
 8007966:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800796a:	b29b      	uxth	r3, r3
 800796c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007970:	4565      	cmp	r5, ip
 8007972:	f849 3b04 	str.w	r3, [r9], #4
 8007976:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800797a:	d8e4      	bhi.n	8007946 <__multiply+0xaa>
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	50e7      	str	r7, [r4, r3]
 8007980:	9b03      	ldr	r3, [sp, #12]
 8007982:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007986:	3104      	adds	r1, #4
 8007988:	f1b9 0f00 	cmp.w	r9, #0
 800798c:	d020      	beq.n	80079d0 <__multiply+0x134>
 800798e:	6823      	ldr	r3, [r4, #0]
 8007990:	4647      	mov	r7, r8
 8007992:	46a4      	mov	ip, r4
 8007994:	f04f 0a00 	mov.w	sl, #0
 8007998:	f8b7 b000 	ldrh.w	fp, [r7]
 800799c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80079a0:	fb09 220b 	mla	r2, r9, fp, r2
 80079a4:	4452      	add	r2, sl
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ac:	f84c 3b04 	str.w	r3, [ip], #4
 80079b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80079b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80079bc:	fb09 330a 	mla	r3, r9, sl, r3
 80079c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80079c4:	42bd      	cmp	r5, r7
 80079c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079ca:	d8e5      	bhi.n	8007998 <__multiply+0xfc>
 80079cc:	9a01      	ldr	r2, [sp, #4]
 80079ce:	50a3      	str	r3, [r4, r2]
 80079d0:	3404      	adds	r4, #4
 80079d2:	e79f      	b.n	8007914 <__multiply+0x78>
 80079d4:	3e01      	subs	r6, #1
 80079d6:	e7a1      	b.n	800791c <__multiply+0x80>
 80079d8:	08009540 	.word	0x08009540
 80079dc:	08009551 	.word	0x08009551

080079e0 <__pow5mult>:
 80079e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079e4:	4615      	mov	r5, r2
 80079e6:	f012 0203 	ands.w	r2, r2, #3
 80079ea:	4607      	mov	r7, r0
 80079ec:	460e      	mov	r6, r1
 80079ee:	d007      	beq.n	8007a00 <__pow5mult+0x20>
 80079f0:	4c25      	ldr	r4, [pc, #148]	@ (8007a88 <__pow5mult+0xa8>)
 80079f2:	3a01      	subs	r2, #1
 80079f4:	2300      	movs	r3, #0
 80079f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079fa:	f7ff fea7 	bl	800774c <__multadd>
 80079fe:	4606      	mov	r6, r0
 8007a00:	10ad      	asrs	r5, r5, #2
 8007a02:	d03d      	beq.n	8007a80 <__pow5mult+0xa0>
 8007a04:	69fc      	ldr	r4, [r7, #28]
 8007a06:	b97c      	cbnz	r4, 8007a28 <__pow5mult+0x48>
 8007a08:	2010      	movs	r0, #16
 8007a0a:	f7ff fd87 	bl	800751c <malloc>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	61f8      	str	r0, [r7, #28]
 8007a12:	b928      	cbnz	r0, 8007a20 <__pow5mult+0x40>
 8007a14:	4b1d      	ldr	r3, [pc, #116]	@ (8007a8c <__pow5mult+0xac>)
 8007a16:	481e      	ldr	r0, [pc, #120]	@ (8007a90 <__pow5mult+0xb0>)
 8007a18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007a1c:	f000 fbea 	bl	80081f4 <__assert_func>
 8007a20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a24:	6004      	str	r4, [r0, #0]
 8007a26:	60c4      	str	r4, [r0, #12]
 8007a28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007a2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a30:	b94c      	cbnz	r4, 8007a46 <__pow5mult+0x66>
 8007a32:	f240 2171 	movw	r1, #625	@ 0x271
 8007a36:	4638      	mov	r0, r7
 8007a38:	f7ff ff1a 	bl	8007870 <__i2b>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a42:	4604      	mov	r4, r0
 8007a44:	6003      	str	r3, [r0, #0]
 8007a46:	f04f 0900 	mov.w	r9, #0
 8007a4a:	07eb      	lsls	r3, r5, #31
 8007a4c:	d50a      	bpl.n	8007a64 <__pow5mult+0x84>
 8007a4e:	4631      	mov	r1, r6
 8007a50:	4622      	mov	r2, r4
 8007a52:	4638      	mov	r0, r7
 8007a54:	f7ff ff22 	bl	800789c <__multiply>
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4680      	mov	r8, r0
 8007a5c:	4638      	mov	r0, r7
 8007a5e:	f7ff fe53 	bl	8007708 <_Bfree>
 8007a62:	4646      	mov	r6, r8
 8007a64:	106d      	asrs	r5, r5, #1
 8007a66:	d00b      	beq.n	8007a80 <__pow5mult+0xa0>
 8007a68:	6820      	ldr	r0, [r4, #0]
 8007a6a:	b938      	cbnz	r0, 8007a7c <__pow5mult+0x9c>
 8007a6c:	4622      	mov	r2, r4
 8007a6e:	4621      	mov	r1, r4
 8007a70:	4638      	mov	r0, r7
 8007a72:	f7ff ff13 	bl	800789c <__multiply>
 8007a76:	6020      	str	r0, [r4, #0]
 8007a78:	f8c0 9000 	str.w	r9, [r0]
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	e7e4      	b.n	8007a4a <__pow5mult+0x6a>
 8007a80:	4630      	mov	r0, r6
 8007a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a86:	bf00      	nop
 8007a88:	08009604 	.word	0x08009604
 8007a8c:	080094d1 	.word	0x080094d1
 8007a90:	08009551 	.word	0x08009551

08007a94 <__lshift>:
 8007a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	460c      	mov	r4, r1
 8007a9a:	6849      	ldr	r1, [r1, #4]
 8007a9c:	6923      	ldr	r3, [r4, #16]
 8007a9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007aa2:	68a3      	ldr	r3, [r4, #8]
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	4691      	mov	r9, r2
 8007aa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007aac:	f108 0601 	add.w	r6, r8, #1
 8007ab0:	42b3      	cmp	r3, r6
 8007ab2:	db0b      	blt.n	8007acc <__lshift+0x38>
 8007ab4:	4638      	mov	r0, r7
 8007ab6:	f7ff fde7 	bl	8007688 <_Balloc>
 8007aba:	4605      	mov	r5, r0
 8007abc:	b948      	cbnz	r0, 8007ad2 <__lshift+0x3e>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	4b28      	ldr	r3, [pc, #160]	@ (8007b64 <__lshift+0xd0>)
 8007ac2:	4829      	ldr	r0, [pc, #164]	@ (8007b68 <__lshift+0xd4>)
 8007ac4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ac8:	f000 fb94 	bl	80081f4 <__assert_func>
 8007acc:	3101      	adds	r1, #1
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	e7ee      	b.n	8007ab0 <__lshift+0x1c>
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f100 0114 	add.w	r1, r0, #20
 8007ad8:	f100 0210 	add.w	r2, r0, #16
 8007adc:	4618      	mov	r0, r3
 8007ade:	4553      	cmp	r3, sl
 8007ae0:	db33      	blt.n	8007b4a <__lshift+0xb6>
 8007ae2:	6920      	ldr	r0, [r4, #16]
 8007ae4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ae8:	f104 0314 	add.w	r3, r4, #20
 8007aec:	f019 091f 	ands.w	r9, r9, #31
 8007af0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007af4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007af8:	d02b      	beq.n	8007b52 <__lshift+0xbe>
 8007afa:	f1c9 0e20 	rsb	lr, r9, #32
 8007afe:	468a      	mov	sl, r1
 8007b00:	2200      	movs	r2, #0
 8007b02:	6818      	ldr	r0, [r3, #0]
 8007b04:	fa00 f009 	lsl.w	r0, r0, r9
 8007b08:	4310      	orrs	r0, r2
 8007b0a:	f84a 0b04 	str.w	r0, [sl], #4
 8007b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b12:	459c      	cmp	ip, r3
 8007b14:	fa22 f20e 	lsr.w	r2, r2, lr
 8007b18:	d8f3      	bhi.n	8007b02 <__lshift+0x6e>
 8007b1a:	ebac 0304 	sub.w	r3, ip, r4
 8007b1e:	3b15      	subs	r3, #21
 8007b20:	f023 0303 	bic.w	r3, r3, #3
 8007b24:	3304      	adds	r3, #4
 8007b26:	f104 0015 	add.w	r0, r4, #21
 8007b2a:	4560      	cmp	r0, ip
 8007b2c:	bf88      	it	hi
 8007b2e:	2304      	movhi	r3, #4
 8007b30:	50ca      	str	r2, [r1, r3]
 8007b32:	b10a      	cbz	r2, 8007b38 <__lshift+0xa4>
 8007b34:	f108 0602 	add.w	r6, r8, #2
 8007b38:	3e01      	subs	r6, #1
 8007b3a:	4638      	mov	r0, r7
 8007b3c:	612e      	str	r6, [r5, #16]
 8007b3e:	4621      	mov	r1, r4
 8007b40:	f7ff fde2 	bl	8007708 <_Bfree>
 8007b44:	4628      	mov	r0, r5
 8007b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b4e:	3301      	adds	r3, #1
 8007b50:	e7c5      	b.n	8007ade <__lshift+0x4a>
 8007b52:	3904      	subs	r1, #4
 8007b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b58:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b5c:	459c      	cmp	ip, r3
 8007b5e:	d8f9      	bhi.n	8007b54 <__lshift+0xc0>
 8007b60:	e7ea      	b.n	8007b38 <__lshift+0xa4>
 8007b62:	bf00      	nop
 8007b64:	08009540 	.word	0x08009540
 8007b68:	08009551 	.word	0x08009551

08007b6c <__mcmp>:
 8007b6c:	690a      	ldr	r2, [r1, #16]
 8007b6e:	4603      	mov	r3, r0
 8007b70:	6900      	ldr	r0, [r0, #16]
 8007b72:	1a80      	subs	r0, r0, r2
 8007b74:	b530      	push	{r4, r5, lr}
 8007b76:	d10e      	bne.n	8007b96 <__mcmp+0x2a>
 8007b78:	3314      	adds	r3, #20
 8007b7a:	3114      	adds	r1, #20
 8007b7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b8c:	4295      	cmp	r5, r2
 8007b8e:	d003      	beq.n	8007b98 <__mcmp+0x2c>
 8007b90:	d205      	bcs.n	8007b9e <__mcmp+0x32>
 8007b92:	f04f 30ff 	mov.w	r0, #4294967295
 8007b96:	bd30      	pop	{r4, r5, pc}
 8007b98:	42a3      	cmp	r3, r4
 8007b9a:	d3f3      	bcc.n	8007b84 <__mcmp+0x18>
 8007b9c:	e7fb      	b.n	8007b96 <__mcmp+0x2a>
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	e7f9      	b.n	8007b96 <__mcmp+0x2a>
	...

08007ba4 <__mdiff>:
 8007ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ba8:	4689      	mov	r9, r1
 8007baa:	4606      	mov	r6, r0
 8007bac:	4611      	mov	r1, r2
 8007bae:	4648      	mov	r0, r9
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	f7ff ffdb 	bl	8007b6c <__mcmp>
 8007bb6:	1e05      	subs	r5, r0, #0
 8007bb8:	d112      	bne.n	8007be0 <__mdiff+0x3c>
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	f7ff fd63 	bl	8007688 <_Balloc>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	b928      	cbnz	r0, 8007bd2 <__mdiff+0x2e>
 8007bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8007cc4 <__mdiff+0x120>)
 8007bc8:	f240 2137 	movw	r1, #567	@ 0x237
 8007bcc:	483e      	ldr	r0, [pc, #248]	@ (8007cc8 <__mdiff+0x124>)
 8007bce:	f000 fb11 	bl	80081f4 <__assert_func>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007bd8:	4610      	mov	r0, r2
 8007bda:	b003      	add	sp, #12
 8007bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be0:	bfbc      	itt	lt
 8007be2:	464b      	movlt	r3, r9
 8007be4:	46a1      	movlt	r9, r4
 8007be6:	4630      	mov	r0, r6
 8007be8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007bec:	bfba      	itte	lt
 8007bee:	461c      	movlt	r4, r3
 8007bf0:	2501      	movlt	r5, #1
 8007bf2:	2500      	movge	r5, #0
 8007bf4:	f7ff fd48 	bl	8007688 <_Balloc>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	b918      	cbnz	r0, 8007c04 <__mdiff+0x60>
 8007bfc:	4b31      	ldr	r3, [pc, #196]	@ (8007cc4 <__mdiff+0x120>)
 8007bfe:	f240 2145 	movw	r1, #581	@ 0x245
 8007c02:	e7e3      	b.n	8007bcc <__mdiff+0x28>
 8007c04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007c08:	6926      	ldr	r6, [r4, #16]
 8007c0a:	60c5      	str	r5, [r0, #12]
 8007c0c:	f109 0310 	add.w	r3, r9, #16
 8007c10:	f109 0514 	add.w	r5, r9, #20
 8007c14:	f104 0e14 	add.w	lr, r4, #20
 8007c18:	f100 0b14 	add.w	fp, r0, #20
 8007c1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007c20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	46d9      	mov	r9, fp
 8007c28:	f04f 0c00 	mov.w	ip, #0
 8007c2c:	9b01      	ldr	r3, [sp, #4]
 8007c2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007c32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007c36:	9301      	str	r3, [sp, #4]
 8007c38:	fa1f f38a 	uxth.w	r3, sl
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	b283      	uxth	r3, r0
 8007c40:	1acb      	subs	r3, r1, r3
 8007c42:	0c00      	lsrs	r0, r0, #16
 8007c44:	4463      	add	r3, ip
 8007c46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c54:	4576      	cmp	r6, lr
 8007c56:	f849 3b04 	str.w	r3, [r9], #4
 8007c5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c5e:	d8e5      	bhi.n	8007c2c <__mdiff+0x88>
 8007c60:	1b33      	subs	r3, r6, r4
 8007c62:	3b15      	subs	r3, #21
 8007c64:	f023 0303 	bic.w	r3, r3, #3
 8007c68:	3415      	adds	r4, #21
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	42a6      	cmp	r6, r4
 8007c6e:	bf38      	it	cc
 8007c70:	2304      	movcc	r3, #4
 8007c72:	441d      	add	r5, r3
 8007c74:	445b      	add	r3, fp
 8007c76:	461e      	mov	r6, r3
 8007c78:	462c      	mov	r4, r5
 8007c7a:	4544      	cmp	r4, r8
 8007c7c:	d30e      	bcc.n	8007c9c <__mdiff+0xf8>
 8007c7e:	f108 0103 	add.w	r1, r8, #3
 8007c82:	1b49      	subs	r1, r1, r5
 8007c84:	f021 0103 	bic.w	r1, r1, #3
 8007c88:	3d03      	subs	r5, #3
 8007c8a:	45a8      	cmp	r8, r5
 8007c8c:	bf38      	it	cc
 8007c8e:	2100      	movcc	r1, #0
 8007c90:	440b      	add	r3, r1
 8007c92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c96:	b191      	cbz	r1, 8007cbe <__mdiff+0x11a>
 8007c98:	6117      	str	r7, [r2, #16]
 8007c9a:	e79d      	b.n	8007bd8 <__mdiff+0x34>
 8007c9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ca0:	46e6      	mov	lr, ip
 8007ca2:	0c08      	lsrs	r0, r1, #16
 8007ca4:	fa1c fc81 	uxtah	ip, ip, r1
 8007ca8:	4471      	add	r1, lr
 8007caa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007cae:	b289      	uxth	r1, r1
 8007cb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007cb4:	f846 1b04 	str.w	r1, [r6], #4
 8007cb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007cbc:	e7dd      	b.n	8007c7a <__mdiff+0xd6>
 8007cbe:	3f01      	subs	r7, #1
 8007cc0:	e7e7      	b.n	8007c92 <__mdiff+0xee>
 8007cc2:	bf00      	nop
 8007cc4:	08009540 	.word	0x08009540
 8007cc8:	08009551 	.word	0x08009551

08007ccc <__d2b>:
 8007ccc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007cd0:	460f      	mov	r7, r1
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	ec59 8b10 	vmov	r8, r9, d0
 8007cd8:	4616      	mov	r6, r2
 8007cda:	f7ff fcd5 	bl	8007688 <_Balloc>
 8007cde:	4604      	mov	r4, r0
 8007ce0:	b930      	cbnz	r0, 8007cf0 <__d2b+0x24>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	4b23      	ldr	r3, [pc, #140]	@ (8007d74 <__d2b+0xa8>)
 8007ce6:	4824      	ldr	r0, [pc, #144]	@ (8007d78 <__d2b+0xac>)
 8007ce8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007cec:	f000 fa82 	bl	80081f4 <__assert_func>
 8007cf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007cf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cf8:	b10d      	cbz	r5, 8007cfe <__d2b+0x32>
 8007cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	f1b8 0300 	subs.w	r3, r8, #0
 8007d04:	d023      	beq.n	8007d4e <__d2b+0x82>
 8007d06:	4668      	mov	r0, sp
 8007d08:	9300      	str	r3, [sp, #0]
 8007d0a:	f7ff fd84 	bl	8007816 <__lo0bits>
 8007d0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007d12:	b1d0      	cbz	r0, 8007d4a <__d2b+0x7e>
 8007d14:	f1c0 0320 	rsb	r3, r0, #32
 8007d18:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	40c2      	lsrs	r2, r0
 8007d20:	6163      	str	r3, [r4, #20]
 8007d22:	9201      	str	r2, [sp, #4]
 8007d24:	9b01      	ldr	r3, [sp, #4]
 8007d26:	61a3      	str	r3, [r4, #24]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2201      	moveq	r2, #1
 8007d2e:	2202      	movne	r2, #2
 8007d30:	6122      	str	r2, [r4, #16]
 8007d32:	b1a5      	cbz	r5, 8007d5e <__d2b+0x92>
 8007d34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007d38:	4405      	add	r5, r0
 8007d3a:	603d      	str	r5, [r7, #0]
 8007d3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007d40:	6030      	str	r0, [r6, #0]
 8007d42:	4620      	mov	r0, r4
 8007d44:	b003      	add	sp, #12
 8007d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d4a:	6161      	str	r1, [r4, #20]
 8007d4c:	e7ea      	b.n	8007d24 <__d2b+0x58>
 8007d4e:	a801      	add	r0, sp, #4
 8007d50:	f7ff fd61 	bl	8007816 <__lo0bits>
 8007d54:	9b01      	ldr	r3, [sp, #4]
 8007d56:	6163      	str	r3, [r4, #20]
 8007d58:	3020      	adds	r0, #32
 8007d5a:	2201      	movs	r2, #1
 8007d5c:	e7e8      	b.n	8007d30 <__d2b+0x64>
 8007d5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007d66:	6038      	str	r0, [r7, #0]
 8007d68:	6918      	ldr	r0, [r3, #16]
 8007d6a:	f7ff fd35 	bl	80077d8 <__hi0bits>
 8007d6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007d72:	e7e5      	b.n	8007d40 <__d2b+0x74>
 8007d74:	08009540 	.word	0x08009540
 8007d78:	08009551 	.word	0x08009551

08007d7c <__ssputs_r>:
 8007d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d80:	688e      	ldr	r6, [r1, #8]
 8007d82:	461f      	mov	r7, r3
 8007d84:	42be      	cmp	r6, r7
 8007d86:	680b      	ldr	r3, [r1, #0]
 8007d88:	4682      	mov	sl, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	4690      	mov	r8, r2
 8007d8e:	d82d      	bhi.n	8007dec <__ssputs_r+0x70>
 8007d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d98:	d026      	beq.n	8007de8 <__ssputs_r+0x6c>
 8007d9a:	6965      	ldr	r5, [r4, #20]
 8007d9c:	6909      	ldr	r1, [r1, #16]
 8007d9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007da2:	eba3 0901 	sub.w	r9, r3, r1
 8007da6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007daa:	1c7b      	adds	r3, r7, #1
 8007dac:	444b      	add	r3, r9
 8007dae:	106d      	asrs	r5, r5, #1
 8007db0:	429d      	cmp	r5, r3
 8007db2:	bf38      	it	cc
 8007db4:	461d      	movcc	r5, r3
 8007db6:	0553      	lsls	r3, r2, #21
 8007db8:	d527      	bpl.n	8007e0a <__ssputs_r+0x8e>
 8007dba:	4629      	mov	r1, r5
 8007dbc:	f7ff fbd8 	bl	8007570 <_malloc_r>
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	b360      	cbz	r0, 8007e1e <__ssputs_r+0xa2>
 8007dc4:	6921      	ldr	r1, [r4, #16]
 8007dc6:	464a      	mov	r2, r9
 8007dc8:	f000 fa06 	bl	80081d8 <memcpy>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	6126      	str	r6, [r4, #16]
 8007dda:	6165      	str	r5, [r4, #20]
 8007ddc:	444e      	add	r6, r9
 8007dde:	eba5 0509 	sub.w	r5, r5, r9
 8007de2:	6026      	str	r6, [r4, #0]
 8007de4:	60a5      	str	r5, [r4, #8]
 8007de6:	463e      	mov	r6, r7
 8007de8:	42be      	cmp	r6, r7
 8007dea:	d900      	bls.n	8007dee <__ssputs_r+0x72>
 8007dec:	463e      	mov	r6, r7
 8007dee:	6820      	ldr	r0, [r4, #0]
 8007df0:	4632      	mov	r2, r6
 8007df2:	4641      	mov	r1, r8
 8007df4:	f000 f9c6 	bl	8008184 <memmove>
 8007df8:	68a3      	ldr	r3, [r4, #8]
 8007dfa:	1b9b      	subs	r3, r3, r6
 8007dfc:	60a3      	str	r3, [r4, #8]
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	4433      	add	r3, r6
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	2000      	movs	r0, #0
 8007e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0a:	462a      	mov	r2, r5
 8007e0c:	f000 fa36 	bl	800827c <_realloc_r>
 8007e10:	4606      	mov	r6, r0
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d1e0      	bne.n	8007dd8 <__ssputs_r+0x5c>
 8007e16:	6921      	ldr	r1, [r4, #16]
 8007e18:	4650      	mov	r0, sl
 8007e1a:	f7ff fb35 	bl	8007488 <_free_r>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	f8ca 3000 	str.w	r3, [sl]
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	e7e9      	b.n	8007e06 <__ssputs_r+0x8a>
	...

08007e34 <_svfiprintf_r>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	4698      	mov	r8, r3
 8007e3a:	898b      	ldrh	r3, [r1, #12]
 8007e3c:	061b      	lsls	r3, r3, #24
 8007e3e:	b09d      	sub	sp, #116	@ 0x74
 8007e40:	4607      	mov	r7, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	4614      	mov	r4, r2
 8007e46:	d510      	bpl.n	8007e6a <_svfiprintf_r+0x36>
 8007e48:	690b      	ldr	r3, [r1, #16]
 8007e4a:	b973      	cbnz	r3, 8007e6a <_svfiprintf_r+0x36>
 8007e4c:	2140      	movs	r1, #64	@ 0x40
 8007e4e:	f7ff fb8f 	bl	8007570 <_malloc_r>
 8007e52:	6028      	str	r0, [r5, #0]
 8007e54:	6128      	str	r0, [r5, #16]
 8007e56:	b930      	cbnz	r0, 8007e66 <_svfiprintf_r+0x32>
 8007e58:	230c      	movs	r3, #12
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	b01d      	add	sp, #116	@ 0x74
 8007e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e66:	2340      	movs	r3, #64	@ 0x40
 8007e68:	616b      	str	r3, [r5, #20]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e6e:	2320      	movs	r3, #32
 8007e70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e78:	2330      	movs	r3, #48	@ 0x30
 8007e7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008018 <_svfiprintf_r+0x1e4>
 8007e7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e82:	f04f 0901 	mov.w	r9, #1
 8007e86:	4623      	mov	r3, r4
 8007e88:	469a      	mov	sl, r3
 8007e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e8e:	b10a      	cbz	r2, 8007e94 <_svfiprintf_r+0x60>
 8007e90:	2a25      	cmp	r2, #37	@ 0x25
 8007e92:	d1f9      	bne.n	8007e88 <_svfiprintf_r+0x54>
 8007e94:	ebba 0b04 	subs.w	fp, sl, r4
 8007e98:	d00b      	beq.n	8007eb2 <_svfiprintf_r+0x7e>
 8007e9a:	465b      	mov	r3, fp
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff ff6b 	bl	8007d7c <__ssputs_r>
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f000 80a7 	beq.w	8007ffa <_svfiprintf_r+0x1c6>
 8007eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eae:	445a      	add	r2, fp
 8007eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 809f 	beq.w	8007ffa <_svfiprintf_r+0x1c6>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec6:	f10a 0a01 	add.w	sl, sl, #1
 8007eca:	9304      	str	r3, [sp, #16]
 8007ecc:	9307      	str	r3, [sp, #28]
 8007ece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ed2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ed4:	4654      	mov	r4, sl
 8007ed6:	2205      	movs	r2, #5
 8007ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007edc:	484e      	ldr	r0, [pc, #312]	@ (8008018 <_svfiprintf_r+0x1e4>)
 8007ede:	f7f8 f977 	bl	80001d0 <memchr>
 8007ee2:	9a04      	ldr	r2, [sp, #16]
 8007ee4:	b9d8      	cbnz	r0, 8007f1e <_svfiprintf_r+0xea>
 8007ee6:	06d0      	lsls	r0, r2, #27
 8007ee8:	bf44      	itt	mi
 8007eea:	2320      	movmi	r3, #32
 8007eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ef0:	0711      	lsls	r1, r2, #28
 8007ef2:	bf44      	itt	mi
 8007ef4:	232b      	movmi	r3, #43	@ 0x2b
 8007ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007efa:	f89a 3000 	ldrb.w	r3, [sl]
 8007efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f00:	d015      	beq.n	8007f2e <_svfiprintf_r+0xfa>
 8007f02:	9a07      	ldr	r2, [sp, #28]
 8007f04:	4654      	mov	r4, sl
 8007f06:	2000      	movs	r0, #0
 8007f08:	f04f 0c0a 	mov.w	ip, #10
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f12:	3b30      	subs	r3, #48	@ 0x30
 8007f14:	2b09      	cmp	r3, #9
 8007f16:	d94b      	bls.n	8007fb0 <_svfiprintf_r+0x17c>
 8007f18:	b1b0      	cbz	r0, 8007f48 <_svfiprintf_r+0x114>
 8007f1a:	9207      	str	r2, [sp, #28]
 8007f1c:	e014      	b.n	8007f48 <_svfiprintf_r+0x114>
 8007f1e:	eba0 0308 	sub.w	r3, r0, r8
 8007f22:	fa09 f303 	lsl.w	r3, r9, r3
 8007f26:	4313      	orrs	r3, r2
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	46a2      	mov	sl, r4
 8007f2c:	e7d2      	b.n	8007ed4 <_svfiprintf_r+0xa0>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	1d19      	adds	r1, r3, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	9103      	str	r1, [sp, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bfbb      	ittet	lt
 8007f3a:	425b      	neglt	r3, r3
 8007f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f40:	9307      	strge	r3, [sp, #28]
 8007f42:	9307      	strlt	r3, [sp, #28]
 8007f44:	bfb8      	it	lt
 8007f46:	9204      	strlt	r2, [sp, #16]
 8007f48:	7823      	ldrb	r3, [r4, #0]
 8007f4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f4c:	d10a      	bne.n	8007f64 <_svfiprintf_r+0x130>
 8007f4e:	7863      	ldrb	r3, [r4, #1]
 8007f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f52:	d132      	bne.n	8007fba <_svfiprintf_r+0x186>
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	1d1a      	adds	r2, r3, #4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	9203      	str	r2, [sp, #12]
 8007f5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f60:	3402      	adds	r4, #2
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008028 <_svfiprintf_r+0x1f4>
 8007f68:	7821      	ldrb	r1, [r4, #0]
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	f7f8 f92f 	bl	80001d0 <memchr>
 8007f72:	b138      	cbz	r0, 8007f84 <_svfiprintf_r+0x150>
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	eba0 000a 	sub.w	r0, r0, sl
 8007f7a:	2240      	movs	r2, #64	@ 0x40
 8007f7c:	4082      	lsls	r2, r0
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	3401      	adds	r4, #1
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	4824      	ldr	r0, [pc, #144]	@ (800801c <_svfiprintf_r+0x1e8>)
 8007f8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f8e:	2206      	movs	r2, #6
 8007f90:	f7f8 f91e 	bl	80001d0 <memchr>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d036      	beq.n	8008006 <_svfiprintf_r+0x1d2>
 8007f98:	4b21      	ldr	r3, [pc, #132]	@ (8008020 <_svfiprintf_r+0x1ec>)
 8007f9a:	bb1b      	cbnz	r3, 8007fe4 <_svfiprintf_r+0x1b0>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	3307      	adds	r3, #7
 8007fa0:	f023 0307 	bic.w	r3, r3, #7
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007faa:	4433      	add	r3, r6
 8007fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fae:	e76a      	b.n	8007e86 <_svfiprintf_r+0x52>
 8007fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e7a8      	b.n	8007f0c <_svfiprintf_r+0xd8>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	3401      	adds	r4, #1
 8007fbe:	9305      	str	r3, [sp, #20]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f04f 0c0a 	mov.w	ip, #10
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fcc:	3a30      	subs	r2, #48	@ 0x30
 8007fce:	2a09      	cmp	r2, #9
 8007fd0:	d903      	bls.n	8007fda <_svfiprintf_r+0x1a6>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0c6      	beq.n	8007f64 <_svfiprintf_r+0x130>
 8007fd6:	9105      	str	r1, [sp, #20]
 8007fd8:	e7c4      	b.n	8007f64 <_svfiprintf_r+0x130>
 8007fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fde:	4604      	mov	r4, r0
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7f0      	b.n	8007fc6 <_svfiprintf_r+0x192>
 8007fe4:	ab03      	add	r3, sp, #12
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4b0e      	ldr	r3, [pc, #56]	@ (8008024 <_svfiprintf_r+0x1f0>)
 8007fec:	a904      	add	r1, sp, #16
 8007fee:	4638      	mov	r0, r7
 8007ff0:	f7fd fe7a 	bl	8005ce8 <_printf_float>
 8007ff4:	1c42      	adds	r2, r0, #1
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	d1d6      	bne.n	8007fa8 <_svfiprintf_r+0x174>
 8007ffa:	89ab      	ldrh	r3, [r5, #12]
 8007ffc:	065b      	lsls	r3, r3, #25
 8007ffe:	f53f af2d 	bmi.w	8007e5c <_svfiprintf_r+0x28>
 8008002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008004:	e72c      	b.n	8007e60 <_svfiprintf_r+0x2c>
 8008006:	ab03      	add	r3, sp, #12
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	462a      	mov	r2, r5
 800800c:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <_svfiprintf_r+0x1f0>)
 800800e:	a904      	add	r1, sp, #16
 8008010:	4638      	mov	r0, r7
 8008012:	f7fe f901 	bl	8006218 <_printf_i>
 8008016:	e7ed      	b.n	8007ff4 <_svfiprintf_r+0x1c0>
 8008018:	080095aa 	.word	0x080095aa
 800801c:	080095b4 	.word	0x080095b4
 8008020:	08005ce9 	.word	0x08005ce9
 8008024:	08007d7d 	.word	0x08007d7d
 8008028:	080095b0 	.word	0x080095b0

0800802c <__sflush_r>:
 800802c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	0716      	lsls	r6, r2, #28
 8008036:	4605      	mov	r5, r0
 8008038:	460c      	mov	r4, r1
 800803a:	d454      	bmi.n	80080e6 <__sflush_r+0xba>
 800803c:	684b      	ldr	r3, [r1, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	dc02      	bgt.n	8008048 <__sflush_r+0x1c>
 8008042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	dd48      	ble.n	80080da <__sflush_r+0xae>
 8008048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800804a:	2e00      	cmp	r6, #0
 800804c:	d045      	beq.n	80080da <__sflush_r+0xae>
 800804e:	2300      	movs	r3, #0
 8008050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008054:	682f      	ldr	r7, [r5, #0]
 8008056:	6a21      	ldr	r1, [r4, #32]
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	d030      	beq.n	80080be <__sflush_r+0x92>
 800805c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	0759      	lsls	r1, r3, #29
 8008062:	d505      	bpl.n	8008070 <__sflush_r+0x44>
 8008064:	6863      	ldr	r3, [r4, #4]
 8008066:	1ad2      	subs	r2, r2, r3
 8008068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800806a:	b10b      	cbz	r3, 8008070 <__sflush_r+0x44>
 800806c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	2300      	movs	r3, #0
 8008072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008074:	6a21      	ldr	r1, [r4, #32]
 8008076:	4628      	mov	r0, r5
 8008078:	47b0      	blx	r6
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	d106      	bne.n	800808e <__sflush_r+0x62>
 8008080:	6829      	ldr	r1, [r5, #0]
 8008082:	291d      	cmp	r1, #29
 8008084:	d82b      	bhi.n	80080de <__sflush_r+0xb2>
 8008086:	4a2a      	ldr	r2, [pc, #168]	@ (8008130 <__sflush_r+0x104>)
 8008088:	40ca      	lsrs	r2, r1
 800808a:	07d6      	lsls	r6, r2, #31
 800808c:	d527      	bpl.n	80080de <__sflush_r+0xb2>
 800808e:	2200      	movs	r2, #0
 8008090:	6062      	str	r2, [r4, #4]
 8008092:	04d9      	lsls	r1, r3, #19
 8008094:	6922      	ldr	r2, [r4, #16]
 8008096:	6022      	str	r2, [r4, #0]
 8008098:	d504      	bpl.n	80080a4 <__sflush_r+0x78>
 800809a:	1c42      	adds	r2, r0, #1
 800809c:	d101      	bne.n	80080a2 <__sflush_r+0x76>
 800809e:	682b      	ldr	r3, [r5, #0]
 80080a0:	b903      	cbnz	r3, 80080a4 <__sflush_r+0x78>
 80080a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80080a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080a6:	602f      	str	r7, [r5, #0]
 80080a8:	b1b9      	cbz	r1, 80080da <__sflush_r+0xae>
 80080aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080ae:	4299      	cmp	r1, r3
 80080b0:	d002      	beq.n	80080b8 <__sflush_r+0x8c>
 80080b2:	4628      	mov	r0, r5
 80080b4:	f7ff f9e8 	bl	8007488 <_free_r>
 80080b8:	2300      	movs	r3, #0
 80080ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80080bc:	e00d      	b.n	80080da <__sflush_r+0xae>
 80080be:	2301      	movs	r3, #1
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b0      	blx	r6
 80080c4:	4602      	mov	r2, r0
 80080c6:	1c50      	adds	r0, r2, #1
 80080c8:	d1c9      	bne.n	800805e <__sflush_r+0x32>
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0c6      	beq.n	800805e <__sflush_r+0x32>
 80080d0:	2b1d      	cmp	r3, #29
 80080d2:	d001      	beq.n	80080d8 <__sflush_r+0xac>
 80080d4:	2b16      	cmp	r3, #22
 80080d6:	d11e      	bne.n	8008116 <__sflush_r+0xea>
 80080d8:	602f      	str	r7, [r5, #0]
 80080da:	2000      	movs	r0, #0
 80080dc:	e022      	b.n	8008124 <__sflush_r+0xf8>
 80080de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080e2:	b21b      	sxth	r3, r3
 80080e4:	e01b      	b.n	800811e <__sflush_r+0xf2>
 80080e6:	690f      	ldr	r7, [r1, #16]
 80080e8:	2f00      	cmp	r7, #0
 80080ea:	d0f6      	beq.n	80080da <__sflush_r+0xae>
 80080ec:	0793      	lsls	r3, r2, #30
 80080ee:	680e      	ldr	r6, [r1, #0]
 80080f0:	bf08      	it	eq
 80080f2:	694b      	ldreq	r3, [r1, #20]
 80080f4:	600f      	str	r7, [r1, #0]
 80080f6:	bf18      	it	ne
 80080f8:	2300      	movne	r3, #0
 80080fa:	eba6 0807 	sub.w	r8, r6, r7
 80080fe:	608b      	str	r3, [r1, #8]
 8008100:	f1b8 0f00 	cmp.w	r8, #0
 8008104:	dde9      	ble.n	80080da <__sflush_r+0xae>
 8008106:	6a21      	ldr	r1, [r4, #32]
 8008108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800810a:	4643      	mov	r3, r8
 800810c:	463a      	mov	r2, r7
 800810e:	4628      	mov	r0, r5
 8008110:	47b0      	blx	r6
 8008112:	2800      	cmp	r0, #0
 8008114:	dc08      	bgt.n	8008128 <__sflush_r+0xfc>
 8008116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800811e:	81a3      	strh	r3, [r4, #12]
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008128:	4407      	add	r7, r0
 800812a:	eba8 0800 	sub.w	r8, r8, r0
 800812e:	e7e7      	b.n	8008100 <__sflush_r+0xd4>
 8008130:	20400001 	.word	0x20400001

08008134 <_fflush_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	690b      	ldr	r3, [r1, #16]
 8008138:	4605      	mov	r5, r0
 800813a:	460c      	mov	r4, r1
 800813c:	b913      	cbnz	r3, 8008144 <_fflush_r+0x10>
 800813e:	2500      	movs	r5, #0
 8008140:	4628      	mov	r0, r5
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	b118      	cbz	r0, 800814e <_fflush_r+0x1a>
 8008146:	6a03      	ldr	r3, [r0, #32]
 8008148:	b90b      	cbnz	r3, 800814e <_fflush_r+0x1a>
 800814a:	f7fe fa0f 	bl	800656c <__sinit>
 800814e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f3      	beq.n	800813e <_fflush_r+0xa>
 8008156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008158:	07d0      	lsls	r0, r2, #31
 800815a:	d404      	bmi.n	8008166 <_fflush_r+0x32>
 800815c:	0599      	lsls	r1, r3, #22
 800815e:	d402      	bmi.n	8008166 <_fflush_r+0x32>
 8008160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008162:	f7fe fb36 	bl	80067d2 <__retarget_lock_acquire_recursive>
 8008166:	4628      	mov	r0, r5
 8008168:	4621      	mov	r1, r4
 800816a:	f7ff ff5f 	bl	800802c <__sflush_r>
 800816e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008170:	07da      	lsls	r2, r3, #31
 8008172:	4605      	mov	r5, r0
 8008174:	d4e4      	bmi.n	8008140 <_fflush_r+0xc>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	059b      	lsls	r3, r3, #22
 800817a:	d4e1      	bmi.n	8008140 <_fflush_r+0xc>
 800817c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800817e:	f7fe fb29 	bl	80067d4 <__retarget_lock_release_recursive>
 8008182:	e7dd      	b.n	8008140 <_fflush_r+0xc>

08008184 <memmove>:
 8008184:	4288      	cmp	r0, r1
 8008186:	b510      	push	{r4, lr}
 8008188:	eb01 0402 	add.w	r4, r1, r2
 800818c:	d902      	bls.n	8008194 <memmove+0x10>
 800818e:	4284      	cmp	r4, r0
 8008190:	4623      	mov	r3, r4
 8008192:	d807      	bhi.n	80081a4 <memmove+0x20>
 8008194:	1e43      	subs	r3, r0, #1
 8008196:	42a1      	cmp	r1, r4
 8008198:	d008      	beq.n	80081ac <memmove+0x28>
 800819a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081a2:	e7f8      	b.n	8008196 <memmove+0x12>
 80081a4:	4402      	add	r2, r0
 80081a6:	4601      	mov	r1, r0
 80081a8:	428a      	cmp	r2, r1
 80081aa:	d100      	bne.n	80081ae <memmove+0x2a>
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081b6:	e7f7      	b.n	80081a8 <memmove+0x24>

080081b8 <_sbrk_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	4d06      	ldr	r5, [pc, #24]	@ (80081d4 <_sbrk_r+0x1c>)
 80081bc:	2300      	movs	r3, #0
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	f7f9 fbd6 	bl	8001974 <_sbrk>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_sbrk_r+0x1a>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_sbrk_r+0x1a>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20000788 	.word	0x20000788

080081d8 <memcpy>:
 80081d8:	440a      	add	r2, r1
 80081da:	4291      	cmp	r1, r2
 80081dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80081e0:	d100      	bne.n	80081e4 <memcpy+0xc>
 80081e2:	4770      	bx	lr
 80081e4:	b510      	push	{r4, lr}
 80081e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80081ee:	4291      	cmp	r1, r2
 80081f0:	d1f9      	bne.n	80081e6 <memcpy+0xe>
 80081f2:	bd10      	pop	{r4, pc}

080081f4 <__assert_func>:
 80081f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081f6:	4614      	mov	r4, r2
 80081f8:	461a      	mov	r2, r3
 80081fa:	4b09      	ldr	r3, [pc, #36]	@ (8008220 <__assert_func+0x2c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4605      	mov	r5, r0
 8008200:	68d8      	ldr	r0, [r3, #12]
 8008202:	b14c      	cbz	r4, 8008218 <__assert_func+0x24>
 8008204:	4b07      	ldr	r3, [pc, #28]	@ (8008224 <__assert_func+0x30>)
 8008206:	9100      	str	r1, [sp, #0]
 8008208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800820c:	4906      	ldr	r1, [pc, #24]	@ (8008228 <__assert_func+0x34>)
 800820e:	462b      	mov	r3, r5
 8008210:	f000 f870 	bl	80082f4 <fiprintf>
 8008214:	f000 f880 	bl	8008318 <abort>
 8008218:	4b04      	ldr	r3, [pc, #16]	@ (800822c <__assert_func+0x38>)
 800821a:	461c      	mov	r4, r3
 800821c:	e7f3      	b.n	8008206 <__assert_func+0x12>
 800821e:	bf00      	nop
 8008220:	20000018 	.word	0x20000018
 8008224:	080095c5 	.word	0x080095c5
 8008228:	080095d2 	.word	0x080095d2
 800822c:	08009600 	.word	0x08009600

08008230 <_calloc_r>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	fba1 5402 	umull	r5, r4, r1, r2
 8008236:	b934      	cbnz	r4, 8008246 <_calloc_r+0x16>
 8008238:	4629      	mov	r1, r5
 800823a:	f7ff f999 	bl	8007570 <_malloc_r>
 800823e:	4606      	mov	r6, r0
 8008240:	b928      	cbnz	r0, 800824e <_calloc_r+0x1e>
 8008242:	4630      	mov	r0, r6
 8008244:	bd70      	pop	{r4, r5, r6, pc}
 8008246:	220c      	movs	r2, #12
 8008248:	6002      	str	r2, [r0, #0]
 800824a:	2600      	movs	r6, #0
 800824c:	e7f9      	b.n	8008242 <_calloc_r+0x12>
 800824e:	462a      	mov	r2, r5
 8008250:	4621      	mov	r1, r4
 8008252:	f7fe fa41 	bl	80066d8 <memset>
 8008256:	e7f4      	b.n	8008242 <_calloc_r+0x12>

08008258 <__ascii_mbtowc>:
 8008258:	b082      	sub	sp, #8
 800825a:	b901      	cbnz	r1, 800825e <__ascii_mbtowc+0x6>
 800825c:	a901      	add	r1, sp, #4
 800825e:	b142      	cbz	r2, 8008272 <__ascii_mbtowc+0x1a>
 8008260:	b14b      	cbz	r3, 8008276 <__ascii_mbtowc+0x1e>
 8008262:	7813      	ldrb	r3, [r2, #0]
 8008264:	600b      	str	r3, [r1, #0]
 8008266:	7812      	ldrb	r2, [r2, #0]
 8008268:	1e10      	subs	r0, r2, #0
 800826a:	bf18      	it	ne
 800826c:	2001      	movne	r0, #1
 800826e:	b002      	add	sp, #8
 8008270:	4770      	bx	lr
 8008272:	4610      	mov	r0, r2
 8008274:	e7fb      	b.n	800826e <__ascii_mbtowc+0x16>
 8008276:	f06f 0001 	mvn.w	r0, #1
 800827a:	e7f8      	b.n	800826e <__ascii_mbtowc+0x16>

0800827c <_realloc_r>:
 800827c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008280:	4607      	mov	r7, r0
 8008282:	4614      	mov	r4, r2
 8008284:	460d      	mov	r5, r1
 8008286:	b921      	cbnz	r1, 8008292 <_realloc_r+0x16>
 8008288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800828c:	4611      	mov	r1, r2
 800828e:	f7ff b96f 	b.w	8007570 <_malloc_r>
 8008292:	b92a      	cbnz	r2, 80082a0 <_realloc_r+0x24>
 8008294:	f7ff f8f8 	bl	8007488 <_free_r>
 8008298:	4625      	mov	r5, r4
 800829a:	4628      	mov	r0, r5
 800829c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a0:	f000 f841 	bl	8008326 <_malloc_usable_size_r>
 80082a4:	4284      	cmp	r4, r0
 80082a6:	4606      	mov	r6, r0
 80082a8:	d802      	bhi.n	80082b0 <_realloc_r+0x34>
 80082aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082ae:	d8f4      	bhi.n	800829a <_realloc_r+0x1e>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4638      	mov	r0, r7
 80082b4:	f7ff f95c 	bl	8007570 <_malloc_r>
 80082b8:	4680      	mov	r8, r0
 80082ba:	b908      	cbnz	r0, 80082c0 <_realloc_r+0x44>
 80082bc:	4645      	mov	r5, r8
 80082be:	e7ec      	b.n	800829a <_realloc_r+0x1e>
 80082c0:	42b4      	cmp	r4, r6
 80082c2:	4622      	mov	r2, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	bf28      	it	cs
 80082c8:	4632      	movcs	r2, r6
 80082ca:	f7ff ff85 	bl	80081d8 <memcpy>
 80082ce:	4629      	mov	r1, r5
 80082d0:	4638      	mov	r0, r7
 80082d2:	f7ff f8d9 	bl	8007488 <_free_r>
 80082d6:	e7f1      	b.n	80082bc <_realloc_r+0x40>

080082d8 <__ascii_wctomb>:
 80082d8:	4603      	mov	r3, r0
 80082da:	4608      	mov	r0, r1
 80082dc:	b141      	cbz	r1, 80082f0 <__ascii_wctomb+0x18>
 80082de:	2aff      	cmp	r2, #255	@ 0xff
 80082e0:	d904      	bls.n	80082ec <__ascii_wctomb+0x14>
 80082e2:	228a      	movs	r2, #138	@ 0x8a
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ea:	4770      	bx	lr
 80082ec:	700a      	strb	r2, [r1, #0]
 80082ee:	2001      	movs	r0, #1
 80082f0:	4770      	bx	lr
	...

080082f4 <fiprintf>:
 80082f4:	b40e      	push	{r1, r2, r3}
 80082f6:	b503      	push	{r0, r1, lr}
 80082f8:	4601      	mov	r1, r0
 80082fa:	ab03      	add	r3, sp, #12
 80082fc:	4805      	ldr	r0, [pc, #20]	@ (8008314 <fiprintf+0x20>)
 80082fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008302:	6800      	ldr	r0, [r0, #0]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	f000 f83f 	bl	8008388 <_vfiprintf_r>
 800830a:	b002      	add	sp, #8
 800830c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008310:	b003      	add	sp, #12
 8008312:	4770      	bx	lr
 8008314:	20000018 	.word	0x20000018

08008318 <abort>:
 8008318:	b508      	push	{r3, lr}
 800831a:	2006      	movs	r0, #6
 800831c:	f000 fa08 	bl	8008730 <raise>
 8008320:	2001      	movs	r0, #1
 8008322:	f7f9 faaf 	bl	8001884 <_exit>

08008326 <_malloc_usable_size_r>:
 8008326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800832a:	1f18      	subs	r0, r3, #4
 800832c:	2b00      	cmp	r3, #0
 800832e:	bfbc      	itt	lt
 8008330:	580b      	ldrlt	r3, [r1, r0]
 8008332:	18c0      	addlt	r0, r0, r3
 8008334:	4770      	bx	lr

08008336 <__sfputc_r>:
 8008336:	6893      	ldr	r3, [r2, #8]
 8008338:	3b01      	subs	r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	b410      	push	{r4}
 800833e:	6093      	str	r3, [r2, #8]
 8008340:	da08      	bge.n	8008354 <__sfputc_r+0x1e>
 8008342:	6994      	ldr	r4, [r2, #24]
 8008344:	42a3      	cmp	r3, r4
 8008346:	db01      	blt.n	800834c <__sfputc_r+0x16>
 8008348:	290a      	cmp	r1, #10
 800834a:	d103      	bne.n	8008354 <__sfputc_r+0x1e>
 800834c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008350:	f000 b932 	b.w	80085b8 <__swbuf_r>
 8008354:	6813      	ldr	r3, [r2, #0]
 8008356:	1c58      	adds	r0, r3, #1
 8008358:	6010      	str	r0, [r2, #0]
 800835a:	7019      	strb	r1, [r3, #0]
 800835c:	4608      	mov	r0, r1
 800835e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008362:	4770      	bx	lr

08008364 <__sfputs_r>:
 8008364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008366:	4606      	mov	r6, r0
 8008368:	460f      	mov	r7, r1
 800836a:	4614      	mov	r4, r2
 800836c:	18d5      	adds	r5, r2, r3
 800836e:	42ac      	cmp	r4, r5
 8008370:	d101      	bne.n	8008376 <__sfputs_r+0x12>
 8008372:	2000      	movs	r0, #0
 8008374:	e007      	b.n	8008386 <__sfputs_r+0x22>
 8008376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837a:	463a      	mov	r2, r7
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff ffda 	bl	8008336 <__sfputc_r>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d1f3      	bne.n	800836e <__sfputs_r+0xa>
 8008386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008388 <_vfiprintf_r>:
 8008388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838c:	460d      	mov	r5, r1
 800838e:	b09d      	sub	sp, #116	@ 0x74
 8008390:	4614      	mov	r4, r2
 8008392:	4698      	mov	r8, r3
 8008394:	4606      	mov	r6, r0
 8008396:	b118      	cbz	r0, 80083a0 <_vfiprintf_r+0x18>
 8008398:	6a03      	ldr	r3, [r0, #32]
 800839a:	b90b      	cbnz	r3, 80083a0 <_vfiprintf_r+0x18>
 800839c:	f7fe f8e6 	bl	800656c <__sinit>
 80083a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083a2:	07d9      	lsls	r1, r3, #31
 80083a4:	d405      	bmi.n	80083b2 <_vfiprintf_r+0x2a>
 80083a6:	89ab      	ldrh	r3, [r5, #12]
 80083a8:	059a      	lsls	r2, r3, #22
 80083aa:	d402      	bmi.n	80083b2 <_vfiprintf_r+0x2a>
 80083ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083ae:	f7fe fa10 	bl	80067d2 <__retarget_lock_acquire_recursive>
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	071b      	lsls	r3, r3, #28
 80083b6:	d501      	bpl.n	80083bc <_vfiprintf_r+0x34>
 80083b8:	692b      	ldr	r3, [r5, #16]
 80083ba:	b99b      	cbnz	r3, 80083e4 <_vfiprintf_r+0x5c>
 80083bc:	4629      	mov	r1, r5
 80083be:	4630      	mov	r0, r6
 80083c0:	f000 f938 	bl	8008634 <__swsetup_r>
 80083c4:	b170      	cbz	r0, 80083e4 <_vfiprintf_r+0x5c>
 80083c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80083c8:	07dc      	lsls	r4, r3, #31
 80083ca:	d504      	bpl.n	80083d6 <_vfiprintf_r+0x4e>
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	b01d      	add	sp, #116	@ 0x74
 80083d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d6:	89ab      	ldrh	r3, [r5, #12]
 80083d8:	0598      	lsls	r0, r3, #22
 80083da:	d4f7      	bmi.n	80083cc <_vfiprintf_r+0x44>
 80083dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80083de:	f7fe f9f9 	bl	80067d4 <__retarget_lock_release_recursive>
 80083e2:	e7f3      	b.n	80083cc <_vfiprintf_r+0x44>
 80083e4:	2300      	movs	r3, #0
 80083e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e8:	2320      	movs	r3, #32
 80083ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80083ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80083f2:	2330      	movs	r3, #48	@ 0x30
 80083f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80085a4 <_vfiprintf_r+0x21c>
 80083f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083fc:	f04f 0901 	mov.w	r9, #1
 8008400:	4623      	mov	r3, r4
 8008402:	469a      	mov	sl, r3
 8008404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008408:	b10a      	cbz	r2, 800840e <_vfiprintf_r+0x86>
 800840a:	2a25      	cmp	r2, #37	@ 0x25
 800840c:	d1f9      	bne.n	8008402 <_vfiprintf_r+0x7a>
 800840e:	ebba 0b04 	subs.w	fp, sl, r4
 8008412:	d00b      	beq.n	800842c <_vfiprintf_r+0xa4>
 8008414:	465b      	mov	r3, fp
 8008416:	4622      	mov	r2, r4
 8008418:	4629      	mov	r1, r5
 800841a:	4630      	mov	r0, r6
 800841c:	f7ff ffa2 	bl	8008364 <__sfputs_r>
 8008420:	3001      	adds	r0, #1
 8008422:	f000 80a7 	beq.w	8008574 <_vfiprintf_r+0x1ec>
 8008426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008428:	445a      	add	r2, fp
 800842a:	9209      	str	r2, [sp, #36]	@ 0x24
 800842c:	f89a 3000 	ldrb.w	r3, [sl]
 8008430:	2b00      	cmp	r3, #0
 8008432:	f000 809f 	beq.w	8008574 <_vfiprintf_r+0x1ec>
 8008436:	2300      	movs	r3, #0
 8008438:	f04f 32ff 	mov.w	r2, #4294967295
 800843c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008440:	f10a 0a01 	add.w	sl, sl, #1
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	9307      	str	r3, [sp, #28]
 8008448:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800844c:	931a      	str	r3, [sp, #104]	@ 0x68
 800844e:	4654      	mov	r4, sl
 8008450:	2205      	movs	r2, #5
 8008452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008456:	4853      	ldr	r0, [pc, #332]	@ (80085a4 <_vfiprintf_r+0x21c>)
 8008458:	f7f7 feba 	bl	80001d0 <memchr>
 800845c:	9a04      	ldr	r2, [sp, #16]
 800845e:	b9d8      	cbnz	r0, 8008498 <_vfiprintf_r+0x110>
 8008460:	06d1      	lsls	r1, r2, #27
 8008462:	bf44      	itt	mi
 8008464:	2320      	movmi	r3, #32
 8008466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800846a:	0713      	lsls	r3, r2, #28
 800846c:	bf44      	itt	mi
 800846e:	232b      	movmi	r3, #43	@ 0x2b
 8008470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008474:	f89a 3000 	ldrb.w	r3, [sl]
 8008478:	2b2a      	cmp	r3, #42	@ 0x2a
 800847a:	d015      	beq.n	80084a8 <_vfiprintf_r+0x120>
 800847c:	9a07      	ldr	r2, [sp, #28]
 800847e:	4654      	mov	r4, sl
 8008480:	2000      	movs	r0, #0
 8008482:	f04f 0c0a 	mov.w	ip, #10
 8008486:	4621      	mov	r1, r4
 8008488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800848c:	3b30      	subs	r3, #48	@ 0x30
 800848e:	2b09      	cmp	r3, #9
 8008490:	d94b      	bls.n	800852a <_vfiprintf_r+0x1a2>
 8008492:	b1b0      	cbz	r0, 80084c2 <_vfiprintf_r+0x13a>
 8008494:	9207      	str	r2, [sp, #28]
 8008496:	e014      	b.n	80084c2 <_vfiprintf_r+0x13a>
 8008498:	eba0 0308 	sub.w	r3, r0, r8
 800849c:	fa09 f303 	lsl.w	r3, r9, r3
 80084a0:	4313      	orrs	r3, r2
 80084a2:	9304      	str	r3, [sp, #16]
 80084a4:	46a2      	mov	sl, r4
 80084a6:	e7d2      	b.n	800844e <_vfiprintf_r+0xc6>
 80084a8:	9b03      	ldr	r3, [sp, #12]
 80084aa:	1d19      	adds	r1, r3, #4
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	9103      	str	r1, [sp, #12]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	bfbb      	ittet	lt
 80084b4:	425b      	neglt	r3, r3
 80084b6:	f042 0202 	orrlt.w	r2, r2, #2
 80084ba:	9307      	strge	r3, [sp, #28]
 80084bc:	9307      	strlt	r3, [sp, #28]
 80084be:	bfb8      	it	lt
 80084c0:	9204      	strlt	r2, [sp, #16]
 80084c2:	7823      	ldrb	r3, [r4, #0]
 80084c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80084c6:	d10a      	bne.n	80084de <_vfiprintf_r+0x156>
 80084c8:	7863      	ldrb	r3, [r4, #1]
 80084ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80084cc:	d132      	bne.n	8008534 <_vfiprintf_r+0x1ac>
 80084ce:	9b03      	ldr	r3, [sp, #12]
 80084d0:	1d1a      	adds	r2, r3, #4
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	9203      	str	r2, [sp, #12]
 80084d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80084da:	3402      	adds	r4, #2
 80084dc:	9305      	str	r3, [sp, #20]
 80084de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80085b4 <_vfiprintf_r+0x22c>
 80084e2:	7821      	ldrb	r1, [r4, #0]
 80084e4:	2203      	movs	r2, #3
 80084e6:	4650      	mov	r0, sl
 80084e8:	f7f7 fe72 	bl	80001d0 <memchr>
 80084ec:	b138      	cbz	r0, 80084fe <_vfiprintf_r+0x176>
 80084ee:	9b04      	ldr	r3, [sp, #16]
 80084f0:	eba0 000a 	sub.w	r0, r0, sl
 80084f4:	2240      	movs	r2, #64	@ 0x40
 80084f6:	4082      	lsls	r2, r0
 80084f8:	4313      	orrs	r3, r2
 80084fa:	3401      	adds	r4, #1
 80084fc:	9304      	str	r3, [sp, #16]
 80084fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008502:	4829      	ldr	r0, [pc, #164]	@ (80085a8 <_vfiprintf_r+0x220>)
 8008504:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008508:	2206      	movs	r2, #6
 800850a:	f7f7 fe61 	bl	80001d0 <memchr>
 800850e:	2800      	cmp	r0, #0
 8008510:	d03f      	beq.n	8008592 <_vfiprintf_r+0x20a>
 8008512:	4b26      	ldr	r3, [pc, #152]	@ (80085ac <_vfiprintf_r+0x224>)
 8008514:	bb1b      	cbnz	r3, 800855e <_vfiprintf_r+0x1d6>
 8008516:	9b03      	ldr	r3, [sp, #12]
 8008518:	3307      	adds	r3, #7
 800851a:	f023 0307 	bic.w	r3, r3, #7
 800851e:	3308      	adds	r3, #8
 8008520:	9303      	str	r3, [sp, #12]
 8008522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008524:	443b      	add	r3, r7
 8008526:	9309      	str	r3, [sp, #36]	@ 0x24
 8008528:	e76a      	b.n	8008400 <_vfiprintf_r+0x78>
 800852a:	fb0c 3202 	mla	r2, ip, r2, r3
 800852e:	460c      	mov	r4, r1
 8008530:	2001      	movs	r0, #1
 8008532:	e7a8      	b.n	8008486 <_vfiprintf_r+0xfe>
 8008534:	2300      	movs	r3, #0
 8008536:	3401      	adds	r4, #1
 8008538:	9305      	str	r3, [sp, #20]
 800853a:	4619      	mov	r1, r3
 800853c:	f04f 0c0a 	mov.w	ip, #10
 8008540:	4620      	mov	r0, r4
 8008542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008546:	3a30      	subs	r2, #48	@ 0x30
 8008548:	2a09      	cmp	r2, #9
 800854a:	d903      	bls.n	8008554 <_vfiprintf_r+0x1cc>
 800854c:	2b00      	cmp	r3, #0
 800854e:	d0c6      	beq.n	80084de <_vfiprintf_r+0x156>
 8008550:	9105      	str	r1, [sp, #20]
 8008552:	e7c4      	b.n	80084de <_vfiprintf_r+0x156>
 8008554:	fb0c 2101 	mla	r1, ip, r1, r2
 8008558:	4604      	mov	r4, r0
 800855a:	2301      	movs	r3, #1
 800855c:	e7f0      	b.n	8008540 <_vfiprintf_r+0x1b8>
 800855e:	ab03      	add	r3, sp, #12
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	462a      	mov	r2, r5
 8008564:	4b12      	ldr	r3, [pc, #72]	@ (80085b0 <_vfiprintf_r+0x228>)
 8008566:	a904      	add	r1, sp, #16
 8008568:	4630      	mov	r0, r6
 800856a:	f7fd fbbd 	bl	8005ce8 <_printf_float>
 800856e:	4607      	mov	r7, r0
 8008570:	1c78      	adds	r0, r7, #1
 8008572:	d1d6      	bne.n	8008522 <_vfiprintf_r+0x19a>
 8008574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008576:	07d9      	lsls	r1, r3, #31
 8008578:	d405      	bmi.n	8008586 <_vfiprintf_r+0x1fe>
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	059a      	lsls	r2, r3, #22
 800857e:	d402      	bmi.n	8008586 <_vfiprintf_r+0x1fe>
 8008580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008582:	f7fe f927 	bl	80067d4 <__retarget_lock_release_recursive>
 8008586:	89ab      	ldrh	r3, [r5, #12]
 8008588:	065b      	lsls	r3, r3, #25
 800858a:	f53f af1f 	bmi.w	80083cc <_vfiprintf_r+0x44>
 800858e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008590:	e71e      	b.n	80083d0 <_vfiprintf_r+0x48>
 8008592:	ab03      	add	r3, sp, #12
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	462a      	mov	r2, r5
 8008598:	4b05      	ldr	r3, [pc, #20]	@ (80085b0 <_vfiprintf_r+0x228>)
 800859a:	a904      	add	r1, sp, #16
 800859c:	4630      	mov	r0, r6
 800859e:	f7fd fe3b 	bl	8006218 <_printf_i>
 80085a2:	e7e4      	b.n	800856e <_vfiprintf_r+0x1e6>
 80085a4:	080095aa 	.word	0x080095aa
 80085a8:	080095b4 	.word	0x080095b4
 80085ac:	08005ce9 	.word	0x08005ce9
 80085b0:	08008365 	.word	0x08008365
 80085b4:	080095b0 	.word	0x080095b0

080085b8 <__swbuf_r>:
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ba:	460e      	mov	r6, r1
 80085bc:	4614      	mov	r4, r2
 80085be:	4605      	mov	r5, r0
 80085c0:	b118      	cbz	r0, 80085ca <__swbuf_r+0x12>
 80085c2:	6a03      	ldr	r3, [r0, #32]
 80085c4:	b90b      	cbnz	r3, 80085ca <__swbuf_r+0x12>
 80085c6:	f7fd ffd1 	bl	800656c <__sinit>
 80085ca:	69a3      	ldr	r3, [r4, #24]
 80085cc:	60a3      	str	r3, [r4, #8]
 80085ce:	89a3      	ldrh	r3, [r4, #12]
 80085d0:	071a      	lsls	r2, r3, #28
 80085d2:	d501      	bpl.n	80085d8 <__swbuf_r+0x20>
 80085d4:	6923      	ldr	r3, [r4, #16]
 80085d6:	b943      	cbnz	r3, 80085ea <__swbuf_r+0x32>
 80085d8:	4621      	mov	r1, r4
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 f82a 	bl	8008634 <__swsetup_r>
 80085e0:	b118      	cbz	r0, 80085ea <__swbuf_r+0x32>
 80085e2:	f04f 37ff 	mov.w	r7, #4294967295
 80085e6:	4638      	mov	r0, r7
 80085e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	6922      	ldr	r2, [r4, #16]
 80085ee:	1a98      	subs	r0, r3, r2
 80085f0:	6963      	ldr	r3, [r4, #20]
 80085f2:	b2f6      	uxtb	r6, r6
 80085f4:	4283      	cmp	r3, r0
 80085f6:	4637      	mov	r7, r6
 80085f8:	dc05      	bgt.n	8008606 <__swbuf_r+0x4e>
 80085fa:	4621      	mov	r1, r4
 80085fc:	4628      	mov	r0, r5
 80085fe:	f7ff fd99 	bl	8008134 <_fflush_r>
 8008602:	2800      	cmp	r0, #0
 8008604:	d1ed      	bne.n	80085e2 <__swbuf_r+0x2a>
 8008606:	68a3      	ldr	r3, [r4, #8]
 8008608:	3b01      	subs	r3, #1
 800860a:	60a3      	str	r3, [r4, #8]
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	1c5a      	adds	r2, r3, #1
 8008610:	6022      	str	r2, [r4, #0]
 8008612:	701e      	strb	r6, [r3, #0]
 8008614:	6962      	ldr	r2, [r4, #20]
 8008616:	1c43      	adds	r3, r0, #1
 8008618:	429a      	cmp	r2, r3
 800861a:	d004      	beq.n	8008626 <__swbuf_r+0x6e>
 800861c:	89a3      	ldrh	r3, [r4, #12]
 800861e:	07db      	lsls	r3, r3, #31
 8008620:	d5e1      	bpl.n	80085e6 <__swbuf_r+0x2e>
 8008622:	2e0a      	cmp	r6, #10
 8008624:	d1df      	bne.n	80085e6 <__swbuf_r+0x2e>
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f7ff fd83 	bl	8008134 <_fflush_r>
 800862e:	2800      	cmp	r0, #0
 8008630:	d0d9      	beq.n	80085e6 <__swbuf_r+0x2e>
 8008632:	e7d6      	b.n	80085e2 <__swbuf_r+0x2a>

08008634 <__swsetup_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4b29      	ldr	r3, [pc, #164]	@ (80086dc <__swsetup_r+0xa8>)
 8008638:	4605      	mov	r5, r0
 800863a:	6818      	ldr	r0, [r3, #0]
 800863c:	460c      	mov	r4, r1
 800863e:	b118      	cbz	r0, 8008648 <__swsetup_r+0x14>
 8008640:	6a03      	ldr	r3, [r0, #32]
 8008642:	b90b      	cbnz	r3, 8008648 <__swsetup_r+0x14>
 8008644:	f7fd ff92 	bl	800656c <__sinit>
 8008648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800864c:	0719      	lsls	r1, r3, #28
 800864e:	d422      	bmi.n	8008696 <__swsetup_r+0x62>
 8008650:	06da      	lsls	r2, r3, #27
 8008652:	d407      	bmi.n	8008664 <__swsetup_r+0x30>
 8008654:	2209      	movs	r2, #9
 8008656:	602a      	str	r2, [r5, #0]
 8008658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800865c:	81a3      	strh	r3, [r4, #12]
 800865e:	f04f 30ff 	mov.w	r0, #4294967295
 8008662:	e033      	b.n	80086cc <__swsetup_r+0x98>
 8008664:	0758      	lsls	r0, r3, #29
 8008666:	d512      	bpl.n	800868e <__swsetup_r+0x5a>
 8008668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800866a:	b141      	cbz	r1, 800867e <__swsetup_r+0x4a>
 800866c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008670:	4299      	cmp	r1, r3
 8008672:	d002      	beq.n	800867a <__swsetup_r+0x46>
 8008674:	4628      	mov	r0, r5
 8008676:	f7fe ff07 	bl	8007488 <_free_r>
 800867a:	2300      	movs	r3, #0
 800867c:	6363      	str	r3, [r4, #52]	@ 0x34
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008684:	81a3      	strh	r3, [r4, #12]
 8008686:	2300      	movs	r3, #0
 8008688:	6063      	str	r3, [r4, #4]
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	89a3      	ldrh	r3, [r4, #12]
 8008690:	f043 0308 	orr.w	r3, r3, #8
 8008694:	81a3      	strh	r3, [r4, #12]
 8008696:	6923      	ldr	r3, [r4, #16]
 8008698:	b94b      	cbnz	r3, 80086ae <__swsetup_r+0x7a>
 800869a:	89a3      	ldrh	r3, [r4, #12]
 800869c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80086a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086a4:	d003      	beq.n	80086ae <__swsetup_r+0x7a>
 80086a6:	4621      	mov	r1, r4
 80086a8:	4628      	mov	r0, r5
 80086aa:	f000 f883 	bl	80087b4 <__smakebuf_r>
 80086ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086b2:	f013 0201 	ands.w	r2, r3, #1
 80086b6:	d00a      	beq.n	80086ce <__swsetup_r+0x9a>
 80086b8:	2200      	movs	r2, #0
 80086ba:	60a2      	str	r2, [r4, #8]
 80086bc:	6962      	ldr	r2, [r4, #20]
 80086be:	4252      	negs	r2, r2
 80086c0:	61a2      	str	r2, [r4, #24]
 80086c2:	6922      	ldr	r2, [r4, #16]
 80086c4:	b942      	cbnz	r2, 80086d8 <__swsetup_r+0xa4>
 80086c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80086ca:	d1c5      	bne.n	8008658 <__swsetup_r+0x24>
 80086cc:	bd38      	pop	{r3, r4, r5, pc}
 80086ce:	0799      	lsls	r1, r3, #30
 80086d0:	bf58      	it	pl
 80086d2:	6962      	ldrpl	r2, [r4, #20]
 80086d4:	60a2      	str	r2, [r4, #8]
 80086d6:	e7f4      	b.n	80086c2 <__swsetup_r+0x8e>
 80086d8:	2000      	movs	r0, #0
 80086da:	e7f7      	b.n	80086cc <__swsetup_r+0x98>
 80086dc:	20000018 	.word	0x20000018

080086e0 <_raise_r>:
 80086e0:	291f      	cmp	r1, #31
 80086e2:	b538      	push	{r3, r4, r5, lr}
 80086e4:	4605      	mov	r5, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	d904      	bls.n	80086f4 <_raise_r+0x14>
 80086ea:	2316      	movs	r3, #22
 80086ec:	6003      	str	r3, [r0, #0]
 80086ee:	f04f 30ff 	mov.w	r0, #4294967295
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80086f6:	b112      	cbz	r2, 80086fe <_raise_r+0x1e>
 80086f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80086fc:	b94b      	cbnz	r3, 8008712 <_raise_r+0x32>
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 f830 	bl	8008764 <_getpid_r>
 8008704:	4622      	mov	r2, r4
 8008706:	4601      	mov	r1, r0
 8008708:	4628      	mov	r0, r5
 800870a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800870e:	f000 b817 	b.w	8008740 <_kill_r>
 8008712:	2b01      	cmp	r3, #1
 8008714:	d00a      	beq.n	800872c <_raise_r+0x4c>
 8008716:	1c59      	adds	r1, r3, #1
 8008718:	d103      	bne.n	8008722 <_raise_r+0x42>
 800871a:	2316      	movs	r3, #22
 800871c:	6003      	str	r3, [r0, #0]
 800871e:	2001      	movs	r0, #1
 8008720:	e7e7      	b.n	80086f2 <_raise_r+0x12>
 8008722:	2100      	movs	r1, #0
 8008724:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008728:	4620      	mov	r0, r4
 800872a:	4798      	blx	r3
 800872c:	2000      	movs	r0, #0
 800872e:	e7e0      	b.n	80086f2 <_raise_r+0x12>

08008730 <raise>:
 8008730:	4b02      	ldr	r3, [pc, #8]	@ (800873c <raise+0xc>)
 8008732:	4601      	mov	r1, r0
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f7ff bfd3 	b.w	80086e0 <_raise_r>
 800873a:	bf00      	nop
 800873c:	20000018 	.word	0x20000018

08008740 <_kill_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d07      	ldr	r5, [pc, #28]	@ (8008760 <_kill_r+0x20>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	4611      	mov	r1, r2
 800874c:	602b      	str	r3, [r5, #0]
 800874e:	f7f9 f889 	bl	8001864 <_kill>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d102      	bne.n	800875c <_kill_r+0x1c>
 8008756:	682b      	ldr	r3, [r5, #0]
 8008758:	b103      	cbz	r3, 800875c <_kill_r+0x1c>
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	bd38      	pop	{r3, r4, r5, pc}
 800875e:	bf00      	nop
 8008760:	20000788 	.word	0x20000788

08008764 <_getpid_r>:
 8008764:	f7f9 b876 	b.w	8001854 <_getpid>

08008768 <__swhatbuf_r>:
 8008768:	b570      	push	{r4, r5, r6, lr}
 800876a:	460c      	mov	r4, r1
 800876c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008770:	2900      	cmp	r1, #0
 8008772:	b096      	sub	sp, #88	@ 0x58
 8008774:	4615      	mov	r5, r2
 8008776:	461e      	mov	r6, r3
 8008778:	da0d      	bge.n	8008796 <__swhatbuf_r+0x2e>
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008780:	f04f 0100 	mov.w	r1, #0
 8008784:	bf14      	ite	ne
 8008786:	2340      	movne	r3, #64	@ 0x40
 8008788:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800878c:	2000      	movs	r0, #0
 800878e:	6031      	str	r1, [r6, #0]
 8008790:	602b      	str	r3, [r5, #0]
 8008792:	b016      	add	sp, #88	@ 0x58
 8008794:	bd70      	pop	{r4, r5, r6, pc}
 8008796:	466a      	mov	r2, sp
 8008798:	f000 f848 	bl	800882c <_fstat_r>
 800879c:	2800      	cmp	r0, #0
 800879e:	dbec      	blt.n	800877a <__swhatbuf_r+0x12>
 80087a0:	9901      	ldr	r1, [sp, #4]
 80087a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087aa:	4259      	negs	r1, r3
 80087ac:	4159      	adcs	r1, r3
 80087ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087b2:	e7eb      	b.n	800878c <__swhatbuf_r+0x24>

080087b4 <__smakebuf_r>:
 80087b4:	898b      	ldrh	r3, [r1, #12]
 80087b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087b8:	079d      	lsls	r5, r3, #30
 80087ba:	4606      	mov	r6, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	d507      	bpl.n	80087d0 <__smakebuf_r+0x1c>
 80087c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	6123      	str	r3, [r4, #16]
 80087c8:	2301      	movs	r3, #1
 80087ca:	6163      	str	r3, [r4, #20]
 80087cc:	b003      	add	sp, #12
 80087ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087d0:	ab01      	add	r3, sp, #4
 80087d2:	466a      	mov	r2, sp
 80087d4:	f7ff ffc8 	bl	8008768 <__swhatbuf_r>
 80087d8:	9f00      	ldr	r7, [sp, #0]
 80087da:	4605      	mov	r5, r0
 80087dc:	4639      	mov	r1, r7
 80087de:	4630      	mov	r0, r6
 80087e0:	f7fe fec6 	bl	8007570 <_malloc_r>
 80087e4:	b948      	cbnz	r0, 80087fa <__smakebuf_r+0x46>
 80087e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087ea:	059a      	lsls	r2, r3, #22
 80087ec:	d4ee      	bmi.n	80087cc <__smakebuf_r+0x18>
 80087ee:	f023 0303 	bic.w	r3, r3, #3
 80087f2:	f043 0302 	orr.w	r3, r3, #2
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	e7e2      	b.n	80087c0 <__smakebuf_r+0xc>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	6020      	str	r0, [r4, #0]
 80087fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008802:	81a3      	strh	r3, [r4, #12]
 8008804:	9b01      	ldr	r3, [sp, #4]
 8008806:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800880a:	b15b      	cbz	r3, 8008824 <__smakebuf_r+0x70>
 800880c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008810:	4630      	mov	r0, r6
 8008812:	f000 f81d 	bl	8008850 <_isatty_r>
 8008816:	b128      	cbz	r0, 8008824 <__smakebuf_r+0x70>
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	f023 0303 	bic.w	r3, r3, #3
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	81a3      	strh	r3, [r4, #12]
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	431d      	orrs	r5, r3
 8008828:	81a5      	strh	r5, [r4, #12]
 800882a:	e7cf      	b.n	80087cc <__smakebuf_r+0x18>

0800882c <_fstat_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4d07      	ldr	r5, [pc, #28]	@ (800884c <_fstat_r+0x20>)
 8008830:	2300      	movs	r3, #0
 8008832:	4604      	mov	r4, r0
 8008834:	4608      	mov	r0, r1
 8008836:	4611      	mov	r1, r2
 8008838:	602b      	str	r3, [r5, #0]
 800883a:	f7f9 f873 	bl	8001924 <_fstat>
 800883e:	1c43      	adds	r3, r0, #1
 8008840:	d102      	bne.n	8008848 <_fstat_r+0x1c>
 8008842:	682b      	ldr	r3, [r5, #0]
 8008844:	b103      	cbz	r3, 8008848 <_fstat_r+0x1c>
 8008846:	6023      	str	r3, [r4, #0]
 8008848:	bd38      	pop	{r3, r4, r5, pc}
 800884a:	bf00      	nop
 800884c:	20000788 	.word	0x20000788

08008850 <_isatty_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d06      	ldr	r5, [pc, #24]	@ (800886c <_isatty_r+0x1c>)
 8008854:	2300      	movs	r3, #0
 8008856:	4604      	mov	r4, r0
 8008858:	4608      	mov	r0, r1
 800885a:	602b      	str	r3, [r5, #0]
 800885c:	f7f9 f872 	bl	8001944 <_isatty>
 8008860:	1c43      	adds	r3, r0, #1
 8008862:	d102      	bne.n	800886a <_isatty_r+0x1a>
 8008864:	682b      	ldr	r3, [r5, #0]
 8008866:	b103      	cbz	r3, 800886a <_isatty_r+0x1a>
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	bd38      	pop	{r3, r4, r5, pc}
 800886c:	20000788 	.word	0x20000788

08008870 <_init>:
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	bf00      	nop
 8008874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008876:	bc08      	pop	{r3}
 8008878:	469e      	mov	lr, r3
 800887a:	4770      	bx	lr

0800887c <_fini>:
 800887c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887e:	bf00      	nop
 8008880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008882:	bc08      	pop	{r3}
 8008884:	469e      	mov	lr, r3
 8008886:	4770      	bx	lr

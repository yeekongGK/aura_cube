
AURA_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004478  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004608  08004608  00005608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800468c  0800468c  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800468c  0800468c  0000568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004694  08004694  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004694  08004694  00005694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004698  08004698  00005698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800469c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000005c  080046f8  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080046f8  0000641c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011107  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002489  00000000  00000000  00017193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe8  00000000  00000000  00019620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c62  00000000  00000000  0001a608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002323a  00000000  00000000  0001b26a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d7a  00000000  00000000  0003e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3f36  00000000  00000000  0005121e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00125154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000478c  00000000  00000000  00125198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00129924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080045f0 	.word	0x080045f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080045f0 	.word	0x080045f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fd89 	bl	80010c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b4:	f000 f818 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b8:	f000 f9ba 	bl	8000930 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80005bc:	f000 f8ea 	bl	8000794 <MX_LPTIM1_Init>
  MX_I2C1_Init();
 80005c0:	f000 f868 	bl	8000694 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005c4:	f000 f8a6 	bl	8000714 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 80005c8:	f000 f918 	bl	80007fc <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005cc:	f000 f942 	bl	8000854 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80005d0:	f000 f970 	bl	80008b4 <MX_SPI1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  UART_Printf("test\r\n");
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <main+0x38>)
 80005d6:	f000 fa6b 	bl	8000ab0 <UART_Printf>
	  	HAL_Delay(100);
 80005da:	2064      	movs	r0, #100	@ 0x64
 80005dc:	f000 fde8 	bl	80011b0 <HAL_Delay>
	  UART_Printf("test\r\n");
 80005e0:	bf00      	nop
 80005e2:	e7f7      	b.n	80005d4 <main+0x28>
 80005e4:	08004608 	.word	0x08004608

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	@ 0x58
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2244      	movs	r2, #68	@ 0x44
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f003 fb7c 	bl	8003cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060e:	f001 fb6b 	bl	8001ce8 <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000618:	f000 fa7a 	bl	8000b10 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f001 fb46 	bl	8001cac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000620:	4b1b      	ldr	r3, [pc, #108]	@ (8000690 <SystemClock_Config+0xa8>)
 8000622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000626:	4a1a      	ldr	r2, [pc, #104]	@ (8000690 <SystemClock_Config+0xa8>)
 8000628:	f023 0318 	bic.w	r3, r3, #24
 800062c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000630:	2314      	movs	r3, #20
 8000632:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000640:	2360      	movs	r3, #96	@ 0x60
 8000642:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fba1 	bl	8001d94 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000658:	f000 fa5a 	bl	8000b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f001 ffa1 	bl	80025bc <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000680:	f000 fa46 	bl	8000b10 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000684:	f002 fc08 	bl	8002e98 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000688:	bf00      	nop
 800068a:	3758      	adds	r7, #88	@ 0x58
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40021000 	.word	0x40021000

08000694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000698:	4b1b      	ldr	r3, [pc, #108]	@ (8000708 <MX_I2C1_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <MX_I2C1_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 800069e:	4b1a      	ldr	r3, [pc, #104]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000710 <MX_I2C1_Init+0x7c>)
 80006a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a4:	4b18      	ldr	r3, [pc, #96]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006aa:	4b17      	ldr	r3, [pc, #92]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b15      	ldr	r3, [pc, #84]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b14      	ldr	r3, [pc, #80]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006c2:	4b11      	ldr	r3, [pc, #68]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ce:	480e      	ldr	r0, [pc, #56]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006d0:	f001 f836 	bl	8001740 <HAL_I2C_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006da:	f000 fa19 	bl	8000b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006de:	2100      	movs	r1, #0
 80006e0:	4809      	ldr	r0, [pc, #36]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006e2:	f001 f8c8 	bl	8001876 <HAL_I2CEx_ConfigAnalogFilter>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006ec:	f000 fa10 	bl	8000b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006f0:	2100      	movs	r1, #0
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <MX_I2C1_Init+0x74>)
 80006f4:	f001 f90a 	bl	800190c <HAL_I2CEx_ConfigDigitalFilter>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fe:	f000 fa07 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000078 	.word	0x20000078
 800070c:	40005400 	.word	0x40005400
 8000710:	00100d14 	.word	0x00100d14

08000714 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000718:	4b1b      	ldr	r3, [pc, #108]	@ (8000788 <MX_I2C2_Init+0x74>)
 800071a:	4a1c      	ldr	r2, [pc, #112]	@ (800078c <MX_I2C2_Init+0x78>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 800071e:	4b1a      	ldr	r3, [pc, #104]	@ (8000788 <MX_I2C2_Init+0x74>)
 8000720:	4a1b      	ldr	r2, [pc, #108]	@ (8000790 <MX_I2C2_Init+0x7c>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000724:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_I2C2_Init+0x74>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072a:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <MX_I2C2_Init+0x74>)
 800072c:	2201      	movs	r2, #1
 800072e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000730:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <MX_I2C2_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000736:	4b14      	ldr	r3, [pc, #80]	@ (8000788 <MX_I2C2_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800073c:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <MX_I2C2_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000742:	4b11      	ldr	r3, [pc, #68]	@ (8000788 <MX_I2C2_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000748:	4b0f      	ldr	r3, [pc, #60]	@ (8000788 <MX_I2C2_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800074e:	480e      	ldr	r0, [pc, #56]	@ (8000788 <MX_I2C2_Init+0x74>)
 8000750:	f000 fff6 	bl	8001740 <HAL_I2C_Init>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800075a:	f000 f9d9 	bl	8000b10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800075e:	2100      	movs	r1, #0
 8000760:	4809      	ldr	r0, [pc, #36]	@ (8000788 <MX_I2C2_Init+0x74>)
 8000762:	f001 f888 	bl	8001876 <HAL_I2CEx_ConfigAnalogFilter>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800076c:	f000 f9d0 	bl	8000b10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000770:	2100      	movs	r1, #0
 8000772:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_I2C2_Init+0x74>)
 8000774:	f001 f8ca 	bl	800190c <HAL_I2CEx_ConfigDigitalFilter>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800077e:	f000 f9c7 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	200000cc 	.word	0x200000cc
 800078c:	40005800 	.word	0x40005800
 8000790:	00100d14 	.word	0x00100d14

08000794 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000798:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 800079a:	4a17      	ldr	r2, [pc, #92]	@ (80007f8 <MX_LPTIM1_Init+0x64>)
 800079c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80007b0:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80007bc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007cc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80007d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007da:	2200      	movs	r2, #0
 80007dc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_LPTIM1_Init+0x60>)
 80007e0:	f001 f8e0 	bl	80019a4 <HAL_LPTIM_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 80007ea:	f000 f991 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000120 	.word	0x20000120
 80007f8:	40007c00 	.word	0x40007c00

080007fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000800:	4b12      	ldr	r3, [pc, #72]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000802:	4a13      	ldr	r2, [pc, #76]	@ (8000850 <MX_LPUART1_UART_Init+0x54>)
 8000804:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000808:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800080c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0d      	ldr	r3, [pc, #52]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_LPUART1_UART_Init+0x50>)
 800083a:	f002 fcd2 	bl	80031e2 <HAL_UART_Init>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000844:	f000 f964 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000158 	.word	0x20000158
 8000850:	40008000 	.word	0x40008000

08000854 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000858:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 800085a:	4a15      	ldr	r2, [pc, #84]	@ (80008b0 <MX_USART1_UART_Init+0x5c>)
 800085c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 8000860:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000864:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000866:	4b11      	ldr	r3, [pc, #68]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000878:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 800087a:	220c      	movs	r2, #12
 800087c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000884:	4b09      	ldr	r3, [pc, #36]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000890:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_USART1_UART_Init+0x58>)
 8000898:	f002 fca3 	bl	80031e2 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f935 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001e0 	.word	0x200001e0
 80008b0:	40013800 	.word	0x40013800

080008b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008ba:	4a1c      	ldr	r2, [pc, #112]	@ (800092c <MX_SPI1_Init+0x78>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008c4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b18      	ldr	r3, [pc, #96]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008cc:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008ce:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80008d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008da:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008e0:	4b11      	ldr	r3, [pc, #68]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008e2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80008e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000900:	4b09      	ldr	r3, [pc, #36]	@ (8000928 <MX_SPI1_Init+0x74>)
 8000902:	2207      	movs	r2, #7
 8000904:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000906:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <MX_SPI1_Init+0x74>)
 800090e:	2208      	movs	r2, #8
 8000910:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000912:	4805      	ldr	r0, [pc, #20]	@ (8000928 <MX_SPI1_Init+0x74>)
 8000914:	f002 fbc2 	bl	800309c <HAL_SPI_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800091e:	f000 f8f7 	bl	8000b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000268 	.word	0x20000268
 800092c:	40013000 	.word	0x40013000

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b08a      	sub	sp, #40	@ 0x28
 8000934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	4b56      	ldr	r3, [pc, #344]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800094a:	4a55      	ldr	r2, [pc, #340]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 800094c:	f043 0304 	orr.w	r3, r3, #4
 8000950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000952:	4b53      	ldr	r3, [pc, #332]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000956:	f003 0304 	and.w	r3, r3, #4
 800095a:	613b      	str	r3, [r7, #16]
 800095c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095e:	4b50      	ldr	r3, [pc, #320]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4a4f      	ldr	r2, [pc, #316]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096a:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800097a:	4a49      	ldr	r2, [pc, #292]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000982:	4b47      	ldr	r3, [pc, #284]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	4b44      	ldr	r3, [pc, #272]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000992:	4a43      	ldr	r2, [pc, #268]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800099a:	4b41      	ldr	r3, [pc, #260]	@ (8000aa0 <MX_GPIO_Init+0x170>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_PSM_EINT_GPIO_Port, NB_PSM_EINT_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ac:	483d      	ldr	r0, [pc, #244]	@ (8000aa4 <MX_GPIO_Init+0x174>)
 80009ae:	f000 feaf 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin, GPIO_PIN_RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2146      	movs	r1, #70	@ 0x46
 80009b6:	483c      	ldr	r0, [pc, #240]	@ (8000aa8 <MX_GPIO_Init+0x178>)
 80009b8:	f000 feaa 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NFC_PWR_Pin|NB_ONOFF_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 80009c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c6:	f000 fea3 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_RESET_GPIO_Port, NB_RESET_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2108      	movs	r1, #8
 80009ce:	4837      	ldr	r0, [pc, #220]	@ (8000aac <MX_GPIO_Init+0x17c>)
 80009d0:	f000 fe9e 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NB_PSM_EINT_Pin */
  GPIO_InitStruct.Pin = NB_PSM_EINT_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_PSM_EINT_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	482d      	ldr	r0, [pc, #180]	@ (8000aa4 <MX_GPIO_Init+0x174>)
 80009ee:	f000 fd15 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT2_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin|MEMS_INT1_Pin;
 80009f2:	2303      	movs	r3, #3
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4829      	ldr	r0, [pc, #164]	@ (8000aac <MX_GPIO_Init+0x17c>)
 8000a06:	f000 fd09 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : VBATT_ADC_Pin NFC_BUSY_Pin COMP2_INP_CH1_Pin TAMPER_IN_Pin
                           VBATT_DET_Pin PWR_BY_MAG_Pin */
  GPIO_InitStruct.Pin = VBATT_ADC_Pin|NFC_BUSY_Pin|COMP2_INP_CH1_Pin|TAMPER_IN_Pin
 8000a0a:	f640 132d 	movw	r3, #2349	@ 0x92d
 8000a0e:	617b      	str	r3, [r7, #20]
                          |VBATT_DET_Pin|PWR_BY_MAG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a22:	f000 fcfb 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : NB_PWR_BYPASS_Pin NB_PWR_EN_Pin PWR_EN_Pin */
  GPIO_InitStruct.Pin = NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin;
 8000a26:	2346      	movs	r3, #70	@ 0x46
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <MX_GPIO_Init+0x178>)
 8000a3e:	f000 fced 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_DT_Pin FUEL_GAUGE_ALRT_Pin RS_TAMPER_Pin */
  GPIO_InitStruct.Pin = SIM_DT_Pin|FUEL_GAUGE_ALRT_Pin|RS_TAMPER_Pin;
 8000a42:	f249 0308 	movw	r3, #36872	@ 0x9008
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4814      	ldr	r0, [pc, #80]	@ (8000aa8 <MX_GPIO_Init+0x178>)
 8000a58:	f000 fce0 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_PWR_Pin NB_ONOFF_Pin */
  GPIO_InitStruct.Pin = NFC_PWR_Pin|NB_ONOFF_Pin;
 8000a5c:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a78:	f000 fcd0 	bl	800141c <HAL_GPIO_Init>

  /*Configure GPIO pin : NB_RESET_Pin */
  GPIO_InitStruct.Pin = NB_RESET_Pin;
 8000a7c:	2308      	movs	r3, #8
 8000a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4806      	ldr	r0, [pc, #24]	@ (8000aac <MX_GPIO_Init+0x17c>)
 8000a94:	f000 fcc2 	bl	800141c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	@ 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	48000800 	.word	0x48000800
 8000aa8:	48000400 	.word	0x48000400
 8000aac:	48001c00 	.word	0x48001c00

08000ab0 <UART_Printf>:

/* USER CODE BEGIN 4 */

void UART_Printf(char *format, ...)
{
 8000ab0:	b40f      	push	{r0, r1, r2, r3}
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b0c2      	sub	sp, #264	@ 0x108
 8000ab6:	af00      	add	r7, sp, #0
  char str[256];
  va_list args;
  va_start(args, format);
 8000ab8:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000ac0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ac4:	601a      	str	r2, [r3, #0]
  vsnprintf(str, sizeof(str), format, args);
 8000ac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000aca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ace:	f107 0008 	add.w	r0, r7, #8
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8000ad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000adc:	f003 f8fc 	bl	8003cd8 <vsniprintf>
  va_end(args);

  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 8000ae0:	f107 0308 	add.w	r3, r7, #8
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff fb73 	bl	80001d0 <strlen>
 8000aea:	4603      	mov	r3, r0
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	f107 0108 	add.w	r1, r7, #8
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <UART_Printf+0x5c>)
 8000af8:	f002 fbc1 	bl	800327e <HAL_UART_Transmit>
}
 8000afc:	bf00      	nop
 8000afe:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000b02:	46bd      	mov	sp, r7
 8000b04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr
 8000b0c:	200001e0 	.word	0x200001e0

08000b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b14:	b672      	cpsid	i
}
 8000b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <Error_Handler+0x8>

08000b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b22:	4b0f      	ldr	r3, [pc, #60]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b26:	4a0e      	ldr	r2, [pc, #56]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b3e:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0a4      	sub	sp, #144	@ 0x90
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	2260      	movs	r2, #96	@ 0x60
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f003 f8b5 	bl	8003cf4 <memset>
  if(hi2c->Instance==I2C1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a41      	ldr	r2, [pc, #260]	@ (8000c94 <HAL_I2C_MspInit+0x130>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d13b      	bne.n	8000c0c <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b94:	2340      	movs	r3, #64	@ 0x40
 8000b96:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 ff2f 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bac:	f7ff ffb0 	bl	8000b10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b39      	ldr	r3, [pc, #228]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb4:	4a38      	ldr	r2, [pc, #224]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bbc:	4b36      	ldr	r3, [pc, #216]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|GPIO_PIN_9;
 8000bc8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bce:	2312      	movs	r3, #18
 8000bd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be0:	2304      	movs	r3, #4
 8000be2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000bea:	4619      	mov	r1, r3
 8000bec:	482b      	ldr	r0, [pc, #172]	@ (8000c9c <HAL_I2C_MspInit+0x138>)
 8000bee:	f000 fc15 	bl	800141c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bf2:	4b29      	ldr	r3, [pc, #164]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bf6:	4a28      	ldr	r2, [pc, #160]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bfe:	4b26      	ldr	r3, [pc, #152]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c06:	617b      	str	r3, [r7, #20]
 8000c08:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c0a:	e03f      	b.n	8000c8c <HAL_I2C_MspInit+0x128>
  else if(hi2c->Instance==I2C2)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a23      	ldr	r2, [pc, #140]	@ (8000ca0 <HAL_I2C_MspInit+0x13c>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d13a      	bne.n	8000c8c <HAL_I2C_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c16:	2380      	movs	r3, #128	@ 0x80
 8000c18:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 feee 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8000c2e:	f7ff ff6f 	bl	8000b10 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c32:	4b19      	ldr	r3, [pc, #100]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c36:	4a18      	ldr	r2, [pc, #96]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c42:	f003 0302 	and.w	r3, r3, #2
 8000c46:	613b      	str	r3, [r7, #16]
 8000c48:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2SCL_Pin|I2C2_SDA_Pin;
 8000c4a:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c50:	2312      	movs	r3, #18
 8000c52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c62:	2304      	movs	r3, #4
 8000c64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c68:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	480b      	ldr	r0, [pc, #44]	@ (8000c9c <HAL_I2C_MspInit+0x138>)
 8000c70:	f000 fbd4 	bl	800141c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c78:	4a07      	ldr	r2, [pc, #28]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000c7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c80:	4b05      	ldr	r3, [pc, #20]	@ (8000c98 <HAL_I2C_MspInit+0x134>)
 8000c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	bf00      	nop
 8000c8e:	3790      	adds	r7, #144	@ 0x90
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40005400 	.word	0x40005400
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	48000400 	.word	0x48000400
 8000ca0:	40005800 	.word	0x40005800

08000ca4 <HAL_LPTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hlptim: LPTIM handle pointer
  * @retval None
  */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0a2      	sub	sp, #136	@ 0x88
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2260      	movs	r2, #96	@ 0x60
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 f815 	bl	8003cf4 <memset>
  if(hlptim->Instance==LPTIM1)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a24      	ldr	r2, [pc, #144]	@ (8000d60 <HAL_LPTIM_MspInit+0xbc>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d140      	bne.n	8000d56 <HAL_LPTIM_MspInit+0xb2>

    /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000cd4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cd8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fe8e 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8000cee:	f7ff ff0f 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <HAL_LPTIM_MspInit+0xc0>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <HAL_LPTIM_MspInit+0xc0>)
 8000cf8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <HAL_LPTIM_MspInit+0xc0>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <HAL_LPTIM_MspInit+0xc0>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	4a15      	ldr	r2, [pc, #84]	@ (8000d64 <HAL_LPTIM_MspInit+0xc0>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <HAL_LPTIM_MspInit+0xc0>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d22:	23a0      	movs	r3, #160	@ 0xa0
 8000d24:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4809      	ldr	r0, [pc, #36]	@ (8000d68 <HAL_LPTIM_MspInit+0xc4>)
 8000d42:	f000 fb6b 	bl	800141c <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	2041      	movs	r0, #65	@ 0x41
 8000d4c:	f000 fb2f 	bl	80013ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000d50:	2041      	movs	r0, #65	@ 0x41
 8000d52:	f000 fb48 	bl	80013e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LPTIM1_MspInit 1 */

  }

}
 8000d56:	bf00      	nop
 8000d58:	3788      	adds	r7, #136	@ 0x88
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40007c00 	.word	0x40007c00
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000400 	.word	0x48000400

08000d6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b0a4      	sub	sp, #144	@ 0x90
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	2260      	movs	r2, #96	@ 0x60
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 ffb1 	bl	8003cf4 <memset>
  if(huart->Instance==LPUART1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a42      	ldr	r2, [pc, #264]	@ (8000ea0 <HAL_UART_MspInit+0x134>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d13b      	bne.n	8000e14 <HAL_UART_MspInit+0xa8>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d9c:	2320      	movs	r3, #32
 8000d9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000da0:	2300      	movs	r3, #0
 8000da2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 fe2b 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000db4:	f7ff feac 	bl	8000b10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000db8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dbc:	4a39      	ldr	r2, [pc, #228]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000dbe:	f043 0301 	orr.w	r3, r3, #1
 8000dc2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000dc4:	4b37      	ldr	r3, [pc, #220]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd0:	4b34      	ldr	r3, [pc, #208]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd4:	4a33      	ldr	r2, [pc, #204]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ddc:	4b31      	ldr	r3, [pc, #196]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = LPUART1_RX_Pin|LPUART1_TX_Pin;
 8000de8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000dec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dee:	2302      	movs	r3, #2
 8000df0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e00:	2308      	movs	r3, #8
 8000e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4826      	ldr	r0, [pc, #152]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000e0e:	f000 fb05 	bl	800141c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e12:	e040      	b.n	8000e96 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a24      	ldr	r2, [pc, #144]	@ (8000eac <HAL_UART_MspInit+0x140>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d13b      	bne.n	8000e96 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f001 fdea 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000e36:	f7ff fe6b 	bl	8000b10 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e3e:	4a19      	ldr	r2, [pc, #100]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4e:	613b      	str	r3, [r7, #16]
 8000e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e56:	4a13      	ldr	r2, [pc, #76]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8000e6a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e82:	2307      	movs	r3, #7
 8000e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e92:	f000 fac3 	bl	800141c <HAL_GPIO_Init>
}
 8000e96:	bf00      	nop
 8000e98:	3790      	adds	r7, #144	@ 0x90
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40008000 	.word	0x40008000
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	40013800 	.word	0x40013800

08000eb0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	@ 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a25      	ldr	r2, [pc, #148]	@ (8000f64 <HAL_SPI_MspInit+0xb4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d144      	bne.n	8000f5c <HAL_SPI_MspInit+0xac>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed2:	4b25      	ldr	r3, [pc, #148]	@ (8000f68 <HAL_SPI_MspInit+0xb8>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed6:	4a24      	ldr	r2, [pc, #144]	@ (8000f68 <HAL_SPI_MspInit+0xb8>)
 8000ed8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000edc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ede:	4b22      	ldr	r3, [pc, #136]	@ (8000f68 <HAL_SPI_MspInit+0xb8>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <HAL_SPI_MspInit+0xb8>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	4a1e      	ldr	r2, [pc, #120]	@ (8000f68 <HAL_SPI_MspInit+0xb8>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <HAL_SPI_MspInit+0xb8>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <HAL_SPI_MspInit+0xb8>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a18      	ldr	r2, [pc, #96]	@ (8000f68 <HAL_SPI_MspInit+0xb8>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <HAL_SPI_MspInit+0xb8>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000f1a:	23c2      	movs	r3, #194	@ 0xc2
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f000 fa70 	bl	800141c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f4c:	2305      	movs	r3, #5
 8000f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4805      	ldr	r0, [pc, #20]	@ (8000f6c <HAL_SPI_MspInit+0xbc>)
 8000f58:	f000 fa60 	bl	800141c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	@ 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40013000 	.word	0x40013000
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000400 	.word	0x48000400

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <NMI_Handler+0x4>

08000f78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <HardFault_Handler+0x4>

08000f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <MemManage_Handler+0x4>

08000f88 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	bf00      	nop
 8000f96:	e7fd      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f98 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc6:	f000 f8d3 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <LPTIM1_IRQHandler+0x10>)
 8000fd6:	f000 fd87 	bl	8001ae8 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000120 	.word	0x20000120

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f002 fe76 	bl	8003d04 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000c000 	.word	0x2000c000
 8001044:	00000400 	.word	0x00000400
 8001048:	200002cc 	.word	0x200002cc
 800104c:	20000420 	.word	0x20000420

08001050 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff ffea 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	@ (80010b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <LoopForever+0xe>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	@ (80010c0 <LoopForever+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f002 fe35 	bl	8003d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a6:	f7ff fa81 	bl	80005ac <main>

080010aa <LoopForever>:

LoopForever:
    b LoopForever
 80010aa:	e7fe      	b.n	80010aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010ac:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010b8:	0800469c 	.word	0x0800469c
  ldr r2, =_sbss
 80010bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010c0:	2000041c 	.word	0x2000041c

080010c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_IRQHandler>

080010c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f961 	bl	8001398 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d6:	2000      	movs	r0, #0
 80010d8:	f000 f80e 	bl	80010f8 <HAL_InitTick>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d002      	beq.n	80010e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	e001      	b.n	80010ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e8:	f7ff fd18 	bl	8000b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001100:	2300      	movs	r3, #0
 8001102:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001104:	4b17      	ldr	r3, [pc, #92]	@ (8001164 <HAL_InitTick+0x6c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d023      	beq.n	8001154 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800110c:	4b16      	ldr	r3, [pc, #88]	@ (8001168 <HAL_InitTick+0x70>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b14      	ldr	r3, [pc, #80]	@ (8001164 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f96d 	bl	8001402 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10f      	bne.n	800114e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b0f      	cmp	r3, #15
 8001132:	d809      	bhi.n	8001148 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	2200      	movs	r2, #0
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 f937 	bl	80013ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001140:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <HAL_InitTick+0x74>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e007      	b.n	8001158 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e004      	b.n	8001158 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	73fb      	strb	r3, [r7, #15]
 8001152:	e001      	b.n	8001158 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20000008 	.word	0x20000008
 8001168:	20000000 	.word	0x20000000
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <HAL_IncTick+0x20>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_IncTick+0x24>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <HAL_IncTick+0x24>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008
 8001194:	200002d0 	.word	0x200002d0

08001198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <HAL_GetTick+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	200002d0 	.word	0x200002d0

080011b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b8:	f7ff ffee 	bl	8001198 <HAL_GetTick>
 80011bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c8:	d005      	beq.n	80011d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011ca:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_Delay+0x44>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011d6:	bf00      	nop
 80011d8:	f7ff ffde 	bl	8001198 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d8f7      	bhi.n	80011d8 <HAL_Delay+0x28>
  {
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	@ (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	@ (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	2b00      	cmp	r3, #0
 800126c:	db0b      	blt.n	8001286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	f003 021f 	and.w	r2, r3, #31
 8001274:	4907      	ldr	r1, [pc, #28]	@ (8001294 <__NVIC_EnableIRQ+0x38>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	095b      	lsrs	r3, r3, #5
 800127c:	2001      	movs	r0, #1
 800127e:	fa00 f202 	lsl.w	r2, r0, r2
 8001282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e000e100 	.word	0xe000e100

08001298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	6039      	str	r1, [r7, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db0a      	blt.n	80012c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	490c      	ldr	r1, [pc, #48]	@ (80012e4 <__NVIC_SetPriority+0x4c>)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	440b      	add	r3, r1
 80012bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c0:	e00a      	b.n	80012d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	4908      	ldr	r1, [pc, #32]	@ (80012e8 <__NVIC_SetPriority+0x50>)
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	3b04      	subs	r3, #4
 80012d0:	0112      	lsls	r2, r2, #4
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	440b      	add	r3, r1
 80012d6:	761a      	strb	r2, [r3, #24]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr
 80012e4:	e000e100 	.word	0xe000e100
 80012e8:	e000ed00 	.word	0xe000ed00

080012ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b089      	sub	sp, #36	@ 0x24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	f1c3 0307 	rsb	r3, r3, #7
 8001306:	2b04      	cmp	r3, #4
 8001308:	bf28      	it	cs
 800130a:	2304      	movcs	r3, #4
 800130c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	3304      	adds	r3, #4
 8001312:	2b06      	cmp	r3, #6
 8001314:	d902      	bls.n	800131c <NVIC_EncodePriority+0x30>
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	3b03      	subs	r3, #3
 800131a:	e000      	b.n	800131e <NVIC_EncodePriority+0x32>
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43da      	mvns	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	401a      	ands	r2, r3
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	fa01 f303 	lsl.w	r3, r1, r3
 800133e:	43d9      	mvns	r1, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001344:	4313      	orrs	r3, r2
         );
}
 8001346:	4618      	mov	r0, r3
 8001348:	3724      	adds	r7, #36	@ 0x24
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3b01      	subs	r3, #1
 8001360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001364:	d301      	bcc.n	800136a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001366:	2301      	movs	r3, #1
 8001368:	e00f      	b.n	800138a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136a:	4a0a      	ldr	r2, [pc, #40]	@ (8001394 <SysTick_Config+0x40>)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3b01      	subs	r3, #1
 8001370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001372:	210f      	movs	r1, #15
 8001374:	f04f 30ff 	mov.w	r0, #4294967295
 8001378:	f7ff ff8e 	bl	8001298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800137c:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <SysTick_Config+0x40>)
 800137e:	2200      	movs	r2, #0
 8001380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <SysTick_Config+0x40>)
 8001384:	2207      	movs	r2, #7
 8001386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	e000e010 	.word	0xe000e010

08001398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ff29 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b086      	sub	sp, #24
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	60b9      	str	r1, [r7, #8]
 80013b8:	607a      	str	r2, [r7, #4]
 80013ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c0:	f7ff ff3e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 80013c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	6978      	ldr	r0, [r7, #20]
 80013cc:	f7ff ff8e 	bl	80012ec <NVIC_EncodePriority>
 80013d0:	4602      	mov	r2, r0
 80013d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013d6:	4611      	mov	r1, r2
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff ff5d 	bl	8001298 <__NVIC_SetPriority>
}
 80013de:	bf00      	nop
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff ff31 	bl	800125c <__NVIC_EnableIRQ>
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ffa2 	bl	8001354 <SysTick_Config>
 8001410:	4603      	mov	r3, r0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
	...

0800141c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800142a:	e154      	b.n	80016d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2101      	movs	r1, #1
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	fa01 f303 	lsl.w	r3, r1, r3
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8146 	beq.w	80016d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0303 	and.w	r3, r3, #3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d005      	beq.n	800145c <HAL_GPIO_Init+0x40>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0303 	and.w	r3, r3, #3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d130      	bne.n	80014be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4313      	orrs	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001492:	2201      	movs	r2, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	091b      	lsrs	r3, r3, #4
 80014a8:	f003 0201 	and.w	r2, r3, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b03      	cmp	r3, #3
 80014c8:	d017      	beq.n	80014fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
 80014ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	2203      	movs	r2, #3
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d123      	bne.n	800154e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	08da      	lsrs	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	691a      	ldr	r2, [r3, #16]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f003 0307 	and.w	r3, r3, #7
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	08da      	lsrs	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3208      	adds	r2, #8
 8001548:	6939      	ldr	r1, [r7, #16]
 800154a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0203 	and.w	r2, r3, #3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80a0 	beq.w	80016d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001590:	4b58      	ldr	r3, [pc, #352]	@ (80016f4 <HAL_GPIO_Init+0x2d8>)
 8001592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001594:	4a57      	ldr	r2, [pc, #348]	@ (80016f4 <HAL_GPIO_Init+0x2d8>)
 8001596:	f043 0301 	orr.w	r3, r3, #1
 800159a:	6613      	str	r3, [r2, #96]	@ 0x60
 800159c:	4b55      	ldr	r3, [pc, #340]	@ (80016f4 <HAL_GPIO_Init+0x2d8>)
 800159e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a8:	4a53      	ldr	r2, [pc, #332]	@ (80016f8 <HAL_GPIO_Init+0x2dc>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	f003 0303 	and.w	r3, r3, #3
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80015d2:	d019      	beq.n	8001608 <HAL_GPIO_Init+0x1ec>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4a49      	ldr	r2, [pc, #292]	@ (80016fc <HAL_GPIO_Init+0x2e0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d013      	beq.n	8001604 <HAL_GPIO_Init+0x1e8>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a48      	ldr	r2, [pc, #288]	@ (8001700 <HAL_GPIO_Init+0x2e4>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00d      	beq.n	8001600 <HAL_GPIO_Init+0x1e4>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a47      	ldr	r2, [pc, #284]	@ (8001704 <HAL_GPIO_Init+0x2e8>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d007      	beq.n	80015fc <HAL_GPIO_Init+0x1e0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a46      	ldr	r2, [pc, #280]	@ (8001708 <HAL_GPIO_Init+0x2ec>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d101      	bne.n	80015f8 <HAL_GPIO_Init+0x1dc>
 80015f4:	2304      	movs	r3, #4
 80015f6:	e008      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 80015f8:	2307      	movs	r3, #7
 80015fa:	e006      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 80015fc:	2303      	movs	r3, #3
 80015fe:	e004      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 8001600:	2302      	movs	r3, #2
 8001602:	e002      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_GPIO_Init+0x1ee>
 8001608:	2300      	movs	r3, #0
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	f002 0203 	and.w	r2, r2, #3
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	4093      	lsls	r3, r2
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800161a:	4937      	ldr	r1, [pc, #220]	@ (80016f8 <HAL_GPIO_Init+0x2dc>)
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	089b      	lsrs	r3, r3, #2
 8001620:	3302      	adds	r3, #2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001628:	4b38      	ldr	r3, [pc, #224]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	43db      	mvns	r3, r3
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4013      	ands	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d003      	beq.n	800164c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800164c:	4a2f      	ldr	r2, [pc, #188]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001652:	4b2e      	ldr	r3, [pc, #184]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	43db      	mvns	r3, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001676:	4a25      	ldr	r2, [pc, #148]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800167c:	4b23      	ldr	r3, [pc, #140]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	43db      	mvns	r3, r3
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	4013      	ands	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d003      	beq.n	80016a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016a0:	4a1a      	ldr	r2, [pc, #104]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016a6:	4b19      	ldr	r3, [pc, #100]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016ca:	4a10      	ldr	r2, [pc, #64]	@ (800170c <HAL_GPIO_Init+0x2f0>)
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	3301      	adds	r3, #1
 80016d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f47f aea3 	bne.w	800142c <HAL_GPIO_Init+0x10>
  }
}
 80016e6:	bf00      	nop
 80016e8:	bf00      	nop
 80016ea:	371c      	adds	r7, #28
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40010000 	.word	0x40010000
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800
 8001704:	48000c00 	.word	0x48000c00
 8001708:	48001000 	.word	0x48001000
 800170c:	40010400 	.word	0x40010400

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800172c:	e002      	b.n	8001734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800172e:	887a      	ldrh	r2, [r7, #2]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e08d      	b.n	800186e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d106      	bne.n	800176c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff f9fc 	bl	8000b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2224      	movs	r2, #36	@ 0x24
 8001770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f022 0201 	bic.w	r2, r2, #1
 8001782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001790:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d107      	bne.n	80017ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	e006      	b.n	80017c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80017c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d108      	bne.n	80017e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017de:	605a      	str	r2, [r3, #4]
 80017e0:	e007      	b.n	80017f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6812      	ldr	r2, [r2, #0]
 80017fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001800:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001804:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001814:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691a      	ldr	r2, [r3, #16]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	695b      	ldr	r3, [r3, #20]
 800181e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69d9      	ldr	r1, [r3, #28]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1a      	ldr	r2, [r3, #32]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	430a      	orrs	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2220      	movs	r2, #32
 800185a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001886:	b2db      	uxtb	r3, r3
 8001888:	2b20      	cmp	r3, #32
 800188a:	d138      	bne.n	80018fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001892:	2b01      	cmp	r3, #1
 8001894:	d101      	bne.n	800189a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001896:	2302      	movs	r3, #2
 8001898:	e032      	b.n	8001900 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2224      	movs	r2, #36	@ 0x24
 80018a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80018c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6819      	ldr	r1, [r3, #0]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2220      	movs	r2, #32
 80018ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018fa:	2300      	movs	r3, #0
 80018fc:	e000      	b.n	8001900 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
  }
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b20      	cmp	r3, #32
 8001920:	d139      	bne.n	8001996 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800192c:	2302      	movs	r3, #2
 800192e:	e033      	b.n	8001998 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2224      	movs	r2, #36	@ 0x24
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800195e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	021b      	lsls	r3, r3, #8
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f042 0201 	orr.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2220      	movs	r2, #32
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001996:	2302      	movs	r3, #2
  }
}
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e08f      	b.n	8001ad6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d106      	bne.n	80019d6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff f967 	bl	8000ca4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d004      	beq.n	80019f8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80019f6:	d103      	bne.n	8001a00 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f023 031e 	bic.w	r3, r3, #30
 80019fe:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	695b      	ldr	r3, [r3, #20]
 8001a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d005      	beq.n	8001a18 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001a12:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001a16:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4b31      	ldr	r3, [pc, #196]	@ (8001ae0 <HAL_LPTIM_Init+0x13c>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001a28:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001a2e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8001a34:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8001a3a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d107      	bne.n	8001a5a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001a52:	4313      	orrs	r3, r2
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d004      	beq.n	8001a6c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a66:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001a6a:	d107      	bne.n	8001a7c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001a74:	4313      	orrs	r3, r2
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d00a      	beq.n	8001a9e <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a90:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001a96:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001a98:	68fa      	ldr	r2, [r7, #12]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae4 <HAL_LPTIM_Init+0x140>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d108      	bne.n	8001ac2 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	621a      	str	r2, [r3, #32]
 8001ac0:	e004      	b.n	8001acc <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001aca:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	ff19f1fe 	.word	0xff19f1fe
 8001ae4:	40007c00 	.word	0x40007c00

08001ae8 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d10d      	bne.n	8001b1a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d106      	bne.n	8001b1a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f882 	bl	8001c1e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d10d      	bne.n	8001b44 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d106      	bne.n	8001b44 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f000 f877 	bl	8001c32 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d10d      	bne.n	8001b6e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b04      	cmp	r3, #4
 8001b5e:	d106      	bne.n	8001b6e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2204      	movs	r2, #4
 8001b66:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f86c 	bl	8001c46 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d10d      	bne.n	8001b98 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 0308 	and.w	r3, r3, #8
 8001b86:	2b08      	cmp	r3, #8
 8001b88:	d106      	bne.n	8001b98 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2208      	movs	r2, #8
 8001b90:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 f861 	bl	8001c5a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0310 	and.w	r3, r3, #16
 8001ba2:	2b10      	cmp	r3, #16
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f003 0310 	and.w	r3, r3, #16
 8001bb0:	2b10      	cmp	r3, #16
 8001bb2:	d106      	bne.n	8001bc2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2210      	movs	r2, #16
 8001bba:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f856 	bl	8001c6e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0320 	and.w	r3, r3, #32
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d10d      	bne.n	8001bec <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0320 	and.w	r3, r3, #32
 8001bda:	2b20      	cmp	r3, #32
 8001bdc:	d106      	bne.n	8001bec <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2220      	movs	r2, #32
 8001be4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f000 f84b 	bl	8001c82 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf6:	2b40      	cmp	r3, #64	@ 0x40
 8001bf8:	d10d      	bne.n	8001c16 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c04:	2b40      	cmp	r3, #64	@ 0x40
 8001c06:	d106      	bne.n	8001c16 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2240      	movs	r2, #64	@ 0x40
 8001c0e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f000 f840 	bl	8001c96 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8001c16:	bf00      	nop
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb0:	4b05      	ldr	r3, [pc, #20]	@ (8001cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a04      	ldr	r2, [pc, #16]	@ (8001cc8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40007000 	.word	0x40007000

08001ccc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001cd0:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <HAL_PWREx_GetVoltageRange+0x18>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001cf6:	d130      	bne.n	8001d5a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001cf8:	4b23      	ldr	r3, [pc, #140]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d04:	d038      	beq.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d06:	4b20      	ldr	r3, [pc, #128]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d10:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d16:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2232      	movs	r2, #50	@ 0x32
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	4a1b      	ldr	r2, [pc, #108]	@ (8001d90 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001d22:	fba2 2303 	umull	r2, r3, r2, r3
 8001d26:	0c9b      	lsrs	r3, r3, #18
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d2c:	e002      	b.n	8001d34 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d34:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d40:	d102      	bne.n	8001d48 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1f2      	bne.n	8001d2e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d48:	4b0f      	ldr	r3, [pc, #60]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d54:	d110      	bne.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e00f      	b.n	8001d7a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d66:	d007      	beq.n	8001d78 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d68:	4b07      	ldr	r3, [pc, #28]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d70:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d76:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	40007000 	.word	0x40007000
 8001d8c:	20000000 	.word	0x20000000
 8001d90:	431bde83 	.word	0x431bde83

08001d94 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d102      	bne.n	8001da8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	f000 bc02 	b.w	80025ac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da8:	4b96      	ldr	r3, [pc, #600]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db2:	4b94      	ldr	r3, [pc, #592]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 80e4 	beq.w	8001f92 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4c>
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	2b0c      	cmp	r3, #12
 8001dd4:	f040 808b 	bne.w	8001eee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	f040 8087 	bne.w	8001eee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001de0:	4b88      	ldr	r3, [pc, #544]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d005      	beq.n	8001df8 <HAL_RCC_OscConfig+0x64>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e3d9      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1a      	ldr	r2, [r3, #32]
 8001dfc:	4b81      	ldr	r3, [pc, #516]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_RCC_OscConfig+0x7e>
 8001e08:	4b7e      	ldr	r3, [pc, #504]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e10:	e005      	b.n	8001e1e <HAL_RCC_OscConfig+0x8a>
 8001e12:	4b7c      	ldr	r3, [pc, #496]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d223      	bcs.n	8001e6a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 fd8c 	bl	8002944 <RCC_SetFlashLatencyFromMSIRange>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e3ba      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e36:	4b73      	ldr	r3, [pc, #460]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a72      	ldr	r2, [pc, #456]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	6013      	str	r3, [r2, #0]
 8001e42:	4b70      	ldr	r3, [pc, #448]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	496d      	ldr	r1, [pc, #436]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e54:	4b6b      	ldr	r3, [pc, #428]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	4968      	ldr	r1, [pc, #416]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	604b      	str	r3, [r1, #4]
 8001e68:	e025      	b.n	8001eb6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e6a:	4b66      	ldr	r3, [pc, #408]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a65      	ldr	r2, [pc, #404]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e70:	f043 0308 	orr.w	r3, r3, #8
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b63      	ldr	r3, [pc, #396]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4960      	ldr	r1, [pc, #384]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e88:	4b5e      	ldr	r3, [pc, #376]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	021b      	lsls	r3, r3, #8
 8001e96:	495b      	ldr	r1, [pc, #364]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 fd4c 	bl	8002944 <RCC_SetFlashLatencyFromMSIRange>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e37a      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb6:	f000 fc81 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b51      	ldr	r3, [pc, #324]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	4950      	ldr	r1, [pc, #320]	@ (8002008 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	5ccb      	ldrb	r3, [r1, r3]
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	4a4e      	ldr	r2, [pc, #312]	@ (800200c <HAL_RCC_OscConfig+0x278>)
 8001ed4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ed6:	4b4e      	ldr	r3, [pc, #312]	@ (8002010 <HAL_RCC_OscConfig+0x27c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f90c 	bl	80010f8 <HAL_InitTick>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ee4:	7bfb      	ldrb	r3, [r7, #15]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d052      	beq.n	8001f90 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	e35e      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d032      	beq.n	8001f5c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ef6:	4b43      	ldr	r3, [pc, #268]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a42      	ldr	r2, [pc, #264]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f02:	f7ff f949 	bl	8001198 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f0a:	f7ff f945 	bl	8001198 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e347      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f1c:	4b39      	ldr	r3, [pc, #228]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0f0      	beq.n	8001f0a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f28:	4b36      	ldr	r3, [pc, #216]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a35      	ldr	r2, [pc, #212]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f2e:	f043 0308 	orr.w	r3, r3, #8
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	4b33      	ldr	r3, [pc, #204]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	4930      	ldr	r1, [pc, #192]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f46:	4b2f      	ldr	r3, [pc, #188]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	492b      	ldr	r1, [pc, #172]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	604b      	str	r3, [r1, #4]
 8001f5a:	e01a      	b.n	8001f92 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001f5c:	4b29      	ldr	r3, [pc, #164]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a28      	ldr	r2, [pc, #160]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f68:	f7ff f916 	bl	8001198 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f70:	f7ff f912 	bl	8001198 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e314      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001f82:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1dc>
 8001f8e:	e000      	b.n	8001f92 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d073      	beq.n	8002086 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x21c>
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d10b      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	4b14      	ldr	r3, [pc, #80]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d063      	beq.n	8002084 <HAL_RCC_OscConfig+0x2f0>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d15f      	bne.n	8002084 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e2f1      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fd0:	d106      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x24c>
 8001fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a0b      	ldr	r2, [pc, #44]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	e025      	b.n	800202c <HAL_RCC_OscConfig+0x298>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fe8:	d114      	bne.n	8002014 <HAL_RCC_OscConfig+0x280>
 8001fea:	4b06      	ldr	r3, [pc, #24]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a05      	ldr	r2, [pc, #20]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001ff0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b03      	ldr	r3, [pc, #12]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a02      	ldr	r2, [pc, #8]	@ (8002004 <HAL_RCC_OscConfig+0x270>)
 8001ffc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e013      	b.n	800202c <HAL_RCC_OscConfig+0x298>
 8002004:	40021000 	.word	0x40021000
 8002008:	08004610 	.word	0x08004610
 800200c:	20000000 	.word	0x20000000
 8002010:	20000004 	.word	0x20000004
 8002014:	4ba0      	ldr	r3, [pc, #640]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a9f      	ldr	r2, [pc, #636]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 800201a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b9d      	ldr	r3, [pc, #628]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a9c      	ldr	r2, [pc, #624]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800202a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d013      	beq.n	800205c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff f8b0 	bl	8001198 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800203c:	f7ff f8ac 	bl	8001198 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	@ 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e2ae      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204e:	4b92      	ldr	r3, [pc, #584]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x2a8>
 800205a:	e014      	b.n	8002086 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff f89c 	bl	8001198 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002064:	f7ff f898 	bl	8001198 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b64      	cmp	r3, #100	@ 0x64
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e29a      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002076:	4b88      	ldr	r3, [pc, #544]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x2d0>
 8002082:	e000      	b.n	8002086 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d060      	beq.n	8002154 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b04      	cmp	r3, #4
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x310>
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	2b0c      	cmp	r3, #12
 800209c:	d119      	bne.n	80020d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d116      	bne.n	80020d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a4:	4b7c      	ldr	r3, [pc, #496]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x328>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e277      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b76      	ldr	r3, [pc, #472]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4973      	ldr	r1, [pc, #460]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020d0:	e040      	b.n	8002154 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d023      	beq.n	8002122 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020da:	4b6f      	ldr	r3, [pc, #444]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a6e      	ldr	r2, [pc, #440]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e6:	f7ff f857 	bl	8001198 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ee:	f7ff f853 	bl	8001198 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e255      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002100:	4b65      	ldr	r3, [pc, #404]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b62      	ldr	r3, [pc, #392]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	061b      	lsls	r3, r3, #24
 800211a:	495f      	ldr	r1, [pc, #380]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 800211c:	4313      	orrs	r3, r2
 800211e:	604b      	str	r3, [r1, #4]
 8002120:	e018      	b.n	8002154 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002122:	4b5d      	ldr	r3, [pc, #372]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a5c      	ldr	r2, [pc, #368]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002128:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800212c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212e:	f7ff f833 	bl	8001198 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002136:	f7ff f82f 	bl	8001198 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e231      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002148:	4b53      	ldr	r3, [pc, #332]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d03c      	beq.n	80021da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d01c      	beq.n	80021a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002168:	4b4b      	ldr	r3, [pc, #300]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 800216a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800216e:	4a4a      	ldr	r2, [pc, #296]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7ff f80e 	bl	8001198 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7ff f80a 	bl	8001198 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e20c      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002192:	4b41      	ldr	r3, [pc, #260]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002194:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ef      	beq.n	8002180 <HAL_RCC_OscConfig+0x3ec>
 80021a0:	e01b      	b.n	80021da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80021a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021a8:	4a3b      	ldr	r2, [pc, #236]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7fe fff1 	bl	8001198 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ba:	f7fe ffed 	bl	8001198 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1ef      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021cc:	4b32      	ldr	r3, [pc, #200]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80021ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ef      	bne.n	80021ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 80a6 	beq.w	8002334 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021e8:	2300      	movs	r3, #0
 80021ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80021ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80021ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10d      	bne.n	8002214 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80021fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021fc:	4a26      	ldr	r2, [pc, #152]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 80021fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002202:	6593      	str	r3, [r2, #88]	@ 0x58
 8002204:	4b24      	ldr	r3, [pc, #144]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002210:	2301      	movs	r3, #1
 8002212:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002214:	4b21      	ldr	r3, [pc, #132]	@ (800229c <HAL_RCC_OscConfig+0x508>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221c:	2b00      	cmp	r3, #0
 800221e:	d118      	bne.n	8002252 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002220:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <HAL_RCC_OscConfig+0x508>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1d      	ldr	r2, [pc, #116]	@ (800229c <HAL_RCC_OscConfig+0x508>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800222c:	f7fe ffb4 	bl	8001198 <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002234:	f7fe ffb0 	bl	8001198 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1b2      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <HAL_RCC_OscConfig+0x508>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0f0      	beq.n	8002234 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b01      	cmp	r3, #1
 8002258:	d108      	bne.n	800226c <HAL_RCC_OscConfig+0x4d8>
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 800225c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002260:	4a0d      	ldr	r2, [pc, #52]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800226a:	e029      	b.n	80022c0 <HAL_RCC_OscConfig+0x52c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	2b05      	cmp	r3, #5
 8002272:	d115      	bne.n	80022a0 <HAL_RCC_OscConfig+0x50c>
 8002274:	4b08      	ldr	r3, [pc, #32]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800227a:	4a07      	ldr	r2, [pc, #28]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002284:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800228a:	4a03      	ldr	r2, [pc, #12]	@ (8002298 <HAL_RCC_OscConfig+0x504>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002294:	e014      	b.n	80022c0 <HAL_RCC_OscConfig+0x52c>
 8002296:	bf00      	nop
 8002298:	40021000 	.word	0x40021000
 800229c:	40007000 	.word	0x40007000
 80022a0:	4b9a      	ldr	r3, [pc, #616]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022a6:	4a99      	ldr	r2, [pc, #612]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022b0:	4b96      	ldr	r3, [pc, #600]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80022b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022b6:	4a95      	ldr	r2, [pc, #596]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80022b8:	f023 0304 	bic.w	r3, r3, #4
 80022bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d016      	beq.n	80022f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe ff66 	bl	8001198 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7fe ff62 	bl	8001198 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e162      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e6:	4b89      	ldr	r3, [pc, #548]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ed      	beq.n	80022d0 <HAL_RCC_OscConfig+0x53c>
 80022f4:	e015      	b.n	8002322 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe ff4f 	bl	8001198 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022fc:	e00a      	b.n	8002314 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fe:	f7fe ff4b 	bl	8001198 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230c:	4293      	cmp	r3, r2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e14b      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002314:	4b7d      	ldr	r3, [pc, #500]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1ed      	bne.n	80022fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002322:	7ffb      	ldrb	r3, [r7, #31]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d105      	bne.n	8002334 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002328:	4b78      	ldr	r3, [pc, #480]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	4a77      	ldr	r2, [pc, #476]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 800232e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002332:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	2b00      	cmp	r3, #0
 800233e:	d03c      	beq.n	80023ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002344:	2b00      	cmp	r3, #0
 8002346:	d01c      	beq.n	8002382 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002348:	4b70      	ldr	r3, [pc, #448]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 800234a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800234e:	4a6f      	ldr	r2, [pc, #444]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe ff1e 	bl	8001198 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002360:	f7fe ff1a 	bl	8001198 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e11c      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002372:	4b66      	ldr	r3, [pc, #408]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 8002374:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ef      	beq.n	8002360 <HAL_RCC_OscConfig+0x5cc>
 8002380:	e01b      	b.n	80023ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002382:	4b62      	ldr	r3, [pc, #392]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 8002384:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002388:	4a60      	ldr	r2, [pc, #384]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 800238a:	f023 0301 	bic.w	r3, r3, #1
 800238e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002392:	f7fe ff01 	bl	8001198 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800239a:	f7fe fefd 	bl	8001198 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0ff      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023ac:	4b57      	ldr	r3, [pc, #348]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80023ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d1ef      	bne.n	800239a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 80f3 	beq.w	80025aa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	f040 80c9 	bne.w	8002560 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80023ce:	4b4f      	ldr	r3, [pc, #316]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	f003 0203 	and.w	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	429a      	cmp	r2, r3
 80023e0:	d12c      	bne.n	800243c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ec:	3b01      	subs	r3, #1
 80023ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d123      	bne.n	800243c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d11b      	bne.n	800243c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d113      	bne.n	800243c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241e:	085b      	lsrs	r3, r3, #1
 8002420:	3b01      	subs	r3, #1
 8002422:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002424:	429a      	cmp	r2, r3
 8002426:	d109      	bne.n	800243c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	085b      	lsrs	r3, r3, #1
 8002434:	3b01      	subs	r3, #1
 8002436:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002438:	429a      	cmp	r2, r3
 800243a:	d06b      	beq.n	8002514 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	2b0c      	cmp	r3, #12
 8002440:	d062      	beq.n	8002508 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002442:	4b32      	ldr	r3, [pc, #200]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e0ac      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002452:	4b2e      	ldr	r3, [pc, #184]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2d      	ldr	r2, [pc, #180]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 8002458:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800245e:	f7fe fe9b 	bl	8001198 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002466:	f7fe fe97 	bl	8001198 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e099      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002478:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1f0      	bne.n	8002466 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002484:	4b21      	ldr	r3, [pc, #132]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <HAL_RCC_OscConfig+0x77c>)
 800248a:	4013      	ands	r3, r2
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002494:	3a01      	subs	r2, #1
 8002496:	0112      	lsls	r2, r2, #4
 8002498:	4311      	orrs	r1, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800249e:	0212      	lsls	r2, r2, #8
 80024a0:	4311      	orrs	r1, r2
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80024a6:	0852      	lsrs	r2, r2, #1
 80024a8:	3a01      	subs	r2, #1
 80024aa:	0552      	lsls	r2, r2, #21
 80024ac:	4311      	orrs	r1, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80024b2:	0852      	lsrs	r2, r2, #1
 80024b4:	3a01      	subs	r2, #1
 80024b6:	0652      	lsls	r2, r2, #25
 80024b8:	4311      	orrs	r1, r2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80024be:	06d2      	lsls	r2, r2, #27
 80024c0:	430a      	orrs	r2, r1
 80024c2:	4912      	ldr	r1, [pc, #72]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a0f      	ldr	r2, [pc, #60]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80024ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	4a0c      	ldr	r2, [pc, #48]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80024da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024e0:	f7fe fe5a 	bl	8001198 <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e8:	f7fe fe56 	bl	8001198 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e058      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024fa:	4b04      	ldr	r3, [pc, #16]	@ (800250c <HAL_RCC_OscConfig+0x778>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002506:	e050      	b.n	80025aa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e04f      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
 800250c:	40021000 	.word	0x40021000
 8002510:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002514:	4b27      	ldr	r3, [pc, #156]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d144      	bne.n	80025aa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002520:	4b24      	ldr	r3, [pc, #144]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a23      	ldr	r2, [pc, #140]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800252a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800252c:	4b21      	ldr	r3, [pc, #132]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4a20      	ldr	r2, [pc, #128]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 8002532:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002536:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002538:	f7fe fe2e 	bl	8001198 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7fe fe2a 	bl	8001198 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e02c      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002552:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0f0      	beq.n	8002540 <HAL_RCC_OscConfig+0x7ac>
 800255e:	e024      	b.n	80025aa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d01f      	beq.n	80025a6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 800256c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fe11 	bl	8001198 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe fe0d 	bl	8001198 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e00f      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800258c:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d1f0      	bne.n	800257a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002598:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4905      	ldr	r1, [pc, #20]	@ (80025b4 <HAL_RCC_OscConfig+0x820>)
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_RCC_OscConfig+0x824>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	60cb      	str	r3, [r1, #12]
 80025a4:	e001      	b.n	80025aa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	feeefffc 	.word	0xfeeefffc

080025bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0e7      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025d0:	4b75      	ldr	r3, [pc, #468]	@ (80027a8 <HAL_RCC_ClockConfig+0x1ec>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d910      	bls.n	8002600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025de:	4b72      	ldr	r3, [pc, #456]	@ (80027a8 <HAL_RCC_ClockConfig+0x1ec>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 0207 	bic.w	r2, r3, #7
 80025e6:	4970      	ldr	r1, [pc, #448]	@ (80027a8 <HAL_RCC_ClockConfig+0x1ec>)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ee:	4b6e      	ldr	r3, [pc, #440]	@ (80027a8 <HAL_RCC_ClockConfig+0x1ec>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	683a      	ldr	r2, [r7, #0]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d001      	beq.n	8002600 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0cf      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d010      	beq.n	800262e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	4b66      	ldr	r3, [pc, #408]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002618:	429a      	cmp	r2, r3
 800261a:	d908      	bls.n	800262e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800261c:	4b63      	ldr	r3, [pc, #396]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	4960      	ldr	r1, [pc, #384]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d04c      	beq.n	80026d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b03      	cmp	r3, #3
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	4b5a      	ldr	r3, [pc, #360]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d121      	bne.n	8002692 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0a6      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800265a:	4b54      	ldr	r3, [pc, #336]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d115      	bne.n	8002692 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e09a      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d107      	bne.n	8002682 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002672:	4b4e      	ldr	r3, [pc, #312]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d109      	bne.n	8002692 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e08e      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002682:	4b4a      	ldr	r3, [pc, #296]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e086      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002692:	4b46      	ldr	r3, [pc, #280]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f023 0203 	bic.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	4943      	ldr	r1, [pc, #268]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026a4:	f7fe fd78 	bl	8001198 <HAL_GetTick>
 80026a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	e00a      	b.n	80026c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ac:	f7fe fd74 	bl	8001198 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e06e      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026c2:	4b3a      	ldr	r3, [pc, #232]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 020c 	and.w	r2, r3, #12
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1eb      	bne.n	80026ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d010      	beq.n	8002702 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	4b31      	ldr	r3, [pc, #196]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d208      	bcs.n	8002702 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b2e      	ldr	r3, [pc, #184]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	492b      	ldr	r1, [pc, #172]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002702:	4b29      	ldr	r3, [pc, #164]	@ (80027a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d210      	bcs.n	8002732 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002710:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 0207 	bic.w	r2, r3, #7
 8002718:	4923      	ldr	r1, [pc, #140]	@ (80027a8 <HAL_RCC_ClockConfig+0x1ec>)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002720:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <HAL_RCC_ClockConfig+0x1ec>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d001      	beq.n	8002732 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e036      	b.n	80027a0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	d008      	beq.n	8002750 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800273e:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4918      	ldr	r1, [pc, #96]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 800274c:	4313      	orrs	r3, r2
 800274e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800275c:	4b13      	ldr	r3, [pc, #76]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4910      	ldr	r1, [pc, #64]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 800276c:	4313      	orrs	r3, r2
 800276e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002770:	f000 f824 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8002774:	4602      	mov	r2, r0
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	091b      	lsrs	r3, r3, #4
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	490b      	ldr	r1, [pc, #44]	@ (80027b0 <HAL_RCC_ClockConfig+0x1f4>)
 8002782:	5ccb      	ldrb	r3, [r1, r3]
 8002784:	f003 031f 	and.w	r3, r3, #31
 8002788:	fa22 f303 	lsr.w	r3, r2, r3
 800278c:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <HAL_RCC_ClockConfig+0x1f8>)
 800278e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002790:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_RCC_ClockConfig+0x1fc>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fcaf 	bl	80010f8 <HAL_InitTick>
 800279a:	4603      	mov	r3, r0
 800279c:	72fb      	strb	r3, [r7, #11]

  return status;
 800279e:	7afb      	ldrb	r3, [r7, #11]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40022000 	.word	0x40022000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	08004610 	.word	0x08004610
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	@ 0x24
 80027c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	2300      	movs	r3, #0
 80027c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ca:	4b3e      	ldr	r3, [pc, #248]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027d4:	4b3b      	ldr	r3, [pc, #236]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x34>
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d121      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d11e      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80027f0:	4b34      	ldr	r3, [pc, #208]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0308 	and.w	r3, r3, #8
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d107      	bne.n	800280c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80027fc:	4b31      	ldr	r3, [pc, #196]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80027fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002802:	0a1b      	lsrs	r3, r3, #8
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	e005      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800280c:	4b2d      	ldr	r3, [pc, #180]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002818:	4a2b      	ldr	r2, [pc, #172]	@ (80028c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002820:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10d      	bne.n	8002844 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d102      	bne.n	800283a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	e004      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b08      	cmp	r3, #8
 800283e:	d101      	bne.n	8002844 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002840:	4b23      	ldr	r3, [pc, #140]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002842:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d134      	bne.n	80028b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800284a:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d003      	beq.n	8002862 <HAL_RCC_GetSysClockFreq+0xa6>
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	2b03      	cmp	r3, #3
 800285e:	d003      	beq.n	8002868 <HAL_RCC_GetSysClockFreq+0xac>
 8002860:	e005      	b.n	800286e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002862:	4b1a      	ldr	r3, [pc, #104]	@ (80028cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002864:	617b      	str	r3, [r7, #20]
      break;
 8002866:	e005      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800286a:	617b      	str	r3, [r7, #20]
      break;
 800286c:	e002      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	617b      	str	r3, [r7, #20]
      break;
 8002872:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	3301      	adds	r3, #1
 8002880:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	fb03 f202 	mul.w	r2, r3, r2
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	fbb2 f3f3 	udiv	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800289a:	4b0a      	ldr	r3, [pc, #40]	@ (80028c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	0e5b      	lsrs	r3, r3, #25
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	3301      	adds	r3, #1
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80028b4:	69bb      	ldr	r3, [r7, #24]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	@ 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08004628 	.word	0x08004628
 80028cc:	00f42400 	.word	0x00f42400
 80028d0:	007a1200 	.word	0x007a1200

080028d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028d8:	4b03      	ldr	r3, [pc, #12]	@ (80028e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80028da:	681b      	ldr	r3, [r3, #0]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000

080028ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028f0:	f7ff fff0 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4904      	ldr	r1, [pc, #16]	@ (8002914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800290c:	4618      	mov	r0, r3
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40021000 	.word	0x40021000
 8002914:	08004620 	.word	0x08004620

08002918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800291c:	f7ff ffda 	bl	80028d4 <HAL_RCC_GetHCLKFreq>
 8002920:	4602      	mov	r2, r0
 8002922:	4b06      	ldr	r3, [pc, #24]	@ (800293c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	0adb      	lsrs	r3, r3, #11
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	4904      	ldr	r1, [pc, #16]	@ (8002940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800292e:	5ccb      	ldrb	r3, [r1, r3]
 8002930:	f003 031f 	and.w	r3, r3, #31
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002938:	4618      	mov	r0, r3
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40021000 	.word	0x40021000
 8002940:	08004620 	.word	0x08004620

08002944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800294c:	2300      	movs	r3, #0
 800294e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002950:	4b2a      	ldr	r3, [pc, #168]	@ (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002954:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800295c:	f7ff f9b6 	bl	8001ccc <HAL_PWREx_GetVoltageRange>
 8002960:	6178      	str	r0, [r7, #20]
 8002962:	e014      	b.n	800298e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b25      	ldr	r3, [pc, #148]	@ (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	4a24      	ldr	r2, [pc, #144]	@ (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002970:	4b22      	ldr	r3, [pc, #136]	@ (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800297c:	f7ff f9a6 	bl	8001ccc <HAL_PWREx_GetVoltageRange>
 8002980:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002982:	4b1e      	ldr	r3, [pc, #120]	@ (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002986:	4a1d      	ldr	r2, [pc, #116]	@ (80029fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800298c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002994:	d10b      	bne.n	80029ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b80      	cmp	r3, #128	@ 0x80
 800299a:	d919      	bls.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2ba0      	cmp	r3, #160	@ 0xa0
 80029a0:	d902      	bls.n	80029a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029a2:	2302      	movs	r3, #2
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	e013      	b.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029a8:	2301      	movs	r3, #1
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	e010      	b.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b80      	cmp	r3, #128	@ 0x80
 80029b2:	d902      	bls.n	80029ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80029b4:	2303      	movs	r3, #3
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	e00a      	b.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b80      	cmp	r3, #128	@ 0x80
 80029be:	d102      	bne.n	80029c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80029c0:	2302      	movs	r3, #2
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	e004      	b.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b70      	cmp	r3, #112	@ 0x70
 80029ca:	d101      	bne.n	80029d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80029cc:	2301      	movs	r3, #1
 80029ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 0207 	bic.w	r2, r3, #7
 80029d8:	4909      	ldr	r1, [pc, #36]	@ (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80029e0:	4b07      	ldr	r3, [pc, #28]	@ (8002a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d001      	beq.n	80029f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e000      	b.n	80029f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40021000 	.word	0x40021000
 8002a00:	40022000 	.word	0x40022000

08002a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a10:	2300      	movs	r3, #0
 8002a12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d031      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a28:	d01a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002a2e:	d814      	bhi.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002a34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a38:	d10f      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	4a5c      	ldr	r2, [pc, #368]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a46:	e00c      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 fa32 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002a54:	4603      	mov	r3, r0
 8002a56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a58:	e003      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	74fb      	strb	r3, [r7, #19]
      break;
 8002a5e:	e000      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a62:	7cfb      	ldrb	r3, [r7, #19]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10b      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a68:	4b51      	ldr	r3, [pc, #324]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a6e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a76:	494e      	ldr	r1, [pc, #312]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002a7e:	e001      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a80:	7cfb      	ldrb	r3, [r7, #19]
 8002a82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 809e 	beq.w	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002a96:	4b46      	ldr	r3, [pc, #280]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab0:	4a3f      	ldr	r2, [pc, #252]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a39      	ldr	r2, [pc, #228]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fb60 	bl	8001198 <HAL_GetTick>
 8002ad8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ada:	e009      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002adc:	f7fe fb5c 	bl	8001198 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d902      	bls.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	74fb      	strb	r3, [r7, #19]
        break;
 8002aee:	e005      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002af0:	4b30      	ldr	r3, [pc, #192]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ef      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d15a      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b02:	4b2b      	ldr	r3, [pc, #172]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01e      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b18:	697a      	ldr	r2, [r7, #20]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d019      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b1e:	4b24      	ldr	r3, [pc, #144]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b2a:	4b21      	ldr	r3, [pc, #132]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b30:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b40:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b4a:	4a19      	ldr	r2, [pc, #100]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d016      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fb1c 	bl	8001198 <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b62:	e00b      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b64:	f7fe fb18 	bl	8001198 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d902      	bls.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	74fb      	strb	r3, [r7, #19]
            break;
 8002b7a:	e006      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ec      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002b8a:	7cfb      	ldrb	r3, [r7, #19]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10b      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b90:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b96:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b9e:	4904      	ldr	r1, [pc, #16]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002ba6:	e009      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ba8:	7cfb      	ldrb	r3, [r7, #19]
 8002baa:	74bb      	strb	r3, [r7, #18]
 8002bac:	e006      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb8:	7cfb      	ldrb	r3, [r7, #19]
 8002bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bbc:	7c7b      	ldrb	r3, [r7, #17]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d105      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b8d      	ldr	r3, [pc, #564]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	4a8c      	ldr	r2, [pc, #560]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bda:	4b87      	ldr	r3, [pc, #540]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002be0:	f023 0203 	bic.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4983      	ldr	r1, [pc, #524]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bfc:	4b7e      	ldr	r3, [pc, #504]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c02:	f023 020c 	bic.w	r2, r3, #12
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	497b      	ldr	r1, [pc, #492]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0304 	and.w	r3, r3, #4
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c1e:	4b76      	ldr	r3, [pc, #472]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c2c:	4972      	ldr	r1, [pc, #456]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c40:	4b6d      	ldr	r3, [pc, #436]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4e:	496a      	ldr	r1, [pc, #424]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c62:	4b65      	ldr	r3, [pc, #404]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	4961      	ldr	r1, [pc, #388]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c84:	4b5c      	ldr	r3, [pc, #368]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	4959      	ldr	r1, [pc, #356]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca6:	4b54      	ldr	r3, [pc, #336]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	4950      	ldr	r1, [pc, #320]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cc8:	4b4b      	ldr	r3, [pc, #300]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd6:	4948      	ldr	r1, [pc, #288]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002cea:	4b43      	ldr	r3, [pc, #268]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf8:	493f      	ldr	r1, [pc, #252]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d028      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1a:	4937      	ldr	r1, [pc, #220]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d2a:	d106      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2c:	4b32      	ldr	r3, [pc, #200]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a31      	ldr	r2, [pc, #196]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d36:	60d3      	str	r3, [r2, #12]
 8002d38:	e011      	b.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002d42:	d10c      	bne.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	3304      	adds	r3, #4
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f8b4 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002d50:	4603      	mov	r3, r0
 8002d52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002d54:	7cfb      	ldrb	r3, [r7, #19]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 8002d5a:	7cfb      	ldrb	r3, [r7, #19]
 8002d5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d028      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002d6a:	4b23      	ldr	r3, [pc, #140]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d78:	491f      	ldr	r1, [pc, #124]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d88:	d106      	bne.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002d90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d94:	60d3      	str	r3, [r2, #12]
 8002d96:	e011      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002da0:	d10c      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	3304      	adds	r3, #4
 8002da6:	2101      	movs	r1, #1
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 f885 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db2:	7cfb      	ldrb	r3, [r7, #19]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d02b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd6:	4908      	ldr	r1, [pc, #32]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002de6:	d109      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de8:	4b03      	ldr	r3, [pc, #12]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	4a02      	ldr	r2, [pc, #8]	@ (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8002dee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002df2:	60d3      	str	r3, [r2, #12]
 8002df4:	e014      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e04:	d10c      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 f853 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002e12:	4603      	mov	r3, r0
 8002e14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8002e1c:	7cfb      	ldrb	r3, [r7, #19]
 8002e1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d01c      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e2c:	4b19      	ldr	r3, [pc, #100]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e3a:	4916      	ldr	r1, [pc, #88]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e4a:	d10c      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3304      	adds	r3, #4
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 f830 	bl	8002eb8 <RCCEx_PLLSAI1_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8002e62:	7cfb      	ldrb	r3, [r7, #19]
 8002e64:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e72:	4b08      	ldr	r3, [pc, #32]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e78:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	4904      	ldr	r1, [pc, #16]	@ (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e88:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40021000 	.word	0x40021000

08002e98 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ea2:	f043 0304 	orr.w	r3, r3, #4
 8002ea6:	6013      	str	r3, [r2, #0]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40021000 	.word	0x40021000

08002eb8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ec6:	4b74      	ldr	r3, [pc, #464]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d018      	beq.n	8002f04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ed2:	4b71      	ldr	r3, [pc, #452]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f003 0203 	and.w	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d10d      	bne.n	8002efe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
       ||
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002eea:	4b6b      	ldr	r3, [pc, #428]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 0307 	and.w	r3, r3, #7
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
       ||
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d047      	beq.n	8002f8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e044      	b.n	8002f8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d018      	beq.n	8002f3e <RCCEx_PLLSAI1_Config+0x86>
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d825      	bhi.n	8002f5c <RCCEx_PLLSAI1_Config+0xa4>
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d002      	beq.n	8002f1a <RCCEx_PLLSAI1_Config+0x62>
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d009      	beq.n	8002f2c <RCCEx_PLLSAI1_Config+0x74>
 8002f18:	e020      	b.n	8002f5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f1a:	4b5f      	ldr	r3, [pc, #380]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d11d      	bne.n	8002f62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f2a:	e01a      	b.n	8002f62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f3c:	e013      	b.n	8002f66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f3e:	4b56      	ldr	r3, [pc, #344]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10f      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f4a:	4b53      	ldr	r3, [pc, #332]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f5a:	e006      	b.n	8002f6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e004      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10d      	bne.n	8002f8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f72:	4b49      	ldr	r3, [pc, #292]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6819      	ldr	r1, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	430b      	orrs	r3, r1
 8002f88:	4943      	ldr	r1, [pc, #268]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d17c      	bne.n	800308e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f94:	4b40      	ldr	r3, [pc, #256]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3f      	ldr	r2, [pc, #252]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fa0:	f7fe f8fa 	bl	8001198 <HAL_GetTick>
 8002fa4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fa6:	e009      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fa8:	f7fe f8f6 	bl	8001198 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d902      	bls.n	8002fbc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	73fb      	strb	r3, [r7, #15]
        break;
 8002fba:	e005      	b.n	8002fc8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002fbc:	4b36      	ldr	r3, [pc, #216]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ef      	bne.n	8002fa8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d15f      	bne.n	800308e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d110      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd4:	4b30      	ldr	r3, [pc, #192]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002fdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	0211      	lsls	r1, r2, #8
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	68d2      	ldr	r2, [r2, #12]
 8002fea:	06d2      	lsls	r2, r2, #27
 8002fec:	430a      	orrs	r2, r1
 8002fee:	492a      	ldr	r1, [pc, #168]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	610b      	str	r3, [r1, #16]
 8002ff4:	e027      	b.n	8003046 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d112      	bne.n	8003022 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ffc:	4b26      	ldr	r3, [pc, #152]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003004:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	6892      	ldr	r2, [r2, #8]
 800300c:	0211      	lsls	r1, r2, #8
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6912      	ldr	r2, [r2, #16]
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	3a01      	subs	r2, #1
 8003016:	0552      	lsls	r2, r2, #21
 8003018:	430a      	orrs	r2, r1
 800301a:	491f      	ldr	r1, [pc, #124]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	610b      	str	r3, [r1, #16]
 8003020:	e011      	b.n	8003046 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003022:	4b1d      	ldr	r3, [pc, #116]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800302a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6892      	ldr	r2, [r2, #8]
 8003032:	0211      	lsls	r1, r2, #8
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6952      	ldr	r2, [r2, #20]
 8003038:	0852      	lsrs	r2, r2, #1
 800303a:	3a01      	subs	r2, #1
 800303c:	0652      	lsls	r2, r2, #25
 800303e:	430a      	orrs	r2, r1
 8003040:	4915      	ldr	r1, [pc, #84]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003046:	4b14      	ldr	r3, [pc, #80]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a13      	ldr	r2, [pc, #76]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003050:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003052:	f7fe f8a1 	bl	8001198 <HAL_GetTick>
 8003056:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003058:	e009      	b.n	800306e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800305a:	f7fe f89d 	bl	8001198 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d902      	bls.n	800306e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	73fb      	strb	r3, [r7, #15]
          break;
 800306c:	e005      	b.n	800307a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800306e:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0ef      	beq.n	800305a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	4903      	ldr	r1, [pc, #12]	@ (8003098 <RCCEx_PLLSAI1_Config+0x1e0>)
 800308a:	4313      	orrs	r3, r2
 800308c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800308e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e095      	b.n	80031da <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030be:	d009      	beq.n	80030d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	61da      	str	r2, [r3, #28]
 80030c6:	e005      	b.n	80030d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d106      	bne.n	80030f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7fd fede 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800310a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003114:	d902      	bls.n	800311c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003116:	2300      	movs	r3, #0
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e002      	b.n	8003122 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800311c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003120:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800312a:	d007      	beq.n	800313c <HAL_SPI_Init+0xa0>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003134:	d002      	beq.n	800313c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317e:	ea42 0103 	orr.w	r1, r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	f003 0204 	and.w	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	431a      	orrs	r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031b8:	ea42 0103 	orr.w	r1, r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e040      	b.n	8003276 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7fd fdb1 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2224      	movs	r2, #36	@ 0x24
 800320e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 fb0b 	bl	8003844 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8ae 	bl	8003390 <UART_SetConfig>
 8003234:	4603      	mov	r3, r0
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e01b      	b.n	8003276 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800324c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800325c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0201 	orr.w	r2, r2, #1
 800326c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 fb8a 	bl	8003988 <UART_CheckIdleState>
 8003274:	4603      	mov	r3, r0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b08a      	sub	sp, #40	@ 0x28
 8003282:	af02      	add	r7, sp, #8
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	603b      	str	r3, [r7, #0]
 800328a:	4613      	mov	r3, r2
 800328c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003292:	2b20      	cmp	r3, #32
 8003294:	d177      	bne.n	8003386 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_UART_Transmit+0x24>
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e070      	b.n	8003388 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2221      	movs	r2, #33	@ 0x21
 80032b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032b4:	f7fd ff70 	bl	8001198 <HAL_GetTick>
 80032b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	88fa      	ldrh	r2, [r7, #6]
 80032be:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032d2:	d108      	bne.n	80032e6 <HAL_UART_Transmit+0x68>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d104      	bne.n	80032e6 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032dc:	2300      	movs	r3, #0
 80032de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	61bb      	str	r3, [r7, #24]
 80032e4:	e003      	b.n	80032ee <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032ee:	e02f      	b.n	8003350 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	2200      	movs	r2, #0
 80032f8:	2180      	movs	r1, #128	@ 0x80
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 fbec 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d004      	beq.n	8003310 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e03b      	b.n	8003388 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10b      	bne.n	800332e <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	881a      	ldrh	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003322:	b292      	uxth	r2, r2
 8003324:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	3302      	adds	r3, #2
 800332a:	61bb      	str	r3, [r7, #24]
 800332c:	e007      	b.n	800333e <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	781a      	ldrb	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3301      	adds	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b01      	subs	r3, #1
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1c9      	bne.n	80032f0 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2200      	movs	r2, #0
 8003364:	2140      	movs	r1, #64	@ 0x40
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fbb6 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e005      	b.n	8003388 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003386:	2302      	movs	r3, #2
  }
}
 8003388:	4618      	mov	r0, r3
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003394:	b08a      	sub	sp, #40	@ 0x28
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b9e      	ldr	r3, [pc, #632]	@ (8003638 <UART_SetConfig+0x2a8>)
 80033c0:	4013      	ands	r3, r2
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033c8:	430b      	orrs	r3, r1
 80033ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a93      	ldr	r2, [pc, #588]	@ (800363c <UART_SetConfig+0x2ac>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033f8:	4313      	orrs	r3, r2
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800340c:	430a      	orrs	r2, r1
 800340e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a8a      	ldr	r2, [pc, #552]	@ (8003640 <UART_SetConfig+0x2b0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d126      	bne.n	8003468 <UART_SetConfig+0xd8>
 800341a:	4b8a      	ldr	r3, [pc, #552]	@ (8003644 <UART_SetConfig+0x2b4>)
 800341c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b03      	cmp	r3, #3
 8003426:	d81b      	bhi.n	8003460 <UART_SetConfig+0xd0>
 8003428:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <UART_SetConfig+0xa0>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003441 	.word	0x08003441
 8003434:	08003451 	.word	0x08003451
 8003438:	08003449 	.word	0x08003449
 800343c:	08003459 	.word	0x08003459
 8003440:	2301      	movs	r3, #1
 8003442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003446:	e0ab      	b.n	80035a0 <UART_SetConfig+0x210>
 8003448:	2302      	movs	r3, #2
 800344a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800344e:	e0a7      	b.n	80035a0 <UART_SetConfig+0x210>
 8003450:	2304      	movs	r3, #4
 8003452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003456:	e0a3      	b.n	80035a0 <UART_SetConfig+0x210>
 8003458:	2308      	movs	r3, #8
 800345a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800345e:	e09f      	b.n	80035a0 <UART_SetConfig+0x210>
 8003460:	2310      	movs	r3, #16
 8003462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003466:	e09b      	b.n	80035a0 <UART_SetConfig+0x210>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a76      	ldr	r2, [pc, #472]	@ (8003648 <UART_SetConfig+0x2b8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d138      	bne.n	80034e4 <UART_SetConfig+0x154>
 8003472:	4b74      	ldr	r3, [pc, #464]	@ (8003644 <UART_SetConfig+0x2b4>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003478:	f003 030c 	and.w	r3, r3, #12
 800347c:	2b0c      	cmp	r3, #12
 800347e:	d82d      	bhi.n	80034dc <UART_SetConfig+0x14c>
 8003480:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <UART_SetConfig+0xf8>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080034bd 	.word	0x080034bd
 800348c:	080034dd 	.word	0x080034dd
 8003490:	080034dd 	.word	0x080034dd
 8003494:	080034dd 	.word	0x080034dd
 8003498:	080034cd 	.word	0x080034cd
 800349c:	080034dd 	.word	0x080034dd
 80034a0:	080034dd 	.word	0x080034dd
 80034a4:	080034dd 	.word	0x080034dd
 80034a8:	080034c5 	.word	0x080034c5
 80034ac:	080034dd 	.word	0x080034dd
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	080034dd 	.word	0x080034dd
 80034b8:	080034d5 	.word	0x080034d5
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034c2:	e06d      	b.n	80035a0 <UART_SetConfig+0x210>
 80034c4:	2302      	movs	r3, #2
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034ca:	e069      	b.n	80035a0 <UART_SetConfig+0x210>
 80034cc:	2304      	movs	r3, #4
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034d2:	e065      	b.n	80035a0 <UART_SetConfig+0x210>
 80034d4:	2308      	movs	r3, #8
 80034d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034da:	e061      	b.n	80035a0 <UART_SetConfig+0x210>
 80034dc:	2310      	movs	r3, #16
 80034de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80034e2:	e05d      	b.n	80035a0 <UART_SetConfig+0x210>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a58      	ldr	r2, [pc, #352]	@ (800364c <UART_SetConfig+0x2bc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d125      	bne.n	800353a <UART_SetConfig+0x1aa>
 80034ee:	4b55      	ldr	r3, [pc, #340]	@ (8003644 <UART_SetConfig+0x2b4>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034f8:	2b30      	cmp	r3, #48	@ 0x30
 80034fa:	d016      	beq.n	800352a <UART_SetConfig+0x19a>
 80034fc:	2b30      	cmp	r3, #48	@ 0x30
 80034fe:	d818      	bhi.n	8003532 <UART_SetConfig+0x1a2>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d00a      	beq.n	800351a <UART_SetConfig+0x18a>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d814      	bhi.n	8003532 <UART_SetConfig+0x1a2>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <UART_SetConfig+0x182>
 800350c:	2b10      	cmp	r3, #16
 800350e:	d008      	beq.n	8003522 <UART_SetConfig+0x192>
 8003510:	e00f      	b.n	8003532 <UART_SetConfig+0x1a2>
 8003512:	2300      	movs	r3, #0
 8003514:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003518:	e042      	b.n	80035a0 <UART_SetConfig+0x210>
 800351a:	2302      	movs	r3, #2
 800351c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003520:	e03e      	b.n	80035a0 <UART_SetConfig+0x210>
 8003522:	2304      	movs	r3, #4
 8003524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003528:	e03a      	b.n	80035a0 <UART_SetConfig+0x210>
 800352a:	2308      	movs	r3, #8
 800352c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003530:	e036      	b.n	80035a0 <UART_SetConfig+0x210>
 8003532:	2310      	movs	r3, #16
 8003534:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003538:	e032      	b.n	80035a0 <UART_SetConfig+0x210>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a3f      	ldr	r2, [pc, #252]	@ (800363c <UART_SetConfig+0x2ac>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d12a      	bne.n	800359a <UART_SetConfig+0x20a>
 8003544:	4b3f      	ldr	r3, [pc, #252]	@ (8003644 <UART_SetConfig+0x2b4>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800354e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003552:	d01a      	beq.n	800358a <UART_SetConfig+0x1fa>
 8003554:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003558:	d81b      	bhi.n	8003592 <UART_SetConfig+0x202>
 800355a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800355e:	d00c      	beq.n	800357a <UART_SetConfig+0x1ea>
 8003560:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003564:	d815      	bhi.n	8003592 <UART_SetConfig+0x202>
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <UART_SetConfig+0x1e2>
 800356a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800356e:	d008      	beq.n	8003582 <UART_SetConfig+0x1f2>
 8003570:	e00f      	b.n	8003592 <UART_SetConfig+0x202>
 8003572:	2300      	movs	r3, #0
 8003574:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003578:	e012      	b.n	80035a0 <UART_SetConfig+0x210>
 800357a:	2302      	movs	r3, #2
 800357c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003580:	e00e      	b.n	80035a0 <UART_SetConfig+0x210>
 8003582:	2304      	movs	r3, #4
 8003584:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003588:	e00a      	b.n	80035a0 <UART_SetConfig+0x210>
 800358a:	2308      	movs	r3, #8
 800358c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003590:	e006      	b.n	80035a0 <UART_SetConfig+0x210>
 8003592:	2310      	movs	r3, #16
 8003594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003598:	e002      	b.n	80035a0 <UART_SetConfig+0x210>
 800359a:	2310      	movs	r3, #16
 800359c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a25      	ldr	r2, [pc, #148]	@ (800363c <UART_SetConfig+0x2ac>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	f040 808a 	bne.w	80036c0 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d824      	bhi.n	80035fe <UART_SetConfig+0x26e>
 80035b4:	a201      	add	r2, pc, #4	@ (adr r2, 80035bc <UART_SetConfig+0x22c>)
 80035b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ba:	bf00      	nop
 80035bc:	080035e1 	.word	0x080035e1
 80035c0:	080035ff 	.word	0x080035ff
 80035c4:	080035e9 	.word	0x080035e9
 80035c8:	080035ff 	.word	0x080035ff
 80035cc:	080035ef 	.word	0x080035ef
 80035d0:	080035ff 	.word	0x080035ff
 80035d4:	080035ff 	.word	0x080035ff
 80035d8:	080035ff 	.word	0x080035ff
 80035dc:	080035f7 	.word	0x080035f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035e0:	f7ff f984 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 80035e4:	61f8      	str	r0, [r7, #28]
        break;
 80035e6:	e010      	b.n	800360a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e8:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <UART_SetConfig+0x2c0>)
 80035ea:	61fb      	str	r3, [r7, #28]
        break;
 80035ec:	e00d      	b.n	800360a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035ee:	f7ff f8e5 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 80035f2:	61f8      	str	r0, [r7, #28]
        break;
 80035f4:	e009      	b.n	800360a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035fa:	61fb      	str	r3, [r7, #28]
        break;
 80035fc:	e005      	b.n	800360a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003608:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8109 	beq.w	8003824 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	4413      	add	r3, r2
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	429a      	cmp	r2, r3
 8003620:	d305      	bcc.n	800362e <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	429a      	cmp	r2, r3
 800362c:	d912      	bls.n	8003654 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003634:	e0f6      	b.n	8003824 <UART_SetConfig+0x494>
 8003636:	bf00      	nop
 8003638:	efff69f3 	.word	0xefff69f3
 800363c:	40008000 	.word	0x40008000
 8003640:	40013800 	.word	0x40013800
 8003644:	40021000 	.word	0x40021000
 8003648:	40004400 	.word	0x40004400
 800364c:	40004800 	.word	0x40004800
 8003650:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	2200      	movs	r2, #0
 8003658:	461c      	mov	r4, r3
 800365a:	4615      	mov	r5, r2
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	022b      	lsls	r3, r5, #8
 8003666:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800366a:	0222      	lsls	r2, r4, #8
 800366c:	68f9      	ldr	r1, [r7, #12]
 800366e:	6849      	ldr	r1, [r1, #4]
 8003670:	0849      	lsrs	r1, r1, #1
 8003672:	2000      	movs	r0, #0
 8003674:	4688      	mov	r8, r1
 8003676:	4681      	mov	r9, r0
 8003678:	eb12 0a08 	adds.w	sl, r2, r8
 800367c:	eb43 0b09 	adc.w	fp, r3, r9
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	607a      	str	r2, [r7, #4]
 800368a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800368e:	4650      	mov	r0, sl
 8003690:	4659      	mov	r1, fp
 8003692:	f7fc fdf5 	bl	8000280 <__aeabi_uldivmod>
 8003696:	4602      	mov	r2, r0
 8003698:	460b      	mov	r3, r1
 800369a:	4613      	mov	r3, r2
 800369c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80036a4:	d308      	bcc.n	80036b8 <UART_SetConfig+0x328>
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036ac:	d204      	bcs.n	80036b8 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	e0b5      	b.n	8003824 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80036be:	e0b1      	b.n	8003824 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036c8:	d15d      	bne.n	8003786 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80036ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80036ce:	2b08      	cmp	r3, #8
 80036d0:	d827      	bhi.n	8003722 <UART_SetConfig+0x392>
 80036d2:	a201      	add	r2, pc, #4	@ (adr r2, 80036d8 <UART_SetConfig+0x348>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	080036fd 	.word	0x080036fd
 80036dc:	08003705 	.word	0x08003705
 80036e0:	0800370d 	.word	0x0800370d
 80036e4:	08003723 	.word	0x08003723
 80036e8:	08003713 	.word	0x08003713
 80036ec:	08003723 	.word	0x08003723
 80036f0:	08003723 	.word	0x08003723
 80036f4:	08003723 	.word	0x08003723
 80036f8:	0800371b 	.word	0x0800371b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036fc:	f7ff f8f6 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 8003700:	61f8      	str	r0, [r7, #28]
        break;
 8003702:	e014      	b.n	800372e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003704:	f7ff f908 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 8003708:	61f8      	str	r0, [r7, #28]
        break;
 800370a:	e010      	b.n	800372e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800370c:	4b4c      	ldr	r3, [pc, #304]	@ (8003840 <UART_SetConfig+0x4b0>)
 800370e:	61fb      	str	r3, [r7, #28]
        break;
 8003710:	e00d      	b.n	800372e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003712:	f7ff f853 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 8003716:	61f8      	str	r0, [r7, #28]
        break;
 8003718:	e009      	b.n	800372e <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800371a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800371e:	61fb      	str	r3, [r7, #28]
        break;
 8003720:	e005      	b.n	800372e <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800372c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d077      	beq.n	8003824 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	005a      	lsls	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	085b      	lsrs	r3, r3, #1
 800373e:	441a      	add	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	fbb2 f3f3 	udiv	r3, r2, r3
 8003748:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	2b0f      	cmp	r3, #15
 800374e:	d916      	bls.n	800377e <UART_SetConfig+0x3ee>
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003756:	d212      	bcs.n	800377e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	b29b      	uxth	r3, r3
 800375c:	f023 030f 	bic.w	r3, r3, #15
 8003760:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	085b      	lsrs	r3, r3, #1
 8003766:	b29b      	uxth	r3, r3
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	b29a      	uxth	r2, r3
 800376e:	8afb      	ldrh	r3, [r7, #22]
 8003770:	4313      	orrs	r3, r2
 8003772:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	8afa      	ldrh	r2, [r7, #22]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	e052      	b.n	8003824 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003784:	e04e      	b.n	8003824 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003786:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800378a:	2b08      	cmp	r3, #8
 800378c:	d827      	bhi.n	80037de <UART_SetConfig+0x44e>
 800378e:	a201      	add	r2, pc, #4	@ (adr r2, 8003794 <UART_SetConfig+0x404>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037c1 	.word	0x080037c1
 800379c:	080037c9 	.word	0x080037c9
 80037a0:	080037df 	.word	0x080037df
 80037a4:	080037cf 	.word	0x080037cf
 80037a8:	080037df 	.word	0x080037df
 80037ac:	080037df 	.word	0x080037df
 80037b0:	080037df 	.word	0x080037df
 80037b4:	080037d7 	.word	0x080037d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b8:	f7ff f898 	bl	80028ec <HAL_RCC_GetPCLK1Freq>
 80037bc:	61f8      	str	r0, [r7, #28]
        break;
 80037be:	e014      	b.n	80037ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7ff f8aa 	bl	8002918 <HAL_RCC_GetPCLK2Freq>
 80037c4:	61f8      	str	r0, [r7, #28]
        break;
 80037c6:	e010      	b.n	80037ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c8:	4b1d      	ldr	r3, [pc, #116]	@ (8003840 <UART_SetConfig+0x4b0>)
 80037ca:	61fb      	str	r3, [r7, #28]
        break;
 80037cc:	e00d      	b.n	80037ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ce:	f7fe fff5 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 80037d2:	61f8      	str	r0, [r7, #28]
        break;
 80037d4:	e009      	b.n	80037ea <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037da:	61fb      	str	r3, [r7, #28]
        break;
 80037dc:	e005      	b.n	80037ea <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037e8:	bf00      	nop
    }

    if (pclk != 0U)
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d019      	beq.n	8003824 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	085a      	lsrs	r2, r3, #1
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	441a      	add	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	d909      	bls.n	800381e <UART_SetConfig+0x48e>
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003810:	d205      	bcs.n	800381e <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	e002      	b.n	8003824 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003830:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003834:	4618      	mov	r0, r3
 8003836:	3728      	adds	r7, #40	@ 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383e:	bf00      	nop
 8003840:	00f42400 	.word	0x00f42400

08003844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00a      	beq.n	80038b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00a      	beq.n	80038d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	f003 0310 	and.w	r3, r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00a      	beq.n	80038f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00a      	beq.n	8003918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d01a      	beq.n	800395a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003942:	d10a      	bne.n	800395a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00a      	beq.n	800397c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	605a      	str	r2, [r3, #4]
  }
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b098      	sub	sp, #96	@ 0x60
 800398c:	af02      	add	r7, sp, #8
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003998:	f7fd fbfe 	bl	8001198 <HAL_GetTick>
 800399c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b08      	cmp	r3, #8
 80039aa:	d12e      	bne.n	8003a0a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039b4:	2200      	movs	r2, #0
 80039b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f88c 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d021      	beq.n	8003a0a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ce:	e853 3f00 	ldrex	r3, [r3]
 80039d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039da:	653b      	str	r3, [r7, #80]	@ 0x50
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e6      	bne.n	80039c6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e062      	b.n	8003ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d149      	bne.n	8003aac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a18:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a20:	2200      	movs	r2, #0
 8003a22:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f856 	bl	8003ad8 <UART_WaitOnFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d03c      	beq.n	8003aac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	623b      	str	r3, [r7, #32]
   return(result);
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e6      	bne.n	8003a32 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a84:	61fa      	str	r2, [r7, #28]
 8003a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	69b9      	ldr	r1, [r7, #24]
 8003a8a:	69fa      	ldr	r2, [r7, #28]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	617b      	str	r3, [r7, #20]
   return(result);
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e011      	b.n	8003ad0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3758      	adds	r7, #88	@ 0x58
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ae8:	e04f      	b.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af0:	d04b      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af2:	f7fd fb51 	bl	8001198 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d302      	bcc.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e04e      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d037      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b80      	cmp	r3, #128	@ 0x80
 8003b1e:	d034      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b40      	cmp	r3, #64	@ 0x40
 8003b24:	d031      	beq.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b08      	cmp	r3, #8
 8003b32:	d110      	bne.n	8003b56 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2208      	movs	r2, #8
 8003b3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 f838 	bl	8003bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2208      	movs	r2, #8
 8003b46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e029      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b64:	d111      	bne.n	8003b8a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f81e 	bl	8003bb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e00f      	b.n	8003baa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	4013      	ands	r3, r2
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	bf0c      	ite	eq
 8003b9a:	2301      	moveq	r3, #1
 8003b9c:	2300      	movne	r3, #0
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	79fb      	ldrb	r3, [r7, #7]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d0a0      	beq.n	8003aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3710      	adds	r7, #16
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b095      	sub	sp, #84	@ 0x54
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bc2:	e853 3f00 	ldrex	r3, [r3]
 8003bc6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bda:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bdc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bde:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003be0:	e841 2300 	strex	r3, r2, [r1]
 8003be4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1e6      	bne.n	8003bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	3308      	adds	r3, #8
 8003c0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e5      	bne.n	8003bec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d118      	bne.n	8003c5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f023 0310 	bic.w	r3, r3, #16
 8003c3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6979      	ldr	r1, [r7, #20]
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	613b      	str	r3, [r7, #16]
   return(result);
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e6      	bne.n	8003c28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003c6e:	bf00      	nop
 8003c70:	3754      	adds	r7, #84	@ 0x54
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <_vsniprintf_r>:
 8003c7a:	b530      	push	{r4, r5, lr}
 8003c7c:	4614      	mov	r4, r2
 8003c7e:	2c00      	cmp	r4, #0
 8003c80:	b09b      	sub	sp, #108	@ 0x6c
 8003c82:	4605      	mov	r5, r0
 8003c84:	461a      	mov	r2, r3
 8003c86:	da05      	bge.n	8003c94 <_vsniprintf_r+0x1a>
 8003c88:	238b      	movs	r3, #139	@ 0x8b
 8003c8a:	6003      	str	r3, [r0, #0]
 8003c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c90:	b01b      	add	sp, #108	@ 0x6c
 8003c92:	bd30      	pop	{r4, r5, pc}
 8003c94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003c98:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	9319      	str	r3, [sp, #100]	@ 0x64
 8003ca2:	bf14      	ite	ne
 8003ca4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ca8:	4623      	moveq	r3, r4
 8003caa:	9302      	str	r3, [sp, #8]
 8003cac:	9305      	str	r3, [sp, #20]
 8003cae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cb2:	9100      	str	r1, [sp, #0]
 8003cb4:	9104      	str	r1, [sp, #16]
 8003cb6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003cba:	4669      	mov	r1, sp
 8003cbc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003cbe:	f000 f9a1 	bl	8004004 <_svfiprintf_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	bfbc      	itt	lt
 8003cc6:	238b      	movlt	r3, #139	@ 0x8b
 8003cc8:	602b      	strlt	r3, [r5, #0]
 8003cca:	2c00      	cmp	r4, #0
 8003ccc:	d0e0      	beq.n	8003c90 <_vsniprintf_r+0x16>
 8003cce:	9b00      	ldr	r3, [sp, #0]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	701a      	strb	r2, [r3, #0]
 8003cd4:	e7dc      	b.n	8003c90 <_vsniprintf_r+0x16>
	...

08003cd8 <vsniprintf>:
 8003cd8:	b507      	push	{r0, r1, r2, lr}
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	460a      	mov	r2, r1
 8003ce0:	4601      	mov	r1, r0
 8003ce2:	4803      	ldr	r0, [pc, #12]	@ (8003cf0 <vsniprintf+0x18>)
 8003ce4:	6800      	ldr	r0, [r0, #0]
 8003ce6:	f7ff ffc8 	bl	8003c7a <_vsniprintf_r>
 8003cea:	b003      	add	sp, #12
 8003cec:	f85d fb04 	ldr.w	pc, [sp], #4
 8003cf0:	2000000c 	.word	0x2000000c

08003cf4 <memset>:
 8003cf4:	4402      	add	r2, r0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d100      	bne.n	8003cfe <memset+0xa>
 8003cfc:	4770      	bx	lr
 8003cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003d02:	e7f9      	b.n	8003cf8 <memset+0x4>

08003d04 <__errno>:
 8003d04:	4b01      	ldr	r3, [pc, #4]	@ (8003d0c <__errno+0x8>)
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	2000000c 	.word	0x2000000c

08003d10 <__libc_init_array>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4d0d      	ldr	r5, [pc, #52]	@ (8003d48 <__libc_init_array+0x38>)
 8003d14:	4c0d      	ldr	r4, [pc, #52]	@ (8003d4c <__libc_init_array+0x3c>)
 8003d16:	1b64      	subs	r4, r4, r5
 8003d18:	10a4      	asrs	r4, r4, #2
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	42a6      	cmp	r6, r4
 8003d1e:	d109      	bne.n	8003d34 <__libc_init_array+0x24>
 8003d20:	4d0b      	ldr	r5, [pc, #44]	@ (8003d50 <__libc_init_array+0x40>)
 8003d22:	4c0c      	ldr	r4, [pc, #48]	@ (8003d54 <__libc_init_array+0x44>)
 8003d24:	f000 fc64 	bl	80045f0 <_init>
 8003d28:	1b64      	subs	r4, r4, r5
 8003d2a:	10a4      	asrs	r4, r4, #2
 8003d2c:	2600      	movs	r6, #0
 8003d2e:	42a6      	cmp	r6, r4
 8003d30:	d105      	bne.n	8003d3e <__libc_init_array+0x2e>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d38:	4798      	blx	r3
 8003d3a:	3601      	adds	r6, #1
 8003d3c:	e7ee      	b.n	8003d1c <__libc_init_array+0xc>
 8003d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d42:	4798      	blx	r3
 8003d44:	3601      	adds	r6, #1
 8003d46:	e7f2      	b.n	8003d2e <__libc_init_array+0x1e>
 8003d48:	08004694 	.word	0x08004694
 8003d4c:	08004694 	.word	0x08004694
 8003d50:	08004694 	.word	0x08004694
 8003d54:	08004698 	.word	0x08004698

08003d58 <__retarget_lock_acquire_recursive>:
 8003d58:	4770      	bx	lr

08003d5a <__retarget_lock_release_recursive>:
 8003d5a:	4770      	bx	lr

08003d5c <_free_r>:
 8003d5c:	b538      	push	{r3, r4, r5, lr}
 8003d5e:	4605      	mov	r5, r0
 8003d60:	2900      	cmp	r1, #0
 8003d62:	d041      	beq.n	8003de8 <_free_r+0x8c>
 8003d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d68:	1f0c      	subs	r4, r1, #4
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bfb8      	it	lt
 8003d6e:	18e4      	addlt	r4, r4, r3
 8003d70:	f000 f8e0 	bl	8003f34 <__malloc_lock>
 8003d74:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <_free_r+0x90>)
 8003d76:	6813      	ldr	r3, [r2, #0]
 8003d78:	b933      	cbnz	r3, 8003d88 <_free_r+0x2c>
 8003d7a:	6063      	str	r3, [r4, #4]
 8003d7c:	6014      	str	r4, [r2, #0]
 8003d7e:	4628      	mov	r0, r5
 8003d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d84:	f000 b8dc 	b.w	8003f40 <__malloc_unlock>
 8003d88:	42a3      	cmp	r3, r4
 8003d8a:	d908      	bls.n	8003d9e <_free_r+0x42>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	1821      	adds	r1, r4, r0
 8003d90:	428b      	cmp	r3, r1
 8003d92:	bf01      	itttt	eq
 8003d94:	6819      	ldreq	r1, [r3, #0]
 8003d96:	685b      	ldreq	r3, [r3, #4]
 8003d98:	1809      	addeq	r1, r1, r0
 8003d9a:	6021      	streq	r1, [r4, #0]
 8003d9c:	e7ed      	b.n	8003d7a <_free_r+0x1e>
 8003d9e:	461a      	mov	r2, r3
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	b10b      	cbz	r3, 8003da8 <_free_r+0x4c>
 8003da4:	42a3      	cmp	r3, r4
 8003da6:	d9fa      	bls.n	8003d9e <_free_r+0x42>
 8003da8:	6811      	ldr	r1, [r2, #0]
 8003daa:	1850      	adds	r0, r2, r1
 8003dac:	42a0      	cmp	r0, r4
 8003dae:	d10b      	bne.n	8003dc8 <_free_r+0x6c>
 8003db0:	6820      	ldr	r0, [r4, #0]
 8003db2:	4401      	add	r1, r0
 8003db4:	1850      	adds	r0, r2, r1
 8003db6:	4283      	cmp	r3, r0
 8003db8:	6011      	str	r1, [r2, #0]
 8003dba:	d1e0      	bne.n	8003d7e <_free_r+0x22>
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	6053      	str	r3, [r2, #4]
 8003dc2:	4408      	add	r0, r1
 8003dc4:	6010      	str	r0, [r2, #0]
 8003dc6:	e7da      	b.n	8003d7e <_free_r+0x22>
 8003dc8:	d902      	bls.n	8003dd0 <_free_r+0x74>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	602b      	str	r3, [r5, #0]
 8003dce:	e7d6      	b.n	8003d7e <_free_r+0x22>
 8003dd0:	6820      	ldr	r0, [r4, #0]
 8003dd2:	1821      	adds	r1, r4, r0
 8003dd4:	428b      	cmp	r3, r1
 8003dd6:	bf04      	itt	eq
 8003dd8:	6819      	ldreq	r1, [r3, #0]
 8003dda:	685b      	ldreq	r3, [r3, #4]
 8003ddc:	6063      	str	r3, [r4, #4]
 8003dde:	bf04      	itt	eq
 8003de0:	1809      	addeq	r1, r1, r0
 8003de2:	6021      	streq	r1, [r4, #0]
 8003de4:	6054      	str	r4, [r2, #4]
 8003de6:	e7ca      	b.n	8003d7e <_free_r+0x22>
 8003de8:	bd38      	pop	{r3, r4, r5, pc}
 8003dea:	bf00      	nop
 8003dec:	20000418 	.word	0x20000418

08003df0 <sbrk_aligned>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4e0f      	ldr	r6, [pc, #60]	@ (8003e30 <sbrk_aligned+0x40>)
 8003df4:	460c      	mov	r4, r1
 8003df6:	6831      	ldr	r1, [r6, #0]
 8003df8:	4605      	mov	r5, r0
 8003dfa:	b911      	cbnz	r1, 8003e02 <sbrk_aligned+0x12>
 8003dfc:	f000 fba4 	bl	8004548 <_sbrk_r>
 8003e00:	6030      	str	r0, [r6, #0]
 8003e02:	4621      	mov	r1, r4
 8003e04:	4628      	mov	r0, r5
 8003e06:	f000 fb9f 	bl	8004548 <_sbrk_r>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	d103      	bne.n	8003e16 <sbrk_aligned+0x26>
 8003e0e:	f04f 34ff 	mov.w	r4, #4294967295
 8003e12:	4620      	mov	r0, r4
 8003e14:	bd70      	pop	{r4, r5, r6, pc}
 8003e16:	1cc4      	adds	r4, r0, #3
 8003e18:	f024 0403 	bic.w	r4, r4, #3
 8003e1c:	42a0      	cmp	r0, r4
 8003e1e:	d0f8      	beq.n	8003e12 <sbrk_aligned+0x22>
 8003e20:	1a21      	subs	r1, r4, r0
 8003e22:	4628      	mov	r0, r5
 8003e24:	f000 fb90 	bl	8004548 <_sbrk_r>
 8003e28:	3001      	adds	r0, #1
 8003e2a:	d1f2      	bne.n	8003e12 <sbrk_aligned+0x22>
 8003e2c:	e7ef      	b.n	8003e0e <sbrk_aligned+0x1e>
 8003e2e:	bf00      	nop
 8003e30:	20000414 	.word	0x20000414

08003e34 <_malloc_r>:
 8003e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e38:	1ccd      	adds	r5, r1, #3
 8003e3a:	f025 0503 	bic.w	r5, r5, #3
 8003e3e:	3508      	adds	r5, #8
 8003e40:	2d0c      	cmp	r5, #12
 8003e42:	bf38      	it	cc
 8003e44:	250c      	movcc	r5, #12
 8003e46:	2d00      	cmp	r5, #0
 8003e48:	4606      	mov	r6, r0
 8003e4a:	db01      	blt.n	8003e50 <_malloc_r+0x1c>
 8003e4c:	42a9      	cmp	r1, r5
 8003e4e:	d904      	bls.n	8003e5a <_malloc_r+0x26>
 8003e50:	230c      	movs	r3, #12
 8003e52:	6033      	str	r3, [r6, #0]
 8003e54:	2000      	movs	r0, #0
 8003e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003f30 <_malloc_r+0xfc>
 8003e5e:	f000 f869 	bl	8003f34 <__malloc_lock>
 8003e62:	f8d8 3000 	ldr.w	r3, [r8]
 8003e66:	461c      	mov	r4, r3
 8003e68:	bb44      	cbnz	r4, 8003ebc <_malloc_r+0x88>
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	f7ff ffbf 	bl	8003df0 <sbrk_aligned>
 8003e72:	1c43      	adds	r3, r0, #1
 8003e74:	4604      	mov	r4, r0
 8003e76:	d158      	bne.n	8003f2a <_malloc_r+0xf6>
 8003e78:	f8d8 4000 	ldr.w	r4, [r8]
 8003e7c:	4627      	mov	r7, r4
 8003e7e:	2f00      	cmp	r7, #0
 8003e80:	d143      	bne.n	8003f0a <_malloc_r+0xd6>
 8003e82:	2c00      	cmp	r4, #0
 8003e84:	d04b      	beq.n	8003f1e <_malloc_r+0xea>
 8003e86:	6823      	ldr	r3, [r4, #0]
 8003e88:	4639      	mov	r1, r7
 8003e8a:	4630      	mov	r0, r6
 8003e8c:	eb04 0903 	add.w	r9, r4, r3
 8003e90:	f000 fb5a 	bl	8004548 <_sbrk_r>
 8003e94:	4581      	cmp	r9, r0
 8003e96:	d142      	bne.n	8003f1e <_malloc_r+0xea>
 8003e98:	6821      	ldr	r1, [r4, #0]
 8003e9a:	1a6d      	subs	r5, r5, r1
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f7ff ffa6 	bl	8003df0 <sbrk_aligned>
 8003ea4:	3001      	adds	r0, #1
 8003ea6:	d03a      	beq.n	8003f1e <_malloc_r+0xea>
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	442b      	add	r3, r5
 8003eac:	6023      	str	r3, [r4, #0]
 8003eae:	f8d8 3000 	ldr.w	r3, [r8]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	bb62      	cbnz	r2, 8003f10 <_malloc_r+0xdc>
 8003eb6:	f8c8 7000 	str.w	r7, [r8]
 8003eba:	e00f      	b.n	8003edc <_malloc_r+0xa8>
 8003ebc:	6822      	ldr	r2, [r4, #0]
 8003ebe:	1b52      	subs	r2, r2, r5
 8003ec0:	d420      	bmi.n	8003f04 <_malloc_r+0xd0>
 8003ec2:	2a0b      	cmp	r2, #11
 8003ec4:	d917      	bls.n	8003ef6 <_malloc_r+0xc2>
 8003ec6:	1961      	adds	r1, r4, r5
 8003ec8:	42a3      	cmp	r3, r4
 8003eca:	6025      	str	r5, [r4, #0]
 8003ecc:	bf18      	it	ne
 8003ece:	6059      	strne	r1, [r3, #4]
 8003ed0:	6863      	ldr	r3, [r4, #4]
 8003ed2:	bf08      	it	eq
 8003ed4:	f8c8 1000 	streq.w	r1, [r8]
 8003ed8:	5162      	str	r2, [r4, r5]
 8003eda:	604b      	str	r3, [r1, #4]
 8003edc:	4630      	mov	r0, r6
 8003ede:	f000 f82f 	bl	8003f40 <__malloc_unlock>
 8003ee2:	f104 000b 	add.w	r0, r4, #11
 8003ee6:	1d23      	adds	r3, r4, #4
 8003ee8:	f020 0007 	bic.w	r0, r0, #7
 8003eec:	1ac2      	subs	r2, r0, r3
 8003eee:	bf1c      	itt	ne
 8003ef0:	1a1b      	subne	r3, r3, r0
 8003ef2:	50a3      	strne	r3, [r4, r2]
 8003ef4:	e7af      	b.n	8003e56 <_malloc_r+0x22>
 8003ef6:	6862      	ldr	r2, [r4, #4]
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	bf0c      	ite	eq
 8003efc:	f8c8 2000 	streq.w	r2, [r8]
 8003f00:	605a      	strne	r2, [r3, #4]
 8003f02:	e7eb      	b.n	8003edc <_malloc_r+0xa8>
 8003f04:	4623      	mov	r3, r4
 8003f06:	6864      	ldr	r4, [r4, #4]
 8003f08:	e7ae      	b.n	8003e68 <_malloc_r+0x34>
 8003f0a:	463c      	mov	r4, r7
 8003f0c:	687f      	ldr	r7, [r7, #4]
 8003f0e:	e7b6      	b.n	8003e7e <_malloc_r+0x4a>
 8003f10:	461a      	mov	r2, r3
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	42a3      	cmp	r3, r4
 8003f16:	d1fb      	bne.n	8003f10 <_malloc_r+0xdc>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	6053      	str	r3, [r2, #4]
 8003f1c:	e7de      	b.n	8003edc <_malloc_r+0xa8>
 8003f1e:	230c      	movs	r3, #12
 8003f20:	6033      	str	r3, [r6, #0]
 8003f22:	4630      	mov	r0, r6
 8003f24:	f000 f80c 	bl	8003f40 <__malloc_unlock>
 8003f28:	e794      	b.n	8003e54 <_malloc_r+0x20>
 8003f2a:	6005      	str	r5, [r0, #0]
 8003f2c:	e7d6      	b.n	8003edc <_malloc_r+0xa8>
 8003f2e:	bf00      	nop
 8003f30:	20000418 	.word	0x20000418

08003f34 <__malloc_lock>:
 8003f34:	4801      	ldr	r0, [pc, #4]	@ (8003f3c <__malloc_lock+0x8>)
 8003f36:	f7ff bf0f 	b.w	8003d58 <__retarget_lock_acquire_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	20000410 	.word	0x20000410

08003f40 <__malloc_unlock>:
 8003f40:	4801      	ldr	r0, [pc, #4]	@ (8003f48 <__malloc_unlock+0x8>)
 8003f42:	f7ff bf0a 	b.w	8003d5a <__retarget_lock_release_recursive>
 8003f46:	bf00      	nop
 8003f48:	20000410 	.word	0x20000410

08003f4c <__ssputs_r>:
 8003f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f50:	688e      	ldr	r6, [r1, #8]
 8003f52:	461f      	mov	r7, r3
 8003f54:	42be      	cmp	r6, r7
 8003f56:	680b      	ldr	r3, [r1, #0]
 8003f58:	4682      	mov	sl, r0
 8003f5a:	460c      	mov	r4, r1
 8003f5c:	4690      	mov	r8, r2
 8003f5e:	d82d      	bhi.n	8003fbc <__ssputs_r+0x70>
 8003f60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f68:	d026      	beq.n	8003fb8 <__ssputs_r+0x6c>
 8003f6a:	6965      	ldr	r5, [r4, #20]
 8003f6c:	6909      	ldr	r1, [r1, #16]
 8003f6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f72:	eba3 0901 	sub.w	r9, r3, r1
 8003f76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f7a:	1c7b      	adds	r3, r7, #1
 8003f7c:	444b      	add	r3, r9
 8003f7e:	106d      	asrs	r5, r5, #1
 8003f80:	429d      	cmp	r5, r3
 8003f82:	bf38      	it	cc
 8003f84:	461d      	movcc	r5, r3
 8003f86:	0553      	lsls	r3, r2, #21
 8003f88:	d527      	bpl.n	8003fda <__ssputs_r+0x8e>
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	f7ff ff52 	bl	8003e34 <_malloc_r>
 8003f90:	4606      	mov	r6, r0
 8003f92:	b360      	cbz	r0, 8003fee <__ssputs_r+0xa2>
 8003f94:	6921      	ldr	r1, [r4, #16]
 8003f96:	464a      	mov	r2, r9
 8003f98:	f000 fae6 	bl	8004568 <memcpy>
 8003f9c:	89a3      	ldrh	r3, [r4, #12]
 8003f9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	6126      	str	r6, [r4, #16]
 8003faa:	6165      	str	r5, [r4, #20]
 8003fac:	444e      	add	r6, r9
 8003fae:	eba5 0509 	sub.w	r5, r5, r9
 8003fb2:	6026      	str	r6, [r4, #0]
 8003fb4:	60a5      	str	r5, [r4, #8]
 8003fb6:	463e      	mov	r6, r7
 8003fb8:	42be      	cmp	r6, r7
 8003fba:	d900      	bls.n	8003fbe <__ssputs_r+0x72>
 8003fbc:	463e      	mov	r6, r7
 8003fbe:	6820      	ldr	r0, [r4, #0]
 8003fc0:	4632      	mov	r2, r6
 8003fc2:	4641      	mov	r1, r8
 8003fc4:	f000 faa6 	bl	8004514 <memmove>
 8003fc8:	68a3      	ldr	r3, [r4, #8]
 8003fca:	1b9b      	subs	r3, r3, r6
 8003fcc:	60a3      	str	r3, [r4, #8]
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	4433      	add	r3, r6
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fda:	462a      	mov	r2, r5
 8003fdc:	f000 fad2 	bl	8004584 <_realloc_r>
 8003fe0:	4606      	mov	r6, r0
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d1e0      	bne.n	8003fa8 <__ssputs_r+0x5c>
 8003fe6:	6921      	ldr	r1, [r4, #16]
 8003fe8:	4650      	mov	r0, sl
 8003fea:	f7ff feb7 	bl	8003d5c <_free_r>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	f8ca 3000 	str.w	r3, [sl]
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	e7e9      	b.n	8003fd6 <__ssputs_r+0x8a>
	...

08004004 <_svfiprintf_r>:
 8004004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004008:	4698      	mov	r8, r3
 800400a:	898b      	ldrh	r3, [r1, #12]
 800400c:	061b      	lsls	r3, r3, #24
 800400e:	b09d      	sub	sp, #116	@ 0x74
 8004010:	4607      	mov	r7, r0
 8004012:	460d      	mov	r5, r1
 8004014:	4614      	mov	r4, r2
 8004016:	d510      	bpl.n	800403a <_svfiprintf_r+0x36>
 8004018:	690b      	ldr	r3, [r1, #16]
 800401a:	b973      	cbnz	r3, 800403a <_svfiprintf_r+0x36>
 800401c:	2140      	movs	r1, #64	@ 0x40
 800401e:	f7ff ff09 	bl	8003e34 <_malloc_r>
 8004022:	6028      	str	r0, [r5, #0]
 8004024:	6128      	str	r0, [r5, #16]
 8004026:	b930      	cbnz	r0, 8004036 <_svfiprintf_r+0x32>
 8004028:	230c      	movs	r3, #12
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	f04f 30ff 	mov.w	r0, #4294967295
 8004030:	b01d      	add	sp, #116	@ 0x74
 8004032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004036:	2340      	movs	r3, #64	@ 0x40
 8004038:	616b      	str	r3, [r5, #20]
 800403a:	2300      	movs	r3, #0
 800403c:	9309      	str	r3, [sp, #36]	@ 0x24
 800403e:	2320      	movs	r3, #32
 8004040:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004044:	f8cd 800c 	str.w	r8, [sp, #12]
 8004048:	2330      	movs	r3, #48	@ 0x30
 800404a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041e8 <_svfiprintf_r+0x1e4>
 800404e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004052:	f04f 0901 	mov.w	r9, #1
 8004056:	4623      	mov	r3, r4
 8004058:	469a      	mov	sl, r3
 800405a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800405e:	b10a      	cbz	r2, 8004064 <_svfiprintf_r+0x60>
 8004060:	2a25      	cmp	r2, #37	@ 0x25
 8004062:	d1f9      	bne.n	8004058 <_svfiprintf_r+0x54>
 8004064:	ebba 0b04 	subs.w	fp, sl, r4
 8004068:	d00b      	beq.n	8004082 <_svfiprintf_r+0x7e>
 800406a:	465b      	mov	r3, fp
 800406c:	4622      	mov	r2, r4
 800406e:	4629      	mov	r1, r5
 8004070:	4638      	mov	r0, r7
 8004072:	f7ff ff6b 	bl	8003f4c <__ssputs_r>
 8004076:	3001      	adds	r0, #1
 8004078:	f000 80a7 	beq.w	80041ca <_svfiprintf_r+0x1c6>
 800407c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800407e:	445a      	add	r2, fp
 8004080:	9209      	str	r2, [sp, #36]	@ 0x24
 8004082:	f89a 3000 	ldrb.w	r3, [sl]
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 809f 	beq.w	80041ca <_svfiprintf_r+0x1c6>
 800408c:	2300      	movs	r3, #0
 800408e:	f04f 32ff 	mov.w	r2, #4294967295
 8004092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004096:	f10a 0a01 	add.w	sl, sl, #1
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	9307      	str	r3, [sp, #28]
 800409e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80040a2:	931a      	str	r3, [sp, #104]	@ 0x68
 80040a4:	4654      	mov	r4, sl
 80040a6:	2205      	movs	r2, #5
 80040a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040ac:	484e      	ldr	r0, [pc, #312]	@ (80041e8 <_svfiprintf_r+0x1e4>)
 80040ae:	f7fc f897 	bl	80001e0 <memchr>
 80040b2:	9a04      	ldr	r2, [sp, #16]
 80040b4:	b9d8      	cbnz	r0, 80040ee <_svfiprintf_r+0xea>
 80040b6:	06d0      	lsls	r0, r2, #27
 80040b8:	bf44      	itt	mi
 80040ba:	2320      	movmi	r3, #32
 80040bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040c0:	0711      	lsls	r1, r2, #28
 80040c2:	bf44      	itt	mi
 80040c4:	232b      	movmi	r3, #43	@ 0x2b
 80040c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040ca:	f89a 3000 	ldrb.w	r3, [sl]
 80040ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80040d0:	d015      	beq.n	80040fe <_svfiprintf_r+0xfa>
 80040d2:	9a07      	ldr	r2, [sp, #28]
 80040d4:	4654      	mov	r4, sl
 80040d6:	2000      	movs	r0, #0
 80040d8:	f04f 0c0a 	mov.w	ip, #10
 80040dc:	4621      	mov	r1, r4
 80040de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e2:	3b30      	subs	r3, #48	@ 0x30
 80040e4:	2b09      	cmp	r3, #9
 80040e6:	d94b      	bls.n	8004180 <_svfiprintf_r+0x17c>
 80040e8:	b1b0      	cbz	r0, 8004118 <_svfiprintf_r+0x114>
 80040ea:	9207      	str	r2, [sp, #28]
 80040ec:	e014      	b.n	8004118 <_svfiprintf_r+0x114>
 80040ee:	eba0 0308 	sub.w	r3, r0, r8
 80040f2:	fa09 f303 	lsl.w	r3, r9, r3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	9304      	str	r3, [sp, #16]
 80040fa:	46a2      	mov	sl, r4
 80040fc:	e7d2      	b.n	80040a4 <_svfiprintf_r+0xa0>
 80040fe:	9b03      	ldr	r3, [sp, #12]
 8004100:	1d19      	adds	r1, r3, #4
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	9103      	str	r1, [sp, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	bfbb      	ittet	lt
 800410a:	425b      	neglt	r3, r3
 800410c:	f042 0202 	orrlt.w	r2, r2, #2
 8004110:	9307      	strge	r3, [sp, #28]
 8004112:	9307      	strlt	r3, [sp, #28]
 8004114:	bfb8      	it	lt
 8004116:	9204      	strlt	r2, [sp, #16]
 8004118:	7823      	ldrb	r3, [r4, #0]
 800411a:	2b2e      	cmp	r3, #46	@ 0x2e
 800411c:	d10a      	bne.n	8004134 <_svfiprintf_r+0x130>
 800411e:	7863      	ldrb	r3, [r4, #1]
 8004120:	2b2a      	cmp	r3, #42	@ 0x2a
 8004122:	d132      	bne.n	800418a <_svfiprintf_r+0x186>
 8004124:	9b03      	ldr	r3, [sp, #12]
 8004126:	1d1a      	adds	r2, r3, #4
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	9203      	str	r2, [sp, #12]
 800412c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004130:	3402      	adds	r4, #2
 8004132:	9305      	str	r3, [sp, #20]
 8004134:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041f8 <_svfiprintf_r+0x1f4>
 8004138:	7821      	ldrb	r1, [r4, #0]
 800413a:	2203      	movs	r2, #3
 800413c:	4650      	mov	r0, sl
 800413e:	f7fc f84f 	bl	80001e0 <memchr>
 8004142:	b138      	cbz	r0, 8004154 <_svfiprintf_r+0x150>
 8004144:	9b04      	ldr	r3, [sp, #16]
 8004146:	eba0 000a 	sub.w	r0, r0, sl
 800414a:	2240      	movs	r2, #64	@ 0x40
 800414c:	4082      	lsls	r2, r0
 800414e:	4313      	orrs	r3, r2
 8004150:	3401      	adds	r4, #1
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004158:	4824      	ldr	r0, [pc, #144]	@ (80041ec <_svfiprintf_r+0x1e8>)
 800415a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800415e:	2206      	movs	r2, #6
 8004160:	f7fc f83e 	bl	80001e0 <memchr>
 8004164:	2800      	cmp	r0, #0
 8004166:	d036      	beq.n	80041d6 <_svfiprintf_r+0x1d2>
 8004168:	4b21      	ldr	r3, [pc, #132]	@ (80041f0 <_svfiprintf_r+0x1ec>)
 800416a:	bb1b      	cbnz	r3, 80041b4 <_svfiprintf_r+0x1b0>
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	3307      	adds	r3, #7
 8004170:	f023 0307 	bic.w	r3, r3, #7
 8004174:	3308      	adds	r3, #8
 8004176:	9303      	str	r3, [sp, #12]
 8004178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800417a:	4433      	add	r3, r6
 800417c:	9309      	str	r3, [sp, #36]	@ 0x24
 800417e:	e76a      	b.n	8004056 <_svfiprintf_r+0x52>
 8004180:	fb0c 3202 	mla	r2, ip, r2, r3
 8004184:	460c      	mov	r4, r1
 8004186:	2001      	movs	r0, #1
 8004188:	e7a8      	b.n	80040dc <_svfiprintf_r+0xd8>
 800418a:	2300      	movs	r3, #0
 800418c:	3401      	adds	r4, #1
 800418e:	9305      	str	r3, [sp, #20]
 8004190:	4619      	mov	r1, r3
 8004192:	f04f 0c0a 	mov.w	ip, #10
 8004196:	4620      	mov	r0, r4
 8004198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800419c:	3a30      	subs	r2, #48	@ 0x30
 800419e:	2a09      	cmp	r2, #9
 80041a0:	d903      	bls.n	80041aa <_svfiprintf_r+0x1a6>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0c6      	beq.n	8004134 <_svfiprintf_r+0x130>
 80041a6:	9105      	str	r1, [sp, #20]
 80041a8:	e7c4      	b.n	8004134 <_svfiprintf_r+0x130>
 80041aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ae:	4604      	mov	r4, r0
 80041b0:	2301      	movs	r3, #1
 80041b2:	e7f0      	b.n	8004196 <_svfiprintf_r+0x192>
 80041b4:	ab03      	add	r3, sp, #12
 80041b6:	9300      	str	r3, [sp, #0]
 80041b8:	462a      	mov	r2, r5
 80041ba:	4b0e      	ldr	r3, [pc, #56]	@ (80041f4 <_svfiprintf_r+0x1f0>)
 80041bc:	a904      	add	r1, sp, #16
 80041be:	4638      	mov	r0, r7
 80041c0:	f3af 8000 	nop.w
 80041c4:	1c42      	adds	r2, r0, #1
 80041c6:	4606      	mov	r6, r0
 80041c8:	d1d6      	bne.n	8004178 <_svfiprintf_r+0x174>
 80041ca:	89ab      	ldrh	r3, [r5, #12]
 80041cc:	065b      	lsls	r3, r3, #25
 80041ce:	f53f af2d 	bmi.w	800402c <_svfiprintf_r+0x28>
 80041d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041d4:	e72c      	b.n	8004030 <_svfiprintf_r+0x2c>
 80041d6:	ab03      	add	r3, sp, #12
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	462a      	mov	r2, r5
 80041dc:	4b05      	ldr	r3, [pc, #20]	@ (80041f4 <_svfiprintf_r+0x1f0>)
 80041de:	a904      	add	r1, sp, #16
 80041e0:	4638      	mov	r0, r7
 80041e2:	f000 f879 	bl	80042d8 <_printf_i>
 80041e6:	e7ed      	b.n	80041c4 <_svfiprintf_r+0x1c0>
 80041e8:	08004658 	.word	0x08004658
 80041ec:	08004662 	.word	0x08004662
 80041f0:	00000000 	.word	0x00000000
 80041f4:	08003f4d 	.word	0x08003f4d
 80041f8:	0800465e 	.word	0x0800465e

080041fc <_printf_common>:
 80041fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	4616      	mov	r6, r2
 8004202:	4698      	mov	r8, r3
 8004204:	688a      	ldr	r2, [r1, #8]
 8004206:	690b      	ldr	r3, [r1, #16]
 8004208:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800420c:	4293      	cmp	r3, r2
 800420e:	bfb8      	it	lt
 8004210:	4613      	movlt	r3, r2
 8004212:	6033      	str	r3, [r6, #0]
 8004214:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004218:	4607      	mov	r7, r0
 800421a:	460c      	mov	r4, r1
 800421c:	b10a      	cbz	r2, 8004222 <_printf_common+0x26>
 800421e:	3301      	adds	r3, #1
 8004220:	6033      	str	r3, [r6, #0]
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	0699      	lsls	r1, r3, #26
 8004226:	bf42      	ittt	mi
 8004228:	6833      	ldrmi	r3, [r6, #0]
 800422a:	3302      	addmi	r3, #2
 800422c:	6033      	strmi	r3, [r6, #0]
 800422e:	6825      	ldr	r5, [r4, #0]
 8004230:	f015 0506 	ands.w	r5, r5, #6
 8004234:	d106      	bne.n	8004244 <_printf_common+0x48>
 8004236:	f104 0a19 	add.w	sl, r4, #25
 800423a:	68e3      	ldr	r3, [r4, #12]
 800423c:	6832      	ldr	r2, [r6, #0]
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	42ab      	cmp	r3, r5
 8004242:	dc26      	bgt.n	8004292 <_printf_common+0x96>
 8004244:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004248:	6822      	ldr	r2, [r4, #0]
 800424a:	3b00      	subs	r3, #0
 800424c:	bf18      	it	ne
 800424e:	2301      	movne	r3, #1
 8004250:	0692      	lsls	r2, r2, #26
 8004252:	d42b      	bmi.n	80042ac <_printf_common+0xb0>
 8004254:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004258:	4641      	mov	r1, r8
 800425a:	4638      	mov	r0, r7
 800425c:	47c8      	blx	r9
 800425e:	3001      	adds	r0, #1
 8004260:	d01e      	beq.n	80042a0 <_printf_common+0xa4>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	6922      	ldr	r2, [r4, #16]
 8004266:	f003 0306 	and.w	r3, r3, #6
 800426a:	2b04      	cmp	r3, #4
 800426c:	bf02      	ittt	eq
 800426e:	68e5      	ldreq	r5, [r4, #12]
 8004270:	6833      	ldreq	r3, [r6, #0]
 8004272:	1aed      	subeq	r5, r5, r3
 8004274:	68a3      	ldr	r3, [r4, #8]
 8004276:	bf0c      	ite	eq
 8004278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800427c:	2500      	movne	r5, #0
 800427e:	4293      	cmp	r3, r2
 8004280:	bfc4      	itt	gt
 8004282:	1a9b      	subgt	r3, r3, r2
 8004284:	18ed      	addgt	r5, r5, r3
 8004286:	2600      	movs	r6, #0
 8004288:	341a      	adds	r4, #26
 800428a:	42b5      	cmp	r5, r6
 800428c:	d11a      	bne.n	80042c4 <_printf_common+0xc8>
 800428e:	2000      	movs	r0, #0
 8004290:	e008      	b.n	80042a4 <_printf_common+0xa8>
 8004292:	2301      	movs	r3, #1
 8004294:	4652      	mov	r2, sl
 8004296:	4641      	mov	r1, r8
 8004298:	4638      	mov	r0, r7
 800429a:	47c8      	blx	r9
 800429c:	3001      	adds	r0, #1
 800429e:	d103      	bne.n	80042a8 <_printf_common+0xac>
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
 80042a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a8:	3501      	adds	r5, #1
 80042aa:	e7c6      	b.n	800423a <_printf_common+0x3e>
 80042ac:	18e1      	adds	r1, r4, r3
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	2030      	movs	r0, #48	@ 0x30
 80042b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042b6:	4422      	add	r2, r4
 80042b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042c0:	3302      	adds	r3, #2
 80042c2:	e7c7      	b.n	8004254 <_printf_common+0x58>
 80042c4:	2301      	movs	r3, #1
 80042c6:	4622      	mov	r2, r4
 80042c8:	4641      	mov	r1, r8
 80042ca:	4638      	mov	r0, r7
 80042cc:	47c8      	blx	r9
 80042ce:	3001      	adds	r0, #1
 80042d0:	d0e6      	beq.n	80042a0 <_printf_common+0xa4>
 80042d2:	3601      	adds	r6, #1
 80042d4:	e7d9      	b.n	800428a <_printf_common+0x8e>
	...

080042d8 <_printf_i>:
 80042d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042dc:	7e0f      	ldrb	r7, [r1, #24]
 80042de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042e0:	2f78      	cmp	r7, #120	@ 0x78
 80042e2:	4691      	mov	r9, r2
 80042e4:	4680      	mov	r8, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	469a      	mov	sl, r3
 80042ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042ee:	d807      	bhi.n	8004300 <_printf_i+0x28>
 80042f0:	2f62      	cmp	r7, #98	@ 0x62
 80042f2:	d80a      	bhi.n	800430a <_printf_i+0x32>
 80042f4:	2f00      	cmp	r7, #0
 80042f6:	f000 80d1 	beq.w	800449c <_printf_i+0x1c4>
 80042fa:	2f58      	cmp	r7, #88	@ 0x58
 80042fc:	f000 80b8 	beq.w	8004470 <_printf_i+0x198>
 8004300:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004304:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004308:	e03a      	b.n	8004380 <_printf_i+0xa8>
 800430a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800430e:	2b15      	cmp	r3, #21
 8004310:	d8f6      	bhi.n	8004300 <_printf_i+0x28>
 8004312:	a101      	add	r1, pc, #4	@ (adr r1, 8004318 <_printf_i+0x40>)
 8004314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004318:	08004371 	.word	0x08004371
 800431c:	08004385 	.word	0x08004385
 8004320:	08004301 	.word	0x08004301
 8004324:	08004301 	.word	0x08004301
 8004328:	08004301 	.word	0x08004301
 800432c:	08004301 	.word	0x08004301
 8004330:	08004385 	.word	0x08004385
 8004334:	08004301 	.word	0x08004301
 8004338:	08004301 	.word	0x08004301
 800433c:	08004301 	.word	0x08004301
 8004340:	08004301 	.word	0x08004301
 8004344:	08004483 	.word	0x08004483
 8004348:	080043af 	.word	0x080043af
 800434c:	0800443d 	.word	0x0800443d
 8004350:	08004301 	.word	0x08004301
 8004354:	08004301 	.word	0x08004301
 8004358:	080044a5 	.word	0x080044a5
 800435c:	08004301 	.word	0x08004301
 8004360:	080043af 	.word	0x080043af
 8004364:	08004301 	.word	0x08004301
 8004368:	08004301 	.word	0x08004301
 800436c:	08004445 	.word	0x08004445
 8004370:	6833      	ldr	r3, [r6, #0]
 8004372:	1d1a      	adds	r2, r3, #4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6032      	str	r2, [r6, #0]
 8004378:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800437c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004380:	2301      	movs	r3, #1
 8004382:	e09c      	b.n	80044be <_printf_i+0x1e6>
 8004384:	6833      	ldr	r3, [r6, #0]
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	1d19      	adds	r1, r3, #4
 800438a:	6031      	str	r1, [r6, #0]
 800438c:	0606      	lsls	r6, r0, #24
 800438e:	d501      	bpl.n	8004394 <_printf_i+0xbc>
 8004390:	681d      	ldr	r5, [r3, #0]
 8004392:	e003      	b.n	800439c <_printf_i+0xc4>
 8004394:	0645      	lsls	r5, r0, #25
 8004396:	d5fb      	bpl.n	8004390 <_printf_i+0xb8>
 8004398:	f9b3 5000 	ldrsh.w	r5, [r3]
 800439c:	2d00      	cmp	r5, #0
 800439e:	da03      	bge.n	80043a8 <_printf_i+0xd0>
 80043a0:	232d      	movs	r3, #45	@ 0x2d
 80043a2:	426d      	negs	r5, r5
 80043a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043a8:	4858      	ldr	r0, [pc, #352]	@ (800450c <_printf_i+0x234>)
 80043aa:	230a      	movs	r3, #10
 80043ac:	e011      	b.n	80043d2 <_printf_i+0xfa>
 80043ae:	6821      	ldr	r1, [r4, #0]
 80043b0:	6833      	ldr	r3, [r6, #0]
 80043b2:	0608      	lsls	r0, r1, #24
 80043b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80043b8:	d402      	bmi.n	80043c0 <_printf_i+0xe8>
 80043ba:	0649      	lsls	r1, r1, #25
 80043bc:	bf48      	it	mi
 80043be:	b2ad      	uxthmi	r5, r5
 80043c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80043c2:	4852      	ldr	r0, [pc, #328]	@ (800450c <_printf_i+0x234>)
 80043c4:	6033      	str	r3, [r6, #0]
 80043c6:	bf14      	ite	ne
 80043c8:	230a      	movne	r3, #10
 80043ca:	2308      	moveq	r3, #8
 80043cc:	2100      	movs	r1, #0
 80043ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043d2:	6866      	ldr	r6, [r4, #4]
 80043d4:	60a6      	str	r6, [r4, #8]
 80043d6:	2e00      	cmp	r6, #0
 80043d8:	db05      	blt.n	80043e6 <_printf_i+0x10e>
 80043da:	6821      	ldr	r1, [r4, #0]
 80043dc:	432e      	orrs	r6, r5
 80043de:	f021 0104 	bic.w	r1, r1, #4
 80043e2:	6021      	str	r1, [r4, #0]
 80043e4:	d04b      	beq.n	800447e <_printf_i+0x1a6>
 80043e6:	4616      	mov	r6, r2
 80043e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80043ec:	fb03 5711 	mls	r7, r3, r1, r5
 80043f0:	5dc7      	ldrb	r7, [r0, r7]
 80043f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043f6:	462f      	mov	r7, r5
 80043f8:	42bb      	cmp	r3, r7
 80043fa:	460d      	mov	r5, r1
 80043fc:	d9f4      	bls.n	80043e8 <_printf_i+0x110>
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d10b      	bne.n	800441a <_printf_i+0x142>
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	07df      	lsls	r7, r3, #31
 8004406:	d508      	bpl.n	800441a <_printf_i+0x142>
 8004408:	6923      	ldr	r3, [r4, #16]
 800440a:	6861      	ldr	r1, [r4, #4]
 800440c:	4299      	cmp	r1, r3
 800440e:	bfde      	ittt	le
 8004410:	2330      	movle	r3, #48	@ 0x30
 8004412:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004416:	f106 36ff 	addle.w	r6, r6, #4294967295
 800441a:	1b92      	subs	r2, r2, r6
 800441c:	6122      	str	r2, [r4, #16]
 800441e:	f8cd a000 	str.w	sl, [sp]
 8004422:	464b      	mov	r3, r9
 8004424:	aa03      	add	r2, sp, #12
 8004426:	4621      	mov	r1, r4
 8004428:	4640      	mov	r0, r8
 800442a:	f7ff fee7 	bl	80041fc <_printf_common>
 800442e:	3001      	adds	r0, #1
 8004430:	d14a      	bne.n	80044c8 <_printf_i+0x1f0>
 8004432:	f04f 30ff 	mov.w	r0, #4294967295
 8004436:	b004      	add	sp, #16
 8004438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	f043 0320 	orr.w	r3, r3, #32
 8004442:	6023      	str	r3, [r4, #0]
 8004444:	4832      	ldr	r0, [pc, #200]	@ (8004510 <_printf_i+0x238>)
 8004446:	2778      	movs	r7, #120	@ 0x78
 8004448:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	6831      	ldr	r1, [r6, #0]
 8004450:	061f      	lsls	r7, r3, #24
 8004452:	f851 5b04 	ldr.w	r5, [r1], #4
 8004456:	d402      	bmi.n	800445e <_printf_i+0x186>
 8004458:	065f      	lsls	r7, r3, #25
 800445a:	bf48      	it	mi
 800445c:	b2ad      	uxthmi	r5, r5
 800445e:	6031      	str	r1, [r6, #0]
 8004460:	07d9      	lsls	r1, r3, #31
 8004462:	bf44      	itt	mi
 8004464:	f043 0320 	orrmi.w	r3, r3, #32
 8004468:	6023      	strmi	r3, [r4, #0]
 800446a:	b11d      	cbz	r5, 8004474 <_printf_i+0x19c>
 800446c:	2310      	movs	r3, #16
 800446e:	e7ad      	b.n	80043cc <_printf_i+0xf4>
 8004470:	4826      	ldr	r0, [pc, #152]	@ (800450c <_printf_i+0x234>)
 8004472:	e7e9      	b.n	8004448 <_printf_i+0x170>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	f023 0320 	bic.w	r3, r3, #32
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	e7f6      	b.n	800446c <_printf_i+0x194>
 800447e:	4616      	mov	r6, r2
 8004480:	e7bd      	b.n	80043fe <_printf_i+0x126>
 8004482:	6833      	ldr	r3, [r6, #0]
 8004484:	6825      	ldr	r5, [r4, #0]
 8004486:	6961      	ldr	r1, [r4, #20]
 8004488:	1d18      	adds	r0, r3, #4
 800448a:	6030      	str	r0, [r6, #0]
 800448c:	062e      	lsls	r6, r5, #24
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	d501      	bpl.n	8004496 <_printf_i+0x1be>
 8004492:	6019      	str	r1, [r3, #0]
 8004494:	e002      	b.n	800449c <_printf_i+0x1c4>
 8004496:	0668      	lsls	r0, r5, #25
 8004498:	d5fb      	bpl.n	8004492 <_printf_i+0x1ba>
 800449a:	8019      	strh	r1, [r3, #0]
 800449c:	2300      	movs	r3, #0
 800449e:	6123      	str	r3, [r4, #16]
 80044a0:	4616      	mov	r6, r2
 80044a2:	e7bc      	b.n	800441e <_printf_i+0x146>
 80044a4:	6833      	ldr	r3, [r6, #0]
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	6032      	str	r2, [r6, #0]
 80044aa:	681e      	ldr	r6, [r3, #0]
 80044ac:	6862      	ldr	r2, [r4, #4]
 80044ae:	2100      	movs	r1, #0
 80044b0:	4630      	mov	r0, r6
 80044b2:	f7fb fe95 	bl	80001e0 <memchr>
 80044b6:	b108      	cbz	r0, 80044bc <_printf_i+0x1e4>
 80044b8:	1b80      	subs	r0, r0, r6
 80044ba:	6060      	str	r0, [r4, #4]
 80044bc:	6863      	ldr	r3, [r4, #4]
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	2300      	movs	r3, #0
 80044c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044c6:	e7aa      	b.n	800441e <_printf_i+0x146>
 80044c8:	6923      	ldr	r3, [r4, #16]
 80044ca:	4632      	mov	r2, r6
 80044cc:	4649      	mov	r1, r9
 80044ce:	4640      	mov	r0, r8
 80044d0:	47d0      	blx	sl
 80044d2:	3001      	adds	r0, #1
 80044d4:	d0ad      	beq.n	8004432 <_printf_i+0x15a>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	079b      	lsls	r3, r3, #30
 80044da:	d413      	bmi.n	8004504 <_printf_i+0x22c>
 80044dc:	68e0      	ldr	r0, [r4, #12]
 80044de:	9b03      	ldr	r3, [sp, #12]
 80044e0:	4298      	cmp	r0, r3
 80044e2:	bfb8      	it	lt
 80044e4:	4618      	movlt	r0, r3
 80044e6:	e7a6      	b.n	8004436 <_printf_i+0x15e>
 80044e8:	2301      	movs	r3, #1
 80044ea:	4632      	mov	r2, r6
 80044ec:	4649      	mov	r1, r9
 80044ee:	4640      	mov	r0, r8
 80044f0:	47d0      	blx	sl
 80044f2:	3001      	adds	r0, #1
 80044f4:	d09d      	beq.n	8004432 <_printf_i+0x15a>
 80044f6:	3501      	adds	r5, #1
 80044f8:	68e3      	ldr	r3, [r4, #12]
 80044fa:	9903      	ldr	r1, [sp, #12]
 80044fc:	1a5b      	subs	r3, r3, r1
 80044fe:	42ab      	cmp	r3, r5
 8004500:	dcf2      	bgt.n	80044e8 <_printf_i+0x210>
 8004502:	e7eb      	b.n	80044dc <_printf_i+0x204>
 8004504:	2500      	movs	r5, #0
 8004506:	f104 0619 	add.w	r6, r4, #25
 800450a:	e7f5      	b.n	80044f8 <_printf_i+0x220>
 800450c:	08004669 	.word	0x08004669
 8004510:	0800467a 	.word	0x0800467a

08004514 <memmove>:
 8004514:	4288      	cmp	r0, r1
 8004516:	b510      	push	{r4, lr}
 8004518:	eb01 0402 	add.w	r4, r1, r2
 800451c:	d902      	bls.n	8004524 <memmove+0x10>
 800451e:	4284      	cmp	r4, r0
 8004520:	4623      	mov	r3, r4
 8004522:	d807      	bhi.n	8004534 <memmove+0x20>
 8004524:	1e43      	subs	r3, r0, #1
 8004526:	42a1      	cmp	r1, r4
 8004528:	d008      	beq.n	800453c <memmove+0x28>
 800452a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800452e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004532:	e7f8      	b.n	8004526 <memmove+0x12>
 8004534:	4402      	add	r2, r0
 8004536:	4601      	mov	r1, r0
 8004538:	428a      	cmp	r2, r1
 800453a:	d100      	bne.n	800453e <memmove+0x2a>
 800453c:	bd10      	pop	{r4, pc}
 800453e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004546:	e7f7      	b.n	8004538 <memmove+0x24>

08004548 <_sbrk_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4d06      	ldr	r5, [pc, #24]	@ (8004564 <_sbrk_r+0x1c>)
 800454c:	2300      	movs	r3, #0
 800454e:	4604      	mov	r4, r0
 8004550:	4608      	mov	r0, r1
 8004552:	602b      	str	r3, [r5, #0]
 8004554:	f7fc fd46 	bl	8000fe4 <_sbrk>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_sbrk_r+0x1a>
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	b103      	cbz	r3, 8004562 <_sbrk_r+0x1a>
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	2000040c 	.word	0x2000040c

08004568 <memcpy>:
 8004568:	440a      	add	r2, r1
 800456a:	4291      	cmp	r1, r2
 800456c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004570:	d100      	bne.n	8004574 <memcpy+0xc>
 8004572:	4770      	bx	lr
 8004574:	b510      	push	{r4, lr}
 8004576:	f811 4b01 	ldrb.w	r4, [r1], #1
 800457a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800457e:	4291      	cmp	r1, r2
 8004580:	d1f9      	bne.n	8004576 <memcpy+0xe>
 8004582:	bd10      	pop	{r4, pc}

08004584 <_realloc_r>:
 8004584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004588:	4607      	mov	r7, r0
 800458a:	4614      	mov	r4, r2
 800458c:	460d      	mov	r5, r1
 800458e:	b921      	cbnz	r1, 800459a <_realloc_r+0x16>
 8004590:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004594:	4611      	mov	r1, r2
 8004596:	f7ff bc4d 	b.w	8003e34 <_malloc_r>
 800459a:	b92a      	cbnz	r2, 80045a8 <_realloc_r+0x24>
 800459c:	f7ff fbde 	bl	8003d5c <_free_r>
 80045a0:	4625      	mov	r5, r4
 80045a2:	4628      	mov	r0, r5
 80045a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045a8:	f000 f81a 	bl	80045e0 <_malloc_usable_size_r>
 80045ac:	4284      	cmp	r4, r0
 80045ae:	4606      	mov	r6, r0
 80045b0:	d802      	bhi.n	80045b8 <_realloc_r+0x34>
 80045b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80045b6:	d8f4      	bhi.n	80045a2 <_realloc_r+0x1e>
 80045b8:	4621      	mov	r1, r4
 80045ba:	4638      	mov	r0, r7
 80045bc:	f7ff fc3a 	bl	8003e34 <_malloc_r>
 80045c0:	4680      	mov	r8, r0
 80045c2:	b908      	cbnz	r0, 80045c8 <_realloc_r+0x44>
 80045c4:	4645      	mov	r5, r8
 80045c6:	e7ec      	b.n	80045a2 <_realloc_r+0x1e>
 80045c8:	42b4      	cmp	r4, r6
 80045ca:	4622      	mov	r2, r4
 80045cc:	4629      	mov	r1, r5
 80045ce:	bf28      	it	cs
 80045d0:	4632      	movcs	r2, r6
 80045d2:	f7ff ffc9 	bl	8004568 <memcpy>
 80045d6:	4629      	mov	r1, r5
 80045d8:	4638      	mov	r0, r7
 80045da:	f7ff fbbf 	bl	8003d5c <_free_r>
 80045de:	e7f1      	b.n	80045c4 <_realloc_r+0x40>

080045e0 <_malloc_usable_size_r>:
 80045e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e4:	1f18      	subs	r0, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bfbc      	itt	lt
 80045ea:	580b      	ldrlt	r3, [r1, r0]
 80045ec:	18c0      	addlt	r0, r0, r3
 80045ee:	4770      	bx	lr

080045f0 <_init>:
 80045f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045f2:	bf00      	nop
 80045f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f6:	bc08      	pop	{r3}
 80045f8:	469e      	mov	lr, r3
 80045fa:	4770      	bx	lr

080045fc <_fini>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr

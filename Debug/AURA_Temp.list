
AURA_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b090  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a4  0800b220  0800b220  0000c220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c3c4  0800c3c4  00010640  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c3c4  0800c3c4  0000d3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3cc  0800c3cc  00010640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3cc  0800c3cc  0000d3cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c3d0  0800c3d0  0000d3d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00002640  20000000  0800c3d4  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000964  20002640  0800ea14  00010640  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002fa4  0800ea14  00010fa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010640  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d613  00000000  00000000  00010670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000605e  00000000  00000000  0003dc83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002108  00000000  00000000  00043ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000194c  00000000  00000000  00045df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dd1c  00000000  00000000  0004773c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cc57  00000000  00000000  00075458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9098  00000000  00000000  000a20af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019b147  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098b8  00000000  00000000  0019b18c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001a4a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20002640 	.word	0x20002640
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b208 	.word	0x0800b208

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20002644 	.word	0x20002644
 80001cc:	0800b208 	.word	0x0800b208

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000eda:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <MX_CRC_Init+0x40>)
 8000edc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000efe:	f001 fc81 	bl	8002804 <HAL_CRC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f08:	f000 fd88 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000265c 	.word	0x2000265c
 8000f14:	40023000 	.word	0x40023000

08000f18 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_CRC_MspInit+0x38>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10b      	bne.n	8000f42 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_CRC_MspInit+0x3c>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <HAL_CRC_MspInit+0x3c>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f34:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <HAL_CRC_MspInit+0x3c>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023000 	.word	0x40023000
 8000f54:	40021000 	.word	0x40021000

08000f58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b56      	ldr	r3, [pc, #344]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a55      	ldr	r2, [pc, #340]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b53      	ldr	r3, [pc, #332]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	4b50      	ldr	r3, [pc, #320]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a4f      	ldr	r2, [pc, #316]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f92:	4b4d      	ldr	r3, [pc, #308]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a49      	ldr	r2, [pc, #292]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b47      	ldr	r3, [pc, #284]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b44      	ldr	r3, [pc, #272]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	4a43      	ldr	r2, [pc, #268]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc2:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_PSM_EINT_GPIO_Port, NB_PSM_EINT_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd4:	483d      	ldr	r0, [pc, #244]	@ (80010cc <MX_GPIO_Init+0x174>)
 8000fd6:	f001 ff5b 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2146      	movs	r1, #70	@ 0x46
 8000fde:	483c      	ldr	r0, [pc, #240]	@ (80010d0 <MX_GPIO_Init+0x178>)
 8000fe0:	f001 ff56 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NFC_PWR_Pin|NB_ONOFF_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fee:	f001 ff4f 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_RESET_GPIO_Port, NB_RESET_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	4837      	ldr	r0, [pc, #220]	@ (80010d4 <MX_GPIO_Init+0x17c>)
 8000ff8:	f001 ff4a 	bl	8002e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NB_PSM_EINT_Pin */
  GPIO_InitStruct.Pin = NB_PSM_EINT_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_PSM_EINT_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	482d      	ldr	r0, [pc, #180]	@ (80010cc <MX_GPIO_Init+0x174>)
 8001016:	f001 fce7 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT2_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin|MEMS_INT1_Pin;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4829      	ldr	r0, [pc, #164]	@ (80010d4 <MX_GPIO_Init+0x17c>)
 800102e:	f001 fcdb 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBATT_ADC_Pin NFC_BUSY_Pin COMP2_INP_CH1_Pin TAMPER_IN_Pin
                           VBATT_DET_Pin PWR_BY_MAG_Pin */
  GPIO_InitStruct.Pin = VBATT_ADC_Pin|NFC_BUSY_Pin|COMP2_INP_CH1_Pin|TAMPER_IN_Pin
 8001032:	f640 132d 	movw	r3, #2349	@ 0x92d
 8001036:	617b      	str	r3, [r7, #20]
                          |VBATT_DET_Pin|PWR_BY_MAG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104a:	f001 fccd 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NB_PWR_BYPASS_Pin NB_PWR_EN_Pin PWR_EN_Pin */
  GPIO_InitStruct.Pin = NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin;
 800104e:	2346      	movs	r3, #70	@ 0x46
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	481a      	ldr	r0, [pc, #104]	@ (80010d0 <MX_GPIO_Init+0x178>)
 8001066:	f001 fcbf 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_DT_Pin FUEL_GAUGE_ALRT_Pin */
  GPIO_InitStruct.Pin = SIM_DT_Pin|FUEL_GAUGE_ALRT_Pin;
 800106a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4814      	ldr	r0, [pc, #80]	@ (80010d0 <MX_GPIO_Init+0x178>)
 8001080:	f001 fcb2 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_PWR_Pin NB_ONOFF_Pin */
  GPIO_InitStruct.Pin = NFC_PWR_Pin|NB_ONOFF_Pin;
 8001084:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f001 fca2 	bl	80029e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NB_RESET_Pin */
  GPIO_InitStruct.Pin = NB_RESET_Pin;
 80010a4:	2308      	movs	r3, #8
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_RESET_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <MX_GPIO_Init+0x17c>)
 80010bc:	f001 fc94 	bl	80029e8 <HAL_GPIO_Init>

}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	@ 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000800 	.word	0x48000800
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48001c00 	.word	0x48001c00

080010d8 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  __IO uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0x88U + (I2CxSource >> 24U));
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	0e1a      	lsrs	r2, r3, #24
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <LL_RCC_SetI2CClockSource+0x4c>)
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(*reg, 3UL << ((I2CxSource & 0x001F0000U) >> 16U), ((I2CxSource & 0x000000FFU) << ((I2CxSource & 0x001F0000U) >> 16U)));
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	0c1b      	lsrs	r3, r3, #16
 80010f2:	f003 031f 	and.w	r3, r3, #31
 80010f6:	2103      	movs	r1, #3
 80010f8:	fa01 f303 	lsl.w	r3, r1, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	401a      	ands	r2, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	b2d9      	uxtb	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	0c1b      	lsrs	r3, r3, #16
 8001108:	f003 031f 	and.w	r3, r3, #31
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	431a      	orrs	r2, r3
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	601a      	str	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40021088 	.word	0x40021088

08001128 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <MX_I2C1_Init+0x74>)
 800112e:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <MX_I2C1_Init+0x78>)
 8001130:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8001132:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <MX_I2C1_Init+0x74>)
 8001134:	4a1b      	ldr	r2, [pc, #108]	@ (80011a4 <MX_I2C1_Init+0x7c>)
 8001136:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001138:	4b18      	ldr	r3, [pc, #96]	@ (800119c <MX_I2C1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800113e:	4b17      	ldr	r3, [pc, #92]	@ (800119c <MX_I2C1_Init+0x74>)
 8001140:	2201      	movs	r2, #1
 8001142:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001144:	4b15      	ldr	r3, [pc, #84]	@ (800119c <MX_I2C1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800114a:	4b14      	ldr	r3, [pc, #80]	@ (800119c <MX_I2C1_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001150:	4b12      	ldr	r3, [pc, #72]	@ (800119c <MX_I2C1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001156:	4b11      	ldr	r3, [pc, #68]	@ (800119c <MX_I2C1_Init+0x74>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800115c:	4b0f      	ldr	r3, [pc, #60]	@ (800119c <MX_I2C1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001162:	480e      	ldr	r0, [pc, #56]	@ (800119c <MX_I2C1_Init+0x74>)
 8001164:	f001 feac 	bl	8002ec0 <HAL_I2C_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800116e:	f000 fc55 	bl	8001a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001172:	2100      	movs	r1, #0
 8001174:	4809      	ldr	r0, [pc, #36]	@ (800119c <MX_I2C1_Init+0x74>)
 8001176:	f002 fd1b 	bl	8003bb0 <HAL_I2CEx_ConfigAnalogFilter>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001180:	f000 fc4c 	bl	8001a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001184:	2100      	movs	r1, #0
 8001186:	4805      	ldr	r0, [pc, #20]	@ (800119c <MX_I2C1_Init+0x74>)
 8001188:	f002 fd5d 	bl	8003c46 <HAL_I2CEx_ConfigDigitalFilter>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001192:	f000 fc43 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20002680 	.word	0x20002680
 80011a0:	40005400 	.word	0x40005400
 80011a4:	00100d14 	.word	0x00100d14

080011a8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <MX_I2C2_Init+0x74>)
 80011ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <MX_I2C2_Init+0x78>)
 80011b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_I2C2_Init+0x74>)
 80011b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001224 <MX_I2C2_Init+0x7c>)
 80011b6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_I2C2_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011be:	4b17      	ldr	r3, [pc, #92]	@ (800121c <MX_I2C2_Init+0x74>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011c4:	4b15      	ldr	r3, [pc, #84]	@ (800121c <MX_I2C2_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <MX_I2C2_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <MX_I2C2_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011d6:	4b11      	ldr	r3, [pc, #68]	@ (800121c <MX_I2C2_Init+0x74>)
 80011d8:	2200      	movs	r2, #0
 80011da:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <MX_I2C2_Init+0x74>)
 80011de:	2200      	movs	r2, #0
 80011e0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011e2:	480e      	ldr	r0, [pc, #56]	@ (800121c <MX_I2C2_Init+0x74>)
 80011e4:	f001 fe6c 	bl	8002ec0 <HAL_I2C_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011ee:	f000 fc15 	bl	8001a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011f2:	2100      	movs	r1, #0
 80011f4:	4809      	ldr	r0, [pc, #36]	@ (800121c <MX_I2C2_Init+0x74>)
 80011f6:	f002 fcdb 	bl	8003bb0 <HAL_I2CEx_ConfigAnalogFilter>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001200:	f000 fc0c 	bl	8001a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001204:	2100      	movs	r1, #0
 8001206:	4805      	ldr	r0, [pc, #20]	@ (800121c <MX_I2C2_Init+0x74>)
 8001208:	f002 fd1d 	bl	8003c46 <HAL_I2CEx_ConfigDigitalFilter>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001212:	f000 fc03 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200026d4 	.word	0x200026d4
 8001220:	40005800 	.word	0x40005800
 8001224:	00100d14 	.word	0x00100d14

08001228 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08c      	sub	sp, #48	@ 0x30
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a33      	ldr	r2, [pc, #204]	@ (8001314 <HAL_I2C_MspInit+0xec>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12d      	bne.n	80012a6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
    LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
 800124a:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 800124e:	f7ff ff43 	bl	80010d8 <LL_RCC_SetI2CClockSource>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001252:	4b31      	ldr	r3, [pc, #196]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a30      	ldr	r2, [pc, #192]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 8001258:	f043 0302 	orr.w	r3, r3, #2
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b2e      	ldr	r3, [pc, #184]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|GPIO_PIN_9;
 800126a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800126e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001270:	2312      	movs	r3, #18
 8001272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800127c:	2304      	movs	r3, #4
 800127e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4825      	ldr	r0, [pc, #148]	@ (800131c <HAL_I2C_MspInit+0xf4>)
 8001288:	f001 fbae 	bl	80029e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800128c:	4b22      	ldr	r3, [pc, #136]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 800128e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001290:	4a21      	ldr	r2, [pc, #132]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 8001292:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001296:	6593      	str	r3, [r2, #88]	@ 0x58
 8001298:	4b1f      	ldr	r3, [pc, #124]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 800129a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800129c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80012a4:	e031      	b.n	800130a <HAL_I2C_MspInit+0xe2>
  else if(i2cHandle->Instance==I2C2)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001320 <HAL_I2C_MspInit+0xf8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d12c      	bne.n	800130a <HAL_I2C_MspInit+0xe2>
    LL_RCC_SetI2CClockSource(LL_RCC_I2C2_CLKSOURCE_PCLK1);
 80012b0:	f44f 2060 	mov.w	r0, #917504	@ 0xe0000
 80012b4:	f7ff ff10 	bl	80010d8 <LL_RCC_SetI2CClockSource>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	4b17      	ldr	r3, [pc, #92]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 80012ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012bc:	4a16      	ldr	r2, [pc, #88]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 80012be:	f043 0302 	orr.w	r3, r3, #2
 80012c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 80012c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2SCL_Pin|I2C2_SDA_Pin;
 80012d0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d6:	2312      	movs	r3, #18
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012de:	2303      	movs	r3, #3
 80012e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012e2:	2304      	movs	r3, #4
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	480b      	ldr	r0, [pc, #44]	@ (800131c <HAL_I2C_MspInit+0xf4>)
 80012ee:	f001 fb7b 	bl	80029e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 80012f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_I2C_MspInit+0xf0>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	@ 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40005400 	.word	0x40005400
 8001318:	40021000 	.word	0x40021000
 800131c:	48000400 	.word	0x48000400
 8001320:	40005800 	.word	0x40005800

08001324 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a16      	ldr	r2, [pc, #88]	@ (800138c <HAL_I2C_MspDeInit+0x68>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d110      	bne.n	8001358 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001336:	4b16      	ldr	r3, [pc, #88]	@ (8001390 <HAL_I2C_MspDeInit+0x6c>)
 8001338:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133a:	4a15      	ldr	r2, [pc, #84]	@ (8001390 <HAL_I2C_MspDeInit+0x6c>)
 800133c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001340:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 8001342:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001346:	4813      	ldr	r0, [pc, #76]	@ (8001394 <HAL_I2C_MspDeInit+0x70>)
 8001348:	f001 fcc8 	bl	8002cdc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800134c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001350:	4810      	ldr	r0, [pc, #64]	@ (8001394 <HAL_I2C_MspDeInit+0x70>)
 8001352:	f001 fcc3 	bl	8002cdc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8001356:	e014      	b.n	8001382 <HAL_I2C_MspDeInit+0x5e>
  else if(i2cHandle->Instance==I2C2)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <HAL_I2C_MspDeInit+0x74>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10f      	bne.n	8001382 <HAL_I2C_MspDeInit+0x5e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_I2C_MspDeInit+0x6c>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <HAL_I2C_MspDeInit+0x6c>)
 8001368:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800136c:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(I2C2SCL_GPIO_Port, I2C2SCL_Pin);
 800136e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001372:	4808      	ldr	r0, [pc, #32]	@ (8001394 <HAL_I2C_MspDeInit+0x70>)
 8001374:	f001 fcb2 	bl	8002cdc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(I2C2_SDA_GPIO_Port, I2C2_SDA_Pin);
 8001378:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800137c:	4805      	ldr	r0, [pc, #20]	@ (8001394 <HAL_I2C_MspDeInit+0x70>)
 800137e:	f001 fcad 	bl	8002cdc <HAL_GPIO_DeInit>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40005400 	.word	0x40005400
 8001390:	40021000 	.word	0x40021000
 8001394:	48000400 	.word	0x48000400
 8001398:	40005800 	.word	0x40005800

0800139c <I2C1_DeInit>:

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef I2C1_DeInit( void )
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef _status= 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_MspDeInit(&hi2c1);
 80013a6:	4804      	ldr	r0, [pc, #16]	@ (80013b8 <I2C1_DeInit+0x1c>)
 80013a8:	f7ff ffbc 	bl	8001324 <HAL_I2C_MspDeInit>

    //__HAL_RCC_I2C1_CLK_DISABLE();

	return _status;
 80013ac:	79fb      	ldrb	r3, [r7, #7]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20002680 	.word	0x20002680

080013bc <I2C1_MemWrite>:

HAL_StatusTypeDef I2C1_MemWrite(uint16_t _devAddr, uint16_t _memAddress, uint16_t _memAddSize, uint8_t *_pData, uint16_t _size, uint32_t _timeout)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af04      	add	r7, sp, #16
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	4603      	mov	r3, r0
 80013c6:	81fb      	strh	r3, [r7, #14]
 80013c8:	460b      	mov	r3, r1
 80013ca:	81bb      	strh	r3, [r7, #12]
 80013cc:	4613      	mov	r3, r2
 80013ce:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Write(&hi2c1, _devAddr, _memAddress, _memAddSize, (uint8_t *)_pData, _size, _timeout);
 80013d0:	8978      	ldrh	r0, [r7, #10]
 80013d2:	89ba      	ldrh	r2, [r7, #12]
 80013d4:	89f9      	ldrh	r1, [r7, #14]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	8b3b      	ldrh	r3, [r7, #24]
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	4603      	mov	r3, r0
 80013e4:	4803      	ldr	r0, [pc, #12]	@ (80013f4 <I2C1_MemWrite+0x38>)
 80013e6:	f001 fe07 	bl	8002ff8 <HAL_I2C_Mem_Write>
 80013ea:	4603      	mov	r3, r0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3710      	adds	r7, #16
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20002680 	.word	0x20002680

080013f8 <I2C1_MemRead>:

HAL_StatusTypeDef I2C1_MemRead(uint16_t _devAddr, uint16_t _memAddress, uint16_t _memAddSize, uint8_t *_pData, uint16_t _size, uint32_t _timeout)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af04      	add	r7, sp, #16
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	4603      	mov	r3, r0
 8001402:	81fb      	strh	r3, [r7, #14]
 8001404:	460b      	mov	r3, r1
 8001406:	81bb      	strh	r3, [r7, #12]
 8001408:	4613      	mov	r3, r2
 800140a:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Read(&hi2c1, _devAddr, _memAddress, _memAddSize, _pData, _size, _timeout );
 800140c:	8978      	ldrh	r0, [r7, #10]
 800140e:	89ba      	ldrh	r2, [r7, #12]
 8001410:	89f9      	ldrh	r1, [r7, #14]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	8b3b      	ldrh	r3, [r7, #24]
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	4603      	mov	r3, r0
 8001420:	4803      	ldr	r0, [pc, #12]	@ (8001430 <I2C1_MemRead+0x38>)
 8001422:	f001 fefd 	bl	8003220 <HAL_I2C_Mem_Read>
 8001426:	4603      	mov	r3, r0
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20002680 	.word	0x20002680

08001434 <I2C1_IsNacked>:
{
  return HAL_I2C_Master_Receive(&hi2c1, _devAddr, _pData, _size, _timeout);
}

bool I2C1_IsNacked( void )
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
	return (HAL_I2C_ERROR_AF== hi2c1.ErrorCode)? true: false;
 8001438:	4b05      	ldr	r3, [pc, #20]	@ (8001450 <I2C1_IsNacked+0x1c>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143c:	2b04      	cmp	r3, #4
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
}
 8001446:	4618      	mov	r0, r3
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	20002680 	.word	0x20002680

08001454 <I2C1_IsDeviceReady>:

HAL_StatusTypeDef I2C1_IsDeviceReady( const uint8_t _devAddr, const uint32_t _trials, const uint16_t _timeout)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	80bb      	strh	r3, [r7, #4]
  return  HAL_I2C_IsDeviceReady(&hi2c1, _devAddr, _trials, _timeout );
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	b299      	uxth	r1, r3
 8001468:	88bb      	ldrh	r3, [r7, #4]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	4803      	ldr	r0, [pc, #12]	@ (800147c <I2C1_IsDeviceReady+0x28>)
 800146e:	f001 fff1 	bl	8003454 <HAL_I2C_IsDeviceReady>
 8001472:	4603      	mov	r3, r0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20002680 	.word	0x20002680

08001480 <LL_RCC_SetLPTIMClockSource>:
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPTIM2_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetLPTIMClockSource(uint32_t LPTIMxSource)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16U));
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <LL_RCC_SetLPTIMClockSource+0x30>)
 800148a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	0c1b      	lsrs	r3, r3, #16
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	43db      	mvns	r3, r3
 8001496:	401a      	ands	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	041b      	lsls	r3, r3, #16
 800149c:	4904      	ldr	r1, [pc, #16]	@ (80014b0 <LL_RCC_SetLPTIMClockSource+0x30>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000

080014b4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80014b8:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014ba:	4a17      	ldr	r2, [pc, #92]	@ (8001518 <MX_LPTIM1_Init+0x64>)
 80014bc:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80014be:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80014c4:	4b13      	ldr	r3, [pc, #76]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014dc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80014e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80014ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014ec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014f0:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <MX_LPTIM1_Init+0x60>)
 8001500:	f002 fbee 	bl	8003ce0 <HAL_LPTIM_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 800150a:	f000 fa87 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20002728 	.word	0x20002728
 8001518:	40007c00 	.word	0x40007c00

0800151c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 0314 	add.w	r3, r7, #20
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  if(lptimHandle->Instance==LPTIM1)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a1d      	ldr	r2, [pc, #116]	@ (80015b0 <HAL_LPTIM_MspInit+0x94>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d133      	bne.n	80015a6 <HAL_LPTIM_MspInit+0x8a>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    LL_RCC_SetLPTIMClockSource(LL_RCC_LPTIM1_CLKSOURCE_PCLK1);
 800153e:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 8001542:	f7ff ff9d 	bl	8001480 <LL_RCC_SetLPTIMClockSource>

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_LPTIM_MspInit+0x98>)
 8001548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154a:	4a1a      	ldr	r2, [pc, #104]	@ (80015b4 <HAL_LPTIM_MspInit+0x98>)
 800154c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001550:	6593      	str	r3, [r2, #88]	@ 0x58
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <HAL_LPTIM_MspInit+0x98>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <HAL_LPTIM_MspInit+0x98>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <HAL_LPTIM_MspInit+0x98>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_LPTIM_MspInit+0x98>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001576:	23a0      	movs	r3, #160	@ 0xa0
 8001578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4809      	ldr	r0, [pc, #36]	@ (80015b8 <HAL_LPTIM_MspInit+0x9c>)
 8001592:	f001 fa29 	bl	80029e8 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2041      	movs	r0, #65	@ 0x41
 800159c:	f001 f8ed 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80015a0:	2041      	movs	r0, #65	@ 0x41
 80015a2:	f001 f906 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80015a6:	bf00      	nop
 80015a8:	3728      	adds	r7, #40	@ 0x28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40007c00 	.word	0x40007c00
 80015b4:	40021000 	.word	0x40021000
 80015b8:	48000400 	.word	0x48000400

080015bc <LL_RCC_LSE_Enable>:
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <LL_RCC_LSE_Enable+0x20>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <LL_RCC_LSE_Enable+0x20>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000

080015e0 <LL_RCC_LSE_SetDriveCapability>:
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80015e8:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80015ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015ee:	f023 0218 	bic.w	r2, r3, #24
 80015f2:	4905      	ldr	r1, [pc, #20]	@ (8001608 <LL_RCC_LSE_SetDriveCapability+0x28>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40021000 	.word	0x40021000

0800160c <LL_RCC_LSE_IsReady>:
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001610:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <LL_RCC_LSE_IsReady+0x24>)
 8001612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b02      	cmp	r3, #2
 800161c:	d101      	bne.n	8001622 <LL_RCC_LSE_IsReady+0x16>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <LL_RCC_LSE_IsReady+0x18>
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000

08001634 <LL_RCC_MSI_Enable>:
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <LL_RCC_MSI_Enable+0x1c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <LL_RCC_MSI_Enable+0x1c>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <LL_RCC_MSI_IsReady>:
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <LL_RCC_MSI_IsReady+0x20>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b02      	cmp	r3, #2
 8001662:	d101      	bne.n	8001668 <LL_RCC_MSI_IsReady+0x14>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <LL_RCC_MSI_IsReady+0x16>
 8001668:	2300      	movs	r3, #0
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	40021000 	.word	0x40021000

08001678 <LL_RCC_MSI_EnablePLLMode>:
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a04      	ldr	r2, [pc, #16]	@ (8001694 <LL_RCC_MSI_EnablePLLMode+0x1c>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6013      	str	r3, [r2, #0]
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <LL_RCC_MSI_EnableRangeSelection>:
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a04      	ldr	r2, [pc, #16]	@ (80016b4 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80016a2:	f043 0308 	orr.w	r3, r3, #8
 80016a6:	6013      	str	r3, [r2, #0]
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000

080016b8 <LL_RCC_MSI_SetRange>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <LL_RCC_MSI_SetRange+0x24>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016c8:	4904      	ldr	r1, [pc, #16]	@ (80016dc <LL_RCC_MSI_SetRange+0x24>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000

080016e0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	4904      	ldr	r1, [pc, #16]	@ (8001708 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	604b      	str	r3, [r1, #4]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40021000 	.word	0x40021000

0800170c <LL_RCC_SetSysClkSource>:
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <LL_RCC_SetSysClkSource+0x24>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f023 0203 	bic.w	r2, r3, #3
 800171c:	4904      	ldr	r1, [pc, #16]	@ (8001730 <LL_RCC_SetSysClkSource+0x24>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4313      	orrs	r3, r2
 8001722:	608b      	str	r3, [r1, #8]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40021000 	.word	0x40021000

08001734 <LL_RCC_GetSysClkSource>:
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <LL_RCC_GetSysClkSource+0x18>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f003 030c 	and.w	r3, r3, #12
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000

08001750 <LL_RCC_SetAHBPrescaler>:
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <LL_RCC_SetAHBPrescaler+0x24>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001760:	4904      	ldr	r1, [pc, #16]	@ (8001774 <LL_RCC_SetAHBPrescaler+0x24>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4313      	orrs	r3, r2
 8001766:	608b      	str	r3, [r1, #8]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	40021000 	.word	0x40021000

08001778 <LL_RCC_SetAPB1Prescaler>:
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001788:	4904      	ldr	r1, [pc, #16]	@ (800179c <LL_RCC_SetAPB1Prescaler+0x24>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4313      	orrs	r3, r2
 800178e:	608b      	str	r3, [r1, #8]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	40021000 	.word	0x40021000

080017a0 <LL_RCC_SetAPB2Prescaler>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80017a8:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80017b0:	4904      	ldr	r1, [pc, #16]	@ (80017c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40021000 	.word	0x40021000

080017c8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <LL_FLASH_SetLatency+0x24>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f023 0207 	bic.w	r2, r3, #7
 80017d8:	4904      	ldr	r1, [pc, #16]	@ (80017ec <LL_FLASH_SetLatency+0x24>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4313      	orrs	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40022000 	.word	0x40022000

080017f0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <LL_FLASH_GetLatency+0x18>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000

0800180c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800181c:	4904      	ldr	r1, [pc, #16]	@ (8001830 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4313      	orrs	r3, r2
 8001822:	600b      	str	r3, [r1, #0]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40007000 	.word	0x40007000

08001834 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001838:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <LL_PWR_EnableBkUpAccess+0x1c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <LL_PWR_EnableBkUpAccess+0x1c>)
 800183e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40007000 	.word	0x40007000

08001854 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8001858:	4b07      	ldr	r3, [pc, #28]	@ (8001878 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001860:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001864:	d101      	bne.n	800186a <LL_PWR_IsActiveFlag_VOS+0x16>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <LL_PWR_IsActiveFlag_VOS+0x18>
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40007000 	.word	0x40007000

0800187c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001882:	f000 fe26 	bl	80024d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001886:	f000 f843 	bl	8001910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800188a:	f7ff fb65 	bl	8000f58 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800188e:	f7ff fe11 	bl	80014b4 <MX_LPTIM1_Init>
  MX_I2C1_Init();
 8001892:	f7ff fc49 	bl	8001128 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001896:	f7ff fc87 	bl	80011a8 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 800189a:	f000 fcd1 	bl	8002240 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800189e:	f000 fcfb 	bl	8002298 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80018a2:	f000 fab5 	bl	8001e10 <MX_SPI1_Init>
  MX_RTC_Init();
 80018a6:	f000 f9a9 	bl	8001bfc <MX_RTC_Init>
  MX_WWDG_Init();
 80018aa:	f000 fda3 	bl	80023f4 <MX_WWDG_Init>
  MX_CRC_Init();
 80018ae:	f7ff fb11 	bl	8000ed4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */


  BatteryMonitor_Init();
 80018b2:	f004 fade 	bl	8005e72 <BatteryMonitor_Init>

  for (uint16_t addr = 1; addr < 128; addr++)
 80018b6:	2301      	movs	r3, #1
 80018b8:	80fb      	strh	r3, [r7, #6]
 80018ba:	e012      	b.n	80018e2 <main+0x66>
  {
	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(addr << 1), 2, 10) == HAL_OK)
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	b299      	uxth	r1, r3
 80018c2:	230a      	movs	r3, #10
 80018c4:	2202      	movs	r2, #2
 80018c6:	480e      	ldr	r0, [pc, #56]	@ (8001900 <main+0x84>)
 80018c8:	f001 fdc4 	bl	8003454 <HAL_I2C_IsDeviceReady>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d104      	bne.n	80018dc <main+0x60>
	  {
		  UART_Printf("Found device at 0x%02X\r\n", addr);
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	4619      	mov	r1, r3
 80018d6:	480b      	ldr	r0, [pc, #44]	@ (8001904 <main+0x88>)
 80018d8:	f000 f870 	bl	80019bc <UART_Printf>
  for (uint16_t addr = 1; addr < 128; addr++)
 80018dc:	88fb      	ldrh	r3, [r7, #6]
 80018de:	3301      	adds	r3, #1
 80018e0:	80fb      	strh	r3, [r7, #6]
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80018e6:	d9e9      	bls.n	80018bc <main+0x40>
	  }
  }

//  CFG_ApplyDefaults(&config);
  UART_Printf("test %d\n\r", config.system.mcuFrequency);
 80018e8:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <main+0x8c>)
 80018ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018ec:	4619      	mov	r1, r3
 80018ee:	4807      	ldr	r0, [pc, #28]	@ (800190c <main+0x90>)
 80018f0:	f000 f864 	bl	80019bc <UART_Printf>
  //     maxim_max1726x_clear_por();               // Clear the POR flag
  //     UART_Printf("Initialization complete.\r\n");
  // } else {
  //     UART_Printf("No POR detected. MAX1726x already configured.\r\n");
  // }
  MAX17260_Register_printout();
 80018f4:	f004 fa68 	bl	8005dc8 <MAX17260_Register_printout>
    /* USER CODE BEGIN 3 */

	  // uint16_t value = BatteryMonitor_GetQH();
	  // UART_Printf("1test %d\r\n",value);
    // HAL_Delay(1000);
	  NFCTAG_Task();
 80018f8:	f004 fc74 	bl	80061e4 <NFCTAG_Task>
 80018fc:	e7fc      	b.n	80018f8 <main+0x7c>
 80018fe:	bf00      	nop
 8001900:	20002680 	.word	0x20002680
 8001904:	0800b220 	.word	0x0800b220
 8001908:	20000080 	.word	0x20000080
 800190c:	0800b23c 	.word	0x0800b23c

08001910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff ff57 	bl	80017c8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800191a:	bf00      	nop
 800191c:	f7ff ff68 	bl	80017f0 <LL_FLASH_GetLatency>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1fa      	bne.n	800191c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001926:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800192a:	f7ff ff6f 	bl	800180c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 800192e:	bf00      	nop
 8001930:	f7ff ff90 	bl	8001854 <LL_PWR_IsActiveFlag_VOS>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1fa      	bne.n	8001930 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 800193a:	f7ff fe7b 	bl	8001634 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 800193e:	bf00      	nop
 8001940:	f7ff fe88 	bl	8001654 <LL_RCC_MSI_IsReady>
 8001944:	4603      	mov	r3, r0
 8001946:	2b01      	cmp	r3, #1
 8001948:	d1fa      	bne.n	8001940 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800194a:	f7ff fea5 	bl	8001698 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 800194e:	2060      	movs	r0, #96	@ 0x60
 8001950:	f7ff feb2 	bl	80016b8 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff fec3 	bl	80016e0 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 800195a:	f7ff ff6b 	bl	8001834 <LL_PWR_EnableBkUpAccess>
  LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fe3e 	bl	80015e0 <LL_RCC_LSE_SetDriveCapability>
  LL_RCC_LSE_Enable();
 8001964:	f7ff fe2a 	bl	80015bc <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
  while(LL_RCC_LSE_IsReady() != 1)
 8001968:	bf00      	nop
 800196a:	f7ff fe4f 	bl	800160c <LL_RCC_LSE_IsReady>
 800196e:	4603      	mov	r3, r0
 8001970:	2b01      	cmp	r3, #1
 8001972:	d1fa      	bne.n	800196a <SystemClock_Config+0x5a>
  {

  }
  LL_RCC_MSI_EnablePLLMode();
 8001974:	f7ff fe80 	bl	8001678 <LL_RCC_MSI_EnablePLLMode>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff fec7 	bl	800170c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 800197e:	bf00      	nop
 8001980:	f7ff fed8 	bl	8001734 <LL_RCC_GetSysClkSource>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1fa      	bne.n	8001980 <SystemClock_Config+0x70>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800198a:	2000      	movs	r0, #0
 800198c:	f7ff fee0 	bl	8001750 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fef1 	bl	8001778 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff ff02 	bl	80017a0 <LL_RCC_SetAPB2Prescaler>
  LL_SetSystemCoreClock(4000000);
 800199c:	4806      	ldr	r0, [pc, #24]	@ (80019b8 <SystemClock_Config+0xa8>)
 800199e:	f003 feaf 	bl	8005700 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80019a2:	2000      	movs	r0, #0
 80019a4:	f000 fdae 	bl	8002504 <HAL_InitTick>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80019ae:	f000 f835 	bl	8001a1c <Error_Handler>
  }
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	003d0900 	.word	0x003d0900

080019bc <UART_Printf>:

/* USER CODE BEGIN 4 */

void UART_Printf(char *format, ...)
{
 80019bc:	b40f      	push	{r0, r1, r2, r3}
 80019be:	b580      	push	{r7, lr}
 80019c0:	b0c2      	sub	sp, #264	@ 0x108
 80019c2:	af00      	add	r7, sp, #0
  char str[256];
  va_list args;
  va_start(args, format);
 80019c4:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 80019c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80019cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019d0:	601a      	str	r2, [r3, #0]
  vsnprintf(str, sizeof(str), format, args);
 80019d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80019d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019da:	f107 0008 	add.w	r0, r7, #8
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80019e4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019e8:	f007 fb32 	bl	8009050 <vsniprintf>
  va_end(args);

  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80019ec:	f107 0308 	add.w	r3, r7, #8
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fc3d 	bl	8000270 <strlen>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f107 0108 	add.w	r1, r7, #8
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <UART_Printf+0x5c>)
 8001a04:	f003 f909 	bl	8004c1a <HAL_UART_Transmit>
}
 8001a08:	bf00      	nop
 8001a0a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a14:	b004      	add	sp, #16
 8001a16:	4770      	bx	lr
 8001a18:	20002898 	.word	0x20002898

08001a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a20:	b672      	cpsid	i
}
 8001a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <Error_Handler+0x8>

08001a28 <LL_RCC_LSE_Enable>:
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <LL_RCC_LSE_Enable+0x20>)
 8001a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <LL_RCC_LSE_Enable+0x20>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000

08001a4c <LL_RCC_LSE_SetDriveCapability>:
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001a54:	4b07      	ldr	r3, [pc, #28]	@ (8001a74 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5a:	f023 0218 	bic.w	r2, r3, #24
 8001a5e:	4905      	ldr	r1, [pc, #20]	@ (8001a74 <LL_RCC_LSE_SetDriveCapability+0x28>)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000

08001a78 <LL_RCC_LSE_IsReady>:
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001a7c:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <LL_RCC_LSE_IsReady+0x24>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d101      	bne.n	8001a8e <LL_RCC_LSE_IsReady+0x16>
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <LL_RCC_LSE_IsReady+0x18>
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <LL_RCC_SetRTCClockSource+0x28>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001ab2:	4905      	ldr	r1, [pc, #20]	@ (8001ac8 <LL_RCC_SetRTCClockSource+0x28>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	40021000 	.word	0x40021000

08001acc <LL_RCC_GetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  */
__STATIC_INLINE uint32_t LL_RCC_GetRTCClockSource(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <LL_RCC_GetRTCClockSource+0x18>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ad6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <LL_RCC_ForceBackupDomainReset+0x20>)
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001af2:	4a05      	ldr	r2, [pc, #20]	@ (8001b08 <LL_RCC_ForceBackupDomainReset+0x20>)
 8001af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001af8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000

08001b0c <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001b10:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8001b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b16:	4a05      	ldr	r2, [pc, #20]	@ (8001b2c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8001b18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000

08001b30 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b3a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b3c:	4907      	ldr	r1, [pc, #28]	@ (8001b5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b46:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	40021000 	.word	0x40021000

08001b60 <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8001b68:	4b07      	ldr	r3, [pc, #28]	@ (8001b88 <LL_APB1_GRP1_IsEnabledClock+0x28>)
 8001b6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d101      	bne.n	8001b7a <LL_APB1_GRP1_IsEnabledClock+0x1a>
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <LL_APB1_GRP1_IsEnabledClock+0x1c>
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	370c      	adds	r7, #12
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40021000 	.word	0x40021000

08001b8c <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001b94:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <LL_APB1_GRP1_DisableClock+0x24>)
 8001b96:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	4904      	ldr	r1, [pc, #16]	@ (8001bb0 <LL_APB1_GRP1_DisableClock+0x24>)
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <LL_PWR_EnableBkUpAccess>:
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb8:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <LL_PWR_EnableBkUpAccess+0x1c>)
 8001bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bc2:	6013      	str	r3, [r2, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40007000 	.word	0x40007000

08001bd4 <LL_PWR_IsEnabledBkUpAccess>:
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001bd8:	4b07      	ldr	r3, [pc, #28]	@ (8001bf8 <LL_PWR_IsEnabledBkUpAccess+0x24>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001be4:	d101      	bne.n	8001bea <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40007000 	.word	0x40007000

08001bfc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b092      	sub	sp, #72	@ 0x48
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c12:	2300      	movs	r3, #0
 8001c14:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	222c      	movs	r2, #44	@ 0x2c
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f007 fa25 	bl	800906c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001c22:	4b3c      	ldr	r3, [pc, #240]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c24:	4a3c      	ldr	r2, [pc, #240]	@ (8001d18 <MX_RTC_Init+0x11c>)
 8001c26:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001c28:	4b3a      	ldr	r3, [pc, #232]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001c2e:	4b39      	ldr	r3, [pc, #228]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c30:	227f      	movs	r2, #127	@ 0x7f
 8001c32:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001c34:	4b37      	ldr	r3, [pc, #220]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c36:	22ff      	movs	r2, #255	@ 0xff
 8001c38:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001c3a:	4b36      	ldr	r3, [pc, #216]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001c40:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001c46:	4b33      	ldr	r3, [pc, #204]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001c4c:	4b31      	ldr	r3, [pc, #196]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001c52:	4830      	ldr	r0, [pc, #192]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c54:	f002 fa8c 	bl	8004170 <HAL_RTC_Init>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001c5e:	f7ff fedd 	bl	8001a1c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001c7c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c80:	2201      	movs	r2, #1
 8001c82:	4619      	mov	r1, r3
 8001c84:	4823      	ldr	r0, [pc, #140]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001c86:	f002 fb33 	bl	80042f0 <HAL_RTC_SetTime>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001c90:	f7ff fec4 	bl	8001a1c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c94:	2301      	movs	r3, #1
 8001c96:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001cac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4817      	ldr	r0, [pc, #92]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001cb6:	f002 fbb8 	bl	800442a <HAL_RTC_SetDate>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8001cc0:	f7ff feac 	bl	8001a1c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001cf4:	1d3b      	adds	r3, r7, #4
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4806      	ldr	r0, [pc, #24]	@ (8001d14 <MX_RTC_Init+0x118>)
 8001cfc:	f002 fc1c 	bl	8004538 <HAL_RTC_SetAlarm_IT>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001d06:	f7ff fe89 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001d0a:	bf00      	nop
 8001d0c:	3748      	adds	r7, #72	@ 0x48
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20002760 	.word	0x20002760
 8001d18:	40002800 	.word	0x40002800

08001d1c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a29      	ldr	r2, [pc, #164]	@ (8001dd0 <HAL_RTC_MspInit+0xb4>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d14b      	bne.n	8001dc6 <HAL_RTC_MspInit+0xaa>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  if(LL_RCC_GetRTCClockSource() != LL_RCC_RTC_CLKSOURCE_LSE)
 8001d2e:	f7ff fecd 	bl	8001acc <LL_RCC_GetRTCClockSource>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d38:	d035      	beq.n	8001da6 <HAL_RTC_MspInit+0x8a>
  {
    FlagStatus pwrclkchanged = RESET;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	73fb      	strb	r3, [r7, #15]
    /* Update LSE configuration in Backup Domain control register */
    /* Requires to enable write access to Backup Domain if necessary */
    if (LL_APB1_GRP1_IsEnabledClock (LL_APB1_GRP1_PERIPH_PWR) != 1U)
 8001d3e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001d42:	f7ff ff0d 	bl	8001b60 <LL_APB1_GRP1_IsEnabledClock>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_RTC_MspInit+0x3c>
    {
      /* Enables the PWR Clock and Enables access to the backup domain */
      LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d4c:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001d50:	f7ff feee 	bl	8001b30 <LL_APB1_GRP1_EnableClock>
      pwrclkchanged = SET;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
    }
    if (LL_PWR_IsEnabledBkUpAccess () != 1U)
 8001d58:	f7ff ff3c 	bl	8001bd4 <LL_PWR_IsEnabledBkUpAccess>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d007      	beq.n	8001d72 <HAL_RTC_MspInit+0x56>
    {
      /* Enable write access to Backup domain */
      LL_PWR_EnableBkUpAccess();
 8001d62:	f7ff ff27 	bl	8001bb4 <LL_PWR_EnableBkUpAccess>
      while (LL_PWR_IsEnabledBkUpAccess () == 0U)
 8001d66:	bf00      	nop
 8001d68:	f7ff ff34 	bl	8001bd4 <LL_PWR_IsEnabledBkUpAccess>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0fa      	beq.n	8001d68 <HAL_RTC_MspInit+0x4c>
      {
      }
    }
    LL_RCC_ForceBackupDomainReset();
 8001d72:	f7ff feb9 	bl	8001ae8 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 8001d76:	f7ff fec9 	bl	8001b0c <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_LSE_SetDriveCapability(LL_RCC_LSEDRIVE_LOW);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7ff fe66 	bl	8001a4c <LL_RCC_LSE_SetDriveCapability>
    LL_RCC_LSE_Enable();
 8001d80:	f7ff fe52 	bl	8001a28 <LL_RCC_LSE_Enable>

   /* Wait till LSE is ready */
    while(LL_RCC_LSE_IsReady() != 1)
 8001d84:	bf00      	nop
 8001d86:	f7ff fe77 	bl	8001a78 <LL_RCC_LSE_IsReady>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d1fa      	bne.n	8001d86 <HAL_RTC_MspInit+0x6a>
    {
    }
    LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSE);
 8001d90:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001d94:	f7ff fe84 	bl	8001aa0 <LL_RCC_SetRTCClockSource>
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d103      	bne.n	8001da6 <HAL_RTC_MspInit+0x8a>
    {
      LL_APB1_GRP1_DisableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001d9e:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8001da2:	f7ff fef3 	bl	8001b8c <LL_APB1_GRP1_DisableClock>
    }
  }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001da6:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <HAL_RTC_MspInit+0xb8>)
 8001da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dac:	4a09      	ldr	r2, [pc, #36]	@ (8001dd4 <HAL_RTC_MspInit+0xb8>)
 8001dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001db2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2100      	movs	r1, #0
 8001dba:	2029      	movs	r0, #41	@ 0x29
 8001dbc:	f000 fcdd 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001dc0:	2029      	movs	r0, #41	@ 0x29
 8001dc2:	f000 fcf6 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40002800 	.word	0x40002800
 8001dd4:	40021000 	.word	0x40021000

08001dd8 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <HAL_RTC_MspDeInit+0x30>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d10a      	bne.n	8001e00 <HAL_RTC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001dea:	4b08      	ldr	r3, [pc, #32]	@ (8001e0c <HAL_RTC_MspDeInit+0x34>)
 8001dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001df0:	4a06      	ldr	r2, [pc, #24]	@ (8001e0c <HAL_RTC_MspDeInit+0x34>)
 8001df2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001df6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* RTC interrupt Deinit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 8001dfa:	2029      	movs	r0, #41	@ 0x29
 8001dfc:	f000 fce7 	bl	80027ce <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40002800 	.word	0x40002800
 8001e0c:	40021000 	.word	0x40021000

08001e10 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e16:	4a1c      	ldr	r2, [pc, #112]	@ (8001e88 <MX_SPI1_Init+0x78>)
 8001e18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e22:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e2a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001e2e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e30:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001e3c:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e3e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e42:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e50:	4b0c      	ldr	r3, [pc, #48]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e56:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e5e:	2207      	movs	r2, #7
 8001e60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e6e:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <MX_SPI1_Init+0x74>)
 8001e70:	f002 fde2 	bl	8004a38 <HAL_SPI_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001e7a:	f7ff fdcf 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200027a8 	.word	0x200027a8
 8001e88:	40013000 	.word	0x40013000

08001e8c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	@ 0x28
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a25      	ldr	r2, [pc, #148]	@ (8001f40 <HAL_SPI_MspInit+0xb4>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d144      	bne.n	8001f38 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eae:	4b25      	ldr	r3, [pc, #148]	@ (8001f44 <HAL_SPI_MspInit+0xb8>)
 8001eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eb2:	4a24      	ldr	r2, [pc, #144]	@ (8001f44 <HAL_SPI_MspInit+0xb8>)
 8001eb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001eba:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <HAL_SPI_MspInit+0xb8>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8001f44 <HAL_SPI_MspInit+0xb8>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eca:	4a1e      	ldr	r2, [pc, #120]	@ (8001f44 <HAL_SPI_MspInit+0xb8>)
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <HAL_SPI_MspInit+0xb8>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <HAL_SPI_MspInit+0xb8>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ee2:	4a18      	ldr	r2, [pc, #96]	@ (8001f44 <HAL_SPI_MspInit+0xb8>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eea:	4b16      	ldr	r3, [pc, #88]	@ (8001f44 <HAL_SPI_MspInit+0xb8>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	60bb      	str	r3, [r7, #8]
 8001ef4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001ef6:	23c2      	movs	r3, #194	@ 0xc2
 8001ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f06:	2305      	movs	r3, #5
 8001f08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f14:	f000 fd68 	bl	80029e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f24:	2303      	movs	r3, #3
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f28:	2305      	movs	r3, #5
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	4619      	mov	r1, r3
 8001f32:	4805      	ldr	r0, [pc, #20]	@ (8001f48 <HAL_SPI_MspInit+0xbc>)
 8001f34:	f000 fd58 	bl	80029e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3728      	adds	r7, #40	@ 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40013000 	.word	0x40013000
 8001f44:	40021000 	.word	0x40021000
 8001f48:	48000400 	.word	0x48000400

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	4b0f      	ldr	r3, [pc, #60]	@ (8001f90 <HAL_MspInit+0x44>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f56:	4a0e      	ldr	r2, [pc, #56]	@ (8001f90 <HAL_MspInit+0x44>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <HAL_MspInit+0x44>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_MspInit+0x44>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f6e:	4a08      	ldr	r2, [pc, #32]	@ (8001f90 <HAL_MspInit+0x44>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f76:	4b06      	ldr	r3, [pc, #24]	@ (8001f90 <HAL_MspInit+0x44>)
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40021000 	.word	0x40021000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <NMI_Handler+0x4>

08001f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <MemManage_Handler+0x4>

08001fac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fea:	f006 f82b 	bl	8008044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <WWDG_IRQHandler+0x10>)
 8001ffa:	f003 fb30 	bl	800565e <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20002920 	.word	0x20002920

08002008 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <RTC_Alarm_IRQHandler+0x10>)
 800200e:	f002 fbcf 	bl	80047b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20002760 	.word	0x20002760

0800201c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <LPTIM1_IRQHandler+0x10>)
 8002022:	f001 feff 	bl	8003e24 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20002728 	.word	0x20002728

08002030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return 1;
 8002034:	2301      	movs	r3, #1
}
 8002036:	4618      	mov	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_kill>:

int _kill(int pid, int sig)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800204a:	f007 f861 	bl	8009110 <__errno>
 800204e:	4603      	mov	r3, r0
 8002050:	2216      	movs	r2, #22
 8002052:	601a      	str	r2, [r3, #0]
  return -1;
 8002054:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <_exit>:

void _exit (int status)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002068:	f04f 31ff 	mov.w	r1, #4294967295
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f7ff ffe7 	bl	8002040 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002072:	bf00      	nop
 8002074:	e7fd      	b.n	8002072 <_exit+0x12>

08002076 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e00a      	b.n	800209e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002088:	f3af 8000 	nop.w
 800208c:	4601      	mov	r1, r0
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	60ba      	str	r2, [r7, #8]
 8002094:	b2ca      	uxtb	r2, r1
 8002096:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	3301      	adds	r3, #1
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	dbf0      	blt.n	8002088 <_read+0x12>
  }

  return len;
 80020a6:	687b      	ldr	r3, [r7, #4]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b086      	sub	sp, #24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
 80020c0:	e009      	b.n	80020d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	60ba      	str	r2, [r7, #8]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	429a      	cmp	r2, r3
 80020dc:	dbf1      	blt.n	80020c2 <_write+0x12>
  }
  return len;
 80020de:	687b      	ldr	r3, [r7, #4]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3718      	adds	r7, #24
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_close>:

int _close(int file)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002110:	605a      	str	r2, [r3, #4]
  return 0;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <_isatty>:

int _isatty(int file)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002128:	2301      	movs	r3, #1
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	@ (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	@ (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	@ (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f006 ffc6 	bl	8009110 <__errno>
 8002184:	4603      	mov	r3, r0
 8002186:	220c      	movs	r2, #12
 8002188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	@ (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	2000c000 	.word	0x2000c000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	2000280c 	.word	0x2000280c
 80021b8:	20002fa8 	.word	0x20002fa8

080021bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <SystemInit+0x20>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <SystemInit+0x20>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <LL_RCC_SetUSARTClockSource>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80021e8:	4b09      	ldr	r3, [pc, #36]	@ (8002210 <LL_RCC_SetUSARTClockSource+0x30>)
 80021ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	4905      	ldr	r1, [pc, #20]	@ (8002210 <LL_RCC_SetUSARTClockSource+0x30>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002202:	bf00      	nop
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	40021000 	.word	0x40021000

08002214 <LL_RCC_SetLPUARTClockSource>:
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <LL_RCC_SetLPUARTClockSource+0x28>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002222:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002226:	4905      	ldr	r1, [pc, #20]	@ (800223c <LL_RCC_SetLPUARTClockSource+0x28>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40021000 	.word	0x40021000

08002240 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 8002246:	4a13      	ldr	r2, [pc, #76]	@ (8002294 <MX_LPUART1_UART_Init+0x54>)
 8002248:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 800224a:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 800224c:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8002250:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002252:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002258:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800225e:	4b0c      	ldr	r3, [pc, #48]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002264:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 8002266:	220c      	movs	r2, #12
 8002268:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800226a:	4b09      	ldr	r3, [pc, #36]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002270:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 8002272:	2200      	movs	r2, #0
 8002274:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 8002278:	2200      	movs	r2, #0
 800227a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800227c:	4804      	ldr	r0, [pc, #16]	@ (8002290 <MX_LPUART1_UART_Init+0x50>)
 800227e:	f002 fc7e 	bl	8004b7e <HAL_UART_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002288:	f7ff fbc8 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800228c:	bf00      	nop
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20002810 	.word	0x20002810
 8002294:	40008000 	.word	0x40008000

08002298 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800229c:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 800229e:	4a15      	ldr	r2, [pc, #84]	@ (80022f4 <MX_USART1_UART_Init+0x5c>)
 80022a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022a2:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022aa:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022be:	220c      	movs	r2, #12
 80022c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c8:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ce:	4b08      	ldr	r3, [pc, #32]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d4:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022da:	4805      	ldr	r0, [pc, #20]	@ (80022f0 <MX_USART1_UART_Init+0x58>)
 80022dc:	f002 fc4f 	bl	8004b7e <HAL_UART_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80022e6:	f7ff fb99 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022ea:	bf00      	nop
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20002898 	.word	0x20002898
 80022f4:	40013800 	.word	0x40013800

080022f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08c      	sub	sp, #48	@ 0x30
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==LPUART1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a33      	ldr	r2, [pc, #204]	@ (80023e4 <HAL_UART_MspInit+0xec>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d12c      	bne.n	8002374 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    LL_RCC_SetLPUARTClockSource(LL_RCC_LPUART1_CLKSOURCE_PCLK1);
 800231a:	2000      	movs	r0, #0
 800231c:	f7ff ff7a 	bl	8002214 <LL_RCC_SetLPUARTClockSource>

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002320:	4b31      	ldr	r3, [pc, #196]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 8002322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002324:	4a30      	ldr	r2, [pc, #192]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	65d3      	str	r3, [r2, #92]	@ 0x5c
 800232c:	4b2e      	ldr	r3, [pc, #184]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 800232e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002338:	4b2b      	ldr	r3, [pc, #172]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233c:	4a2a      	ldr	r2, [pc, #168]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002344:	4b28      	ldr	r3, [pc, #160]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 8002346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	617b      	str	r3, [r7, #20]
 800234e:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = LPUART1_RX_Pin|LPUART1_TX_Pin;
 8002350:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800235e:	2303      	movs	r3, #3
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002362:	2308      	movs	r3, #8
 8002364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	481f      	ldr	r0, [pc, #124]	@ (80023ec <HAL_UART_MspInit+0xf4>)
 800236e:	f000 fb3b 	bl	80029e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002372:	e032      	b.n	80023da <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1d      	ldr	r2, [pc, #116]	@ (80023f0 <HAL_UART_MspInit+0xf8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d12d      	bne.n	80023da <HAL_UART_MspInit+0xe2>
    LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK2);
 800237e:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8002382:	f7ff ff2d 	bl	80021e0 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002386:	4b18      	ldr	r3, [pc, #96]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 8002388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238a:	4a17      	ldr	r2, [pc, #92]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 800238c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002390:	6613      	str	r3, [r2, #96]	@ 0x60
 8002392:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 8002394:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a2:	4a11      	ldr	r2, [pc, #68]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023aa:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <HAL_UART_MspInit+0xf0>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80023b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80023ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c4:	2303      	movs	r3, #3
 80023c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023c8:	2307      	movs	r3, #7
 80023ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d6:	f000 fb07 	bl	80029e8 <HAL_GPIO_Init>
}
 80023da:	bf00      	nop
 80023dc:	3730      	adds	r7, #48	@ 0x30
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40008000 	.word	0x40008000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	48000400 	.word	0x48000400
 80023f0:	40013800 	.word	0x40013800

080023f4 <MX_WWDG_Init>:

WWDG_HandleTypeDef hwwdg;

/* WWDG init function */
void MX_WWDG_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE END WWDG_Init 0 */

  /* USER CODE BEGIN WWDG_Init 1 */

  /* USER CODE END WWDG_Init 1 */
  hwwdg.Instance = WWDG;
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <MX_WWDG_Init+0x38>)
 80023fa:	4a0d      	ldr	r2, [pc, #52]	@ (8002430 <MX_WWDG_Init+0x3c>)
 80023fc:	601a      	str	r2, [r3, #0]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_1;
 80023fe:	4b0b      	ldr	r3, [pc, #44]	@ (800242c <MX_WWDG_Init+0x38>)
 8002400:	2200      	movs	r2, #0
 8002402:	605a      	str	r2, [r3, #4]
  hwwdg.Init.Window = 64;
 8002404:	4b09      	ldr	r3, [pc, #36]	@ (800242c <MX_WWDG_Init+0x38>)
 8002406:	2240      	movs	r2, #64	@ 0x40
 8002408:	609a      	str	r2, [r3, #8]
  hwwdg.Init.Counter = 64;
 800240a:	4b08      	ldr	r3, [pc, #32]	@ (800242c <MX_WWDG_Init+0x38>)
 800240c:	2240      	movs	r2, #64	@ 0x40
 800240e:	60da      	str	r2, [r3, #12]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 8002410:	4b06      	ldr	r3, [pc, #24]	@ (800242c <MX_WWDG_Init+0x38>)
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	@ (800242c <MX_WWDG_Init+0x38>)
 8002418:	f003 f8fd 	bl	8005616 <HAL_WWDG_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_WWDG_Init+0x32>
  {
    Error_Handler();
 8002422:	f7ff fafb 	bl	8001a1c <Error_Handler>
  }
  /* USER CODE BEGIN WWDG_Init 2 */

  /* USER CODE END WWDG_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20002920 	.word	0x20002920
 8002430:	40002c00 	.word	0x40002c00

08002434 <HAL_WWDG_MspInit>:

void HAL_WWDG_MspInit(WWDG_HandleTypeDef* wwdgHandle)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  if(wwdgHandle->Instance==WWDG)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <HAL_WWDG_MspInit+0x44>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d113      	bne.n	800246e <HAL_WWDG_MspInit+0x3a>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* WWDG clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8002446:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <HAL_WWDG_MspInit+0x48>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244a:	4a0c      	ldr	r2, [pc, #48]	@ (800247c <HAL_WWDG_MspInit+0x48>)
 800244c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002450:	6593      	str	r3, [r2, #88]	@ 0x58
 8002452:	4b0a      	ldr	r3, [pc, #40]	@ (800247c <HAL_WWDG_MspInit+0x48>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]

    /* WWDG interrupt Init */
    HAL_NVIC_SetPriority(WWDG_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	2000      	movs	r0, #0
 8002464:	f000 f989 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(WWDG_IRQn);
 8002468:	2000      	movs	r0, #0
 800246a:	f000 f9a2 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40002c00 	.word	0x40002c00
 800247c:	40021000 	.word	0x40021000

08002480 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002480:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002484:	f7ff fe9a 	bl	80021bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002488:	480c      	ldr	r0, [pc, #48]	@ (80024bc <LoopForever+0x6>)
  ldr r1, =_edata
 800248a:	490d      	ldr	r1, [pc, #52]	@ (80024c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800248c:	4a0d      	ldr	r2, [pc, #52]	@ (80024c4 <LoopForever+0xe>)
  movs r3, #0
 800248e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002490:	e002      	b.n	8002498 <LoopCopyDataInit>

08002492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002496:	3304      	adds	r3, #4

08002498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800249a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800249c:	d3f9      	bcc.n	8002492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800249e:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024a0:	4c0a      	ldr	r4, [pc, #40]	@ (80024cc <LoopForever+0x16>)
  movs r3, #0
 80024a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024a4:	e001      	b.n	80024aa <LoopFillZerobss>

080024a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a8:	3204      	adds	r2, #4

080024aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024ac:	d3fb      	bcc.n	80024a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ae:	f006 fe35 	bl	800911c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024b2:	f7ff f9e3 	bl	800187c <main>

080024b6 <LoopForever>:

LoopForever:
    b LoopForever
 80024b6:	e7fe      	b.n	80024b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80024b8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80024bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024c0:	20002640 	.word	0x20002640
  ldr r2, =_sidata
 80024c4:	0800c3d4 	.word	0x0800c3d4
  ldr r2, =_sbss
 80024c8:	20002640 	.word	0x20002640
  ldr r4, =_ebss
 80024cc:	20002fa4 	.word	0x20002fa4

080024d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80024d0:	e7fe      	b.n	80024d0 <ADC1_IRQHandler>

080024d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024dc:	2003      	movs	r0, #3
 80024de:	f000 f941 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024e2:	2000      	movs	r0, #0
 80024e4:	f000 f80e 	bl	8002504 <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	71fb      	strb	r3, [r7, #7]
 80024f2:	e001      	b.n	80024f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024f4:	f7ff fd2a 	bl	8001f4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024f8:	79fb      	ldrb	r3, [r7, #7]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002510:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <HAL_InitTick+0x6c>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d023      	beq.n	8002560 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002518:	4b16      	ldr	r3, [pc, #88]	@ (8002574 <HAL_InitTick+0x70>)
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <HAL_InitTick+0x6c>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002526:	fbb3 f3f1 	udiv	r3, r3, r1
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f95b 	bl	80027ea <HAL_SYSTICK_Config>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b0f      	cmp	r3, #15
 800253e:	d809      	bhi.n	8002554 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002540:	2200      	movs	r2, #0
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	f04f 30ff 	mov.w	r0, #4294967295
 8002548:	f000 f917 	bl	800277a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800254c:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <HAL_InitTick+0x74>)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e007      	b.n	8002564 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e004      	b.n	8002564 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	73fb      	strb	r3, [r7, #15]
 800255e:	e001      	b.n	8002564 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	20000008 	.word	0x20000008
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800258c:	4b0c      	ldr	r3, [pc, #48]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ae:	4a04      	ldr	r2, [pc, #16]	@ (80025c0 <__NVIC_SetPriorityGrouping+0x44>)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	60d3      	str	r3, [r2, #12]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c8:	4b04      	ldr	r3, [pc, #16]	@ (80025dc <__NVIC_GetPriorityGrouping+0x18>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	0a1b      	lsrs	r3, r3, #8
 80025ce:	f003 0307 	and.w	r3, r3, #7
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000ed00 	.word	0xe000ed00

080025e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	db0b      	blt.n	800260a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	f003 021f 	and.w	r2, r3, #31
 80025f8:	4907      	ldr	r1, [pc, #28]	@ (8002618 <__NVIC_EnableIRQ+0x38>)
 80025fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	2001      	movs	r0, #1
 8002602:	fa00 f202 	lsl.w	r2, r0, r2
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260a:	bf00      	nop
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	e000e100 	.word	0xe000e100

0800261c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	4603      	mov	r3, r0
 8002624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	2b00      	cmp	r3, #0
 800262c:	db12      	blt.n	8002654 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	f003 021f 	and.w	r2, r3, #31
 8002634:	490a      	ldr	r1, [pc, #40]	@ (8002660 <__NVIC_DisableIRQ+0x44>)
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2001      	movs	r0, #1
 800263e:	fa00 f202 	lsl.w	r2, r0, r2
 8002642:	3320      	adds	r3, #32
 8002644:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002648:	f3bf 8f4f 	dsb	sy
}
 800264c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800264e:	f3bf 8f6f 	isb	sy
}
 8002652:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	e000e100 	.word	0xe000e100

08002664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db0a      	blt.n	800268e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	490c      	ldr	r1, [pc, #48]	@ (80026b0 <__NVIC_SetPriority+0x4c>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	440b      	add	r3, r1
 8002688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800268c:	e00a      	b.n	80026a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4908      	ldr	r1, [pc, #32]	@ (80026b4 <__NVIC_SetPriority+0x50>)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3b04      	subs	r3, #4
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	440b      	add	r3, r1
 80026a2:	761a      	strb	r2, [r3, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	@ 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf28      	it	cs
 80026d6:	2304      	movcs	r3, #4
 80026d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3304      	adds	r3, #4
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d902      	bls.n	80026e8 <NVIC_EncodePriority+0x30>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	e000      	b.n	80026ea <NVIC_EncodePriority+0x32>
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002700:	f04f 31ff 	mov.w	r1, #4294967295
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43d9      	mvns	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	4313      	orrs	r3, r2
         );
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	@ 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff8e 	bl	8002664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff05 	bl	800257c <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff1a 	bl	80025c4 <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff8e 	bl	80026b8 <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5d 	bl	8002664 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff0d 	bl	80025e0 <__NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff1d 	bl	800261c <__NVIC_DisableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ff94 	bl	8002720 <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e054      	b.n	80028c0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7f5b      	ldrb	r3, [r3, #29]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe fb76 	bl	8000f18 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	791b      	ldrb	r3, [r3, #4]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10c      	bne.n	8002854 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a22      	ldr	r2, [pc, #136]	@ (80028c8 <HAL_CRC_Init+0xc4>)
 8002840:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f022 0218 	bic.w	r2, r2, #24
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	e00c      	b.n	800286e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	461a      	mov	r2, r3
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f834 	bl	80028cc <HAL_CRCEx_Polynomial_Set>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e028      	b.n	80028c0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	795b      	ldrb	r3, [r3, #5]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f04f 32ff 	mov.w	r2, #4294967295
 800287e:	611a      	str	r2, [r3, #16]
 8002880:	e004      	b.n	800288c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6912      	ldr	r2, [r2, #16]
 800288a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	430a      	orrs	r2, r1
 80028a0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	04c11db7 	.word	0x04c11db7

080028cc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80028dc:	231f      	movs	r3, #31
 80028de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0301 	and.w	r3, r3, #1
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	75fb      	strb	r3, [r7, #23]
 80028ee:	e063      	b.n	80029b8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80028f0:	bf00      	nop
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1e5a      	subs	r2, r3, #1
 80028f6:	613a      	str	r2, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <HAL_CRCEx_Polynomial_Set+0x44>
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b18      	cmp	r3, #24
 8002914:	d846      	bhi.n	80029a4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8002916:	a201      	add	r2, pc, #4	@ (adr r2, 800291c <HAL_CRCEx_Polynomial_Set+0x50>)
 8002918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800291c:	080029ab 	.word	0x080029ab
 8002920:	080029a5 	.word	0x080029a5
 8002924:	080029a5 	.word	0x080029a5
 8002928:	080029a5 	.word	0x080029a5
 800292c:	080029a5 	.word	0x080029a5
 8002930:	080029a5 	.word	0x080029a5
 8002934:	080029a5 	.word	0x080029a5
 8002938:	080029a5 	.word	0x080029a5
 800293c:	08002999 	.word	0x08002999
 8002940:	080029a5 	.word	0x080029a5
 8002944:	080029a5 	.word	0x080029a5
 8002948:	080029a5 	.word	0x080029a5
 800294c:	080029a5 	.word	0x080029a5
 8002950:	080029a5 	.word	0x080029a5
 8002954:	080029a5 	.word	0x080029a5
 8002958:	080029a5 	.word	0x080029a5
 800295c:	0800298d 	.word	0x0800298d
 8002960:	080029a5 	.word	0x080029a5
 8002964:	080029a5 	.word	0x080029a5
 8002968:	080029a5 	.word	0x080029a5
 800296c:	080029a5 	.word	0x080029a5
 8002970:	080029a5 	.word	0x080029a5
 8002974:	080029a5 	.word	0x080029a5
 8002978:	080029a5 	.word	0x080029a5
 800297c:	08002981 	.word	0x08002981
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	2b06      	cmp	r3, #6
 8002984:	d913      	bls.n	80029ae <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800298a:	e010      	b.n	80029ae <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b07      	cmp	r3, #7
 8002990:	d90f      	bls.n	80029b2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002996:	e00c      	b.n	80029b2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	2b0f      	cmp	r3, #15
 800299c:	d90b      	bls.n	80029b6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80029a2:	e008      	b.n	80029b6 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	75fb      	strb	r3, [r7, #23]
        break;
 80029a8:	e006      	b.n	80029b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80029aa:	bf00      	nop
 80029ac:	e004      	b.n	80029b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80029b6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80029b8:	7dfb      	ldrb	r3, [r7, #23]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f023 0118 	bic.w	r1, r3, #24
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80029da:	7dfb      	ldrb	r3, [r7, #23]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029f6:	e154      	b.n	8002ca2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8146 	beq.w	8002c9c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d005      	beq.n	8002a28 <HAL_GPIO_Init+0x40>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d130      	bne.n	8002a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	2203      	movs	r2, #3
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	68da      	ldr	r2, [r3, #12]
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a5e:	2201      	movs	r2, #1
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	f003 0201 	and.w	r2, r3, #1
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d017      	beq.n	8002ac6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	689a      	ldr	r2, [r3, #8]
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d123      	bne.n	8002b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	08da      	lsrs	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3208      	adds	r2, #8
 8002ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	220f      	movs	r2, #15
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	08da      	lsrs	r2, r3, #3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3208      	adds	r2, #8
 8002b14:	6939      	ldr	r1, [r7, #16]
 8002b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	43db      	mvns	r3, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 0203 	and.w	r2, r3, #3
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 80a0 	beq.w	8002c9c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5c:	4b58      	ldr	r3, [pc, #352]	@ (8002cc0 <HAL_GPIO_Init+0x2d8>)
 8002b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b60:	4a57      	ldr	r2, [pc, #348]	@ (8002cc0 <HAL_GPIO_Init+0x2d8>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b68:	4b55      	ldr	r3, [pc, #340]	@ (8002cc0 <HAL_GPIO_Init+0x2d8>)
 8002b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	60bb      	str	r3, [r7, #8]
 8002b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b74:	4a53      	ldr	r2, [pc, #332]	@ (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	089b      	lsrs	r3, r3, #2
 8002b7a:	3302      	adds	r3, #2
 8002b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f003 0303 	and.w	r3, r3, #3
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b9e:	d019      	beq.n	8002bd4 <HAL_GPIO_Init+0x1ec>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a49      	ldr	r2, [pc, #292]	@ (8002cc8 <HAL_GPIO_Init+0x2e0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d013      	beq.n	8002bd0 <HAL_GPIO_Init+0x1e8>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a48      	ldr	r2, [pc, #288]	@ (8002ccc <HAL_GPIO_Init+0x2e4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00d      	beq.n	8002bcc <HAL_GPIO_Init+0x1e4>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a47      	ldr	r2, [pc, #284]	@ (8002cd0 <HAL_GPIO_Init+0x2e8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d007      	beq.n	8002bc8 <HAL_GPIO_Init+0x1e0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a46      	ldr	r2, [pc, #280]	@ (8002cd4 <HAL_GPIO_Init+0x2ec>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <HAL_GPIO_Init+0x1dc>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	e008      	b.n	8002bd6 <HAL_GPIO_Init+0x1ee>
 8002bc4:	2307      	movs	r3, #7
 8002bc6:	e006      	b.n	8002bd6 <HAL_GPIO_Init+0x1ee>
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e004      	b.n	8002bd6 <HAL_GPIO_Init+0x1ee>
 8002bcc:	2302      	movs	r3, #2
 8002bce:	e002      	b.n	8002bd6 <HAL_GPIO_Init+0x1ee>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <HAL_GPIO_Init+0x1ee>
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	f002 0203 	and.w	r2, r2, #3
 8002bdc:	0092      	lsls	r2, r2, #2
 8002bde:	4093      	lsls	r3, r2
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002be6:	4937      	ldr	r1, [pc, #220]	@ (8002cc4 <HAL_GPIO_Init+0x2dc>)
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	089b      	lsrs	r3, r3, #2
 8002bec:	3302      	adds	r3, #2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bf4:	4b38      	ldr	r3, [pc, #224]	@ (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4013      	ands	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c18:	4a2f      	ldr	r2, [pc, #188]	@ (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c42:	4a25      	ldr	r2, [pc, #148]	@ (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c48:	4b23      	ldr	r3, [pc, #140]	@ (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c72:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c96:	4a10      	ldr	r2, [pc, #64]	@ (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f47f aea3 	bne.w	80029f8 <HAL_GPIO_Init+0x10>
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	40010000 	.word	0x40010000
 8002cc8:	48000400 	.word	0x48000400
 8002ccc:	48000800 	.word	0x48000800
 8002cd0:	48000c00 	.word	0x48000c00
 8002cd4:	48001000 	.word	0x48001000
 8002cd8:	40010400 	.word	0x40010400

08002cdc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002cea:	e0b7      	b.n	8002e5c <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002cec:	2201      	movs	r2, #1
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f000 80aa 	beq.w	8002e56 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d02:	4a5d      	ldr	r2, [pc, #372]	@ (8002e78 <HAL_GPIO_DeInit+0x19c>)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	089b      	lsrs	r3, r3, #2
 8002d08:	3302      	adds	r3, #2
 8002d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d0e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	220f      	movs	r2, #15
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	68fa      	ldr	r2, [r7, #12]
 8002d20:	4013      	ands	r3, r2
 8002d22:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d2a:	d019      	beq.n	8002d60 <HAL_GPIO_DeInit+0x84>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a53      	ldr	r2, [pc, #332]	@ (8002e7c <HAL_GPIO_DeInit+0x1a0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d013      	beq.n	8002d5c <HAL_GPIO_DeInit+0x80>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a52      	ldr	r2, [pc, #328]	@ (8002e80 <HAL_GPIO_DeInit+0x1a4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00d      	beq.n	8002d58 <HAL_GPIO_DeInit+0x7c>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a51      	ldr	r2, [pc, #324]	@ (8002e84 <HAL_GPIO_DeInit+0x1a8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d007      	beq.n	8002d54 <HAL_GPIO_DeInit+0x78>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a50      	ldr	r2, [pc, #320]	@ (8002e88 <HAL_GPIO_DeInit+0x1ac>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_GPIO_DeInit+0x74>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	e008      	b.n	8002d62 <HAL_GPIO_DeInit+0x86>
 8002d50:	2307      	movs	r3, #7
 8002d52:	e006      	b.n	8002d62 <HAL_GPIO_DeInit+0x86>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e004      	b.n	8002d62 <HAL_GPIO_DeInit+0x86>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e002      	b.n	8002d62 <HAL_GPIO_DeInit+0x86>
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e000      	b.n	8002d62 <HAL_GPIO_DeInit+0x86>
 8002d60:	2300      	movs	r3, #0
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	f002 0203 	and.w	r2, r2, #3
 8002d68:	0092      	lsls	r2, r2, #2
 8002d6a:	4093      	lsls	r3, r2
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d132      	bne.n	8002dd8 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d72:	4b46      	ldr	r3, [pc, #280]	@ (8002e8c <HAL_GPIO_DeInit+0x1b0>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	4944      	ldr	r1, [pc, #272]	@ (8002e8c <HAL_GPIO_DeInit+0x1b0>)
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002d80:	4b42      	ldr	r3, [pc, #264]	@ (8002e8c <HAL_GPIO_DeInit+0x1b0>)
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	4940      	ldr	r1, [pc, #256]	@ (8002e8c <HAL_GPIO_DeInit+0x1b0>)
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e8c <HAL_GPIO_DeInit+0x1b0>)
 8002d90:	68da      	ldr	r2, [r3, #12]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	43db      	mvns	r3, r3
 8002d96:	493d      	ldr	r1, [pc, #244]	@ (8002e8c <HAL_GPIO_DeInit+0x1b0>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e8c <HAL_GPIO_DeInit+0x1b0>)
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	4939      	ldr	r1, [pc, #228]	@ (8002e8c <HAL_GPIO_DeInit+0x1b0>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	220f      	movs	r2, #15
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002dba:	4a2f      	ldr	r2, [pc, #188]	@ (8002e78 <HAL_GPIO_DeInit+0x19c>)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	089b      	lsrs	r3, r3, #2
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	43da      	mvns	r2, r3
 8002dca:	482b      	ldr	r0, [pc, #172]	@ (8002e78 <HAL_GPIO_DeInit+0x19c>)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	400a      	ands	r2, r1
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2103      	movs	r1, #3
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	08da      	lsrs	r2, r3, #3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	3208      	adds	r2, #8
 8002df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	220f      	movs	r2, #15
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	08d2      	lsrs	r2, r2, #3
 8002e0c:	4019      	ands	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	2103      	movs	r1, #3
 8002e20:	fa01 f303 	lsl.w	r3, r1, r3
 8002e24:	43db      	mvns	r3, r3
 8002e26:	401a      	ands	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	2101      	movs	r1, #1
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	fa01 f303 	lsl.w	r3, r1, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	2103      	movs	r1, #3
 8002e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	401a      	ands	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa22 f303 	lsr.w	r3, r2, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f47f af41 	bne.w	8002cec <HAL_GPIO_DeInit+0x10>
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	40010000 	.word	0x40010000
 8002e7c:	48000400 	.word	0x48000400
 8002e80:	48000800 	.word	0x48000800
 8002e84:	48000c00 	.word	0x48000c00
 8002e88:	48001000 	.word	0x48001000
 8002e8c:	40010400 	.word	0x40010400

08002e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	807b      	strh	r3, [r7, #2]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ea0:	787b      	ldrb	r3, [r7, #1]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ea6:	887a      	ldrh	r2, [r7, #2]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002eac:	e002      	b.n	8002eb4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eae:	887a      	ldrh	r2, [r7, #2]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e08d      	b.n	8002fee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe f99e 	bl	8001228 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	@ 0x24
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d107      	bne.n	8002f3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f36:	609a      	str	r2, [r3, #8]
 8002f38:	e006      	b.n	8002f48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d108      	bne.n	8002f62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	e007      	b.n	8002f72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68da      	ldr	r2, [r3, #12]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69d9      	ldr	r1, [r3, #28]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a1a      	ldr	r2, [r3, #32]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	4608      	mov	r0, r1
 8003002:	4611      	mov	r1, r2
 8003004:	461a      	mov	r2, r3
 8003006:	4603      	mov	r3, r0
 8003008:	817b      	strh	r3, [r7, #10]
 800300a:	460b      	mov	r3, r1
 800300c:	813b      	strh	r3, [r7, #8]
 800300e:	4613      	mov	r3, r2
 8003010:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b20      	cmp	r3, #32
 800301c:	f040 80f9 	bne.w	8003212 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d002      	beq.n	800302c <HAL_I2C_Mem_Write+0x34>
 8003026:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003032:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0ed      	b.n	8003214 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_I2C_Mem_Write+0x4e>
 8003042:	2302      	movs	r3, #2
 8003044:	e0e6      	b.n	8003214 <HAL_I2C_Mem_Write+0x21c>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800304e:	f005 f80b 	bl	8008068 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2319      	movs	r3, #25
 800305a:	2201      	movs	r2, #1
 800305c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fbaf 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0d1      	b.n	8003214 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2221      	movs	r2, #33	@ 0x21
 8003074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2240      	movs	r2, #64	@ 0x40
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a3a      	ldr	r2, [r7, #32]
 800308a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003090:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003098:	88f8      	ldrh	r0, [r7, #6]
 800309a:	893a      	ldrh	r2, [r7, #8]
 800309c:	8979      	ldrh	r1, [r7, #10]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	9301      	str	r3, [sp, #4]
 80030a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a4:	9300      	str	r3, [sp, #0]
 80030a6:	4603      	mov	r3, r0
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 fabf 	bl	800362c <I2C_RequestMemoryWrite>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0a9      	b.n	8003214 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2bff      	cmp	r3, #255	@ 0xff
 80030c8:	d90e      	bls.n	80030e8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	22ff      	movs	r2, #255	@ 0xff
 80030ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	8979      	ldrh	r1, [r7, #10]
 80030d8:	2300      	movs	r3, #0
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fd33 	bl	8003b4c <I2C_TransferConfig>
 80030e6:	e00f      	b.n	8003108 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	8979      	ldrh	r1, [r7, #10]
 80030fa:	2300      	movs	r3, #0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fd22 	bl	8003b4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fbb2 	bl	8003876 <I2C_WaitOnTXISFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e07b      	b.n	8003214 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	781a      	ldrb	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003150:	b29b      	uxth	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d034      	beq.n	80031c0 <HAL_I2C_Mem_Write+0x1c8>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800315a:	2b00      	cmp	r3, #0
 800315c:	d130      	bne.n	80031c0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003164:	2200      	movs	r2, #0
 8003166:	2180      	movs	r1, #128	@ 0x80
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fb2b 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e04d      	b.n	8003214 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2bff      	cmp	r3, #255	@ 0xff
 8003180:	d90e      	bls.n	80031a0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	22ff      	movs	r2, #255	@ 0xff
 8003186:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318c:	b2da      	uxtb	r2, r3
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	2300      	movs	r3, #0
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f000 fcd7 	bl	8003b4c <I2C_TransferConfig>
 800319e:	e00f      	b.n	80031c0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	8979      	ldrh	r1, [r7, #10]
 80031b2:	2300      	movs	r3, #0
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fcc6 	bl	8003b4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d19e      	bne.n	8003108 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fb98 	bl	8003904 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e01a      	b.n	8003214 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2220      	movs	r2, #32
 80031e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b0a      	ldr	r3, [pc, #40]	@ (800321c <HAL_I2C_Mem_Write+0x224>)
 80031f2:	400b      	ands	r3, r1
 80031f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	e000      	b.n	8003214 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003212:	2302      	movs	r3, #2
  }
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	fe00e800 	.word	0xfe00e800

08003220 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	4608      	mov	r0, r1
 800322a:	4611      	mov	r1, r2
 800322c:	461a      	mov	r2, r3
 800322e:	4603      	mov	r3, r0
 8003230:	817b      	strh	r3, [r7, #10]
 8003232:	460b      	mov	r3, r1
 8003234:	813b      	strh	r3, [r7, #8]
 8003236:	4613      	mov	r3, r2
 8003238:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	f040 80fd 	bne.w	8003442 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003248:	6a3b      	ldr	r3, [r7, #32]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d002      	beq.n	8003254 <HAL_I2C_Mem_Read+0x34>
 800324e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003250:	2b00      	cmp	r3, #0
 8003252:	d105      	bne.n	8003260 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800325a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0f1      	b.n	8003444 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_I2C_Mem_Read+0x4e>
 800326a:	2302      	movs	r3, #2
 800326c:	e0ea      	b.n	8003444 <HAL_I2C_Mem_Read+0x224>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003276:	f004 fef7 	bl	8008068 <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	2319      	movs	r3, #25
 8003282:	2201      	movs	r2, #1
 8003284:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003288:	68f8      	ldr	r0, [r7, #12]
 800328a:	f000 fa9b 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e0d5      	b.n	8003444 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2222      	movs	r2, #34	@ 0x22
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2240      	movs	r2, #64	@ 0x40
 80032a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a3a      	ldr	r2, [r7, #32]
 80032b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032c0:	88f8      	ldrh	r0, [r7, #6]
 80032c2:	893a      	ldrh	r2, [r7, #8]
 80032c4:	8979      	ldrh	r1, [r7, #10]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	4603      	mov	r3, r0
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f9ff 	bl	80036d4 <I2C_RequestMemoryRead>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0ad      	b.n	8003444 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2bff      	cmp	r3, #255	@ 0xff
 80032f0:	d90e      	bls.n	8003310 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	4b52      	ldr	r3, [pc, #328]	@ (800344c <HAL_I2C_Mem_Read+0x22c>)
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fc1f 	bl	8003b4c <I2C_TransferConfig>
 800330e:	e00f      	b.n	8003330 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800331e:	b2da      	uxtb	r2, r3
 8003320:	8979      	ldrh	r1, [r7, #10]
 8003322:	4b4a      	ldr	r3, [pc, #296]	@ (800344c <HAL_I2C_Mem_Read+0x22c>)
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fc0e 	bl	8003b4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003336:	2200      	movs	r2, #0
 8003338:	2104      	movs	r1, #4
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fa42 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e07c      	b.n	8003444 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003354:	b2d2      	uxtb	r2, r2
 8003356:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003366:	3b01      	subs	r3, #1
 8003368:	b29a      	uxth	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d034      	beq.n	80033f0 <HAL_I2C_Mem_Read+0x1d0>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338a:	2b00      	cmp	r3, #0
 800338c:	d130      	bne.n	80033f0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003394:	2200      	movs	r2, #0
 8003396:	2180      	movs	r1, #128	@ 0x80
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 fa13 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e04d      	b.n	8003444 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2bff      	cmp	r3, #255	@ 0xff
 80033b0:	d90e      	bls.n	80033d0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2201      	movs	r2, #1
 80033b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	8979      	ldrh	r1, [r7, #10]
 80033c0:	2300      	movs	r3, #0
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 fbbf 	bl	8003b4c <I2C_TransferConfig>
 80033ce:	e00f      	b.n	80033f0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	8979      	ldrh	r1, [r7, #10]
 80033e2:	2300      	movs	r3, #0
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 fbae 	bl	8003b4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d19a      	bne.n	8003330 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fa80 	bl	8003904 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e01a      	b.n	8003444 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2220      	movs	r2, #32
 8003414:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_I2C_Mem_Read+0x230>)
 8003422:	400b      	ands	r3, r1
 8003424:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2220      	movs	r2, #32
 800342a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	4618      	mov	r0, r3
 8003446:	3718      	adds	r7, #24
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	80002400 	.word	0x80002400
 8003450:	fe00e800 	.word	0xfe00e800

08003454 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	460b      	mov	r3, r1
 8003462:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b20      	cmp	r3, #32
 8003472:	f040 80d6 	bne.w	8003622 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003484:	d101      	bne.n	800348a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003486:	2302      	movs	r3, #2
 8003488:	e0cc      	b.n	8003624 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_I2C_IsDeviceReady+0x44>
 8003494:	2302      	movs	r3, #2
 8003496:	e0c5      	b.n	8003624 <HAL_I2C_IsDeviceReady+0x1d0>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2224      	movs	r2, #36	@ 0x24
 80034a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d107      	bne.n	80034c6 <HAL_I2C_IsDeviceReady+0x72>
 80034b6:	897b      	ldrh	r3, [r7, #10]
 80034b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034c4:	e006      	b.n	80034d4 <HAL_I2C_IsDeviceReady+0x80>
 80034c6:	897b      	ldrh	r3, [r7, #10]
 80034c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034d0:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80034da:	f004 fdc5 	bl	8008068 <HAL_GetTick>
 80034de:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	bf0c      	ite	eq
 80034ee:	2301      	moveq	r3, #1
 80034f0:	2300      	movne	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b10      	cmp	r3, #16
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800350c:	e034      	b.n	8003578 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d01a      	beq.n	800354c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003516:	f004 fda7 	bl	8008068 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d302      	bcc.n	800352c <HAL_I2C_IsDeviceReady+0xd8>
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10f      	bne.n	800354c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003538:	f043 0220 	orr.w	r2, r3, #32
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e06b      	b.n	8003624 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b20      	cmp	r3, #32
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f003 0310 	and.w	r3, r3, #16
 800356c:	2b10      	cmp	r3, #16
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003578:	7ffb      	ldrb	r3, [r7, #31]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <HAL_I2C_IsDeviceReady+0x130>
 800357e:	7fbb      	ldrb	r3, [r7, #30]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0c4      	beq.n	800350e <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b10      	cmp	r3, #16
 8003590:	d01a      	beq.n	80035c8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2200      	movs	r2, #0
 800359a:	2120      	movs	r1, #32
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f911 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e03b      	b.n	8003624 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2220      	movs	r2, #32
 80035b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2220      	movs	r2, #32
 80035b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e02d      	b.n	8003624 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2200      	movs	r2, #0
 80035d0:	2120      	movs	r1, #32
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 f8f6 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e020      	b.n	8003624 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2210      	movs	r2, #16
 80035e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2220      	movs	r2, #32
 80035f0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	3301      	adds	r3, #1
 80035f6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	f63f af56 	bhi.w	80034ae <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360e:	f043 0220 	orr.w	r2, r3, #32
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3720      	adds	r7, #32
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b086      	sub	sp, #24
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	4608      	mov	r0, r1
 8003636:	4611      	mov	r1, r2
 8003638:	461a      	mov	r2, r3
 800363a:	4603      	mov	r3, r0
 800363c:	817b      	strh	r3, [r7, #10]
 800363e:	460b      	mov	r3, r1
 8003640:	813b      	strh	r3, [r7, #8]
 8003642:	4613      	mov	r3, r2
 8003644:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	b2da      	uxtb	r2, r3
 800364a:	8979      	ldrh	r1, [r7, #10]
 800364c:	4b20      	ldr	r3, [pc, #128]	@ (80036d0 <I2C_RequestMemoryWrite+0xa4>)
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 fa79 	bl	8003b4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	69b9      	ldr	r1, [r7, #24]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f909 	bl	8003876 <I2C_WaitOnTXISFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e02c      	b.n	80036c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d105      	bne.n	8003680 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003674:	893b      	ldrh	r3, [r7, #8]
 8003676:	b2da      	uxtb	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	629a      	str	r2, [r3, #40]	@ 0x28
 800367e:	e015      	b.n	80036ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003680:	893b      	ldrh	r3, [r7, #8]
 8003682:	0a1b      	lsrs	r3, r3, #8
 8003684:	b29b      	uxth	r3, r3
 8003686:	b2da      	uxtb	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	69b9      	ldr	r1, [r7, #24]
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f8ef 	bl	8003876 <I2C_WaitOnTXISFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e012      	b.n	80036c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036a2:	893b      	ldrh	r3, [r7, #8]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2200      	movs	r2, #0
 80036b4:	2180      	movs	r1, #128	@ 0x80
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f884 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	80002000 	.word	0x80002000

080036d4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af02      	add	r7, sp, #8
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	461a      	mov	r2, r3
 80036e2:	4603      	mov	r3, r0
 80036e4:	817b      	strh	r3, [r7, #10]
 80036e6:	460b      	mov	r3, r1
 80036e8:	813b      	strh	r3, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	b2da      	uxtb	r2, r3
 80036f2:	8979      	ldrh	r1, [r7, #10]
 80036f4:	4b20      	ldr	r3, [pc, #128]	@ (8003778 <I2C_RequestMemoryRead+0xa4>)
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	2300      	movs	r3, #0
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 fa26 	bl	8003b4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003700:	69fa      	ldr	r2, [r7, #28]
 8003702:	69b9      	ldr	r1, [r7, #24]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f8b6 	bl	8003876 <I2C_WaitOnTXISFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e02c      	b.n	800376e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800371a:	893b      	ldrh	r3, [r7, #8]
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	629a      	str	r2, [r3, #40]	@ 0x28
 8003724:	e015      	b.n	8003752 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003726:	893b      	ldrh	r3, [r7, #8]
 8003728:	0a1b      	lsrs	r3, r3, #8
 800372a:	b29b      	uxth	r3, r3
 800372c:	b2da      	uxtb	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	69b9      	ldr	r1, [r7, #24]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f89c 	bl	8003876 <I2C_WaitOnTXISFlagUntilTimeout>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d001      	beq.n	8003748 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e012      	b.n	800376e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003748:	893b      	ldrh	r3, [r7, #8]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2200      	movs	r2, #0
 800375a:	2140      	movs	r1, #64	@ 0x40
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f831 	bl	80037c4 <I2C_WaitOnFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	80002000 	.word	0x80002000

0800377c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b02      	cmp	r3, #2
 8003790:	d103      	bne.n	800379a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	699b      	ldr	r3, [r3, #24]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d007      	beq.n	80037b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	619a      	str	r2, [r3, #24]
  }
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037d4:	e03b      	b.n	800384e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	6839      	ldr	r1, [r7, #0]
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f8d6 	bl	800398c <I2C_IsErrorOccurred>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e041      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d02d      	beq.n	800384e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037f2:	f004 fc39 	bl	8008068 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d302      	bcc.n	8003808 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d122      	bne.n	800384e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699a      	ldr	r2, [r3, #24]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4013      	ands	r3, r2
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	461a      	mov	r2, r3
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	429a      	cmp	r2, r3
 8003824:	d113      	bne.n	800384e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382a:	f043 0220 	orr.w	r2, r3, #32
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e00f      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699a      	ldr	r2, [r3, #24]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	79fb      	ldrb	r3, [r7, #7]
 8003868:	429a      	cmp	r2, r3
 800386a:	d0b4      	beq.n	80037d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003882:	e033      	b.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f000 f87f 	bl	800398c <I2C_IsErrorOccurred>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e031      	b.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389e:	d025      	beq.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a0:	f004 fbe2 	bl	8008068 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d11a      	bne.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d013      	beq.n	80038ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c8:	f043 0220 	orr.w	r2, r3, #32
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e007      	b.n	80038fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d1c4      	bne.n	8003884 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003910:	e02f      	b.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f838 	bl	800398c <I2C_IsErrorOccurred>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e02d      	b.n	8003982 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f004 fb9f 	bl	8008068 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d11a      	bne.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b20      	cmp	r3, #32
 8003948:	d013      	beq.n	8003972 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	f043 0220 	orr.w	r2, r3, #32
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e007      	b.n	8003982 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	f003 0320 	and.w	r3, r3, #32
 800397c:	2b20      	cmp	r3, #32
 800397e:	d1c8      	bne.n	8003912 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
	...

0800398c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	@ 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	f003 0310 	and.w	r3, r3, #16
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d068      	beq.n	8003a8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2210      	movs	r2, #16
 80039be:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039c0:	e049      	b.n	8003a56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c8:	d045      	beq.n	8003a56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039ca:	f004 fb4d 	bl	8008068 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	68ba      	ldr	r2, [r7, #8]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d302      	bcc.n	80039e0 <I2C_IsErrorOccurred+0x54>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d13a      	bne.n	8003a56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039ea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039f2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a02:	d121      	bne.n	8003a48 <I2C_IsErrorOccurred+0xbc>
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a0a:	d01d      	beq.n	8003a48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d01a      	beq.n	8003a48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a22:	f004 fb21 	bl	8008068 <HAL_GetTick>
 8003a26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a28:	e00e      	b.n	8003a48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a2a:	f004 fb1d 	bl	8008068 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b19      	cmp	r3, #25
 8003a36:	d907      	bls.n	8003a48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	f043 0320 	orr.w	r3, r3, #32
 8003a3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003a46:	e006      	b.n	8003a56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d1e9      	bne.n	8003a2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b20      	cmp	r3, #32
 8003a62:	d003      	beq.n	8003a6c <I2C_IsErrorOccurred+0xe0>
 8003a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0aa      	beq.n	80039c2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	f043 0304 	orr.w	r3, r3, #4
 8003a82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00b      	beq.n	8003ab4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	f043 0308 	orr.w	r3, r3, #8
 8003ac4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ace:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00b      	beq.n	8003af8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	f043 0302 	orr.w	r3, r3, #2
 8003ae6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003af0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003af8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01c      	beq.n	8003b3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff fe3b 	bl	800377c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6859      	ldr	r1, [r3, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <I2C_IsErrorOccurred+0x1bc>)
 8003b12:	400b      	ands	r3, r1
 8003b14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003b3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3728      	adds	r7, #40	@ 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	fe00e800 	.word	0xfe00e800

08003b4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	460b      	mov	r3, r1
 8003b58:	817b      	strh	r3, [r7, #10]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b5e:	897b      	ldrh	r3, [r7, #10]
 8003b60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b64:	7a7b      	ldrb	r3, [r7, #9]
 8003b66:	041b      	lsls	r3, r3, #16
 8003b68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003b7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	6a3b      	ldr	r3, [r7, #32]
 8003b84:	0d5b      	lsrs	r3, r3, #21
 8003b86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003b8a:	4b08      	ldr	r3, [pc, #32]	@ (8003bac <I2C_TransferConfig+0x60>)
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	ea02 0103 	and.w	r1, r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b9e:	bf00      	nop
 8003ba0:	371c      	adds	r7, #28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	03ff63ff 	.word	0x03ff63ff

08003bb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d138      	bne.n	8003c38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e032      	b.n	8003c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	@ 0x24
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f022 0201 	bic.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6819      	ldr	r1, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2220      	movs	r2, #32
 8003c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e000      	b.n	8003c3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c38:	2302      	movs	r3, #2
  }
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b20      	cmp	r3, #32
 8003c5a:	d139      	bne.n	8003cd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e033      	b.n	8003cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2224      	movs	r2, #36	@ 0x24
 8003c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0201 	bic.w	r2, r2, #1
 8003c88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003c98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e08f      	b.n	8003e12 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7fd fc05 	bl	800151c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2202      	movs	r2, #2
 8003d16:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d004      	beq.n	8003d34 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d32:	d103      	bne.n	8003d3c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 031e 	bic.w	r3, r3, #30
 8003d3a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d005      	beq.n	8003d54 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003d4e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4b31      	ldr	r3, [pc, #196]	@ (8003e1c <HAL_LPTIM_Init+0x13c>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003d64:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003d6a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8003d70:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 8003d76:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d107      	bne.n	8003d96 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d004      	beq.n	8003da8 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003da6:	d107      	bne.n	8003db8 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003db0:	4313      	orrs	r3, r2
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00a      	beq.n	8003dda <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003dcc:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003dd2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a0e      	ldr	r2, [pc, #56]	@ (8003e20 <HAL_LPTIM_Init+0x140>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d108      	bne.n	8003dfe <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	621a      	str	r2, [r3, #32]
 8003dfc:	e004      	b.n	8003e08 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e06:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	ff19f1fe 	.word	0xff19f1fe
 8003e20:	40007c00 	.word	0x40007c00

08003e24 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d10d      	bne.n	8003e56 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f003 0301 	and.w	r3, r3, #1
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d106      	bne.n	8003e56 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f882 	bl	8003f5a <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d10d      	bne.n	8003e80 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d106      	bne.n	8003e80 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2202      	movs	r2, #2
 8003e78:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f877 	bl	8003f6e <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d10d      	bne.n	8003eaa <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d106      	bne.n	8003eaa <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f86c 	bl	8003f82 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d10d      	bne.n	8003ed4 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d106      	bne.n	8003ed4 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2208      	movs	r2, #8
 8003ecc:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f861 	bl	8003f96 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d10d      	bne.n	8003efe <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b10      	cmp	r3, #16
 8003eee:	d106      	bne.n	8003efe <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2210      	movs	r2, #16
 8003ef6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f856 	bl	8003faa <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0320 	and.w	r3, r3, #32
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d10d      	bne.n	8003f28 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b20      	cmp	r3, #32
 8003f18:	d106      	bne.n	8003f28 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f84b 	bl	8003fbe <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f32:	2b40      	cmp	r3, #64	@ 0x40
 8003f34:	d10d      	bne.n	8003f52 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f40:	2b40      	cmp	r3, #64	@ 0x40
 8003f42:	d106      	bne.n	8003f52 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2240      	movs	r2, #64	@ 0x40
 8003f4a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f840 	bl	8003fd2 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	@ 0x24
 8003fec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	61fb      	str	r3, [r7, #28]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 030c 	and.w	r3, r3, #12
 8003ffe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004000:	4b3b      	ldr	r3, [pc, #236]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0303 	and.w	r3, r3, #3
 8004008:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d005      	beq.n	800401c <HAL_RCC_GetSysClockFreq+0x34>
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	2b0c      	cmp	r3, #12
 8004014:	d121      	bne.n	800405a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d11e      	bne.n	800405a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800401c:	4b34      	ldr	r3, [pc, #208]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004028:	4b31      	ldr	r3, [pc, #196]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800402a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	e005      	b.n	8004044 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004038:	4b2d      	ldr	r3, [pc, #180]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 030f 	and.w	r3, r3, #15
 8004042:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004044:	4a2b      	ldr	r2, [pc, #172]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800404c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10d      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004058:	e00a      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b04      	cmp	r3, #4
 800405e:	d102      	bne.n	8004066 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004060:	4b25      	ldr	r3, [pc, #148]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004062:	61bb      	str	r3, [r7, #24]
 8004064:	e004      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d101      	bne.n	8004070 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800406c:	4b23      	ldr	r3, [pc, #140]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x114>)
 800406e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	2b0c      	cmp	r3, #12
 8004074:	d134      	bne.n	80040e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004076:	4b1e      	ldr	r3, [pc, #120]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d003      	beq.n	800408e <HAL_RCC_GetSysClockFreq+0xa6>
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2b03      	cmp	r3, #3
 800408a:	d003      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0xac>
 800408c:	e005      	b.n	800409a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800408e:	4b1a      	ldr	r3, [pc, #104]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004090:	617b      	str	r3, [r7, #20]
      break;
 8004092:	e005      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004094:	4b19      	ldr	r3, [pc, #100]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004096:	617b      	str	r3, [r7, #20]
      break;
 8004098:	e002      	b.n	80040a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	617b      	str	r3, [r7, #20]
      break;
 800409e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040a0:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	091b      	lsrs	r3, r3, #4
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	3301      	adds	r3, #1
 80040ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	0a1b      	lsrs	r3, r3, #8
 80040b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	fb03 f202 	mul.w	r2, r3, r2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	0e5b      	lsrs	r3, r3, #25
 80040cc:	f003 0303 	and.w	r3, r3, #3
 80040d0:	3301      	adds	r3, #1
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040e0:	69bb      	ldr	r3, [r7, #24]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3724      	adds	r7, #36	@ 0x24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	40021000 	.word	0x40021000
 80040f4:	0800bdc0 	.word	0x0800bdc0
 80040f8:	00f42400 	.word	0x00f42400
 80040fc:	007a1200 	.word	0x007a1200

08004100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004104:	4b03      	ldr	r3, [pc, #12]	@ (8004114 <HAL_RCC_GetHCLKFreq+0x14>)
 8004106:	681b      	ldr	r3, [r3, #0]
}
 8004108:	4618      	mov	r0, r3
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	20000000 	.word	0x20000000

08004118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800411c:	f7ff fff0 	bl	8004100 <HAL_RCC_GetHCLKFreq>
 8004120:	4602      	mov	r2, r0
 8004122:	4b06      	ldr	r3, [pc, #24]	@ (800413c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	0a1b      	lsrs	r3, r3, #8
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	4904      	ldr	r1, [pc, #16]	@ (8004140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800412e:	5ccb      	ldrb	r3, [r1, r3]
 8004130:	f003 031f 	and.w	r3, r3, #31
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004138:	4618      	mov	r0, r3
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000
 8004140:	0800bdb8 	.word	0x0800bdb8

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004148:	f7ff ffda 	bl	8004100 <HAL_RCC_GetHCLKFreq>
 800414c:	4602      	mov	r2, r0
 800414e:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	0adb      	lsrs	r3, r3, #11
 8004154:	f003 0307 	and.w	r3, r3, #7
 8004158:	4904      	ldr	r1, [pc, #16]	@ (800416c <HAL_RCC_GetPCLK2Freq+0x28>)
 800415a:	5ccb      	ldrb	r3, [r1, r3]
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	0800bdb8 	.word	0x0800bdb8

08004170 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 809e 	beq.w	80042c0 <HAL_RTC_Init+0x150>
    assert_param(IS_RTC_BINARY_MODE(hrtc->Init.BinMode));
    assert_param(IS_RTC_BINARY_MIX_BCDU(hrtc->Init.BinMixBcdU));
#endif

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d12a      	bne.n	80041e6 <HAL_RTC_Init+0x76>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2020 	strb.w	r2, [r3, #32]
      hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAEventCallback      */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a4c      	ldr	r2, [pc, #304]	@ (80042cc <HAL_RTC_Init+0x15c>)
 800419c:	625a      	str	r2, [r3, #36]	@ 0x24
      hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBEventCallback      */
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a4b      	ldr	r2, [pc, #300]	@ (80042d0 <HAL_RTC_Init+0x160>)
 80041a2:	629a      	str	r2, [r3, #40]	@ 0x28
      hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak TimeStampEventCallback   */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a4b      	ldr	r2, [pc, #300]	@ (80042d4 <HAL_RTC_Init+0x164>)
 80041a8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak WakeUpTimerEventCallback */
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a4a      	ldr	r2, [pc, #296]	@ (80042d8 <HAL_RTC_Init+0x168>)
 80041ae:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      hrtc->SSRUEventCallback            =  HAL_RTCEx_SSRUEventCallback;             /* Legacy weak SSRUEventCallback */
#endif

#if defined(RTC_TAMPER1_SUPPORT)
      hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak Tamper1EventCallback     */
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a4a      	ldr	r2, [pc, #296]	@ (80042dc <HAL_RTC_Init+0x16c>)
 80041b4:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* RTC_TAMPER1_SUPPORT */
      hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak Tamper2EventCallback     */
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a49      	ldr	r2, [pc, #292]	@ (80042e0 <HAL_RTC_Init+0x170>)
 80041ba:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(RTC_TAMPER3_SUPPORT)
      hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak Tamper3EventCallback     */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a49      	ldr	r2, [pc, #292]	@ (80042e4 <HAL_RTC_Init+0x174>)
 80041c0:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RTC_TAMPER3_SUPPORT */

      if (hrtc->MspInitCallback == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d102      	bne.n	80041d0 <HAL_RTC_Init+0x60>
      {
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a46      	ldr	r2, [pc, #280]	@ (80042e8 <HAL_RTC_Init+0x178>)
 80041ce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      /* Init the low level hardware */
      hrtc->MspInitCallback(hrtc);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3

      if (hrtc->MspDeInitCallback == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <HAL_RTC_Init+0x76>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a42      	ldr	r2, [pc, #264]	@ (80042ec <HAL_RTC_Init+0x17c>)
 80041e4:	645a      	str	r2, [r3, #68]	@ 0x44
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2202      	movs	r2, #2
 80041ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	f003 0310 	and.w	r3, r3, #16
 80041f8:	2b10      	cmp	r3, #16
 80041fa:	d058      	beq.n	80042ae <HAL_RTC_Init+0x13e>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	22ca      	movs	r2, #202	@ 0xca
 8004202:	625a      	str	r2, [r3, #36]	@ 0x24
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2253      	movs	r2, #83	@ 0x53
 800420a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb45 	bl	800489c <RTC_EnterInitMode>
 8004212:	4603      	mov	r3, r0
 8004214:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d127      	bne.n	800426c <HAL_RTC_Init+0xfc>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800422a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800422e:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6899      	ldr	r1, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	431a      	orrs	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	68d2      	ldr	r2, [r2, #12]
 8004256:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6919      	ldr	r1, [r3, #16]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	041a      	lsls	r2, r3, #16
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fb49 	bl	8004904 <RTC_ExitInitMode>
 8004272:	4603      	mov	r3, r0
 8004274:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004276:	7bfb      	ldrb	r3, [r7, #15]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d113      	bne.n	80042a4 <HAL_RTC_Init+0x134>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f022 0203 	bic.w	r2, r2, #3
 800428a:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	22ff      	movs	r2, #255	@ 0xff
 80042aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80042ac:	e001      	b.n	80042b2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d103      	bne.n	80042c0 <HAL_RTC_Init+0x150>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	08004841 	.word	0x08004841
 80042d0:	080049e9 	.word	0x080049e9
 80042d4:	080049c1 	.word	0x080049c1
 80042d8:	080049d5 	.word	0x080049d5
 80042dc:	080049fd 	.word	0x080049fd
 80042e0:	08004a11 	.word	0x08004a11
 80042e4:	08004a25 	.word	0x08004a25
 80042e8:	08001d1d 	.word	0x08001d1d
 80042ec:	08001dd9 	.word	0x08001dd9

080042f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80042f0:	b590      	push	{r4, r7, lr}
 80042f2:	b087      	sub	sp, #28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <HAL_RTC_SetTime+0x1a>
 8004306:	2302      	movs	r3, #2
 8004308:	e08b      	b.n	8004422 <HAL_RTC_SetTime+0x132>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2202      	movs	r2, #2
 8004316:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	22ca      	movs	r2, #202	@ 0xca
 8004320:	625a      	str	r2, [r3, #36]	@ 0x24
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2253      	movs	r2, #83	@ 0x53
 8004328:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 fab6 	bl	800489c <RTC_EnterInitMode>
 8004330:	4603      	mov	r3, r0
 8004332:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d163      	bne.n	8004402 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d126      	bne.n	800438e <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f000 fb11 	bl	8004980 <RTC_ByteToBcd2>
 800435e:	4603      	mov	r3, r0
 8004360:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fb0a 	bl	8004980 <RTC_ByteToBcd2>
 800436c:	4603      	mov	r3, r0
 800436e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004370:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	789b      	ldrb	r3, [r3, #2]
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fb02 	bl	8004980 <RTC_ByteToBcd2>
 800437c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800437e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	78db      	ldrb	r3, [r3, #3]
 8004386:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004388:	4313      	orrs	r3, r2
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	e018      	b.n	80043c0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d102      	bne.n	80043a2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	2200      	movs	r2, #0
 80043a0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	785b      	ldrb	r3, [r3, #1]
 80043ac:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043ae:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80043b4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	78db      	ldrb	r3, [r3, #3]
 80043ba:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80043ca:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80043ce:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043de:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6899      	ldr	r1, [r3, #8]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	68da      	ldr	r2, [r3, #12]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	431a      	orrs	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fa83 	bl	8004904 <RTC_ExitInitMode>
 80043fe:	4603      	mov	r3, r0
 8004400:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	22ff      	movs	r2, #255	@ 0xff
 8004408:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800440a:	7cfb      	ldrb	r3, [r7, #19]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d103      	bne.n	8004418 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004420:	7cfb      	ldrb	r3, [r7, #19]
}
 8004422:	4618      	mov	r0, r3
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	bd90      	pop	{r4, r7, pc}

0800442a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800442a:	b590      	push	{r4, r7, lr}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_RTC_SetDate+0x1a>
 8004440:	2302      	movs	r3, #2
 8004442:	e075      	b.n	8004530 <HAL_RTC_SetDate+0x106>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10e      	bne.n	8004478 <HAL_RTC_SetDate+0x4e>
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	785b      	ldrb	r3, [r3, #1]
 800445e:	f003 0310 	and.w	r3, r3, #16
 8004462:	2b00      	cmp	r3, #0
 8004464:	d008      	beq.n	8004478 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	785b      	ldrb	r3, [r3, #1]
 800446a:	f023 0310 	bic.w	r3, r3, #16
 800446e:	b2db      	uxtb	r3, r3
 8004470:	330a      	adds	r3, #10
 8004472:	b2da      	uxtb	r2, r3
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d11c      	bne.n	80044b8 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	78db      	ldrb	r3, [r3, #3]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fa7c 	bl	8004980 <RTC_ByteToBcd2>
 8004488:	4603      	mov	r3, r0
 800448a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fa75 	bl	8004980 <RTC_ByteToBcd2>
 8004496:	4603      	mov	r3, r0
 8004498:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800449a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	789b      	ldrb	r3, [r3, #2]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fa6d 	bl	8004980 <RTC_ByteToBcd2>
 80044a6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80044a8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80044b2:	4313      	orrs	r3, r2
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	e00e      	b.n	80044d6 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	78db      	ldrb	r3, [r3, #3]
 80044bc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	785b      	ldrb	r3, [r3, #1]
 80044c2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80044c4:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80044ca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	22ca      	movs	r2, #202	@ 0xca
 80044dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2253      	movs	r2, #83	@ 0x53
 80044e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f9d8 	bl	800489c <RTC_EnterInitMode>
 80044ec:	4603      	mov	r3, r0
 80044ee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80044f0:	7cfb      	ldrb	r3, [r7, #19]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10c      	bne.n	8004510 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004500:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004504:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 f9fc 	bl	8004904 <RTC_ExitInitMode>
 800450c:	4603      	mov	r3, r0
 800450e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	22ff      	movs	r2, #255	@ 0xff
 8004516:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d103      	bne.n	8004526 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800452e:	7cfb      	ldrb	r3, [r7, #19]
}
 8004530:	4618      	mov	r0, r3
 8004532:	371c      	adds	r7, #28
 8004534:	46bd      	mov	sp, r7
 8004536:	bd90      	pop	{r4, r7, pc}

08004538 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004538:	b590      	push	{r4, r7, lr}
 800453a:	b089      	sub	sp, #36	@ 0x24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_RTC_SetAlarm_IT+0x1a>
 800454e:	2302      	movs	r3, #2
 8004550:	e127      	b.n	80047a2 <HAL_RTC_SetAlarm_IT+0x26a>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2202      	movs	r2, #2
 800455e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d137      	bne.n	80045d8 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004572:	2b00      	cmp	r3, #0
 8004574:	d102      	bne.n	800457c <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2200      	movs	r2, #0
 800457a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f9fd 	bl	8004980 <RTC_ByteToBcd2>
 8004586:	4603      	mov	r3, r0
 8004588:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	785b      	ldrb	r3, [r3, #1]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f9f6 	bl	8004980 <RTC_ByteToBcd2>
 8004594:	4603      	mov	r3, r0
 8004596:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004598:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	789b      	ldrb	r3, [r3, #2]
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 f9ee 	bl	8004980 <RTC_ByteToBcd2>
 80045a4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80045a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	78db      	ldrb	r3, [r3, #3]
 80045ae:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80045b0:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80045ba:	4618      	mov	r0, r3
 80045bc:	f000 f9e0 	bl	8004980 <RTC_ByteToBcd2>
 80045c0:	4603      	mov	r3, r0
 80045c2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80045c4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80045cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	e023      	b.n	8004620 <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2200      	movs	r2, #0
 80045ea:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	785b      	ldrb	r3, [r3, #1]
 80045f6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80045f8:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80045fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	78db      	ldrb	r3, [r3, #3]
 8004604:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004606:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800460e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004610:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004616:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800461c:	4313      	orrs	r3, r2
 800461e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	22ca      	movs	r2, #202	@ 0xca
 8004632:	625a      	str	r2, [r3, #36]	@ 0x24
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2253      	movs	r2, #83	@ 0x53
 800463a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004644:	d14a      	bne.n	80046dc <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004654:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8004666:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 8004668:	f003 fcfe 	bl	8008068 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800466e:	e015      	b.n	800469c <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004670:	f003 fcfa 	bl	8008068 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800467e:	d90d      	bls.n	800469c <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	22ff      	movs	r2, #255	@ 0xff
 8004686:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2203      	movs	r2, #3
 800468c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e082      	b.n	80047a2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d0e2      	beq.n	8004670 <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046c8:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689a      	ldr	r2, [r3, #8]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80046d8:	609a      	str	r2, [r3, #8]
 80046da:	e049      	b.n	8004770 <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689a      	ldr	r2, [r3, #8]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80046ea:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80046fc:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 80046fe:	f003 fcb3 	bl	8008068 <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004704:	e015      	b.n	8004732 <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004706:	f003 fcaf 	bl	8008068 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004714:	d90d      	bls.n	8004732 <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	22ff      	movs	r2, #255	@ 0xff
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2203      	movs	r2, #3
 8004722:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e037      	b.n	80047a2 <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0e2      	beq.n	8004706 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800475e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689a      	ldr	r2, [r3, #8]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800476e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004770:	4b0e      	ldr	r3, [pc, #56]	@ (80047ac <HAL_RTC_SetAlarm_IT+0x274>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a0d      	ldr	r2, [pc, #52]	@ (80047ac <HAL_RTC_SetAlarm_IT+0x274>)
 8004776:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800477a:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RTC_SetAlarm_IT+0x274>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	4a0a      	ldr	r2, [pc, #40]	@ (80047ac <HAL_RTC_SetAlarm_IT+0x274>)
 8004782:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004786:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	22ff      	movs	r2, #255	@ 0xff
 800478e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3724      	adds	r7, #36	@ 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd90      	pop	{r4, r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40010400 	.word	0x40010400

080047b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80047b8:	4b20      	ldr	r3, [pc, #128]	@ (800483c <HAL_RTC_AlarmIRQHandler+0x8c>)
 80047ba:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80047be:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d013      	beq.n	80047f6 <HAL_RTC_AlarmIRQHandler+0x46>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_RTC_AlarmIRQHandler+0x46>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80047ec:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d013      	beq.n	800482c <HAL_RTC_AlarmIRQHandler+0x7c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
 800480a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00c      	beq.n	800482c <HAL_RTC_AlarmIRQHandler+0x7c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8004822:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	4798      	blx	r3
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8004834:	bf00      	nop
 8004836:	3708      	adds	r7, #8
 8004838:	46bd      	mov	sp, r7
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40010400 	.word	0x40010400

08004840 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a0d      	ldr	r2, [pc, #52]	@ (8004898 <HAL_RTC_WaitForSynchro+0x44>)
 8004862:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004864:	f003 fc00 	bl	8008068 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800486a:	e009      	b.n	8004880 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800486c:	f003 fbfc 	bl	8008068 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800487a:	d901      	bls.n	8004880 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e007      	b.n	8004890 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0ee      	beq.n	800486c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	0003ff5f 	.word	0x0003ff5f

0800489c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d120      	bne.n	80048f8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f04f 32ff 	mov.w	r2, #4294967295
 80048be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80048c0:	f003 fbd2 	bl	8008068 <HAL_GetTick>
 80048c4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80048c6:	e00d      	b.n	80048e4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80048c8:	f003 fbce 	bl	8008068 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80048d6:	d905      	bls.n	80048e4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2203      	movs	r2, #3
 80048e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d102      	bne.n	80048f8 <RTC_EnterInitMode+0x5c>
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d1e7      	bne.n	80048c8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
	...

08004904 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b084      	sub	sp, #16
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004910:	4b1a      	ldr	r3, [pc, #104]	@ (800497c <RTC_ExitInitMode+0x78>)
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	4a19      	ldr	r2, [pc, #100]	@ (800497c <RTC_ExitInitMode+0x78>)
 8004916:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800491a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800491c:	4b17      	ldr	r3, [pc, #92]	@ (800497c <RTC_ExitInitMode+0x78>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10c      	bne.n	8004942 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff93 	bl	8004854 <HAL_RTC_WaitForSynchro>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01e      	beq.n	8004972 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2203      	movs	r2, #3
 8004938:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	e017      	b.n	8004972 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004942:	4b0e      	ldr	r3, [pc, #56]	@ (800497c <RTC_ExitInitMode+0x78>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	4a0d      	ldr	r2, [pc, #52]	@ (800497c <RTC_ExitInitMode+0x78>)
 8004948:	f023 0320 	bic.w	r3, r3, #32
 800494c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f7ff ff80 	bl	8004854 <HAL_RTC_WaitForSynchro>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d005      	beq.n	8004966 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2203      	movs	r2, #3
 800495e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004966:	4b05      	ldr	r3, [pc, #20]	@ (800497c <RTC_ExitInitMode+0x78>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4a04      	ldr	r2, [pc, #16]	@ (800497c <RTC_ExitInitMode+0x78>)
 800496c:	f043 0320 	orr.w	r3, r3, #32
 8004970:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004972:	7bfb      	ldrb	r3, [r7, #15]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40002800 	.word	0x40002800

08004980 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800498e:	79fb      	ldrb	r3, [r7, #7]
 8004990:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004992:	e005      	b.n	80049a0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3301      	adds	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800499a:	7afb      	ldrb	r3, [r7, #11]
 800499c:	3b0a      	subs	r3, #10
 800499e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80049a0:	7afb      	ldrb	r3, [r7, #11]
 80049a2:	2b09      	cmp	r3, #9
 80049a4:	d8f6      	bhi.n	8004994 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	7afb      	ldrb	r3, [r7, #11]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	b2db      	uxtb	r3, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d101      	bne.n	8004a4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e095      	b.n	8004b76 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d108      	bne.n	8004a64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a5a:	d009      	beq.n	8004a70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	61da      	str	r2, [r3, #28]
 8004a62:	e005      	b.n	8004a70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7fd f9fe 	bl	8001e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ab0:	d902      	bls.n	8004ab8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	e002      	b.n	8004abe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004ab8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004ac6:	d007      	beq.n	8004ad8 <HAL_SPI_Init+0xa0>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ad0:	d002      	beq.n	8004ad8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	f003 0302 	and.w	r3, r3, #2
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b06:	431a      	orrs	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b10:	431a      	orrs	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1a:	ea42 0103 	orr.w	r1, r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b22:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	0c1b      	lsrs	r3, r3, #16
 8004b34:	f003 0204 	and.w	r2, r3, #4
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b46:	f003 0308 	and.w	r3, r3, #8
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b54:	ea42 0103 	orr.w	r1, r2, r3
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	430a      	orrs	r2, r1
 8004b64:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b7e:	b580      	push	{r7, lr}
 8004b80:	b082      	sub	sp, #8
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e040      	b.n	8004c12 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fd fba9 	bl	80022f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2224      	movs	r2, #36	@ 0x24
 8004baa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f022 0201 	bic.w	r2, r2, #1
 8004bba:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f000 fb0b 	bl	80051e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f8ae 	bl	8004d2c <UART_SetConfig>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d101      	bne.n	8004bda <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e01b      	b.n	8004c12 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004be8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689a      	ldr	r2, [r3, #8]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bf8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0201 	orr.w	r2, r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fb8a 	bl	8005324 <UART_CheckIdleState>
 8004c10:	4603      	mov	r3, r0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	b08a      	sub	sp, #40	@ 0x28
 8004c1e:	af02      	add	r7, sp, #8
 8004c20:	60f8      	str	r0, [r7, #12]
 8004c22:	60b9      	str	r1, [r7, #8]
 8004c24:	603b      	str	r3, [r7, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c2e:	2b20      	cmp	r3, #32
 8004c30:	d177      	bne.n	8004d22 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_UART_Transmit+0x24>
 8004c38:	88fb      	ldrh	r3, [r7, #6]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e070      	b.n	8004d24 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2221      	movs	r2, #33	@ 0x21
 8004c4e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c50:	f003 fa0a 	bl	8008068 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	88fa      	ldrh	r2, [r7, #6]
 8004c62:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c6e:	d108      	bne.n	8004c82 <HAL_UART_Transmit+0x68>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d104      	bne.n	8004c82 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	61bb      	str	r3, [r7, #24]
 8004c80:	e003      	b.n	8004c8a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c8a:	e02f      	b.n	8004cec <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2200      	movs	r2, #0
 8004c94:	2180      	movs	r1, #128	@ 0x80
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 fbec 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d004      	beq.n	8004cac <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e03b      	b.n	8004d24 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10b      	bne.n	8004cca <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	881a      	ldrh	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	3302      	adds	r3, #2
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e007      	b.n	8004cda <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	781a      	ldrb	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1c9      	bne.n	8004c8c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2140      	movs	r1, #64	@ 0x40
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fbb6 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e005      	b.n	8004d24 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e000      	b.n	8004d24 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d22:	2302      	movs	r3, #2
  }
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b08a      	sub	sp, #40	@ 0x28
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	431a      	orrs	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b9e      	ldr	r3, [pc, #632]	@ (8004fd4 <UART_SetConfig+0x2a8>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d64:	430b      	orrs	r3, r1
 8004d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	68da      	ldr	r2, [r3, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a93      	ldr	r2, [pc, #588]	@ (8004fd8 <UART_SetConfig+0x2ac>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d004      	beq.n	8004d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d94:	4313      	orrs	r3, r2
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da8:	430a      	orrs	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a8a      	ldr	r2, [pc, #552]	@ (8004fdc <UART_SetConfig+0x2b0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d126      	bne.n	8004e04 <UART_SetConfig+0xd8>
 8004db6:	4b8a      	ldr	r3, [pc, #552]	@ (8004fe0 <UART_SetConfig+0x2b4>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d81b      	bhi.n	8004dfc <UART_SetConfig+0xd0>
 8004dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <UART_SetConfig+0xa0>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004ddd 	.word	0x08004ddd
 8004dd0:	08004ded 	.word	0x08004ded
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004df5 	.word	0x08004df5
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004de2:	e0ab      	b.n	8004f3c <UART_SetConfig+0x210>
 8004de4:	2302      	movs	r3, #2
 8004de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dea:	e0a7      	b.n	8004f3c <UART_SetConfig+0x210>
 8004dec:	2304      	movs	r3, #4
 8004dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004df2:	e0a3      	b.n	8004f3c <UART_SetConfig+0x210>
 8004df4:	2308      	movs	r3, #8
 8004df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004dfa:	e09f      	b.n	8004f3c <UART_SetConfig+0x210>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e02:	e09b      	b.n	8004f3c <UART_SetConfig+0x210>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a76      	ldr	r2, [pc, #472]	@ (8004fe4 <UART_SetConfig+0x2b8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d138      	bne.n	8004e80 <UART_SetConfig+0x154>
 8004e0e:	4b74      	ldr	r3, [pc, #464]	@ (8004fe0 <UART_SetConfig+0x2b4>)
 8004e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e14:	f003 030c 	and.w	r3, r3, #12
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d82d      	bhi.n	8004e78 <UART_SetConfig+0x14c>
 8004e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e24 <UART_SetConfig+0xf8>)
 8004e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e22:	bf00      	nop
 8004e24:	08004e59 	.word	0x08004e59
 8004e28:	08004e79 	.word	0x08004e79
 8004e2c:	08004e79 	.word	0x08004e79
 8004e30:	08004e79 	.word	0x08004e79
 8004e34:	08004e69 	.word	0x08004e69
 8004e38:	08004e79 	.word	0x08004e79
 8004e3c:	08004e79 	.word	0x08004e79
 8004e40:	08004e79 	.word	0x08004e79
 8004e44:	08004e61 	.word	0x08004e61
 8004e48:	08004e79 	.word	0x08004e79
 8004e4c:	08004e79 	.word	0x08004e79
 8004e50:	08004e79 	.word	0x08004e79
 8004e54:	08004e71 	.word	0x08004e71
 8004e58:	2300      	movs	r3, #0
 8004e5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e5e:	e06d      	b.n	8004f3c <UART_SetConfig+0x210>
 8004e60:	2302      	movs	r3, #2
 8004e62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e66:	e069      	b.n	8004f3c <UART_SetConfig+0x210>
 8004e68:	2304      	movs	r3, #4
 8004e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e6e:	e065      	b.n	8004f3c <UART_SetConfig+0x210>
 8004e70:	2308      	movs	r3, #8
 8004e72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e76:	e061      	b.n	8004f3c <UART_SetConfig+0x210>
 8004e78:	2310      	movs	r3, #16
 8004e7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004e7e:	e05d      	b.n	8004f3c <UART_SetConfig+0x210>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a58      	ldr	r2, [pc, #352]	@ (8004fe8 <UART_SetConfig+0x2bc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d125      	bne.n	8004ed6 <UART_SetConfig+0x1aa>
 8004e8a:	4b55      	ldr	r3, [pc, #340]	@ (8004fe0 <UART_SetConfig+0x2b4>)
 8004e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e90:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e94:	2b30      	cmp	r3, #48	@ 0x30
 8004e96:	d016      	beq.n	8004ec6 <UART_SetConfig+0x19a>
 8004e98:	2b30      	cmp	r3, #48	@ 0x30
 8004e9a:	d818      	bhi.n	8004ece <UART_SetConfig+0x1a2>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d00a      	beq.n	8004eb6 <UART_SetConfig+0x18a>
 8004ea0:	2b20      	cmp	r3, #32
 8004ea2:	d814      	bhi.n	8004ece <UART_SetConfig+0x1a2>
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <UART_SetConfig+0x182>
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d008      	beq.n	8004ebe <UART_SetConfig+0x192>
 8004eac:	e00f      	b.n	8004ece <UART_SetConfig+0x1a2>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004eb4:	e042      	b.n	8004f3c <UART_SetConfig+0x210>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ebc:	e03e      	b.n	8004f3c <UART_SetConfig+0x210>
 8004ebe:	2304      	movs	r3, #4
 8004ec0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ec4:	e03a      	b.n	8004f3c <UART_SetConfig+0x210>
 8004ec6:	2308      	movs	r3, #8
 8004ec8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ecc:	e036      	b.n	8004f3c <UART_SetConfig+0x210>
 8004ece:	2310      	movs	r3, #16
 8004ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ed4:	e032      	b.n	8004f3c <UART_SetConfig+0x210>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd8 <UART_SetConfig+0x2ac>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d12a      	bne.n	8004f36 <UART_SetConfig+0x20a>
 8004ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8004fe0 <UART_SetConfig+0x2b4>)
 8004ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004eea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004eee:	d01a      	beq.n	8004f26 <UART_SetConfig+0x1fa>
 8004ef0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ef4:	d81b      	bhi.n	8004f2e <UART_SetConfig+0x202>
 8004ef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004efa:	d00c      	beq.n	8004f16 <UART_SetConfig+0x1ea>
 8004efc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f00:	d815      	bhi.n	8004f2e <UART_SetConfig+0x202>
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <UART_SetConfig+0x1e2>
 8004f06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f0a:	d008      	beq.n	8004f1e <UART_SetConfig+0x1f2>
 8004f0c:	e00f      	b.n	8004f2e <UART_SetConfig+0x202>
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f14:	e012      	b.n	8004f3c <UART_SetConfig+0x210>
 8004f16:	2302      	movs	r3, #2
 8004f18:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f1c:	e00e      	b.n	8004f3c <UART_SetConfig+0x210>
 8004f1e:	2304      	movs	r3, #4
 8004f20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f24:	e00a      	b.n	8004f3c <UART_SetConfig+0x210>
 8004f26:	2308      	movs	r3, #8
 8004f28:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f2c:	e006      	b.n	8004f3c <UART_SetConfig+0x210>
 8004f2e:	2310      	movs	r3, #16
 8004f30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f34:	e002      	b.n	8004f3c <UART_SetConfig+0x210>
 8004f36:	2310      	movs	r3, #16
 8004f38:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a25      	ldr	r2, [pc, #148]	@ (8004fd8 <UART_SetConfig+0x2ac>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	f040 808a 	bne.w	800505c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d824      	bhi.n	8004f9a <UART_SetConfig+0x26e>
 8004f50:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <UART_SetConfig+0x22c>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f7d 	.word	0x08004f7d
 8004f5c:	08004f9b 	.word	0x08004f9b
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f9b 	.word	0x08004f9b
 8004f68:	08004f8b 	.word	0x08004f8b
 8004f6c:	08004f9b 	.word	0x08004f9b
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004f9b 	.word	0x08004f9b
 8004f78:	08004f93 	.word	0x08004f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f7c:	f7ff f8cc 	bl	8004118 <HAL_RCC_GetPCLK1Freq>
 8004f80:	61f8      	str	r0, [r7, #28]
        break;
 8004f82:	e010      	b.n	8004fa6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f84:	4b19      	ldr	r3, [pc, #100]	@ (8004fec <UART_SetConfig+0x2c0>)
 8004f86:	61fb      	str	r3, [r7, #28]
        break;
 8004f88:	e00d      	b.n	8004fa6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f8a:	f7ff f82d 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 8004f8e:	61f8      	str	r0, [r7, #28]
        break;
 8004f90:	e009      	b.n	8004fa6 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f96:	61fb      	str	r3, [r7, #28]
        break;
 8004f98:	e005      	b.n	8004fa6 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004fa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8109 	beq.w	80051c0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	4413      	add	r3, r2
 8004fb8:	69fa      	ldr	r2, [r7, #28]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d305      	bcc.n	8004fca <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d912      	bls.n	8004ff0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004fd0:	e0f6      	b.n	80051c0 <UART_SetConfig+0x494>
 8004fd2:	bf00      	nop
 8004fd4:	efff69f3 	.word	0xefff69f3
 8004fd8:	40008000 	.word	0x40008000
 8004fdc:	40013800 	.word	0x40013800
 8004fe0:	40021000 	.word	0x40021000
 8004fe4:	40004400 	.word	0x40004400
 8004fe8:	40004800 	.word	0x40004800
 8004fec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	461c      	mov	r4, r3
 8004ff6:	4615      	mov	r5, r2
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	022b      	lsls	r3, r5, #8
 8005002:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005006:	0222      	lsls	r2, r4, #8
 8005008:	68f9      	ldr	r1, [r7, #12]
 800500a:	6849      	ldr	r1, [r1, #4]
 800500c:	0849      	lsrs	r1, r1, #1
 800500e:	2000      	movs	r0, #0
 8005010:	4688      	mov	r8, r1
 8005012:	4681      	mov	r9, r0
 8005014:	eb12 0a08 	adds.w	sl, r2, r8
 8005018:	eb43 0b09 	adc.w	fp, r3, r9
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	607a      	str	r2, [r7, #4]
 8005026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800502a:	4650      	mov	r0, sl
 800502c:	4659      	mov	r1, fp
 800502e:	f7fb fdbb 	bl	8000ba8 <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4613      	mov	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800503a:	69bb      	ldr	r3, [r7, #24]
 800503c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005040:	d308      	bcc.n	8005054 <UART_SetConfig+0x328>
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005048:	d204      	bcs.n	8005054 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	e0b5      	b.n	80051c0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800505a:	e0b1      	b.n	80051c0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005064:	d15d      	bne.n	8005122 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005066:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800506a:	2b08      	cmp	r3, #8
 800506c:	d827      	bhi.n	80050be <UART_SetConfig+0x392>
 800506e:	a201      	add	r2, pc, #4	@ (adr r2, 8005074 <UART_SetConfig+0x348>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	08005099 	.word	0x08005099
 8005078:	080050a1 	.word	0x080050a1
 800507c:	080050a9 	.word	0x080050a9
 8005080:	080050bf 	.word	0x080050bf
 8005084:	080050af 	.word	0x080050af
 8005088:	080050bf 	.word	0x080050bf
 800508c:	080050bf 	.word	0x080050bf
 8005090:	080050bf 	.word	0x080050bf
 8005094:	080050b7 	.word	0x080050b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005098:	f7ff f83e 	bl	8004118 <HAL_RCC_GetPCLK1Freq>
 800509c:	61f8      	str	r0, [r7, #28]
        break;
 800509e:	e014      	b.n	80050ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050a0:	f7ff f850 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 80050a4:	61f8      	str	r0, [r7, #28]
        break;
 80050a6:	e010      	b.n	80050ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050a8:	4b4c      	ldr	r3, [pc, #304]	@ (80051dc <UART_SetConfig+0x4b0>)
 80050aa:	61fb      	str	r3, [r7, #28]
        break;
 80050ac:	e00d      	b.n	80050ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ae:	f7fe ff9b 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 80050b2:	61f8      	str	r0, [r7, #28]
        break;
 80050b4:	e009      	b.n	80050ca <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ba:	61fb      	str	r3, [r7, #28]
        break;
 80050bc:	e005      	b.n	80050ca <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80050c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d077      	beq.n	80051c0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	005a      	lsls	r2, r3, #1
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	441a      	add	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b0f      	cmp	r3, #15
 80050ea:	d916      	bls.n	800511a <UART_SetConfig+0x3ee>
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050f2:	d212      	bcs.n	800511a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	f023 030f 	bic.w	r3, r3, #15
 80050fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	085b      	lsrs	r3, r3, #1
 8005102:	b29b      	uxth	r3, r3
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	b29a      	uxth	r2, r3
 800510a:	8afb      	ldrh	r3, [r7, #22]
 800510c:	4313      	orrs	r3, r2
 800510e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	8afa      	ldrh	r2, [r7, #22]
 8005116:	60da      	str	r2, [r3, #12]
 8005118:	e052      	b.n	80051c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005120:	e04e      	b.n	80051c0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005122:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005126:	2b08      	cmp	r3, #8
 8005128:	d827      	bhi.n	800517a <UART_SetConfig+0x44e>
 800512a:	a201      	add	r2, pc, #4	@ (adr r2, 8005130 <UART_SetConfig+0x404>)
 800512c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005130:	08005155 	.word	0x08005155
 8005134:	0800515d 	.word	0x0800515d
 8005138:	08005165 	.word	0x08005165
 800513c:	0800517b 	.word	0x0800517b
 8005140:	0800516b 	.word	0x0800516b
 8005144:	0800517b 	.word	0x0800517b
 8005148:	0800517b 	.word	0x0800517b
 800514c:	0800517b 	.word	0x0800517b
 8005150:	08005173 	.word	0x08005173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005154:	f7fe ffe0 	bl	8004118 <HAL_RCC_GetPCLK1Freq>
 8005158:	61f8      	str	r0, [r7, #28]
        break;
 800515a:	e014      	b.n	8005186 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800515c:	f7fe fff2 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 8005160:	61f8      	str	r0, [r7, #28]
        break;
 8005162:	e010      	b.n	8005186 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005164:	4b1d      	ldr	r3, [pc, #116]	@ (80051dc <UART_SetConfig+0x4b0>)
 8005166:	61fb      	str	r3, [r7, #28]
        break;
 8005168:	e00d      	b.n	8005186 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800516a:	f7fe ff3d 	bl	8003fe8 <HAL_RCC_GetSysClockFreq>
 800516e:	61f8      	str	r0, [r7, #28]
        break;
 8005170:	e009      	b.n	8005186 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005176:	61fb      	str	r3, [r7, #28]
        break;
 8005178:	e005      	b.n	8005186 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005184:	bf00      	nop
    }

    if (pclk != 0U)
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d019      	beq.n	80051c0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	085a      	lsrs	r2, r3, #1
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	441a      	add	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	fbb2 f3f3 	udiv	r3, r2, r3
 800519e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	2b0f      	cmp	r3, #15
 80051a4:	d909      	bls.n	80051ba <UART_SetConfig+0x48e>
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ac:	d205      	bcs.n	80051ba <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	b29a      	uxth	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60da      	str	r2, [r3, #12]
 80051b8:	e002      	b.n	80051c0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3728      	adds	r7, #40	@ 0x28
 80051d4:	46bd      	mov	sp, r7
 80051d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051da:	bf00      	nop
 80051dc:	00f42400 	.word	0x00f42400

080051e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00a      	beq.n	800520a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	430a      	orrs	r2, r1
 800522a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00a      	beq.n	8005292 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005296:	f003 0320 	and.w	r3, r3, #32
 800529a:	2b00      	cmp	r3, #0
 800529c:	d00a      	beq.n	80052b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	430a      	orrs	r2, r1
 80052b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01a      	beq.n	80052f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052de:	d10a      	bne.n	80052f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00a      	beq.n	8005318 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	605a      	str	r2, [r3, #4]
  }
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b098      	sub	sp, #96	@ 0x60
 8005328:	af02      	add	r7, sp, #8
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005334:	f002 fe98 	bl	8008068 <HAL_GetTick>
 8005338:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b08      	cmp	r3, #8
 8005346:	d12e      	bne.n	80053a6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005348:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005350:	2200      	movs	r2, #0
 8005352:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f88c 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d021      	beq.n	80053a6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005372:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005376:	653b      	str	r3, [r7, #80]	@ 0x50
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	461a      	mov	r2, r3
 800537e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005380:	647b      	str	r3, [r7, #68]	@ 0x44
 8005382:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800538e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e6      	bne.n	8005362 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2220      	movs	r2, #32
 8005398:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e062      	b.n	800546c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d149      	bne.n	8005448 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053bc:	2200      	movs	r2, #0
 80053be:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f856 	bl	8005474 <UART_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d03c      	beq.n	8005448 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	623b      	str	r3, [r7, #32]
   return(result);
 80053dc:	6a3b      	ldr	r3, [r7, #32]
 80053de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	461a      	mov	r2, r3
 80053ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80053ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e6      	bne.n	80053ce <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3308      	adds	r3, #8
 8005406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	e853 3f00 	ldrex	r3, [r3]
 800540e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f023 0301 	bic.w	r3, r3, #1
 8005416:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3308      	adds	r3, #8
 800541e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005420:	61fa      	str	r2, [r7, #28]
 8005422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005424:	69b9      	ldr	r1, [r7, #24]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	e841 2300 	strex	r3, r2, [r1]
 800542c:	617b      	str	r3, [r7, #20]
   return(result);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1e5      	bne.n	8005400 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e011      	b.n	800546c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2220      	movs	r2, #32
 8005452:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3758      	adds	r7, #88	@ 0x58
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005484:	e04f      	b.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d04b      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800548e:	f002 fdeb 	bl	8008068 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	429a      	cmp	r2, r3
 800549c:	d302      	bcc.n	80054a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e04e      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d037      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	2b80      	cmp	r3, #128	@ 0x80
 80054ba:	d034      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b40      	cmp	r3, #64	@ 0x40
 80054c0:	d031      	beq.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	f003 0308 	and.w	r3, r3, #8
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d110      	bne.n	80054f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2208      	movs	r2, #8
 80054d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f838 	bl	800554e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2208      	movs	r2, #8
 80054e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e029      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69db      	ldr	r3, [r3, #28]
 80054f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005500:	d111      	bne.n	8005526 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800550a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f81e 	bl	800554e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2220      	movs	r2, #32
 8005516:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e00f      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4013      	ands	r3, r2
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	429a      	cmp	r2, r3
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	461a      	mov	r2, r3
 800553e:	79fb      	ldrb	r3, [r7, #7]
 8005540:	429a      	cmp	r2, r3
 8005542:	d0a0      	beq.n	8005486 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800554e:	b480      	push	{r7}
 8005550:	b095      	sub	sp, #84	@ 0x54
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800556a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005574:	643b      	str	r3, [r7, #64]	@ 0x40
 8005576:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800557a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e6      	bne.n	8005556 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	61fb      	str	r3, [r7, #28]
   return(result);
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d118      	bne.n	80055f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f023 0310 	bic.w	r3, r3, #16
 80055d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055e2:	61bb      	str	r3, [r7, #24]
 80055e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	6979      	ldr	r1, [r7, #20]
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	613b      	str	r3, [r7, #16]
   return(result);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e6      	bne.n	80055c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800560a:	bf00      	nop
 800560c:	3754      	adds	r7, #84	@ 0x54
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d101      	bne.n	8005628 <HAL_WWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e016      	b.n	8005656 <HAL_WWDG_Init+0x40>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7fc ff03 	bl	8002434 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800563a:	601a      	str	r2, [r3, #0]

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	691a      	ldr	r2, [r3, #16]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	ea42 0103 	orr.w	r1, r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	605a      	str	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005674:	d10e      	bne.n	8005694 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 0301 	and.w	r3, r3, #1
 8005680:	2b01      	cmp	r3, #1
 8005682:	d107      	bne.n	8005694 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0201 	mvn.w	r2, #1
 800568c:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f804 	bl	800569c <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8005694:	bf00      	nop
 8005696:	3708      	adds	r7, #8
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80056b8:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <LL_mDelay+0x4c>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80056c2:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d00c      	beq.n	80056e6 <LL_mDelay+0x36>
  {
    tmpDelay++;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
 80056d0:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80056d2:	e008      	b.n	80056e6 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80056d4:	4b09      	ldr	r3, [pc, #36]	@ (80056fc <LL_mDelay+0x4c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <LL_mDelay+0x36>
    {
      tmpDelay--;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f3      	bne.n	80056d4 <LL_mDelay+0x24>
    }
  }
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	e000e010 	.word	0xe000e010

08005700 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8005708:	4a04      	ldr	r2, [pc, #16]	@ (800571c <LL_SetSystemCoreClock+0x1c>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6013      	str	r3, [r2, #0]
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000000 	.word	0x20000000

08005720 <i2c_init>:

/**
 * @brief Initializes the I2C peripheral.
 * @note  This is a placeholder. Implement with your hardware's I2C init code.
 */
static void i2c_init(void) {
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
    // Example: i2c_master_init(I2C_NUM_0, ...);
}
 8005724:	bf00      	nop
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <i2c_write>:
 * @param reg_addr The register address to write to.
 * @param data A pointer to the data buffer to write.
 * @param len The number of bytes to write.
 * @return true on success, false on failure.
 */
static bool i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, uint16_t len) {
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af02      	add	r7, sp, #8
 8005734:	603a      	str	r2, [r7, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	4603      	mov	r3, r0
 800573a:	71fb      	strb	r3, [r7, #7]
 800573c:	460b      	mov	r3, r1
 800573e:	71bb      	strb	r3, [r7, #6]
 8005740:	4613      	mov	r3, r2
 8005742:	80bb      	strh	r3, [r7, #4]
    // This is a placeholder.
    // Implement this function using your platform's I2C write function.
    // It should handle the START, address, register, data, and STOP conditions.
     return I2C1_MemWrite(dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK;
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	b29b      	uxth	r3, r3
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	b298      	uxth	r0, r3
 800574c:	79bb      	ldrb	r3, [r7, #6]
 800574e:	b299      	uxth	r1, r3
 8005750:	2364      	movs	r3, #100	@ 0x64
 8005752:	9301      	str	r3, [sp, #4]
 8005754:	88bb      	ldrh	r3, [r7, #4]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2201      	movs	r2, #1
 800575c:	f7fb fe2e 	bl	80013bc <I2C1_MemWrite>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	bf0c      	ite	eq
 8005766:	2301      	moveq	r3, #1
 8005768:	2300      	movne	r3, #0
 800576a:	b2db      	uxtb	r3, r3
    //return true; // Assume success for now
}
 800576c:	4618      	mov	r0, r3
 800576e:	3708      	adds	r7, #8
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <i2c_read>:
 * @param reg_addr The register address to read from.
 * @param data A pointer to the buffer to store the read data.
 * @param len The number of bytes to read.
 * @return true on success, false on failure.
 */
static bool i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, uint16_t len) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af02      	add	r7, sp, #8
 800577a:	603a      	str	r2, [r7, #0]
 800577c:	461a      	mov	r2, r3
 800577e:	4603      	mov	r3, r0
 8005780:	71fb      	strb	r3, [r7, #7]
 8005782:	460b      	mov	r3, r1
 8005784:	71bb      	strb	r3, [r7, #6]
 8005786:	4613      	mov	r3, r2
 8005788:	80bb      	strh	r3, [r7, #4]
    // This is a placeholder.
    // Implement this function using your platform's I2C read function.
    return I2C1_MemRead(dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK;
 800578a:	79fb      	ldrb	r3, [r7, #7]
 800578c:	b29b      	uxth	r3, r3
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	b298      	uxth	r0, r3
 8005792:	79bb      	ldrb	r3, [r7, #6]
 8005794:	b299      	uxth	r1, r3
 8005796:	2364      	movs	r3, #100	@ 0x64
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	88bb      	ldrh	r3, [r7, #4]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f7fb fe29 	bl	80013f8 <I2C1_MemRead>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	bf0c      	ite	eq
 80057ac:	2301      	moveq	r3, #1
 80057ae:	2300      	movne	r3, #0
 80057b0:	b2db      	uxtb	r3, r3
    //return true; // Assume success for now
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <delay_ms>:
/**
 * @brief Delays execution for a specified number of milliseconds.
 * @note This is a placeholder. Implement with your hardware's delay function.
 * @param ms Milliseconds to delay.
 */
static void delay_ms(uint32_t ms) {
 80057ba:	b480      	push	{r7}
 80057bc:	b085      	sub	sp, #20
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
    // Example: vTaskDelay(pdMS_TO_TICKS(ms)); or HAL_Delay(ms);
    volatile uint32_t i, j;
    for (i = 0; i < ms; i++) {
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e00d      	b.n	80057e4 <delay_ms+0x2a>
        for (j = 0; j < 1000; j++) {
 80057c8:	2300      	movs	r3, #0
 80057ca:	60bb      	str	r3, [r7, #8]
 80057cc:	e003      	b.n	80057d6 <delay_ms+0x1c>
            __asm__("nop");
 80057ce:	bf00      	nop
        for (j = 0; j < 1000; j++) {
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	3301      	adds	r3, #1
 80057d4:	60bb      	str	r3, [r7, #8]
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057dc:	d3f7      	bcc.n	80057ce <delay_ms+0x14>
    for (i = 0; i < ms; i++) {
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d8ed      	bhi.n	80057c8 <delay_ms+0xe>
        }
    }
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr

080057fa <MAX17260_Register_WriteSingle>:
//=============================================================================

/**
 * @brief Writes a single 16-bit value to a MAX17260 register.
 */
static bool MAX17260_Register_WriteSingle(uint8_t reg, uint16_t value) {
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	4603      	mov	r3, r0
 8005802:	460a      	mov	r2, r1
 8005804:	71fb      	strb	r3, [r7, #7]
 8005806:	4613      	mov	r3, r2
 8005808:	80bb      	strh	r3, [r7, #4]
    uint8_t buffer[2];
    // Little-endian format
    buffer[0] = value & 0xFF;
 800580a:	88bb      	ldrh	r3, [r7, #4]
 800580c:	b2db      	uxtb	r3, r3
 800580e:	733b      	strb	r3, [r7, #12]
    buffer[1] = (value >> 8) & 0xFF;
 8005810:	88bb      	ldrh	r3, [r7, #4]
 8005812:	0a1b      	lsrs	r3, r3, #8
 8005814:	b29b      	uxth	r3, r3
 8005816:	b2db      	uxtb	r3, r3
 8005818:	737b      	strb	r3, [r7, #13]
    return i2c_write(MAX17260_I2C_ADDRESS, reg, buffer, 2);
 800581a:	f107 020c 	add.w	r2, r7, #12
 800581e:	79f9      	ldrb	r1, [r7, #7]
 8005820:	2302      	movs	r3, #2
 8005822:	2036      	movs	r0, #54	@ 0x36
 8005824:	f7ff ff83 	bl	800572e <i2c_write>
 8005828:	4603      	mov	r3, r0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <MAX17260_Register_ReadSingle>:

/**
 * @brief Reads a single 16-bit value from a MAX17260 register.
 */
static bool MAX17260_Register_ReadSingle(uint8_t reg, uint16_t* value) {
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	4603      	mov	r3, r0
 800583a:	6039      	str	r1, [r7, #0]
 800583c:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2];
    if (i2c_read(MAX17260_I2C_ADDRESS, reg, buffer, 2)) {
 800583e:	f107 020c 	add.w	r2, r7, #12
 8005842:	79f9      	ldrb	r1, [r7, #7]
 8005844:	2302      	movs	r3, #2
 8005846:	2036      	movs	r0, #54	@ 0x36
 8005848:	f7ff ff94 	bl	8005774 <i2c_read>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d00c      	beq.n	800586c <MAX17260_Register_ReadSingle+0x3a>
        // Little-endian format
        *value = (uint16_t)buffer[0] | ((uint16_t)buffer[1] << 8);
 8005852:	7b3b      	ldrb	r3, [r7, #12]
 8005854:	b21a      	sxth	r2, r3
 8005856:	7b7b      	ldrb	r3, [r7, #13]
 8005858:	b21b      	sxth	r3, r3
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	b21b      	sxth	r3, r3
 800585e:	4313      	orrs	r3, r2
 8005860:	b21b      	sxth	r3, r3
 8005862:	b29a      	uxth	r2, r3
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	801a      	strh	r2, [r3, #0]
        return true;
 8005868:	2301      	movs	r3, #1
 800586a:	e003      	b.n	8005874 <MAX17260_Register_ReadSingle+0x42>
    }
    *value = 0;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2200      	movs	r2, #0
 8005870:	801a      	strh	r2, [r3, #0]
    return false;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <IsPOR>:

/**
 * @brief Checks if the MAX17260 has experienced a Power-On-Reset.
 */
static bool IsPOR(void) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
    uint16_t status_val = 0;
 8005882:	2300      	movs	r3, #0
 8005884:	80fb      	strh	r3, [r7, #6]
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 8005886:	1dbb      	adds	r3, r7, #6
 8005888:	4619      	mov	r1, r3
 800588a:	2000      	movs	r0, #0
 800588c:	f7ff ffd1 	bl	8005832 <MAX17260_Register_ReadSingle>
    // POR bit is bit 1 of the STATUS register
    return (status_val & (1 << 1)) != 0;
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	bf14      	ite	ne
 800589a:	2301      	movne	r3, #1
 800589c:	2300      	moveq	r3, #0
 800589e:	b2db      	uxtb	r3, r3
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <ClearPOR>:

/**
 * @brief Clears the Power-On-Reset flag in the STATUS register.
 */
static void ClearPOR(void) {
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b082      	sub	sp, #8
 80058ac:	af00      	add	r7, sp, #0
    uint16_t status_val = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	80fb      	strh	r3, [r7, #6]
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 80058b2:	1dbb      	adds	r3, r7, #6
 80058b4:	4619      	mov	r1, r3
 80058b6:	2000      	movs	r0, #0
 80058b8:	f7ff ffbb 	bl	8005832 <MAX17260_Register_ReadSingle>
    // Write the value back, but with the POR bit cleared
    MAX17260_Register_WriteSingle(STATUS, status_val & ~(1 << 1));
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	f023 0302 	bic.w	r3, r3, #2
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	4619      	mov	r1, r3
 80058c6:	2000      	movs	r0, #0
 80058c8:	f7ff ff97 	bl	80057fa <MAX17260_Register_WriteSingle>
}
 80058cc:	bf00      	nop
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <Print_MAX1726x_Config2>:
// MAX17260 DRIVER DEBUG
//=============================================================================


void Print_MAX1726x_Config2(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b082      	sub	sp, #8
 80058d8:	af00      	add	r7, sp, #0
    uint16_t config2_reg;

    // Read the current value from the config2 register
    // maxim_max1726x_read_reg(MAX1726X_CONFIG2_REG, &config2_reg);
    MAX17260_Register_ReadSingle(CONFIG2, &config2_reg);
 80058da:	1dbb      	adds	r3, r7, #6
 80058dc:	4619      	mov	r1, r3
 80058de:	20bb      	movs	r0, #187	@ 0xbb
 80058e0:	f7ff ffa7 	bl	8005832 <MAX17260_Register_ReadSingle>

    UART_Printf("\r\n--- MAX1726x Config2 Register [0x%04X] ---\r\n", config2_reg);
 80058e4:	88fb      	ldrh	r3, [r7, #6]
 80058e6:	4619      	mov	r1, r3
 80058e8:	4849      	ldr	r0, [pc, #292]	@ (8005a10 <Print_MAX1726x_Config2+0x13c>)
 80058ea:	f7fc f867 	bl	80019bc <UART_Printf>
    UART_Printf("This register controls advanced model and IC features.\r\n");
 80058ee:	4849      	ldr	r0, [pc, #292]	@ (8005a14 <Print_MAX1726x_Config2+0x140>)
 80058f0:	f7fc f864 	bl	80019bc <UART_Printf>
    UART_Printf("----------------------------------------\r\n");
 80058f4:	4848      	ldr	r0, [pc, #288]	@ (8005a18 <Print_MAX1726x_Config2+0x144>)
 80058f6:	f7fc f861 	bl	80019bc <UART_Printf>

    // Bit 15: Enable Dynamic Power
    UART_Printf("[Bit 15] DP_EN    (Dynamic Power Enable) : %s\r\n",
                (config2_reg & (1 << 15)) ? "ENABLED" : "DISABLED");
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	b21b      	sxth	r3, r3
    UART_Printf("[Bit 15] DP_EN    (Dynamic Power Enable) : %s\r\n",
 80058fe:	2b00      	cmp	r3, #0
 8005900:	da01      	bge.n	8005906 <Print_MAX1726x_Config2+0x32>
 8005902:	4b46      	ldr	r3, [pc, #280]	@ (8005a1c <Print_MAX1726x_Config2+0x148>)
 8005904:	e000      	b.n	8005908 <Print_MAX1726x_Config2+0x34>
 8005906:	4b46      	ldr	r3, [pc, #280]	@ (8005a20 <Print_MAX1726x_Config2+0x14c>)
 8005908:	4619      	mov	r1, r3
 800590a:	4846      	ldr	r0, [pc, #280]	@ (8005a24 <Print_MAX1726x_Config2+0x150>)
 800590c:	f7fc f856 	bl	80019bc <UART_Printf>

    // Bit 14: Enable AtRate Function
    UART_Printf("[Bit 14] AtRateEn (AtRate Function En)  : %s\r\n",
                (config2_reg & (1 << 14)) ? "ENABLED" : "DISABLED");
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    UART_Printf("[Bit 14] AtRateEn (AtRate Function En)  : %s\r\n",
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <Print_MAX1726x_Config2+0x4a>
 800591a:	4b40      	ldr	r3, [pc, #256]	@ (8005a1c <Print_MAX1726x_Config2+0x148>)
 800591c:	e000      	b.n	8005920 <Print_MAX1726x_Config2+0x4c>
 800591e:	4b40      	ldr	r3, [pc, #256]	@ (8005a20 <Print_MAX1726x_Config2+0x14c>)
 8005920:	4619      	mov	r1, r3
 8005922:	4841      	ldr	r0, [pc, #260]	@ (8005a28 <Print_MAX1726x_Config2+0x154>)
 8005924:	f7fc f84a 	bl	80019bc <UART_Printf>
                
    // Bit 12: Enable Constant-Power Load Model
    UART_Printf("[Bit 12] CP_EN    (Constant Power Model) : %s\r\n",
                (config2_reg & (1 << 12)) ? "ENABLED" : "DISABLED");
 8005928:	88fb      	ldrh	r3, [r7, #6]
 800592a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    UART_Printf("[Bit 12] CP_EN    (Constant Power Model) : %s\r\n",
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <Print_MAX1726x_Config2+0x62>
 8005932:	4b3a      	ldr	r3, [pc, #232]	@ (8005a1c <Print_MAX1726x_Config2+0x148>)
 8005934:	e000      	b.n	8005938 <Print_MAX1726x_Config2+0x64>
 8005936:	4b3a      	ldr	r3, [pc, #232]	@ (8005a20 <Print_MAX1726x_Config2+0x14c>)
 8005938:	4619      	mov	r1, r3
 800593a:	483c      	ldr	r0, [pc, #240]	@ (8005a2c <Print_MAX1726x_Config2+0x158>)
 800593c:	f7fc f83e 	bl	80019bc <UART_Printf>
                
    // Bit 10: I2C Timeout Disable
    UART_Printf("[Bit 10] TMOUT_DIS(I2C Timeout Disable)  : %s\r\n",
                (config2_reg & (1 << 10)) ? "DISABLED" : "ENABLED");
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
    UART_Printf("[Bit 10] TMOUT_DIS(I2C Timeout Disable)  : %s\r\n",
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <Print_MAX1726x_Config2+0x7a>
 800594a:	4b35      	ldr	r3, [pc, #212]	@ (8005a20 <Print_MAX1726x_Config2+0x14c>)
 800594c:	e000      	b.n	8005950 <Print_MAX1726x_Config2+0x7c>
 800594e:	4b33      	ldr	r3, [pc, #204]	@ (8005a1c <Print_MAX1726x_Config2+0x148>)
 8005950:	4619      	mov	r1, r3
 8005952:	4837      	ldr	r0, [pc, #220]	@ (8005a30 <Print_MAX1726x_Config2+0x15c>)
 8005954:	f7fc f832 	bl	80019bc <UART_Printf>
                
    // Bit 9: Enable Thermistor Simulation
    UART_Printf("[Bit 9]  TS_EN    (Thermistor Sim En)    : %s\r\n",
                (config2_reg & (1 << 9)) ? "ENABLED" : "DISABLED");
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
    UART_Printf("[Bit 9]  TS_EN    (Thermistor Sim En)    : %s\r\n",
 800595e:	2b00      	cmp	r3, #0
 8005960:	d001      	beq.n	8005966 <Print_MAX1726x_Config2+0x92>
 8005962:	4b2e      	ldr	r3, [pc, #184]	@ (8005a1c <Print_MAX1726x_Config2+0x148>)
 8005964:	e000      	b.n	8005968 <Print_MAX1726x_Config2+0x94>
 8005966:	4b2e      	ldr	r3, [pc, #184]	@ (8005a20 <Print_MAX1726x_Config2+0x14c>)
 8005968:	4619      	mov	r1, r3
 800596a:	4832      	ldr	r0, [pc, #200]	@ (8005a34 <Print_MAX1726x_Config2+0x160>)
 800596c:	f7fc f826 	bl	80019bc <UART_Printf>

    // Bit 8: Enable State of Health (SoH) Compensation
    UART_Printf("[Bit 8]  SOH_EN   (SoH Compensation En)  : %s\r\n",
                (config2_reg & (1 << 8)) ? "ENABLED" : "DISABLED");
 8005970:	88fb      	ldrh	r3, [r7, #6]
 8005972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    UART_Printf("[Bit 8]  SOH_EN   (SoH Compensation En)  : %s\r\n",
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <Print_MAX1726x_Config2+0xaa>
 800597a:	4b28      	ldr	r3, [pc, #160]	@ (8005a1c <Print_MAX1726x_Config2+0x148>)
 800597c:	e000      	b.n	8005980 <Print_MAX1726x_Config2+0xac>
 800597e:	4b28      	ldr	r3, [pc, #160]	@ (8005a20 <Print_MAX1726x_Config2+0x14c>)
 8005980:	4619      	mov	r1, r3
 8005982:	482d      	ldr	r0, [pc, #180]	@ (8005a38 <Print_MAX1726x_Config2+0x164>)
 8005984:	f7fc f81a 	bl	80019bc <UART_Printf>

    // Bit 7: Force EZ Config Load
    UART_Printf("[Bit 7]  LDMDL    (Load Model Command)   : %s - Writing '1' reloads EZ config.\r\n",
                (config2_reg & (1 << 7)) ? "ACTIVE" : "IDLE");
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    UART_Printf("[Bit 7]  LDMDL    (Load Model Command)   : %s - Writing '1' reloads EZ config.\r\n",
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <Print_MAX1726x_Config2+0xc2>
 8005992:	4b2a      	ldr	r3, [pc, #168]	@ (8005a3c <Print_MAX1726x_Config2+0x168>)
 8005994:	e000      	b.n	8005998 <Print_MAX1726x_Config2+0xc4>
 8005996:	4b2a      	ldr	r3, [pc, #168]	@ (8005a40 <Print_MAX1726x_Config2+0x16c>)
 8005998:	4619      	mov	r1, r3
 800599a:	482a      	ldr	r0, [pc, #168]	@ (8005a44 <Print_MAX1726x_Config2+0x170>)
 800599c:	f7fc f80e 	bl	80019bc <UART_Printf>

    // Bit 5: Enable Ripple and Particle Filter
    UART_Printf("[Bit 5]  RI_EN    (Ripple Filter En)     : %s\r\n",
                (config2_reg & (1 << 5)) ? "ENABLED" : "DISABLED");
 80059a0:	88fb      	ldrh	r3, [r7, #6]
 80059a2:	f003 0320 	and.w	r3, r3, #32
    UART_Printf("[Bit 5]  RI_EN    (Ripple Filter En)     : %s\r\n",
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d001      	beq.n	80059ae <Print_MAX1726x_Config2+0xda>
 80059aa:	4b1c      	ldr	r3, [pc, #112]	@ (8005a1c <Print_MAX1726x_Config2+0x148>)
 80059ac:	e000      	b.n	80059b0 <Print_MAX1726x_Config2+0xdc>
 80059ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005a20 <Print_MAX1726x_Config2+0x14c>)
 80059b0:	4619      	mov	r1, r3
 80059b2:	4825      	ldr	r0, [pc, #148]	@ (8005a48 <Print_MAX1726x_Config2+0x174>)
 80059b4:	f7fc f802 	bl	80019bc <UART_Printf>

    // Bit 4: Enable Current-Voltage Synchronization
    UART_Printf("[Bit 4]  CVSYNC_EN(CV Sync Enable)       : %s\r\n",
                (config2_reg & (1 << 4)) ? "ENABLED" : "DISABLED");
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	f003 0310 	and.w	r3, r3, #16
    UART_Printf("[Bit 4]  CVSYNC_EN(CV Sync Enable)       : %s\r\n",
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <Print_MAX1726x_Config2+0xf2>
 80059c2:	4b16      	ldr	r3, [pc, #88]	@ (8005a1c <Print_MAX1726x_Config2+0x148>)
 80059c4:	e000      	b.n	80059c8 <Print_MAX1726x_Config2+0xf4>
 80059c6:	4b16      	ldr	r3, [pc, #88]	@ (8005a20 <Print_MAX1726x_Config2+0x14c>)
 80059c8:	4619      	mov	r1, r3
 80059ca:	4820      	ldr	r0, [pc, #128]	@ (8005a4c <Print_MAX1726x_Config2+0x178>)
 80059cc:	f7fb fff6 	bl	80019bc <UART_Printf>
    
    // Bit 3: Disable Model Comp Learning
    UART_Printf("[Bit 3]  MOD_DIS  (Model Learning Dis)   : %s\r\n",
                (config2_reg & (1 << 3)) ? "LEARNING DISABLED" : "LEARNING ENABLED");
 80059d0:	88fb      	ldrh	r3, [r7, #6]
 80059d2:	f003 0308 	and.w	r3, r3, #8
    UART_Printf("[Bit 3]  MOD_DIS  (Model Learning Dis)   : %s\r\n",
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <Print_MAX1726x_Config2+0x10a>
 80059da:	4b1d      	ldr	r3, [pc, #116]	@ (8005a50 <Print_MAX1726x_Config2+0x17c>)
 80059dc:	e000      	b.n	80059e0 <Print_MAX1726x_Config2+0x10c>
 80059de:	4b1d      	ldr	r3, [pc, #116]	@ (8005a54 <Print_MAX1726x_Config2+0x180>)
 80059e0:	4619      	mov	r1, r3
 80059e2:	481d      	ldr	r0, [pc, #116]	@ (8005a58 <Print_MAX1726x_Config2+0x184>)
 80059e4:	f7fb ffea 	bl	80019bc <UART_Printf>
    
    // Bit 1: ADC Offset Correction Disable
    UART_Printf("[Bit 1]  ADC_DIS  (ADC Offset Corr Dis)  : %s\r\n",
                (config2_reg & (1 << 1)) ? "DISABLED" : "ENABLED");
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	f003 0302 	and.w	r3, r3, #2
    UART_Printf("[Bit 1]  ADC_DIS  (ADC Offset Corr Dis)  : %s\r\n",
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <Print_MAX1726x_Config2+0x122>
 80059f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <Print_MAX1726x_Config2+0x14c>)
 80059f4:	e000      	b.n	80059f8 <Print_MAX1726x_Config2+0x124>
 80059f6:	4b09      	ldr	r3, [pc, #36]	@ (8005a1c <Print_MAX1726x_Config2+0x148>)
 80059f8:	4619      	mov	r1, r3
 80059fa:	4818      	ldr	r0, [pc, #96]	@ (8005a5c <Print_MAX1726x_Config2+0x188>)
 80059fc:	f7fb ffde 	bl	80019bc <UART_Printf>

    UART_Printf("----------------------------------------\r\n\r\n");
 8005a00:	4817      	ldr	r0, [pc, #92]	@ (8005a60 <Print_MAX1726x_Config2+0x18c>)
 8005a02:	f7fb ffdb 	bl	80019bc <UART_Printf>
}
 8005a06:	bf00      	nop
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	0800b248 	.word	0x0800b248
 8005a14:	0800b278 	.word	0x0800b278
 8005a18:	0800b2b4 	.word	0x0800b2b4
 8005a1c:	0800b2e0 	.word	0x0800b2e0
 8005a20:	0800b2e8 	.word	0x0800b2e8
 8005a24:	0800b2f4 	.word	0x0800b2f4
 8005a28:	0800b324 	.word	0x0800b324
 8005a2c:	0800b354 	.word	0x0800b354
 8005a30:	0800b384 	.word	0x0800b384
 8005a34:	0800b3b4 	.word	0x0800b3b4
 8005a38:	0800b3e4 	.word	0x0800b3e4
 8005a3c:	0800b414 	.word	0x0800b414
 8005a40:	0800b41c 	.word	0x0800b41c
 8005a44:	0800b424 	.word	0x0800b424
 8005a48:	0800b478 	.word	0x0800b478
 8005a4c:	0800b4a8 	.word	0x0800b4a8
 8005a50:	0800b4d8 	.word	0x0800b4d8
 8005a54:	0800b4ec 	.word	0x0800b4ec
 8005a58:	0800b500 	.word	0x0800b500
 8005a5c:	0800b530 	.word	0x0800b530
 8005a60:	0800b560 	.word	0x0800b560

08005a64 <Print_MAX1726x_Config>:

void Print_MAX1726x_Config(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
    uint16_t config_reg;
    const char* temp_src;

    // Read the current value from the config register
    // maxim_max1726x_read_reg(MAX1726X_CONFIG_REG, &config_reg);
    MAX17260_Register_ReadSingle(CONFIG, &config_reg);
 8005a6a:	1cbb      	adds	r3, r7, #2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	201d      	movs	r0, #29
 8005a70:	f7ff fedf 	bl	8005832 <MAX17260_Register_ReadSingle>

    UART_Printf("\r\n--- MAX1726x Config Register [0x%04X] ---\r\n", config_reg);
 8005a74:	887b      	ldrh	r3, [r7, #2]
 8005a76:	4619      	mov	r1, r3
 8005a78:	4845      	ldr	r0, [pc, #276]	@ (8005b90 <Print_MAX1726x_Config+0x12c>)
 8005a7a:	f7fb ff9f 	bl	80019bc <UART_Printf>
    UART_Printf("This register controls alerts and operating modes.\r\n");
 8005a7e:	4845      	ldr	r0, [pc, #276]	@ (8005b94 <Print_MAX1726x_Config+0x130>)
 8005a80:	f7fb ff9c 	bl	80019bc <UART_Printf>
    UART_Printf("----------------------------------------\r\n");
 8005a84:	4844      	ldr	r0, [pc, #272]	@ (8005b98 <Print_MAX1726x_Config+0x134>)
 8005a86:	f7fb ff99 	bl	80019bc <UART_Printf>

    // Bit 14: SOC Change Alert Enable
    UART_Printf("[Bit 14] S_INT    (SOC Change Alert En)  : %s\r\n",
                (config_reg & (1 << 14)) ? "ENABLED" : "DISABLED");
 8005a8a:	887b      	ldrh	r3, [r7, #2]
 8005a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    UART_Printf("[Bit 14] S_INT    (SOC Change Alert En)  : %s\r\n",
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <Print_MAX1726x_Config+0x34>
 8005a94:	4b41      	ldr	r3, [pc, #260]	@ (8005b9c <Print_MAX1726x_Config+0x138>)
 8005a96:	e000      	b.n	8005a9a <Print_MAX1726x_Config+0x36>
 8005a98:	4b41      	ldr	r3, [pc, #260]	@ (8005ba0 <Print_MAX1726x_Config+0x13c>)
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	4841      	ldr	r0, [pc, #260]	@ (8005ba4 <Print_MAX1726x_Config+0x140>)
 8005a9e:	f7fb ff8d 	bl	80019bc <UART_Printf>

    // Bit 13: Thermistor Enable
    UART_Printf("[Bit 13] T_EN     (Thermistor Enable)    : %s\r\n",
                (config_reg & (1 << 13)) ? "ENABLED (External)" : "DISABLED (Internal sensor)");
 8005aa2:	887b      	ldrh	r3, [r7, #2]
 8005aa4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    UART_Printf("[Bit 13] T_EN     (Thermistor Enable)    : %s\r\n",
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <Print_MAX1726x_Config+0x4c>
 8005aac:	4b3e      	ldr	r3, [pc, #248]	@ (8005ba8 <Print_MAX1726x_Config+0x144>)
 8005aae:	e000      	b.n	8005ab2 <Print_MAX1726x_Config+0x4e>
 8005ab0:	4b3e      	ldr	r3, [pc, #248]	@ (8005bac <Print_MAX1726x_Config+0x148>)
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	483e      	ldr	r0, [pc, #248]	@ (8005bb0 <Print_MAX1726x_Config+0x14c>)
 8005ab6:	f7fb ff81 	bl	80019bc <UART_Printf>

    // Bit 12: Peak Current Alert Enable
    UART_Printf("[Bit 12] PA_EN    (Peak Current Alert En): %s\r\n",
                (config_reg & (1 << 12)) ? "ENABLED" : "DISABLED");
 8005aba:	887b      	ldrh	r3, [r7, #2]
 8005abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    UART_Printf("[Bit 12] PA_EN    (Peak Current Alert En): %s\r\n",
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <Print_MAX1726x_Config+0x64>
 8005ac4:	4b35      	ldr	r3, [pc, #212]	@ (8005b9c <Print_MAX1726x_Config+0x138>)
 8005ac6:	e000      	b.n	8005aca <Print_MAX1726x_Config+0x66>
 8005ac8:	4b35      	ldr	r3, [pc, #212]	@ (8005ba0 <Print_MAX1726x_Config+0x13c>)
 8005aca:	4619      	mov	r1, r3
 8005acc:	4839      	ldr	r0, [pc, #228]	@ (8005bb4 <Print_MAX1726x_Config+0x150>)
 8005ace:	f7fb ff75 	bl	80019bc <UART_Printf>

    // Bit 11: Temperature Channel Assignment
    if (config_reg & (1 << 13)) { // T_EN is enabled (external)
 8005ad2:	887b      	ldrh	r3, [r7, #2]
 8005ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <Print_MAX1726x_Config+0x8c>
        temp_src = (config_reg & (1 << 11)) ? "THRM2 pin" : "THRM1 pin";
 8005adc:	887b      	ldrh	r3, [r7, #2]
 8005ade:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <Print_MAX1726x_Config+0x86>
 8005ae6:	4b34      	ldr	r3, [pc, #208]	@ (8005bb8 <Print_MAX1726x_Config+0x154>)
 8005ae8:	e000      	b.n	8005aec <Print_MAX1726x_Config+0x88>
 8005aea:	4b34      	ldr	r3, [pc, #208]	@ (8005bbc <Print_MAX1726x_Config+0x158>)
 8005aec:	607b      	str	r3, [r7, #4]
 8005aee:	e008      	b.n	8005b02 <Print_MAX1726x_Config+0x9e>
    } else { // T_EN is disabled (internal)
        temp_src = (config_reg & (1 << 11)) ? "Die Temp" : "V_CELL Temp";
 8005af0:	887b      	ldrh	r3, [r7, #2]
 8005af2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <Print_MAX1726x_Config+0x9a>
 8005afa:	4b31      	ldr	r3, [pc, #196]	@ (8005bc0 <Print_MAX1726x_Config+0x15c>)
 8005afc:	e000      	b.n	8005b00 <Print_MAX1726x_Config+0x9c>
 8005afe:	4b31      	ldr	r3, [pc, #196]	@ (8005bc4 <Print_MAX1726x_Config+0x160>)
 8005b00:	607b      	str	r3, [r7, #4]
    }
    UART_Printf("[Bit 11] T_SEL    (Temp Source Select)   : %s\r\n", temp_src);
 8005b02:	6879      	ldr	r1, [r7, #4]
 8005b04:	4830      	ldr	r0, [pc, #192]	@ (8005bc8 <Print_MAX1726x_Config+0x164>)
 8005b06:	f7fb ff59 	bl	80019bc <UART_Printf>

    // Bit 8: Enable Sticky Alerts
    UART_Printf("[Bit 8]  Sticky   (Sticky Alerts)        : %s - If enabled, alert flags are not auto-cleared.\r\n",
                (config_reg & (1 << 8)) ? "ENABLED" : "DISABLED");
 8005b0a:	887b      	ldrh	r3, [r7, #2]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    UART_Printf("[Bit 8]  Sticky   (Sticky Alerts)        : %s - If enabled, alert flags are not auto-cleared.\r\n",
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d001      	beq.n	8005b18 <Print_MAX1726x_Config+0xb4>
 8005b14:	4b21      	ldr	r3, [pc, #132]	@ (8005b9c <Print_MAX1726x_Config+0x138>)
 8005b16:	e000      	b.n	8005b1a <Print_MAX1726x_Config+0xb6>
 8005b18:	4b21      	ldr	r3, [pc, #132]	@ (8005ba0 <Print_MAX1726x_Config+0x13c>)
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	482b      	ldr	r0, [pc, #172]	@ (8005bcc <Print_MAX1726x_Config+0x168>)
 8005b1e:	f7fb ff4d 	bl	80019bc <UART_Printf>
                
    // Bit 3: ALRT Pin Enable
    UART_Printf("[Bit 3]  A_EN     (ALRT Pin Enable)      : %s - If enabled, the ALRT pin will assert on alerts.\r\n",
                (config_reg & (1 << 3)) ? "ENABLED" : "DISABLED");
 8005b22:	887b      	ldrh	r3, [r7, #2]
 8005b24:	f003 0308 	and.w	r3, r3, #8
    UART_Printf("[Bit 3]  A_EN     (ALRT Pin Enable)      : %s - If enabled, the ALRT pin will assert on alerts.\r\n",
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <Print_MAX1726x_Config+0xcc>
 8005b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8005b9c <Print_MAX1726x_Config+0x138>)
 8005b2e:	e000      	b.n	8005b32 <Print_MAX1726x_Config+0xce>
 8005b30:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba0 <Print_MAX1726x_Config+0x13c>)
 8005b32:	4619      	mov	r1, r3
 8005b34:	4826      	ldr	r0, [pc, #152]	@ (8005bd0 <Print_MAX1726x_Config+0x16c>)
 8005b36:	f7fb ff41 	bl	80019bc <UART_Printf>

    // Bit 2: State of Charge Alert Enable
    UART_Printf("[Bit 2]  S_EN     (SOC Alert En)         : %s - For main SOC threshold (SAlrtTh).\r\n",
                (config_reg & (1 << 2)) ? "ENABLED" : "DISABLED");
 8005b3a:	887b      	ldrh	r3, [r7, #2]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
    UART_Printf("[Bit 2]  S_EN     (SOC Alert En)         : %s - For main SOC threshold (SAlrtTh).\r\n",
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <Print_MAX1726x_Config+0xe4>
 8005b44:	4b15      	ldr	r3, [pc, #84]	@ (8005b9c <Print_MAX1726x_Config+0x138>)
 8005b46:	e000      	b.n	8005b4a <Print_MAX1726x_Config+0xe6>
 8005b48:	4b15      	ldr	r3, [pc, #84]	@ (8005ba0 <Print_MAX1726x_Config+0x13c>)
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4821      	ldr	r0, [pc, #132]	@ (8005bd4 <Print_MAX1726x_Config+0x170>)
 8005b4e:	f7fb ff35 	bl	80019bc <UART_Printf>
                
    // Bit 1: Temperature Alert Enable
    UART_Printf("[Bit 1]  TALRT_EN (Temperature Alert En) : %s\r\n",
                (config_reg & (1 << 1)) ? "ENABLED" : "DISABLED");
 8005b52:	887b      	ldrh	r3, [r7, #2]
 8005b54:	f003 0302 	and.w	r3, r3, #2
    UART_Printf("[Bit 1]  TALRT_EN (Temperature Alert En) : %s\r\n",
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <Print_MAX1726x_Config+0xfc>
 8005b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005b9c <Print_MAX1726x_Config+0x138>)
 8005b5e:	e000      	b.n	8005b62 <Print_MAX1726x_Config+0xfe>
 8005b60:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba0 <Print_MAX1726x_Config+0x13c>)
 8005b62:	4619      	mov	r1, r3
 8005b64:	481c      	ldr	r0, [pc, #112]	@ (8005bd8 <Print_MAX1726x_Config+0x174>)
 8005b66:	f7fb ff29 	bl	80019bc <UART_Printf>

    // Bit 0: Voltage Alert Enable
    UART_Printf("[Bit 0]  VALRT_EN (Voltage Alert En)     : %s\r\n",
                (config_reg & (1 << 0)) ? "ENABLED" : "DISABLED");
 8005b6a:	887b      	ldrh	r3, [r7, #2]
 8005b6c:	f003 0301 	and.w	r3, r3, #1
    UART_Printf("[Bit 0]  VALRT_EN (Voltage Alert En)     : %s\r\n",
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <Print_MAX1726x_Config+0x114>
 8005b74:	4b09      	ldr	r3, [pc, #36]	@ (8005b9c <Print_MAX1726x_Config+0x138>)
 8005b76:	e000      	b.n	8005b7a <Print_MAX1726x_Config+0x116>
 8005b78:	4b09      	ldr	r3, [pc, #36]	@ (8005ba0 <Print_MAX1726x_Config+0x13c>)
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4817      	ldr	r0, [pc, #92]	@ (8005bdc <Print_MAX1726x_Config+0x178>)
 8005b7e:	f7fb ff1d 	bl	80019bc <UART_Printf>

    UART_Printf("----------------------------------------\r\n\r\n");
 8005b82:	4817      	ldr	r0, [pc, #92]	@ (8005be0 <Print_MAX1726x_Config+0x17c>)
 8005b84:	f7fb ff1a 	bl	80019bc <UART_Printf>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	0800b590 	.word	0x0800b590
 8005b94:	0800b5c0 	.word	0x0800b5c0
 8005b98:	0800b2b4 	.word	0x0800b2b4
 8005b9c:	0800b2e0 	.word	0x0800b2e0
 8005ba0:	0800b2e8 	.word	0x0800b2e8
 8005ba4:	0800b5f8 	.word	0x0800b5f8
 8005ba8:	0800b628 	.word	0x0800b628
 8005bac:	0800b63c 	.word	0x0800b63c
 8005bb0:	0800b658 	.word	0x0800b658
 8005bb4:	0800b688 	.word	0x0800b688
 8005bb8:	0800b6b8 	.word	0x0800b6b8
 8005bbc:	0800b6c4 	.word	0x0800b6c4
 8005bc0:	0800b6d0 	.word	0x0800b6d0
 8005bc4:	0800b6dc 	.word	0x0800b6dc
 8005bc8:	0800b6e8 	.word	0x0800b6e8
 8005bcc:	0800b718 	.word	0x0800b718
 8005bd0:	0800b778 	.word	0x0800b778
 8005bd4:	0800b7dc 	.word	0x0800b7dc
 8005bd8:	0800b830 	.word	0x0800b830
 8005bdc:	0800b860 	.word	0x0800b860
 8005be0:	0800b560 	.word	0x0800b560

08005be4 <Print_MAX1726x_Status>:

void Print_MAX1726x_Status(void)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
    uint16_t status_reg;

    // Read the current value from the status register
    // maxim_max1726x_read_reg(MAX1726X_STATUS_REG, &status_reg);
    MAX17260_Register_ReadSingle(STATUS, &status_reg);
 8005bea:	1dbb      	adds	r3, r7, #6
 8005bec:	4619      	mov	r1, r3
 8005bee:	2000      	movs	r0, #0
 8005bf0:	f7ff fe1f 	bl	8005832 <MAX17260_Register_ReadSingle>

    UART_Printf("\r\n--- MAX1726x Status Register [0x%04X] ---\r\n", status_reg);
 8005bf4:	88fb      	ldrh	r3, [r7, #6]
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	485e      	ldr	r0, [pc, #376]	@ (8005d74 <Print_MAX1726x_Status+0x190>)
 8005bfa:	f7fb fedf 	bl	80019bc <UART_Printf>

    // Check each bit and print its meaning and state (1=SET, 0=NOT SET)

    // Bit 15: Battery Insertion
    UART_Printf("[Bit 15] Bst      (Battery Status Alert) : %s - Set on battery insertion.\r\n",
                (status_reg & (1 << 15)) ? "SET" : "NOT SET");
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	b21b      	sxth	r3, r3
    UART_Printf("[Bit 15] Bst      (Battery Status Alert) : %s - Set on battery insertion.\r\n",
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	da01      	bge.n	8005c0a <Print_MAX1726x_Status+0x26>
 8005c06:	4b5c      	ldr	r3, [pc, #368]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005c08:	e000      	b.n	8005c0c <Print_MAX1726x_Status+0x28>
 8005c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	485c      	ldr	r0, [pc, #368]	@ (8005d80 <Print_MAX1726x_Status+0x19c>)
 8005c10:	f7fb fed4 	bl	80019bc <UART_Printf>
    // UART_Printf("[Bit 14] Sc       (State of Charge Alert): %s - 1%% SOC change or charging termination.\r\n",
    //             (status_reg & (1 << 14)) ? "SET" : "NOT SET");

    // Bit 13: Peak Current Alert
    UART_Printf("[Bit 13] PA       (Peak Current Alert)   : %s - Sustained peak current exceeded.\r\n",
                (status_reg & (1 << 13)) ? "SET" : "NOT SET");
 8005c14:	88fb      	ldrh	r3, [r7, #6]
 8005c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    UART_Printf("[Bit 13] PA       (Peak Current Alert)   : %s - Sustained peak current exceeded.\r\n",
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <Print_MAX1726x_Status+0x3e>
 8005c1e:	4b56      	ldr	r3, [pc, #344]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005c20:	e000      	b.n	8005c24 <Print_MAX1726x_Status+0x40>
 8005c22:	4b56      	ldr	r3, [pc, #344]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005c24:	4619      	mov	r1, r3
 8005c26:	4857      	ldr	r0, [pc, #348]	@ (8005d84 <Print_MAX1726x_Status+0x1a0>)
 8005c28:	f7fb fec8 	bl	80019bc <UART_Printf>

    // Bit 12: Temperature Alert
    UART_Printf("[Bit 12] TA       (Temperature Alert)    : %s - Temperature threshold exceeded.\r\n",
                (status_reg & (1 << 12)) ? "SET" : "NOT SET");
 8005c2c:	88fb      	ldrh	r3, [r7, #6]
 8005c2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    UART_Printf("[Bit 12] TA       (Temperature Alert)    : %s - Temperature threshold exceeded.\r\n",
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <Print_MAX1726x_Status+0x56>
 8005c36:	4b50      	ldr	r3, [pc, #320]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005c38:	e000      	b.n	8005c3c <Print_MAX1726x_Status+0x58>
 8005c3a:	4b50      	ldr	r3, [pc, #320]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4852      	ldr	r0, [pc, #328]	@ (8005d88 <Print_MAX1726x_Status+0x1a4>)
 8005c40:	f7fb febc 	bl	80019bc <UART_Printf>

    // Bit 11: Voltage Alert
    UART_Printf("[Bit 11] VA       (Voltage Alert)        : %s - Voltage threshold exceeded.\r\n",
                (status_reg & (1 << 11)) ? "SET" : "NOT SET");
 8005c44:	88fb      	ldrh	r3, [r7, #6]
 8005c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
    UART_Printf("[Bit 11] VA       (Voltage Alert)        : %s - Voltage threshold exceeded.\r\n",
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <Print_MAX1726x_Status+0x6e>
 8005c4e:	4b4a      	ldr	r3, [pc, #296]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005c50:	e000      	b.n	8005c54 <Print_MAX1726x_Status+0x70>
 8005c52:	4b4a      	ldr	r3, [pc, #296]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005c54:	4619      	mov	r1, r3
 8005c56:	484d      	ldr	r0, [pc, #308]	@ (8005d8c <Print_MAX1726x_Status+0x1a8>)
 8005c58:	f7fb feb0 	bl	80019bc <UART_Printf>

    // Bit 10: Current Alert
    UART_Printf("[Bit 10] CA       (Current Alert)        : %s - Current threshold exceeded.\r\n",
                (status_reg & (1 << 10)) ? "SET" : "NOT SET");
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
    UART_Printf("[Bit 10] CA       (Current Alert)        : %s - Current threshold exceeded.\r\n",
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <Print_MAX1726x_Status+0x86>
 8005c66:	4b44      	ldr	r3, [pc, #272]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005c68:	e000      	b.n	8005c6c <Print_MAX1726x_Status+0x88>
 8005c6a:	4b44      	ldr	r3, [pc, #272]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4848      	ldr	r0, [pc, #288]	@ (8005d90 <Print_MAX1726x_Status+0x1ac>)
 8005c70:	f7fb fea4 	bl	80019bc <UART_Printf>

    // Bit 9: Delta SOC Interrupt
    UART_Printf("[Bit 9]  dSOCi    (Delta SOC Interrupt)  : %s - RepSOC changed by 1%%.\r\n",
                (status_reg & (1 << 9)) ? "SET" : "NOT SET");
 8005c74:	88fb      	ldrh	r3, [r7, #6]
 8005c76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
    UART_Printf("[Bit 9]  dSOCi    (Delta SOC Interrupt)  : %s - RepSOC changed by 1%%.\r\n",
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <Print_MAX1726x_Status+0x9e>
 8005c7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005c80:	e000      	b.n	8005c84 <Print_MAX1726x_Status+0xa0>
 8005c82:	4b3e      	ldr	r3, [pc, #248]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005c84:	4619      	mov	r1, r3
 8005c86:	4843      	ldr	r0, [pc, #268]	@ (8005d94 <Print_MAX1726x_Status+0x1b0>)
 8005c88:	f7fb fe98 	bl	80019bc <UART_Printf>

    // Bit 8: Min Current Alert
    UART_Printf("[Bit 8]  Imn      (Min Current Alert)    : %s - Current fell below min threshold.\r\n",
                (status_reg & (1 << 8)) ? "SET" : "NOT SET");
 8005c8c:	88fb      	ldrh	r3, [r7, #6]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    UART_Printf("[Bit 8]  Imn      (Min Current Alert)    : %s - Current fell below min threshold.\r\n",
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <Print_MAX1726x_Status+0xb6>
 8005c96:	4b38      	ldr	r3, [pc, #224]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005c98:	e000      	b.n	8005c9c <Print_MAX1726x_Status+0xb8>
 8005c9a:	4b38      	ldr	r3, [pc, #224]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	483e      	ldr	r0, [pc, #248]	@ (8005d98 <Print_MAX1726x_Status+0x1b4>)
 8005ca0:	f7fb fe8c 	bl	80019bc <UART_Printf>

    // Bit 7: Max Current Alert
    UART_Printf("[Bit 7]  Imx      (Max Current Alert)    : %s - Current rose above max threshold.\r\n",
                (status_reg & (1 << 7)) ? "SET" : "NOT SET");
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    UART_Printf("[Bit 7]  Imx      (Max Current Alert)    : %s - Current rose above max threshold.\r\n",
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <Print_MAX1726x_Status+0xce>
 8005cae:	4b32      	ldr	r3, [pc, #200]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005cb0:	e000      	b.n	8005cb4 <Print_MAX1726x_Status+0xd0>
 8005cb2:	4b32      	ldr	r3, [pc, #200]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4839      	ldr	r0, [pc, #228]	@ (8005d9c <Print_MAX1726x_Status+0x1b8>)
 8005cb8:	f7fb fe80 	bl	80019bc <UART_Printf>

    // Bit 6: Min Temperature Alert
    UART_Printf("[Bit 6]  Tmn      (Min Temp Alert)       : %s - Temp fell below min threshold.\r\n",
                (status_reg & (1 << 6)) ? "SET" : "NOT SET");
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    UART_Printf("[Bit 6]  Tmn      (Min Temp Alert)       : %s - Temp fell below min threshold.\r\n",
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <Print_MAX1726x_Status+0xe6>
 8005cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005cc8:	e000      	b.n	8005ccc <Print_MAX1726x_Status+0xe8>
 8005cca:	4b2c      	ldr	r3, [pc, #176]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4834      	ldr	r0, [pc, #208]	@ (8005da0 <Print_MAX1726x_Status+0x1bc>)
 8005cd0:	f7fb fe74 	bl	80019bc <UART_Printf>

    // Bit 5: Max Temperature Alert
    UART_Printf("[Bit 5]  Tmx      (Max Temp Alert)       : %s - Temp rose above max threshold.\r\n",
                (status_reg & (1 << 5)) ? "SET" : "NOT SET");
 8005cd4:	88fb      	ldrh	r3, [r7, #6]
 8005cd6:	f003 0320 	and.w	r3, r3, #32
    UART_Printf("[Bit 5]  Tmx      (Max Temp Alert)       : %s - Temp rose above max threshold.\r\n",
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <Print_MAX1726x_Status+0xfe>
 8005cde:	4b26      	ldr	r3, [pc, #152]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005ce0:	e000      	b.n	8005ce4 <Print_MAX1726x_Status+0x100>
 8005ce2:	4b26      	ldr	r3, [pc, #152]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	482f      	ldr	r0, [pc, #188]	@ (8005da4 <Print_MAX1726x_Status+0x1c0>)
 8005ce8:	f7fb fe68 	bl	80019bc <UART_Printf>

    // Bit 4: Min Voltage Alert
    UART_Printf("[Bit 4]  Vmn      (Min Voltage Alert)    : %s - Voltage fell below min threshold.\r\n",
                (status_reg & (1 << 4)) ? "SET" : "NOT SET");
 8005cec:	88fb      	ldrh	r3, [r7, #6]
 8005cee:	f003 0310 	and.w	r3, r3, #16
    UART_Printf("[Bit 4]  Vmn      (Min Voltage Alert)    : %s - Voltage fell below min threshold.\r\n",
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <Print_MAX1726x_Status+0x116>
 8005cf6:	4b20      	ldr	r3, [pc, #128]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005cf8:	e000      	b.n	8005cfc <Print_MAX1726x_Status+0x118>
 8005cfa:	4b20      	ldr	r3, [pc, #128]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	482a      	ldr	r0, [pc, #168]	@ (8005da8 <Print_MAX1726x_Status+0x1c4>)
 8005d00:	f7fb fe5c 	bl	80019bc <UART_Printf>

    // Bit 3: Max Voltage Alert
    UART_Printf("[Bit 3]  Vmx      (Max Voltage Alert)    : %s - Voltage rose above max threshold.\r\n",
                (status_reg & (1 << 3)) ? "SET" : "NOT SET");
 8005d04:	88fb      	ldrh	r3, [r7, #6]
 8005d06:	f003 0308 	and.w	r3, r3, #8
    UART_Printf("[Bit 3]  Vmx      (Max Voltage Alert)    : %s - Voltage rose above max threshold.\r\n",
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <Print_MAX1726x_Status+0x12e>
 8005d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005d10:	e000      	b.n	8005d14 <Print_MAX1726x_Status+0x130>
 8005d12:	4b1a      	ldr	r3, [pc, #104]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005d14:	4619      	mov	r1, r3
 8005d16:	4825      	ldr	r0, [pc, #148]	@ (8005dac <Print_MAX1726x_Status+0x1c8>)
 8005d18:	f7fb fe50 	bl	80019bc <UART_Printf>

    // Bit 2: State of Charge Alert
    UART_Printf("[Bit 2]  dSOC     (SOC Alert)            : %s - RepSOC crossed main SOC threshold.\r\n",
                (status_reg & (1 << 2)) ? "SET" : "NOT SET");
 8005d1c:	88fb      	ldrh	r3, [r7, #6]
 8005d1e:	f003 0304 	and.w	r3, r3, #4
    UART_Printf("[Bit 2]  dSOC     (SOC Alert)            : %s - RepSOC crossed main SOC threshold.\r\n",
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <Print_MAX1726x_Status+0x146>
 8005d26:	4b14      	ldr	r3, [pc, #80]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005d28:	e000      	b.n	8005d2c <Print_MAX1726x_Status+0x148>
 8005d2a:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	4820      	ldr	r0, [pc, #128]	@ (8005db0 <Print_MAX1726x_Status+0x1cc>)
 8005d30:	f7fb fe44 	bl	80019bc <UART_Printf>

    // Bit 1: Power On Reset
    UART_Printf("[Bit 1]  POR      (Power On Reset)       : %s - Chip has reset since last cleared.\r\n",
                (status_reg & (1 << 1)) ? "SET" : "NOT SET");
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	f003 0302 	and.w	r3, r3, #2
    UART_Printf("[Bit 1]  POR      (Power On Reset)       : %s - Chip has reset since last cleared.\r\n",
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <Print_MAX1726x_Status+0x15e>
 8005d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d78 <Print_MAX1726x_Status+0x194>)
 8005d40:	e000      	b.n	8005d44 <Print_MAX1726x_Status+0x160>
 8005d42:	4b0e      	ldr	r3, [pc, #56]	@ (8005d7c <Print_MAX1726x_Status+0x198>)
 8005d44:	4619      	mov	r1, r3
 8005d46:	481b      	ldr	r0, [pc, #108]	@ (8005db4 <Print_MAX1726x_Status+0x1d0>)
 8005d48:	f7fb fe38 	bl	80019bc <UART_Printf>

    // Bit 0: Battery Presence
    UART_Printf("[Bit 0]  BATT_PRES(Battery Presence)     : %s - Indicates if battery is present.\r\n",
                (status_reg & (1 << 0)) ? "PRESENT" : "ABSENT");
 8005d4c:	88fb      	ldrh	r3, [r7, #6]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
    UART_Printf("[Bit 0]  BATT_PRES(Battery Presence)     : %s - Indicates if battery is present.\r\n",
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d001      	beq.n	8005d5a <Print_MAX1726x_Status+0x176>
 8005d56:	4b18      	ldr	r3, [pc, #96]	@ (8005db8 <Print_MAX1726x_Status+0x1d4>)
 8005d58:	e000      	b.n	8005d5c <Print_MAX1726x_Status+0x178>
 8005d5a:	4b18      	ldr	r3, [pc, #96]	@ (8005dbc <Print_MAX1726x_Status+0x1d8>)
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4818      	ldr	r0, [pc, #96]	@ (8005dc0 <Print_MAX1726x_Status+0x1dc>)
 8005d60:	f7fb fe2c 	bl	80019bc <UART_Printf>

    UART_Printf("----------------------------------------\r\n\r\n");
 8005d64:	4817      	ldr	r0, [pc, #92]	@ (8005dc4 <Print_MAX1726x_Status+0x1e0>)
 8005d66:	f7fb fe29 	bl	80019bc <UART_Printf>
}
 8005d6a:	bf00      	nop
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	0800b890 	.word	0x0800b890
 8005d78:	0800b8c0 	.word	0x0800b8c0
 8005d7c:	0800b8c4 	.word	0x0800b8c4
 8005d80:	0800b8cc 	.word	0x0800b8cc
 8005d84:	0800b918 	.word	0x0800b918
 8005d88:	0800b96c 	.word	0x0800b96c
 8005d8c:	0800b9c0 	.word	0x0800b9c0
 8005d90:	0800ba10 	.word	0x0800ba10
 8005d94:	0800ba60 	.word	0x0800ba60
 8005d98:	0800baac 	.word	0x0800baac
 8005d9c:	0800bb00 	.word	0x0800bb00
 8005da0:	0800bb54 	.word	0x0800bb54
 8005da4:	0800bba8 	.word	0x0800bba8
 8005da8:	0800bbfc 	.word	0x0800bbfc
 8005dac:	0800bc50 	.word	0x0800bc50
 8005db0:	0800bca4 	.word	0x0800bca4
 8005db4:	0800bcfc 	.word	0x0800bcfc
 8005db8:	0800bd54 	.word	0x0800bd54
 8005dbc:	0800bd5c 	.word	0x0800bd5c
 8005dc0:	0800bd64 	.word	0x0800bd64
 8005dc4:	0800b560 	.word	0x0800b560

08005dc8 <MAX17260_Register_printout>:

void MAX17260_Register_printout(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
    Print_MAX1726x_Status();
 8005dcc:	f7ff ff0a 	bl	8005be4 <Print_MAX1726x_Status>
    Print_MAX1726x_Config();
 8005dd0:	f7ff fe48 	bl	8005a64 <Print_MAX1726x_Config>
    Print_MAX1726x_Config2();
 8005dd4:	f7ff fd7e 	bl	80058d4 <Print_MAX1726x_Config2>
}
 8005dd8:	bf00      	nop
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <LWInit>:
 * @brief Performs the initial configuration of the MAX17260.
 *
 * This sequence is extracted from the `BATTSENSOR_LWInit` function and is
 * critical for setting up the device's model and configuration.
 */
static void LWInit(void) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
    int16_t value;

    // Exit hibernate mode sequence
    MAX17260_Register_WriteSingle(SOFT_WAKEUP, 0x90);
 8005de2:	2190      	movs	r1, #144	@ 0x90
 8005de4:	2060      	movs	r0, #96	@ 0x60
 8005de6:	f7ff fd08 	bl	80057fa <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(HIB_CFG, 0x00);
 8005dea:	2100      	movs	r1, #0
 8005dec:	20ba      	movs	r0, #186	@ 0xba
 8005dee:	f7ff fd04 	bl	80057fa <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(SOFT_WAKEUP, 0x00);
 8005df2:	2100      	movs	r1, #0
 8005df4:	2060      	movs	r0, #96	@ 0x60
 8005df6:	f7ff fd00 	bl	80057fa <MAX17260_Register_WriteSingle>

    // Initial config values from original file
    MAX17260_Register_WriteSingle(DESIGN_CAP, 0x7FF8);
 8005dfa:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 8005dfe:	2018      	movs	r0, #24
 8005e00:	f7ff fcfb 	bl	80057fa <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(I_CHG_TERM, 0x0000);
 8005e04:	2100      	movs	r1, #0
 8005e06:	201e      	movs	r0, #30
 8005e08:	f7ff fcf7 	bl	80057fa <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(V_EMPTY, 0x9661);
 8005e0c:	f249 6161 	movw	r1, #38497	@ 0x9661
 8005e10:	203a      	movs	r0, #58	@ 0x3a
 8005e12:	f7ff fcf2 	bl	80057fa <MAX17260_Register_WriteSingle>

    // Write to ModelCfg and wait for it to clear
    MAX17260_Register_WriteSingle(MODEL_CFG, 0x8000);
 8005e16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e1a:	20db      	movs	r0, #219	@ 0xdb
 8005e1c:	f7ff fced 	bl	80057fa <MAX17260_Register_WriteSingle>
    do {
        MAX17260_Register_ReadSingle(MODEL_CFG, (uint16_t*)&value);
 8005e20:	1dbb      	adds	r3, r7, #6
 8005e22:	4619      	mov	r1, r3
 8005e24:	20db      	movs	r0, #219	@ 0xdb
 8005e26:	f7ff fd04 	bl	8005832 <MAX17260_Register_ReadSingle>
    } while (value != 0x0000);
 8005e2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d1f6      	bne.n	8005e20 <LWInit+0x44>

    uint16_t status_val;
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	2000      	movs	r0, #0
 8005e38:	f7ff fcfb 	bl	8005832 <MAX17260_Register_ReadSingle>
    MAX17260_Register_WriteSingle(STATUS, status_val & ~(1 << 1)); // Clear POR bit
 8005e3c:	88bb      	ldrh	r3, [r7, #4]
 8005e3e:	f023 0302 	bic.w	r3, r3, #2
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	2000      	movs	r0, #0
 8005e48:	f7ff fcd7 	bl	80057fa <MAX17260_Register_WriteSingle>

    MAX17260_Register_WriteSingle(HIB_CFG, 0x870C);
 8005e4c:	f248 710c 	movw	r1, #34572	@ 0x870c
 8005e50:	20ba      	movs	r0, #186	@ 0xba
 8005e52:	f7ff fcd2 	bl	80057fa <MAX17260_Register_WriteSingle>
    
    // Write final configuration
    MAX17260_Register_WriteSingle(CONFIG2, 0x0658);
 8005e56:	f44f 61cb 	mov.w	r1, #1624	@ 0x658
 8005e5a:	20bb      	movs	r0, #187	@ 0xbb
 8005e5c:	f7ff fccd 	bl	80057fa <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(MODEL_CFG, 0x8000);
 8005e60:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e64:	20db      	movs	r0, #219	@ 0xdb
 8005e66:	f7ff fcc8 	bl	80057fa <MAX17260_Register_WriteSingle>
}
 8005e6a:	bf00      	nop
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <BatteryMonitor_Init>:

//=============================================================================
// PUBLIC FUNCTION IMPLEMENTATIONS
//=============================================================================

void BatteryMonitor_Init(void) {
 8005e72:	b580      	push	{r7, lr}
 8005e74:	af00      	add	r7, sp, #0
    i2c_init();
 8005e76:	f7ff fc53 	bl	8005720 <i2c_init>

    // Small delay to ensure the sensor is ready after power-up.
    delay_ms(10);
 8005e7a:	200a      	movs	r0, #10
 8005e7c:	f7ff fc9d 	bl	80057ba <delay_ms>

    if (IsPOR()) {
 8005e80:	f7ff fcfc 	bl	800587c <IsPOR>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <BatteryMonitor_Init+0x20>
        LWInit();
 8005e8a:	f7ff ffa7 	bl	8005ddc <LWInit>
        ClearPOR();
 8005e8e:	f7ff fd0b 	bl	80058a8 <ClearPOR>
    }
}
 8005e92:	bf00      	nop
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <NFCTAG_Init>:
	  NFCTAG_OpenSecuritySession(((uint32_t *)UID_BASE)[1], ((uint32_t *)UID_BASE)[2]);
  }
}

ErrorStatus NFCTAG_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
	ErrorStatus _initStatus= SUCCESS;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	73fb      	strb	r3, [r7, #15]
	uint8_t _nfctagId= 0;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	737b      	strb	r3, [r7, #13]
	uint8_t _initRetry= 0;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73bb      	strb	r3, [r7, #14]

	NFCTAG_PowerPinInit();
 8005eaa:	f000 f8b0 	bl	800600e <NFCTAG_PowerPinInit>
	NFCTAG_PowerPinSet(1);
 8005eae:	2001      	movs	r0, #1
 8005eb0:	f000 f8b4 	bl	800601c <NFCTAG_PowerPinSet>
	NFCTAG_GPOInit();
 8005eb4:	f000 f8a4 	bl	8006000 <NFCTAG_GPOInit>

NFCTAG_Init_Retry:
    if(NFCTAG_OK== St25Dv_i2c_Drv.Init())
 8005eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8005ff0 <NFCTAG_Init+0x158>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4798      	blx	r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d105      	bne.n	8005ed0 <NFCTAG_Init+0x38>
    {
        St25Dv_i2c_Drv.ReadID(&_nfctagId);
 8005ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8005ff0 <NFCTAG_Init+0x158>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f107 020d 	add.w	r2, r7, #13
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4798      	blx	r3
    }

    if(I_AM_ST25DV04!= _nfctagId)
 8005ed0:	7b7b      	ldrb	r3, [r7, #13]
 8005ed2:	2b24      	cmp	r3, #36	@ 0x24
 8005ed4:	d002      	beq.n	8005edc <NFCTAG_Init+0x44>
    {
    	_initStatus= ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]
 8005eda:	e068      	b.n	8005fae <NFCTAG_Init+0x116>
		/* change default password
		 * 1. present default factory password, if session is opened(authenticated) write a new password
		 * 2. verify the new password
		 * 3. if verified, present a wrong password to remove authentication and close the session
		 */
		ST25DV_PASSWD _password= {0x0000, 0x0000};//default factory password
 8005edc:	2300      	movs	r3, #0
 8005ede:	607b      	str	r3, [r7, #4]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60bb      	str	r3, [r7, #8]
		ST25DV_I2CSSO_STATUS _i2csso = ST25DV_SESSION_CLOSED;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	70fb      	strb	r3, [r7, #3]
		ST25DV_EH_MODE_STATUS _EHMode;

		St25Dv_i2c_ExtDrv.PresentI2CPassword(_password );
 8005ee8:	4b42      	ldr	r3, [pc, #264]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	1d3a      	adds	r2, r7, #4
 8005eee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ef2:	4798      	blx	r3
		St25Dv_i2c_ExtDrv.ReadI2CSecuritySession_Dyn(&_i2csso );
 8005ef4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef8:	1cfa      	adds	r2, r7, #3
 8005efa:	4610      	mov	r0, r2
 8005efc:	4798      	blx	r3
		if(ST25DV_SESSION_OPEN== _i2csso)
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d10b      	bne.n	8005f1c <NFCTAG_Init+0x84>
		{
			_password.LsbPasswd= ((uint32_t *)UID_BASE)[2];
 8005f04:	4b3c      	ldr	r3, [pc, #240]	@ (8005ff8 <NFCTAG_Init+0x160>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	60bb      	str	r3, [r7, #8]
			_password.MsbPasswd= ((uint32_t *)UID_BASE)[1];
 8005f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8005ffc <NFCTAG_Init+0x164>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	607b      	str	r3, [r7, #4]
			St25Dv_i2c_ExtDrv.WriteI2CPassword(_password );
 8005f10:	4b38      	ldr	r3, [pc, #224]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	1d3a      	adds	r2, r7, #4
 8005f16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f1a:	4798      	blx	r3
		}

		_password.LsbPasswd= ((uint32_t *)UID_BASE)[2];
 8005f1c:	4b36      	ldr	r3, [pc, #216]	@ (8005ff8 <NFCTAG_Init+0x160>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60bb      	str	r3, [r7, #8]
		_password.MsbPasswd= ((uint32_t *)UID_BASE)[1];
 8005f22:	4b36      	ldr	r3, [pc, #216]	@ (8005ffc <NFCTAG_Init+0x164>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	607b      	str	r3, [r7, #4]
		St25Dv_i2c_ExtDrv.PresentI2CPassword(_password );
 8005f28:	4b32      	ldr	r3, [pc, #200]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	1d3a      	adds	r2, r7, #4
 8005f2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f32:	4798      	blx	r3
		St25Dv_i2c_ExtDrv.ReadI2CSecuritySession_Dyn(&_i2csso );
 8005f34:	4b2f      	ldr	r3, [pc, #188]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f38:	1cfa      	adds	r2, r7, #3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	4798      	blx	r3
		if(ST25DV_SESSION_OPEN== _i2csso)
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d132      	bne.n	8005faa <NFCTAG_Init+0x112>
		{
			if(	NFCTAG_OK==	St25Dv_i2c_Drv.ConfigIT(ST25DV_GPO_ENABLE_MASK| ST25DV_GPO_FIELDCHANGE_MASK| ST25DV_GPO_RFINTERRUPT_MASK| ST25DV_GPO_RFPUTMSG_MASK| ST25DV_GPO_RFGETMSG_MASK)
 8005f44:	4b2a      	ldr	r3, [pc, #168]	@ (8005ff0 <NFCTAG_Init+0x158>)
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	20bc      	movs	r0, #188	@ 0xbc
 8005f4a:	4798      	blx	r3
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d11a      	bne.n	8005f88 <NFCTAG_Init+0xf0>
				&&NFCTAG_OK== St25Dv_i2c_ExtDrv.WriteRFMngt(0)//rf disable=1, enable=0
 8005f52:	4b28      	ldr	r3, [pc, #160]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	2000      	movs	r0, #0
 8005f58:	4798      	blx	r3
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d113      	bne.n	8005f88 <NFCTAG_Init+0xf0>
				&&NFCTAG_OK== St25Dv_i2c_ExtDrv.WriteEHMode(ST25DV_EH_ACTIVE_AFTER_BOOT)
 8005f60:	4b24      	ldr	r3, [pc, #144]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	2000      	movs	r0, #0
 8005f66:	4798      	blx	r3
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10c      	bne.n	8005f88 <NFCTAG_Init+0xf0>
				/*TODO: who set these mail box init, pc or us?*/
				)
			{
				St25Dv_i2c_ExtDrv.ReadEHMode(&_EHMode);
 8005f6e:	4b21      	ldr	r3, [pc, #132]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	1cba      	adds	r2, r7, #2
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
				if(_EHMode== ST25DV_EH_ACTIVE_AFTER_BOOT)
 8005f78:	78bb      	ldrb	r3, [r7, #2]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d102      	bne.n	8005f84 <NFCTAG_Init+0xec>
				{
					_initStatus= SUCCESS;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73fb      	strb	r3, [r7, #15]
 8005f82:	e001      	b.n	8005f88 <NFCTAG_Init+0xf0>
				}
				else
				{
					_initStatus= ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
				}
			}

			/*mailbox config:*/
			if( NFCTAG_OK== St25Dv_i2c_ExtDrv.WriteMBMode(ST25DV_ENABLE)//enable mailbox(TODO: clear content if already enabled)
 8005f88:	4b1a      	ldr	r3, [pc, #104]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	2001      	movs	r0, #1
 8005f8e:	4798      	blx	r3
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10b      	bne.n	8005fae <NFCTAG_Init+0x116>
//				&&NFCTAG_OK== St25Dv_i2c_ExtDrv.ResetEHENMode_Dyn()
//				&&NFCTAG_OK== St25Dv_i2c_ExtDrv.ResetMBEN_Dyn()
//				&&NFCTAG_OK== St25Dv_i2c_ExtDrv.SetMBEN_Dyn()
				&&NFCTAG_OK== St25Dv_i2c_ExtDrv.WriteMBWDG(ST25DV_DISABLE)//disable mailbox watchdog feature
 8005f96:	4b17      	ldr	r3, [pc, #92]	@ (8005ff4 <NFCTAG_Init+0x15c>)
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	2000      	movs	r0, #0
 8005f9c:	4798      	blx	r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <NFCTAG_Init+0x116>
				)
			{
				_initStatus= SUCCESS;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]
 8005fa8:	e001      	b.n	8005fae <NFCTAG_Init+0x116>
			}
		}
		else
		{
			_initStatus= ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	73fb      	strb	r3, [r7, #15]
		}
	}

    if(ERROR!= _initStatus)
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d006      	beq.n	8005fc2 <NFCTAG_Init+0x12a>
    {
#if ENABLE_NFCTAG_NDEF == 1
    	if(NFCTAG_OK!= NFCTAG_NDEF_Init())
#else
    	if(NFCTAG_OK!= NFCTAG_NDEF_Clear())/*remove any ndef*/
 8005fb4:	f000 fa9a 	bl	80064ec <NFCTAG_NDEF_Clear>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <NFCTAG_Init+0x12a>
#endif
    	{
			_initStatus= ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
    	}
    }

    if(ERROR== _initStatus)
 8005fc2:	7bfb      	ldrb	r3, [r7, #15]
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d10b      	bne.n	8005fe0 <NFCTAG_Init+0x148>
    {
		if(1> _initRetry)
 8005fc8:	7bbb      	ldrb	r3, [r7, #14]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d103      	bne.n	8005fd6 <NFCTAG_Init+0x13e>
		{
			_initRetry++;
 8005fce:	7bbb      	ldrb	r3, [r7, #14]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	73bb      	strb	r3, [r7, #14]
			goto NFCTAG_Init_Retry;
 8005fd4:	e770      	b.n	8005eb8 <NFCTAG_Init+0x20>
		}

		DBG_Print("#stat:nfc_: INIT error>\r\n");
		DIAG_Code(INIT_FAILED_NFCDCode, 0);
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	f640 5001 	movw	r0, #3329	@ 0xd01
 8005fdc:	f000 fffe 	bl	8006fdc <DIAG_Code>
//	else
//	{
//		DBG_Print("#stat:nfc_: RF Field NOT Present>\r\n");
//	}

	NFCTAG_PowerPinSet(0);
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	f000 f81b 	bl	800601c <NFCTAG_PowerPinSet>
	return _initStatus;
 8005fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	2000000c 	.word	0x2000000c
 8005ff4:	20000034 	.word	0x20000034
 8005ff8:	1fff7598 	.word	0x1fff7598
 8005ffc:	1fff7594 	.word	0x1fff7594

08006000 <NFCTAG_GPOInit>:

void NFCTAG_GPOInit( void )
{
 8006000:	b480      	push	{r7}
 8006002:	af00      	add	r7, sp, #0
//	EXTI_InitStruct.Trigger= LL_EXTI_TRIGGER_FALLING;
//	LL_EXTI_Init(&EXTI_InitStruct);
//
//	NVIC_SetPriority(NFC_BUSY_EXTI_IRQn, SYS_CFG_EXTI_PRIORITY);
//	NVIC_EnableIRQ(NFC_BUSY_EXTI_IRQn);
}
 8006004:	bf00      	nop
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <NFCTAG_PowerPinInit>:

void NFCTAG_PowerPinInit(void)
{
 800600e:	b480      	push	{r7}
 8006010:	af00      	add	r7, sp, #0
//	IOCTRL_NFCPower_Init(false);/*reset by default*/
}
 8006012:	bf00      	nop
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <NFCTAG_PowerPinSet>:

void NFCTAG_PowerPinSet(uint8_t _state)
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]
//	{
//		IOCTRL_NFCPower_Enable(true);
//		UTILI_usDelay(600);/*booting time*/
//		//HAL_Delay(10);/*booting time*/
//	}
}
 8006026:	bf00      	nop
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <NFCTAG_PowerPinGet>:

uint8_t NFCTAG_PowerPinGet(void)
{
 8006032:	b480      	push	{r7}
 8006034:	af00      	add	r7, sp, #0
//	}
//	else
//	{
//		return 0;
//	}
}
 8006036:	bf00      	nop
 8006038:	4618      	mov	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
	...

08006044 <NFCTAG_GetGPOStatus>:

ErrorStatus NFCTAG_GetGPOStatus(NFC_GPOStatus_t* _gpoStatus)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
	uint8_t _itStatus= 0;
 800604c:	2300      	movs	r3, #0
 800604e:	73fb      	strb	r3, [r7, #15]
	if(NFCTAG_OK!= St25Dv_i2c_ExtDrv.ReadITSTStatus_Dyn(&_itStatus ))
 8006050:	4b25      	ldr	r3, [pc, #148]	@ (80060e8 <NFCTAG_GetGPOStatus+0xa4>)
 8006052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006054:	f107 020f 	add.w	r2, r7, #15
 8006058:	4610      	mov	r0, r2
 800605a:	4798      	blx	r3
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <NFCTAG_GetGPOStatus+0x22>
	{
		return ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e03b      	b.n	80060de <NFCTAG_GetGPOStatus+0x9a>
	}

	_gpoStatus->rf_user= (_itStatus& ST25DV_ITSTS_RFUSERSTATE_MASK)>> ST25DV_ITSTS_RFUSERSTATE_SHIFT;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	b2da      	uxtb	r2, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	701a      	strb	r2, [r3, #0]
	_gpoStatus->rf_activity= (_itStatus& ST25DV_ITSTS_RFACTIVITY_MASK)>> ST25DV_ITSTS_RFACTIVITY_SHIFT;
 8006072:	7bfb      	ldrb	r3, [r7, #15]
 8006074:	105b      	asrs	r3, r3, #1
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	b2da      	uxtb	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	705a      	strb	r2, [r3, #1]
	_gpoStatus->rf_interrupt= (_itStatus& ST25DV_ITSTS_RFINTERRUPT_MASK)>> ST25DV_ITSTS_RFINTERRUPT_SHIFT;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
 8006084:	109b      	asrs	r3, r3, #2
 8006086:	b2db      	uxtb	r3, r3
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	b2da      	uxtb	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	709a      	strb	r2, [r3, #2]
	_gpoStatus->field_falling= (_itStatus& ST25DV_ITSTS_FIELDFALLING_MASK)>> ST25DV_ITSTS_FIELDFALLING_SHIFT;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
 8006094:	10db      	asrs	r3, r3, #3
 8006096:	b2db      	uxtb	r3, r3
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	b2da      	uxtb	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	70da      	strb	r2, [r3, #3]
	_gpoStatus->field_rising= (_itStatus& ST25DV_ITSTS_FIELDRISING_MASK)>> ST25DV_ITSTS_FIELDRISING_SHIFT;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	111b      	asrs	r3, r3, #4
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	711a      	strb	r2, [r3, #4]
	_gpoStatus->rf_putMsg= (_itStatus& ST25DV_ITSTS_RFPUTMSG_MASK)>> ST25DV_ITSTS_RFPUTMSG_SHIFT;
 80060b2:	7bfb      	ldrb	r3, [r7, #15]
 80060b4:	115b      	asrs	r3, r3, #5
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	715a      	strb	r2, [r3, #5]
	_gpoStatus->rf_getMsg= (_itStatus& ST25DV_ITSTS_RFGETMSG_MASK)>> ST25DV_ITSTS_RFGETMSG_SHIFT;
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
 80060c4:	119b      	asrs	r3, r3, #6
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	719a      	strb	r2, [r3, #6]
	_gpoStatus->rf_write= (_itStatus& ST25DV_ITSTS_RFWRITE_MASK)>> ST25DV_ITSTS_RFWRITE_SHIFT;
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	09db      	lsrs	r3, r3, #7
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	71da      	strb	r2, [r3, #7]

	return SUCCESS;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000034 	.word	0x20000034

080060ec <NFCTAG_Mailbox_Write>:
{
  return St25Dv_i2c_ExtDrv.ResetMBEN_Dyn( );
}

NFCTAG_Status_t NFCTAG_Mailbox_Write(const uint8_t * const _pData, const uint16_t _NbBytes )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	807b      	strh	r3, [r7, #2]
  NFCTAG_Status_t _status = NFCTAG_OK;
 80060f8:	2300      	movs	r3, #0
 80060fa:	73fb      	strb	r3, [r7, #15]
  ST25DV_MB_CTRL_DYN_STATUS _data = {0};
 80060fc:	f107 0308 	add.w	r3, r7, #8
 8006100:	2200      	movs	r2, #0
 8006102:	601a      	str	r2, [r3, #0]
 8006104:	809a      	strh	r2, [r3, #4]

  /* Check if Mailbox is available */
  _status= St25Dv_i2c_ExtDrv.ReadMBctrl_Dyn(&_data );
 8006106:	4b14      	ldr	r3, [pc, #80]	@ (8006158 <NFCTAG_Mailbox_Write+0x6c>)
 8006108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800610a:	f107 0208 	add.w	r2, r7, #8
 800610e:	4610      	mov	r0, r2
 8006110:	4798      	blx	r3
 8006112:	4603      	mov	r3, r0
 8006114:	73fb      	strb	r3, [r7, #15]
  if(NFCTAG_OK!= _status)
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d004      	beq.n	8006126 <NFCTAG_Mailbox_Write+0x3a>
  {
	LL_mDelay(20);
 800611c:	2014      	movs	r0, #20
 800611e:	f7ff fac7 	bl	80056b0 <LL_mDelay>
    return _status;
 8006122:	7bfb      	ldrb	r3, [r7, #15]
 8006124:	e014      	b.n	8006150 <NFCTAG_Mailbox_Write+0x64>
  }

  /* If available, write data */
  if((0== _data.HostPutMsg)&& (0== _data.RfPutMsg))
 8006126:	7a7b      	ldrb	r3, [r7, #9]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10d      	bne.n	8006148 <NFCTAG_Mailbox_Write+0x5c>
 800612c:	7abb      	ldrb	r3, [r7, #10]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10a      	bne.n	8006148 <NFCTAG_Mailbox_Write+0x5c>
  {
	  _status= St25Dv_i2c_ExtDrv.WriteMailboxData( _pData, _NbBytes );
 8006132:	4b09      	ldr	r3, [pc, #36]	@ (8006158 <NFCTAG_Mailbox_Write+0x6c>)
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	887a      	ldrh	r2, [r7, #2]
 8006138:	4611      	mov	r1, r2
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
 800613e:	4603      	mov	r3, r0
 8006140:	73fb      	strb	r3, [r7, #15]
 8006142:	bf00      	nop
  {
	LL_mDelay(20);
    return NFCTAG_BUSY;
  }

  return _status;
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	e003      	b.n	8006150 <NFCTAG_Mailbox_Write+0x64>
	LL_mDelay(20);
 8006148:	2014      	movs	r0, #20
 800614a:	f7ff fab1 	bl	80056b0 <LL_mDelay>
    return NFCTAG_BUSY;
 800614e:	2302      	movs	r3, #2
}
 8006150:	4618      	mov	r0, r3
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}
 8006158:	20000034 	.word	0x20000034

0800615c <NFCTAG_Mailbox_Read>:

NFCTAG_Status_t NFCTAG_Mailbox_Read( uint8_t * const _pData, uint16_t * const _pLength )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  NFCTAG_Status_t _status = NFCTAG_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
  uint16_t _mbLength = 0;
 800616a:	2300      	movs	r3, #0
 800616c:	81bb      	strh	r3, [r7, #12]

  /* Read length of message */
  _status = St25Dv_i2c_ExtDrv.ReadMBLength_Dyn((uint8_t *)&_mbLength);
 800616e:	4b0f      	ldr	r3, [pc, #60]	@ (80061ac <NFCTAG_Mailbox_Read+0x50>)
 8006170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006172:	f107 020c 	add.w	r2, r7, #12
 8006176:	4610      	mov	r0, r2
 8006178:	4798      	blx	r3
 800617a:	4603      	mov	r3, r0
 800617c:	73fb      	strb	r3, [r7, #15]
  if(NFCTAG_OK!= _status)
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d001      	beq.n	8006188 <NFCTAG_Mailbox_Read+0x2c>
  {
    return _status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	e00c      	b.n	80061a2 <NFCTAG_Mailbox_Read+0x46>
  }
  *_pLength= _mbLength + 1;
 8006188:	89bb      	ldrh	r3, [r7, #12]
 800618a:	3301      	adds	r3, #1
 800618c:	b29a      	uxth	r2, r3
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	801a      	strh	r2, [r3, #0]

  /* Read all data in Mailbox */
  return St25Dv_i2c_ExtDrv.ReadMailboxData(_pData, 0, *_pLength);
 8006192:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <NFCTAG_Mailbox_Read+0x50>)
 8006194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	8812      	ldrh	r2, [r2, #0]
 800619a:	2100      	movs	r1, #0
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	4798      	blx	r3
 80061a0:	4603      	mov	r3, r0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	20000034 	.word	0x20000034

080061b0 <NFCTAG_PowerPinSetTimeout>:

void NFCTAG_PowerPinSetTimeout(uint16_t _seconds)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	80fb      	strh	r3, [r7, #6]
	SYS_Sleep(NFC_TaskId, _seconds* 1000);
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80061c0:	fb02 f303 	mul.w	r3, r2, r3
 80061c4:	4619      	mov	r1, r3
 80061c6:	200d      	movs	r0, #13
 80061c8:	f001 ff2c 	bl	8008024 <SYS_Sleep>
}
 80061cc:	bf00      	nop
 80061ce:	3708      	adds	r7, #8
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <NFCTAG_PowerPinIsTimeout>:

bool NFCTAG_PowerPinIsTimeout(void)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	af00      	add	r7, sp, #0
	return SYS_IsAwake(NFC_TaskId);
 80061d8:	200d      	movs	r0, #13
 80061da:	f001 ff15 	bl	8008008 <SYS_IsAwake>
 80061de:	4603      	mov	r3, r0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <NFCTAG_Task>:
{
	bNFCInvalidAccessFlag= false;
}

void NFCTAG_Task(void)
{
 80061e4:	b5b0      	push	{r4, r5, r7, lr}
 80061e6:	b090      	sub	sp, #64	@ 0x40
 80061e8:	af00      	add	r7, sp, #0
	static uint64_t _timestamp;
	static uint8_t _failedCounter= 0;

	if((0!= MSG_Msg_Depth())&& (NFC_TaskId== MSG_Msg_TaskId_Peek()))
 80061ea:	f000 ff1d 	bl	8007028 <MSG_Msg_Depth>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 80b1 	beq.w	8006358 <NFCTAG_Task+0x174>
 80061f6:	f000 ffc9 	bl	800718c <MSG_Msg_TaskId_Peek>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b0d      	cmp	r3, #13
 80061fe:	f040 80ab 	bne.w	8006358 <NFCTAG_Task+0x174>
	{
		NFCTAG_PowerPinSetTimeout(5);
 8006202:	2005      	movs	r0, #5
 8006204:	f7ff ffd4 	bl	80061b0 <NFCTAG_PowerPinSetTimeout>
		NFCTAG_PowerPinSet(1);
 8006208:	2001      	movs	r0, #1
 800620a:	f7ff ff07 	bl	800601c <NFCTAG_PowerPinSet>
			* paddedRandom field is padded with random number to make multiplication of 16bytes packet.
			* msgLen field describes the length of real msg only(without padding/random/checksum)
			* checksum field correspond to checksum from msgLen to msg fields only
			* so max useful msg bytes is 249 bytes
			* */
			MSG_t _msg= MSG_Msg_Dequeue();
 800620e:	f107 0310 	add.w	r3, r7, #16
 8006212:	4618      	mov	r0, r3
 8006214:	f000 ff72 	bl	80070fc <MSG_Msg_Dequeue>
			if(MSG_CFG_MAX_BUFFER_SIZE>= _msg.bufferLen)
 8006218:	8abb      	ldrh	r3, [r7, #20]
 800621a:	2bf9      	cmp	r3, #249	@ 0xf9
 800621c:	f200 8095 	bhi.w	800634a <NFCTAG_Task+0x166>
			{
				uint8_t _txLen= 0;
 8006220:	2300      	movs	r3, #0
 8006222:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				pucNfctagTxBuf[_txLen++]= _msg.bufferLen;
 8006226:	8ab9      	ldrh	r1, [r7, #20]
 8006228:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8006232:	461a      	mov	r2, r3
 8006234:	b2c9      	uxtb	r1, r1
 8006236:	4ba4      	ldr	r3, [pc, #656]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 8006238:	5499      	strb	r1, [r3, r2]
				memcpy((uint8_t*)&(pucNfctagTxBuf[1]), _msg.buffer, _msg.bufferLen);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	8aba      	ldrh	r2, [r7, #20]
 800623e:	4619      	mov	r1, r3
 8006240:	48a2      	ldr	r0, [pc, #648]	@ (80064cc <NFCTAG_Task+0x2e8>)
 8006242:	f002 ff92 	bl	800916a <memcpy>
				_txLen+= _msg.bufferLen;
 8006246:	8abb      	ldrh	r3, [r7, #20]
 8006248:	b2da      	uxtb	r2, r3
 800624a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800624e:	4413      	add	r3, r2
 8006250:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				uint16_t _checksum= UTILI_GetChecksum(0x0000, (uint8_t*)pucNfctagTxBuf, _txLen);
 8006254:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006258:	461a      	mov	r2, r3
 800625a:	499b      	ldr	r1, [pc, #620]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 800625c:	2000      	movs	r0, #0
 800625e:	f000 fe1d 	bl	8006e9c <UTILI_GetChecksum>
 8006262:	4603      	mov	r3, r0
 8006264:	87bb      	strh	r3, [r7, #60]	@ 0x3c
				pucNfctagTxBuf[_txLen++]= _checksum>> 8;
 8006266:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006268:	0a1b      	lsrs	r3, r3, #8
 800626a:	b299      	uxth	r1, r3
 800626c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8006276:	461a      	mov	r2, r3
 8006278:	b2c9      	uxtb	r1, r1
 800627a:	4b93      	ldr	r3, [pc, #588]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 800627c:	5499      	strb	r1, [r3, r2]
				pucNfctagTxBuf[_txLen++]= _checksum>> 0;
 800627e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8006288:	461a      	mov	r2, r3
 800628a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800628c:	b2d9      	uxtb	r1, r3
 800628e:	4b8e      	ldr	r3, [pc, #568]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 8006290:	5499      	strb	r1, [r3, r2]
				pucNfctagTxBuf[_txLen++]= (uint8_t)rand();
 8006292:	f002 f915 	bl	80084c0 <rand>
 8006296:	4601      	mov	r1, r0
 8006298:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80062a2:	461a      	mov	r2, r3
 80062a4:	b2c9      	uxtb	r1, r1
 80062a6:	4b88      	ldr	r3, [pc, #544]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 80062a8:	5499      	strb	r1, [r3, r2]
				pucNfctagTxBuf[_txLen++]= (uint8_t)rand();
 80062aa:	f002 f909 	bl	80084c0 <rand>
 80062ae:	4601      	mov	r1, r0
 80062b0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80062ba:	461a      	mov	r2, r3
 80062bc:	b2c9      	uxtb	r1, r1
 80062be:	4b82      	ldr	r3, [pc, #520]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 80062c0:	5499      	strb	r1, [r3, r2]
				pucNfctagTxBuf[_txLen++]= (uint8_t)rand();
 80062c2:	f002 f8fd 	bl	80084c0 <rand>
 80062c6:	4601      	mov	r1, r0
 80062c8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80062cc:	1c5a      	adds	r2, r3, #1
 80062ce:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80062d2:	461a      	mov	r2, r3
 80062d4:	b2c9      	uxtb	r1, r1
 80062d6:	4b7c      	ldr	r3, [pc, #496]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 80062d8:	5499      	strb	r1, [r3, r2]
				pucNfctagTxBuf[_txLen++]= (uint8_t)rand();
 80062da:	f002 f8f1 	bl	80084c0 <rand>
 80062de:	4601      	mov	r1, r0
 80062e0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 80062ea:	461a      	mov	r2, r3
 80062ec:	b2c9      	uxtb	r1, r1
 80062ee:	4b76      	ldr	r3, [pc, #472]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 80062f0:	5499      	strb	r1, [r3, r2]
				while(0!= (_txLen% 16))
 80062f2:	e00b      	b.n	800630c <NFCTAG_Task+0x128>
				{
					pucNfctagTxBuf[_txLen++]= (uint8_t)rand();
 80062f4:	f002 f8e4 	bl	80084c0 <rand>
 80062f8:	4601      	mov	r1, r0
 80062fa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	f887 203f 	strb.w	r2, [r7, #63]	@ 0x3f
 8006304:	461a      	mov	r2, r3
 8006306:	b2c9      	uxtb	r1, r1
 8006308:	4b6f      	ldr	r3, [pc, #444]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 800630a:	5499      	strb	r1, [r3, r2]
				while(0!= (_txLen% 16))
 800630c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1ec      	bne.n	80062f4 <NFCTAG_Task+0x110>
				}

				SECURE_ECB_Encrypt((uint8_t*)pucNfctagTxBuf, _txLen);
 800631a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800631e:	b29b      	uxth	r3, r3
 8006320:	4619      	mov	r1, r3
 8006322:	4869      	ldr	r0, [pc, #420]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 8006324:	f001 fe16 	bl	8007f54 <SECURE_ECB_Encrypt>
				NFCTAG_Mailbox_Write((uint8_t*)pucNfctagTxBuf, _txLen);
 8006328:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800632c:	b29b      	uxth	r3, r3
 800632e:	4619      	mov	r1, r3
 8006330:	4865      	ldr	r0, [pc, #404]	@ (80064c8 <NFCTAG_Task+0x2e4>)
 8006332:	f7ff fedb 	bl	80060ec <NFCTAG_Mailbox_Write>
				bNFCAccessFlag= true;
 8006336:	4b66      	ldr	r3, [pc, #408]	@ (80064d0 <NFCTAG_Task+0x2ec>)
 8006338:	2201      	movs	r2, #1
 800633a:	701a      	strb	r2, [r3, #0]


				//DBG_Print("NFCTag TX (%d ms)\r\n", SYS_GetTick_ms()- _timestamp);
				_timestamp= SYS_GetTimestamp_ms();
 800633c:	f001 fe54 	bl	8007fe8 <SYS_GetTimestamp_ms>
 8006340:	4602      	mov	r2, r0
 8006342:	460b      	mov	r3, r1
 8006344:	4963      	ldr	r1, [pc, #396]	@ (80064d4 <NFCTAG_Task+0x2f0>)
 8006346:	e9c1 2300 	strd	r2, r3, [r1]
//
//			SECURE_ECB_Encrypt((uint8_t *)_msg.buffer, _bufferLen);
//			NFCTAG_Mailbox_Write(_msg.buffer, _bufferLen);
		}

		bNFCInvalidAccessFlag= (true== bNFCAccessFlag)? false: true;
 800634a:	4b61      	ldr	r3, [pc, #388]	@ (80064d0 <NFCTAG_Task+0x2ec>)
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f083 0301 	eor.w	r3, r3, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	4b60      	ldr	r3, [pc, #384]	@ (80064d8 <NFCTAG_Task+0x2f4>)
 8006356:	701a      	strb	r2, [r3, #0]
	}

	/*Power pin timeout need to be placed after NFC tx because
	 * message task might update the RTC and this prematurely timeout.*/
	if(true== NFCTAG_PowerPinIsTimeout())
 8006358:	f7ff ff3c 	bl	80061d4 <NFCTAG_PowerPinIsTimeout>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d015      	beq.n	800638e <NFCTAG_Task+0x1aa>
	{
		if(1== NFCTAG_PowerPinGet())
 8006362:	f7ff fe66 	bl	8006032 <NFCTAG_PowerPinGet>
 8006366:	4603      	mov	r3, r0
 8006368:	2b01      	cmp	r3, #1
 800636a:	d110      	bne.n	800638e <NFCTAG_Task+0x1aa>
		{
			NFCTAG_PowerPinSet(0);
 800636c:	2000      	movs	r0, #0
 800636e:	f7ff fe55 	bl	800601c <NFCTAG_PowerPinSet>
			uint64_t _timestamp2= SYS_GetTimestamp_ms();
 8006372:	f001 fe39 	bl	8007fe8 <SYS_GetTimestamp_ms>
 8006376:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
			uint64_t _timestamp3= _timestamp2-_timestamp;
 800637a:	4b56      	ldr	r3, [pc, #344]	@ (80064d4 <NFCTAG_Task+0x2f0>)
 800637c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006380:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8006384:	1a84      	subs	r4, r0, r2
 8006386:	eb61 0503 	sbc.w	r5, r1, r3
 800638a:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
			//DBG_Print("NFCTag power off after %d ms \r\n", (uint32_t)_timestamp3);
		}
	}

	if(RESET== NFCTAG_Interrupt_GPO)
 800638e:	4b53      	ldr	r3, [pc, #332]	@ (80064dc <NFCTAG_Task+0x2f8>)
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 8090 	beq.w	80064ba <NFCTAG_Task+0x2d6>
	{
		return;
	}
	//DBG_Print("NFCTag NFCTAG_Interrupt_GPO \r\n");

	NFCTAG_Interrupt_GPO= RESET;
 800639a:	4b50      	ldr	r3, [pc, #320]	@ (80064dc <NFCTAG_Task+0x2f8>)
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]
	NFCTAG_PowerPinSetTimeout(5);
 80063a0:	2005      	movs	r0, #5
 80063a2:	f7ff ff05 	bl	80061b0 <NFCTAG_PowerPinSetTimeout>
	NFCTAG_PowerPinSet(1);
 80063a6:	2001      	movs	r0, #1
 80063a8:	f7ff fe38 	bl	800601c <NFCTAG_PowerPinSet>

	NFC_GPOStatus_t _gpoStatus= {0};
 80063ac:	f107 031c 	add.w	r3, r7, #28
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	605a      	str	r2, [r3, #4]

	if(SUCCESS!= NFCTAG_GetGPOStatus(&_gpoStatus))
 80063b6:	f107 031c 	add.w	r3, r7, #28
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7ff fe42 	bl	8006044 <NFCTAG_GetGPOStatus>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01b      	beq.n	80063fe <NFCTAG_Task+0x21a>
	{
		_failedCounter++;
 80063c6:	4b46      	ldr	r3, [pc, #280]	@ (80064e0 <NFCTAG_Task+0x2fc>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	3301      	adds	r3, #1
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	4b44      	ldr	r3, [pc, #272]	@ (80064e0 <NFCTAG_Task+0x2fc>)
 80063d0:	701a      	strb	r2, [r3, #0]
		if(2== _failedCounter)
 80063d2:	4b43      	ldr	r3, [pc, #268]	@ (80064e0 <NFCTAG_Task+0x2fc>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d171      	bne.n	80064be <NFCTAG_Task+0x2da>
//			St25Dv_i2c_Drv.Init();//NFCTAG_Init();
//			if(SUCCESS!= NFCTAG_GetGPOStatus(&_gpoStatus))
			{
					/*TODO: flag nfc error*/
					/*nfc i2c comm might be error, we do reinit and try again*/
					NFCTAG_PowerPinSet(0);
 80063da:	2000      	movs	r0, #0
 80063dc:	f7ff fe1e 	bl	800601c <NFCTAG_PowerPinSet>
					UTILI_usDelay(600);/*shutdown time, remove if not required*/
 80063e0:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80063e4:	f000 fd38 	bl	8006e58 <UTILI_usDelay>
					NFCTAG_Init();
 80063e8:	f7ff fd56 	bl	8005e98 <NFCTAG_Init>
					_failedCounter= 0;
 80063ec:	4b3c      	ldr	r3, [pc, #240]	@ (80064e0 <NFCTAG_Task+0x2fc>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	701a      	strb	r2, [r3, #0]
					if(SUCCESS!= NFCTAG_GetGPOStatus(&_gpoStatus))
 80063f2:	f107 031c 	add.w	r3, r7, #28
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff fe24 	bl	8006044 <NFCTAG_GetGPOStatus>
					{
						/*TODO: flag nfc error*/
					}
					return;
 80063fc:	e060      	b.n	80064c0 <NFCTAG_Task+0x2dc>
//			}
		}
	}
	else
	{
		_failedCounter= 0;
 80063fe:	4b38      	ldr	r3, [pc, #224]	@ (80064e0 <NFCTAG_Task+0x2fc>)
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
	}

	if(1== _gpoStatus.rf_interrupt)
 8006404:	7fbb      	ldrb	r3, [r7, #30]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d102      	bne.n	8006410 <NFCTAG_Task+0x22c>
	{
		//DBG_Print("NFCTag rf_interrupt \r\n");
		NFCTAG_PowerPinSetTimeout(5);
 800640a:	2005      	movs	r0, #5
 800640c:	f7ff fed0 	bl	80061b0 <NFCTAG_PowerPinSetTimeout>
	}

	if(1== _gpoStatus.rf_putMsg) //msg arrived in mailbox || msg placed in mailbox has been read
 8006410:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006414:	2b01      	cmp	r3, #1
 8006416:	d153      	bne.n	80064c0 <NFCTAG_Task+0x2dc>
		* msgLen field describes the length of real msg only(without padding/random/checksum)
		* checksum field correspond to checksum from msgLen to msg fields only
		* so max useful msg bytes is 249 bytes
		* */
		uint16_t _mailLen;
		NFCTAG_Mailbox_Read((uint8_t *)pucNfctagRxBuf, &_mailLen);
 8006418:	f107 030e 	add.w	r3, r7, #14
 800641c:	4619      	mov	r1, r3
 800641e:	4831      	ldr	r0, [pc, #196]	@ (80064e4 <NFCTAG_Task+0x300>)
 8006420:	f7ff fe9c 	bl	800615c <NFCTAG_Mailbox_Read>
		SECURE_ECB_Decrypt((uint8_t *)pucNfctagRxBuf, _mailLen);
 8006424:	89fb      	ldrh	r3, [r7, #14]
 8006426:	4619      	mov	r1, r3
 8006428:	482e      	ldr	r0, [pc, #184]	@ (80064e4 <NFCTAG_Task+0x300>)
 800642a:	f001 fdb9 	bl	8007fa0 <SECURE_ECB_Decrypt>
		uint8_t _msgLen= pucNfctagRxBuf[0];
 800642e:	4b2d      	ldr	r3, [pc, #180]	@ (80064e4 <NFCTAG_Task+0x300>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		if(MSG_CFG_MAX_BUFFER_SIZE>= _msgLen)
 8006436:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800643a:	2bf9      	cmp	r3, #249	@ 0xf9
 800643c:	d840      	bhi.n	80064c0 <NFCTAG_Task+0x2dc>
		{
			uint16_t _checksum= MAKEWORD(pucNfctagRxBuf[1+ _msgLen], pucNfctagRxBuf[1+ _msgLen+ 1]);
 800643e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006442:	3301      	adds	r3, #1
 8006444:	4a27      	ldr	r2, [pc, #156]	@ (80064e4 <NFCTAG_Task+0x300>)
 8006446:	5cd3      	ldrb	r3, [r2, r3]
 8006448:	b2db      	uxtb	r3, r3
 800644a:	b21b      	sxth	r3, r3
 800644c:	021b      	lsls	r3, r3, #8
 800644e:	b21a      	sxth	r2, r3
 8006450:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006454:	3302      	adds	r3, #2
 8006456:	4923      	ldr	r1, [pc, #140]	@ (80064e4 <NFCTAG_Task+0x300>)
 8006458:	5ccb      	ldrb	r3, [r1, r3]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	b21b      	sxth	r3, r3
 800645e:	4313      	orrs	r3, r2
 8006460:	b21b      	sxth	r3, r3
 8006462:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if(0x00== (_checksum^ UTILI_GetChecksum(0x0000,  (uint8_t *)pucNfctagRxBuf, 1+ _msgLen)))
 8006464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006468:	3301      	adds	r3, #1
 800646a:	461a      	mov	r2, r3
 800646c:	491d      	ldr	r1, [pc, #116]	@ (80064e4 <NFCTAG_Task+0x300>)
 800646e:	2000      	movs	r0, #0
 8006470:	f000 fd14 	bl	8006e9c <UTILI_GetChecksum>
 8006474:	4603      	mov	r3, r0
 8006476:	461a      	mov	r2, r3
 8006478:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800647a:	4293      	cmp	r3, r2
 800647c:	d120      	bne.n	80064c0 <NFCTAG_Task+0x2dc>
			{
				MSG_t _msg= {0};
 800647e:	463b      	mov	r3, r7
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	605a      	str	r2, [r3, #4]
 8006486:	609a      	str	r2, [r3, #8]
				_msg.taskId= MSG_TaskId;
 8006488:	230f      	movs	r3, #15
 800648a:	71bb      	strb	r3, [r7, #6]
				_msg.buffer= (uint8_t *)&pucNfctagRxBuf[1];
 800648c:	4b16      	ldr	r3, [pc, #88]	@ (80064e8 <NFCTAG_Task+0x304>)
 800648e:	603b      	str	r3, [r7, #0]
				_msg.bufferLen= pucNfctagRxBuf[0];
 8006490:	4b14      	ldr	r3, [pc, #80]	@ (80064e4 <NFCTAG_Task+0x300>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	b2db      	uxtb	r3, r3
 8006496:	80bb      	strh	r3, [r7, #4]
				_msg.sendResponse= true;
 8006498:	2301      	movs	r3, #1
 800649a:	71fb      	strb	r3, [r7, #7]
				_msg.responseTaskId= NFC_TaskId;
 800649c:	230d      	movs	r3, #13
 800649e:	723b      	strb	r3, [r7, #8]
				MSG_Msg_Enqueue(_msg);
 80064a0:	463b      	mov	r3, r7
 80064a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80064a6:	f000 fdef 	bl	8007088 <MSG_Msg_Enqueue>

				//DBG_Print("NFCTag RX (%d ms)\r\n", SYS_GetTick_ms()- _timestamp);
				_timestamp= SYS_GetTimestamp_ms();
 80064aa:	f001 fd9d 	bl	8007fe8 <SYS_GetTimestamp_ms>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4908      	ldr	r1, [pc, #32]	@ (80064d4 <NFCTAG_Task+0x2f0>)
 80064b4:	e9c1 2300 	strd	r2, r3, [r1]
 80064b8:	e002      	b.n	80064c0 <NFCTAG_Task+0x2dc>
		return;
 80064ba:	bf00      	nop
 80064bc:	e000      	b.n	80064c0 <NFCTAG_Task+0x2dc>
				return;
 80064be:	bf00      	nop

	if(1== _gpoStatus.field_falling)
	{
		//DBG_Print("NFCTag field_falling \r\n");
	}
  }
 80064c0:	3740      	adds	r7, #64	@ 0x40
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bdb0      	pop	{r4, r5, r7, pc}
 80064c6:	bf00      	nop
 80064c8:	20002a38 	.word	0x20002a38
 80064cc:	20002a39 	.word	0x20002a39
 80064d0:	20002b38 	.word	0x20002b38
 80064d4:	20002b40 	.word	0x20002b40
 80064d8:	20002b39 	.word	0x20002b39
 80064dc:	20002934 	.word	0x20002934
 80064e0:	20002b48 	.word	0x20002b48
 80064e4:	20002938 	.word	0x20002938
 80064e8:	20002939 	.word	0x20002939

080064ec <NFCTAG_NDEF_Clear>:
	}
	return _status;
}

NFCTAG_Status_t NFCTAG_NDEF_Clear(void)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
	uint8_t _data[10];

	_data[0] = 0;
 80064f2:	2300      	movs	r3, #0
 80064f4:	713b      	strb	r3, [r7, #4]
	return St25Dv_i2c_Drv.WriteData(_data, 0x00, 6);
 80064f6:	4b05      	ldr	r3, [pc, #20]	@ (800650c <NFCTAG_NDEF_Clear+0x20>)
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	1d38      	adds	r0, r7, #4
 80064fc:	2206      	movs	r2, #6
 80064fe:	2100      	movs	r1, #0
 8006500:	4798      	blx	r3
 8006502:	4603      	mov	r3, r0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	2000000c 	.word	0x2000000c

08006510 <ST25DV_IO_ConvertHALStatus>:
#include <i2c.h>
#include "st25dv.h"
#include "st25dv_io.h"

NFCTAG_Status_t ST25DV_IO_ConvertHALStatus( const HAL_StatusTypeDef status )
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]
  switch( status )
 800651a:	79fb      	ldrb	r3, [r7, #7]
 800651c:	2b03      	cmp	r3, #3
 800651e:	d813      	bhi.n	8006548 <ST25DV_IO_ConvertHALStatus+0x38>
 8006520:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <ST25DV_IO_ConvertHALStatus+0x18>)
 8006522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006526:	bf00      	nop
 8006528:	08006539 	.word	0x08006539
 800652c:	0800653d 	.word	0x0800653d
 8006530:	08006541 	.word	0x08006541
 8006534:	08006545 	.word	0x08006545
  {
    case HAL_OK:
      return NFCTAG_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e006      	b.n	800654a <ST25DV_IO_ConvertHALStatus+0x3a>
    case HAL_ERROR:
      return NFCTAG_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e004      	b.n	800654a <ST25DV_IO_ConvertHALStatus+0x3a>
    case HAL_BUSY:
      return NFCTAG_BUSY;
 8006540:	2302      	movs	r3, #2
 8006542:	e002      	b.n	800654a <ST25DV_IO_ConvertHALStatus+0x3a>
    case HAL_TIMEOUT:
      return NFCTAG_TIMEOUT;
 8006544:	2303      	movs	r3, #3
 8006546:	e000      	b.n	800654a <ST25DV_IO_ConvertHALStatus+0x3a>

    default:
      return NFCTAG_TIMEOUT;
 8006548:	2303      	movs	r3, #3
  }
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop

08006558 <ST25DV_IO_Init>:

NFCTAG_Status_t ST25DV_IO_Init( void )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	af00      	add	r7, sp, #0
	static bool _isInitialized= false;

	if(true== _isInitialized)/*could be a re-init*/
 800655c:	4b08      	ldr	r3, [pc, #32]	@ (8006580 <ST25DV_IO_Init+0x28>)
 800655e:	781b      	ldrb	r3, [r3, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d004      	beq.n	800656e <ST25DV_IO_Init+0x16>
	{
		I2C1_DeInit();
 8006564:	f7fa ff1a 	bl	800139c <I2C1_DeInit>
		_isInitialized= false;
 8006568:	4b05      	ldr	r3, [pc, #20]	@ (8006580 <ST25DV_IO_Init+0x28>)
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
	}

	MX_I2C1_Init();
 800656e:	f7fa fddb 	bl	8001128 <MX_I2C1_Init>
//	if(HAL_OK!= MX_I2C1_Init())
//	{
//		return NFCTAG_ERROR;
//	}

	_isInitialized= true;
 8006572:	4b03      	ldr	r3, [pc, #12]	@ (8006580 <ST25DV_IO_Init+0x28>)
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
	return NFCTAG_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20002b49 	.word	0x20002b49

08006584 <ST25DV_IO_MemWrite>:

	return NFCTAG_OK;
}

NFCTAG_Status_t ST25DV_IO_MemWrite( const uint8_t * const pData, const uint8_t DevAddr, const uint16_t TarAddr, const uint16_t Size )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	@ 0x28
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	4608      	mov	r0, r1
 800658e:	4611      	mov	r1, r2
 8006590:	461a      	mov	r2, r3
 8006592:	4603      	mov	r3, r0
 8006594:	72fb      	strb	r3, [r7, #11]
 8006596:	460b      	mov	r3, r1
 8006598:	813b      	strh	r3, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	80fb      	strh	r3, [r7, #6]
  NFCTAG_Status_t _pollstatus;
  NFCTAG_Status_t _ret= NFCTAG_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	77fb      	strb	r3, [r7, #31]
  uint32_t _tickstart;

  if(HAL_OK== I2C1_MemWrite(DevAddr, TarAddr, I2C_MEMADD_SIZE_16BIT, (uint8_t *)pData, Size, ST25DV_I2C_TIMEOUT ))
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	b298      	uxth	r0, r3
 80065a6:	8939      	ldrh	r1, [r7, #8]
 80065a8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	88fb      	ldrh	r3, [r7, #6]
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f7fa ff01 	bl	80013bc <I2C1_MemWrite>
 80065ba:	4603      	mov	r3, r0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d11a      	bne.n	80065f6 <ST25DV_IO_MemWrite+0x72>
  {
    /* Poll until EEPROM is available */
    _tickstart= HAL_GetTick();
 80065c0:	f001 fd52 	bl	8008068 <HAL_GetTick>
 80065c4:	61b8      	str	r0, [r7, #24]
    /* Wait until ST25DV is ready or timeout occurs */
    do
    {
      _pollstatus= ST25DV_IO_IsDeviceReady(DevAddr, 1 );
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	2101      	movs	r1, #1
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 f841 	bl	8006652 <ST25DV_IO_IsDeviceReady>
 80065d0:	4603      	mov	r3, r0
 80065d2:	75fb      	strb	r3, [r7, #23]
    } while(((HAL_GetTick()- _tickstart)< ST25DV_I2C_TIMEOUT) && (_pollstatus!= NFCTAG_OK) );
 80065d4:	f001 fd48 	bl	8008068 <HAL_GetTick>
 80065d8:	4602      	mov	r2, r0
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	1ad3      	subs	r3, r2, r3
 80065de:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80065e2:	d202      	bcs.n	80065ea <ST25DV_IO_MemWrite+0x66>
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1ed      	bne.n	80065c6 <ST25DV_IO_MemWrite+0x42>

    if(NFCTAG_OK!= _pollstatus )
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <ST25DV_IO_MemWrite+0x80>
    {
      _ret= NFCTAG_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	77fb      	strb	r3, [r7, #31]
 80065f4:	e006      	b.n	8006604 <ST25DV_IO_MemWrite+0x80>
    }
  }
  else
  {
    /* Check if Write was NACK */
    if(true== I2C1_IsNacked())
 80065f6:	f7fa ff1d 	bl	8001434 <I2C1_IsNacked>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d001      	beq.n	8006604 <ST25DV_IO_MemWrite+0x80>
    {
      _ret= NFCTAG_NACK;
 8006600:	2304      	movs	r3, #4
 8006602:	77fb      	strb	r3, [r7, #31]
    }
  }

  return _ret;
 8006604:	7ffb      	ldrb	r3, [r7, #31]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <ST25DV_IO_MemRead>:

NFCTAG_Status_t ST25DV_IO_MemRead(uint8_t * const pData, const uint8_t DevAddr, const uint16_t TarAddr, const uint16_t Size )
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b086      	sub	sp, #24
 8006612:	af02      	add	r7, sp, #8
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	4608      	mov	r0, r1
 8006618:	4611      	mov	r1, r2
 800661a:	461a      	mov	r2, r3
 800661c:	4603      	mov	r3, r0
 800661e:	72fb      	strb	r3, [r7, #11]
 8006620:	460b      	mov	r3, r1
 8006622:	813b      	strh	r3, [r7, #8]
 8006624:	4613      	mov	r3, r2
 8006626:	80fb      	strh	r3, [r7, #6]
	return ST25DV_IO_ConvertHALStatus(I2C1_MemRead(DevAddr, TarAddr, I2C_MEMADD_SIZE_16BIT, pData, Size, ST25DV_I2C_TIMEOUT ));
 8006628:	7afb      	ldrb	r3, [r7, #11]
 800662a:	b298      	uxth	r0, r3
 800662c:	8939      	ldrh	r1, [r7, #8]
 800662e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8006632:	9301      	str	r3, [sp, #4]
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2202      	movs	r2, #2
 800663c:	f7fa fedc 	bl	80013f8 <I2C1_MemRead>
 8006640:	4603      	mov	r3, r0
 8006642:	4618      	mov	r0, r3
 8006644:	f7ff ff64 	bl	8006510 <ST25DV_IO_ConvertHALStatus>
 8006648:	4603      	mov	r3, r0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <ST25DV_IO_IsDeviceReady>:
{
  return ST25DV_IO_ConvertHALStatus(I2C1_Read(DevAddr, pData, Size, ST25DV_I2C_TIMEOUT));
}

NFCTAG_Status_t ST25DV_IO_IsDeviceReady( const uint8_t DevAddr, const uint32_t Trials )
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b082      	sub	sp, #8
 8006656:	af00      	add	r7, sp, #0
 8006658:	4603      	mov	r3, r0
 800665a:	6039      	str	r1, [r7, #0]
 800665c:	71fb      	strb	r3, [r7, #7]
  return  ST25DV_IO_ConvertHALStatus(I2C1_IsDeviceReady(DevAddr, Trials, ST25DV_I2C_TIMEOUT ));
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8006664:	6839      	ldr	r1, [r7, #0]
 8006666:	4618      	mov	r0, r3
 8006668:	f7fa fef4 	bl	8001454 <I2C1_IsDeviceReady>
 800666c:	4603      	mov	r3, r0
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff ff4e 	bl	8006510 <ST25DV_IO_ConvertHALStatus>
 8006674:	4603      	mov	r3, r0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <ST25DV_i2c_Init>:
/**
  * @brief  ST25DV nfctag Initialization.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_Init( void )
{
 800667e:	b580      	push	{r7, lr}
 8006680:	af00      	add	r7, sp, #0
  /* Configure the low level interface */
  return ST25DV_IO_Init( );
 8006682:	f7ff ff69 	bl	8006558 <ST25DV_IO_Init>
 8006686:	4603      	mov	r3, r0
}
 8006688:	4618      	mov	r0, r3
 800668a:	bd80      	pop	{r7, pc}

0800668c <ST25DV_i2c_ReadID>:
  * @brief  Reads the ST25DV ID.
  * @param  pICRef Pointeron a uint8_t used to return the ST25DV ID.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadID( uint8_t * const pICRef )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
  /* Read ICRef on device */
  return ST25DV_i2c_ReadRegister( pICRef, ST25DV_ICREF_REG, 1 );
 8006694:	2201      	movs	r2, #1
 8006696:	2117      	movs	r1, #23
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f887 	bl	80067ac <ST25DV_i2c_ReadRegister>
 800669e:	4603      	mov	r3, r0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <ST25DV_i2c_IsDeviceReady>:
  *           This function determines if the ST25DV is ready to answer an I2C request. 
  * @param    Trials Max number of tentative.
  * @retval   NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_IsDeviceReady( const uint32_t Trials )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Test communication with device */
  return ST25DV_IO_IsDeviceReady( ST25DV_ADDR_DATA_I2C, Trials );
 80066b0:	6879      	ldr	r1, [r7, #4]
 80066b2:	20a6      	movs	r0, #166	@ 0xa6
 80066b4:	f7ff ffcd 	bl	8006652 <ST25DV_IO_IsDeviceReady>
 80066b8:	4603      	mov	r3, r0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <ST25DV_i2c_GetGPOStatus>:
  *                     - RFWRITE = 0x80
  *
  * @retval   NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_GetGPOStatus( uint16_t * const pGPOStatus )
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  uint8_t reg_value;
  NFCTAG_Status_t status;
  
  /* Read value of GPO register */
  status = ST25DV_i2c_ReadRegister( &reg_value, ST25DV_GPO_REG, 1 );
 80066ca:	f107 030e 	add.w	r3, r7, #14
 80066ce:	2201      	movs	r2, #1
 80066d0:	2100      	movs	r1, #0
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 f86a 	bl	80067ac <ST25DV_i2c_ReadRegister>
 80066d8:	4603      	mov	r3, r0
 80066da:	73fb      	strb	r3, [r7, #15]
  if( status != NFCTAG_OK )
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <ST25DV_i2c_GetGPOStatus+0x24>
    return status;
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	e004      	b.n	80066f0 <ST25DV_i2c_GetGPOStatus+0x2e>

  /* Extract GPO configuration */
  *pGPOStatus = (uint16_t)reg_value;
 80066e6:	7bbb      	ldrb	r3, [r7, #14]
 80066e8:	461a      	mov	r2, r3
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	801a      	strh	r2, [r3, #0]
  
  return NFCTAG_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <ST25DV_i2c_ConfigureGPO>:
  *           - RFWRITE = 0x80
  *
  * @retval   NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ConfigureGPO( const uint16_t ITConf )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	4603      	mov	r3, r0
 8006700:	80fb      	strh	r3, [r7, #6]
  /* Write GPO configuration to register */
  return ST25DV_i2c_WriteRegister( (uint8_t *)&ITConf, ST25DV_GPO_REG, 1 );
 8006702:	1dbb      	adds	r3, r7, #6
 8006704:	2201      	movs	r2, #1
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f000 f862 	bl	80067d2 <ST25DV_i2c_WriteRegister>
 800670e:	4603      	mov	r3, r0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <ST25DV_i2c_ReadData>:
  * @param  TarAddr I2C data memory address to read.
  * @param  NbByte  Number of bytes to be read.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadData( uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	460b      	mov	r3, r1
 8006722:	807b      	strh	r3, [r7, #2]
 8006724:	4613      	mov	r3, r2
 8006726:	803b      	strh	r3, [r7, #0]
  /* Read Data in user memory */
  return ST25DV_IO_MemRead( pData, ST25DV_ADDR_DATA_I2C, TarAddr, NbByte );
 8006728:	883b      	ldrh	r3, [r7, #0]
 800672a:	887a      	ldrh	r2, [r7, #2]
 800672c:	21a6      	movs	r1, #166	@ 0xa6
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7ff ff6d 	bl	800660e <ST25DV_IO_MemRead>
 8006734:	4603      	mov	r3, r0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <ST25DV_i2c_WriteData>:
  * @param  TarAddr I2C data memory address to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_WriteData( const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	460b      	mov	r3, r1
 8006748:	807b      	strh	r3, [r7, #2]
 800674a:	4613      	mov	r3, r2
 800674c:	803b      	strh	r3, [r7, #0]
  NFCTAG_Status_t ret;
  uint16_t split_data_nb;
  const uint8_t *pdata_index = (const uint8_t *)pData;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	613b      	str	r3, [r7, #16]
  uint16_t bytes_to_write = NbByte;
 8006752:	883b      	ldrh	r3, [r7, #0]
 8006754:	81fb      	strh	r3, [r7, #14]
  uint16_t mem_addr = TarAddr;
 8006756:	887b      	ldrh	r3, [r7, #2]
 8006758:	81bb      	strh	r3, [r7, #12]
  
  /* ST25DV can write a maximum of 256 bytes in EEPROM per i2c communication */
  do
  {
    /* Split write if data to write is superior of max write bytes for ST25DV */
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 800675a:	89fb      	ldrh	r3, [r7, #14]
 800675c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006760:	d903      	bls.n	800676a <ST25DV_i2c_WriteData+0x2c>
    {
      /* DataSize higher than max page write, copy data by page */
      split_data_nb = (uint16_t)ST25DV_MAX_WRITE_BYTE;
 8006762:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006766:	82fb      	strh	r3, [r7, #22]
 8006768:	e001      	b.n	800676e <ST25DV_i2c_WriteData+0x30>
    }
    else
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
 800676a:	89fb      	ldrh	r3, [r7, #14]
 800676c:	82fb      	strh	r3, [r7, #22]
    }
    /* Write split_data_nb bytes in memory */
    ret = ST25DV_IO_MemWrite( pdata_index, ST25DV_ADDR_DATA_I2C, mem_addr, split_data_nb);
 800676e:	8afb      	ldrh	r3, [r7, #22]
 8006770:	89ba      	ldrh	r2, [r7, #12]
 8006772:	21a6      	movs	r1, #166	@ 0xa6
 8006774:	6938      	ldr	r0, [r7, #16]
 8006776:	f7ff ff05 	bl	8006584 <ST25DV_IO_MemWrite>
 800677a:	4603      	mov	r3, r0
 800677c:	72fb      	strb	r3, [r7, #11]

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
 800677e:	8afb      	ldrh	r3, [r7, #22]
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4413      	add	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
    mem_addr += split_data_nb;
 8006786:	89ba      	ldrh	r2, [r7, #12]
 8006788:	8afb      	ldrh	r3, [r7, #22]
 800678a:	4413      	add	r3, r2
 800678c:	81bb      	strh	r3, [r7, #12]
    bytes_to_write -= split_data_nb;
 800678e:	89fa      	ldrh	r2, [r7, #14]
 8006790:	8afb      	ldrh	r3, [r7, #22]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	81fb      	strh	r3, [r7, #14]
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 8006796:	89fb      	ldrh	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <ST25DV_i2c_WriteData+0x64>
 800679c:	7afb      	ldrb	r3, [r7, #11]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0db      	beq.n	800675a <ST25DV_i2c_WriteData+0x1c>
  
  return ret;
 80067a2:	7afb      	ldrb	r3, [r7, #11]
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <ST25DV_i2c_ReadRegister>:
  * @param  TarAddr I2C memory address to be read.
  * @param  NbByte  Number of bytes to be read.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadRegister( uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{  
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	807b      	strh	r3, [r7, #2]
 80067b8:	4613      	mov	r3, r2
 80067ba:	803b      	strh	r3, [r7, #0]
  /* Read Data in system memory */
  return ST25DV_IO_MemRead( pData, ST25DV_ADDR_SYST_I2C, TarAddr, NbByte );
 80067bc:	883b      	ldrh	r3, [r7, #0]
 80067be:	887a      	ldrh	r2, [r7, #2]
 80067c0:	21ae      	movs	r1, #174	@ 0xae
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff ff23 	bl	800660e <ST25DV_IO_MemRead>
 80067c8:	4603      	mov	r3, r0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <ST25DV_i2c_WriteRegister>:
  * @param    TarAddr I2C register address to written.
  * @param    NbByte  Number of bytes to be written.
  * @return   NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_WriteRegister( const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b086      	sub	sp, #24
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	807b      	strh	r3, [r7, #2]
 80067de:	4613      	mov	r3, r2
 80067e0:	803b      	strh	r3, [r7, #0]
  NFCTAG_Status_t ret;
  uint8_t split_data_nb;
  uint16_t bytes_to_write = NbByte;
 80067e2:	883b      	ldrh	r3, [r7, #0]
 80067e4:	82bb      	strh	r3, [r7, #20]
  uint16_t mem_addr = TarAddr;
 80067e6:	887b      	ldrh	r3, [r7, #2]
 80067e8:	827b      	strh	r3, [r7, #18]
  const uint8_t *pdata_index = (const uint8_t *)pData;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]
  
  /* ST25DV can write a maximum of 256 bytes in EEPROM per i2c communication */
  do
  {
    /* Split write if data to write is superior of max write bytes for ST25DV */
    if( bytes_to_write > ST25DV_MAX_WRITE_BYTE )
 80067ee:	8abb      	ldrh	r3, [r7, #20]
 80067f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067f4:	d902      	bls.n	80067fc <ST25DV_i2c_WriteRegister+0x2a>
    {
      /* DataSize higher than max page write, copy data by page */
      split_data_nb = (uint8_t)ST25DV_MAX_WRITE_BYTE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	75fb      	strb	r3, [r7, #23]
 80067fa:	e001      	b.n	8006800 <ST25DV_i2c_WriteRegister+0x2e>
    }
    else
    {
      /* DataSize lower or equal to max page write, copy only last bytes */
      split_data_nb = bytes_to_write;
 80067fc:	8abb      	ldrh	r3, [r7, #20]
 80067fe:	75fb      	strb	r3, [r7, #23]
    }
    /* Write split_data_nb bytes in register */
    ret = ST25DV_IO_MemWrite( pdata_index, ST25DV_ADDR_SYST_I2C, mem_addr, split_data_nb);
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	b29b      	uxth	r3, r3
 8006804:	8a7a      	ldrh	r2, [r7, #18]
 8006806:	21ae      	movs	r1, #174	@ 0xae
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f7ff febb 	bl	8006584 <ST25DV_IO_MemWrite>
 800680e:	4603      	mov	r3, r0
 8006810:	72fb      	strb	r3, [r7, #11]

    /* update index, dest address, size for next write */
    pdata_index += split_data_nb;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	60fb      	str	r3, [r7, #12]
    mem_addr += split_data_nb;
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	b29a      	uxth	r2, r3
 800681e:	8a7b      	ldrh	r3, [r7, #18]
 8006820:	4413      	add	r3, r2
 8006822:	827b      	strh	r3, [r7, #18]
    bytes_to_write -= split_data_nb;
 8006824:	7dfb      	ldrb	r3, [r7, #23]
 8006826:	b29b      	uxth	r3, r3
 8006828:	8aba      	ldrh	r2, [r7, #20]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	82bb      	strh	r3, [r7, #20]
  }
  while( ( bytes_to_write > 0 ) && ( ret == NFCTAG_OK ) );
 800682e:	8abb      	ldrh	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d002      	beq.n	800683a <ST25DV_i2c_WriteRegister+0x68>
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0d9      	beq.n	80067ee <ST25DV_i2c_WriteRegister+0x1c>
  
  return ret;
 800683a:	7afb      	ldrb	r3, [r7, #11]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <ST25DV_i2c_PresentI2CPassword>:
  * @brief  Presents I2C password, to authorize the I2C writes to protected areas.
  * @param  PassWord Password value on 32bits
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_PresentI2CPassword( const ST25DV_PASSWD PassWord )
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b088      	sub	sp, #32
 8006848:	af00      	add	r7, sp, #0
 800684a:	463b      	mov	r3, r7
 800684c:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t ai2c_message[17] = {0};
 8006850:	f107 030c 	add.w	r3, r7, #12
 8006854:	2200      	movs	r2, #0
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	605a      	str	r2, [r3, #4]
 800685a:	609a      	str	r2, [r3, #8]
 800685c:	60da      	str	r2, [r3, #12]
 800685e:	741a      	strb	r2, [r3, #16]
  uint8_t i;
  
  /* Build I2C Message with Password + Validation code 0x09 + Password */
  ai2c_message[8] = 0x09;
 8006860:	2309      	movs	r3, #9
 8006862:	753b      	strb	r3, [r7, #20]
  for( i = 0; i < 4; i++ )
 8006864:	2300      	movs	r3, #0
 8006866:	77fb      	strb	r3, [r7, #31]
 8006868:	e032      	b.n	80068d0 <ST25DV_i2c_PresentI2CPassword+0x8c>
  {
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800686a:	683a      	ldr	r2, [r7, #0]
 800686c:	7ffb      	ldrb	r3, [r7, #31]
 800686e:	f1c3 0303 	rsb	r3, r3, #3
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	40da      	lsrs	r2, r3
 8006876:	7ffb      	ldrb	r3, [r7, #31]
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	3320      	adds	r3, #32
 800687c:	443b      	add	r3, r7
 800687e:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	7ffb      	ldrb	r3, [r7, #31]
 8006886:	f1c3 0303 	rsb	r3, r3, #3
 800688a:	00db      	lsls	r3, r3, #3
 800688c:	40da      	lsrs	r2, r3
 800688e:	7ffb      	ldrb	r3, [r7, #31]
 8006890:	3304      	adds	r3, #4
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	3320      	adds	r3, #32
 8006896:	443b      	add	r3, r7
 8006898:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 9] = ai2c_message[i];
 800689c:	7ffa      	ldrb	r2, [r7, #31]
 800689e:	7ffb      	ldrb	r3, [r7, #31]
 80068a0:	3309      	adds	r3, #9
 80068a2:	3220      	adds	r2, #32
 80068a4:	443a      	add	r2, r7
 80068a6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80068aa:	3320      	adds	r3, #32
 80068ac:	443b      	add	r3, r7
 80068ae:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 13] = ai2c_message[i + 4];
 80068b2:	7ffb      	ldrb	r3, [r7, #31]
 80068b4:	1d1a      	adds	r2, r3, #4
 80068b6:	7ffb      	ldrb	r3, [r7, #31]
 80068b8:	330d      	adds	r3, #13
 80068ba:	3220      	adds	r2, #32
 80068bc:	443a      	add	r2, r7
 80068be:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80068c2:	3320      	adds	r3, #32
 80068c4:	443b      	add	r3, r7
 80068c6:	f803 2c14 	strb.w	r2, [r3, #-20]
  for( i = 0; i < 4; i++ )
 80068ca:	7ffb      	ldrb	r3, [r7, #31]
 80068cc:	3301      	adds	r3, #1
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	7ffb      	ldrb	r3, [r7, #31]
 80068d2:	2b03      	cmp	r3, #3
 80068d4:	d9c9      	bls.n	800686a <ST25DV_i2c_PresentI2CPassword+0x26>
  };
  
  /* Present password to ST25DV */
  return ST25DV_i2c_WriteRegister( ai2c_message, ST25DV_I2CPASSWD_REG, 17 );
 80068d6:	f107 030c 	add.w	r3, r7, #12
 80068da:	2211      	movs	r2, #17
 80068dc:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff ff76 	bl	80067d2 <ST25DV_i2c_WriteRegister>
 80068e6:	4603      	mov	r3, r0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3720      	adds	r7, #32
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <ST25DV_i2c_WriteI2CPassword>:
  * @details  Needs the I2C Password presentation to be effective.
  * @param  PassWord New I2C PassWord value on 32bits.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_WriteI2CPassword( const ST25DV_PASSWD PassWord )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	463b      	mov	r3, r7
 80068f8:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t ai2c_message[17] = {0};
 80068fc:	f107 030c 	add.w	r3, r7, #12
 8006900:	2200      	movs	r2, #0
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	605a      	str	r2, [r3, #4]
 8006906:	609a      	str	r2, [r3, #8]
 8006908:	60da      	str	r2, [r3, #12]
 800690a:	741a      	strb	r2, [r3, #16]
  uint8_t i;
  
  /* Build I2C Message with Password + Validation code 0x07 + Password */
  ai2c_message[8] = 0x07;
 800690c:	2307      	movs	r3, #7
 800690e:	753b      	strb	r3, [r7, #20]

  for( i = 0; i < 4; i++ )
 8006910:	2300      	movs	r3, #0
 8006912:	77fb      	strb	r3, [r7, #31]
 8006914:	e032      	b.n	800697c <ST25DV_i2c_WriteI2CPassword+0x8c>
  {
    ai2c_message[i] = ( PassWord.MsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	7ffb      	ldrb	r3, [r7, #31]
 800691a:	f1c3 0303 	rsb	r3, r3, #3
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	40da      	lsrs	r2, r3
 8006922:	7ffb      	ldrb	r3, [r7, #31]
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	3320      	adds	r3, #32
 8006928:	443b      	add	r3, r7
 800692a:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 4] = ( PassWord.LsbPasswd >> ( (3 - i) * 8) ) & 0xFF;
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	7ffb      	ldrb	r3, [r7, #31]
 8006932:	f1c3 0303 	rsb	r3, r3, #3
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	40da      	lsrs	r2, r3
 800693a:	7ffb      	ldrb	r3, [r7, #31]
 800693c:	3304      	adds	r3, #4
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	3320      	adds	r3, #32
 8006942:	443b      	add	r3, r7
 8006944:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 9] = ai2c_message[i];
 8006948:	7ffa      	ldrb	r2, [r7, #31]
 800694a:	7ffb      	ldrb	r3, [r7, #31]
 800694c:	3309      	adds	r3, #9
 800694e:	3220      	adds	r2, #32
 8006950:	443a      	add	r2, r7
 8006952:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006956:	3320      	adds	r3, #32
 8006958:	443b      	add	r3, r7
 800695a:	f803 2c14 	strb.w	r2, [r3, #-20]
    ai2c_message[i + 13] = ai2c_message[i + 4];
 800695e:	7ffb      	ldrb	r3, [r7, #31]
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	7ffb      	ldrb	r3, [r7, #31]
 8006964:	330d      	adds	r3, #13
 8006966:	3220      	adds	r2, #32
 8006968:	443a      	add	r2, r7
 800696a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800696e:	3320      	adds	r3, #32
 8006970:	443b      	add	r3, r7
 8006972:	f803 2c14 	strb.w	r2, [r3, #-20]
  for( i = 0; i < 4; i++ )
 8006976:	7ffb      	ldrb	r3, [r7, #31]
 8006978:	3301      	adds	r3, #1
 800697a:	77fb      	strb	r3, [r7, #31]
 800697c:	7ffb      	ldrb	r3, [r7, #31]
 800697e:	2b03      	cmp	r3, #3
 8006980:	d9c9      	bls.n	8006916 <ST25DV_i2c_WriteI2CPassword+0x26>
  };
  
  /* Write new password in I2CPASSWD register */
  return ST25DV_i2c_WriteRegister( ai2c_message, ST25DV_I2CPASSWD_REG, 17 );
 8006982:	f107 030c 	add.w	r3, r7, #12
 8006986:	2211      	movs	r2, #17
 8006988:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff ff20 	bl	80067d2 <ST25DV_i2c_WriteRegister>
 8006992:	4603      	mov	r3, r0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <ST25DV_i2c_ReadMemSize>:
  * @brief  Reads the ST25DV Memory Size.
  * @param  pSizeInfo Pointer on a ST25DV_MEM_SIZE structure used to return the Memory size information.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadMemSize( ST25DV_MEM_SIZE * const pSizeInfo )
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint8_t reg_value[3];
  NFCTAG_Status_t status;
  
  /* Read actual value of MEM_SIZE register */
  status = ST25DV_i2c_ReadRegister( reg_value, ST25DV_MEM_SIZE_REG, 3 );
 80069a4:	f107 030c 	add.w	r3, r7, #12
 80069a8:	2203      	movs	r2, #3
 80069aa:	2114      	movs	r1, #20
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff fefd 	bl	80067ac <ST25DV_i2c_ReadRegister>
 80069b2:	4603      	mov	r3, r0
 80069b4:	73fb      	strb	r3, [r7, #15]
  if( status != NFCTAG_OK )
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <ST25DV_i2c_ReadMemSize+0x24>
    return status;
 80069bc:	7bfb      	ldrb	r3, [r7, #15]
 80069be:	e013      	b.n	80069e8 <ST25DV_i2c_ReadMemSize+0x4c>
  
  /* Extract Memory information */
  pSizeInfo->BlockSize = reg_value[2];
 80069c0:	7bba      	ldrb	r2, [r7, #14]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	701a      	strb	r2, [r3, #0]
  pSizeInfo->Mem_Size = reg_value[1];
 80069c6:	7b7b      	ldrb	r3, [r7, #13]
 80069c8:	461a      	mov	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	805a      	strh	r2, [r3, #2]
  pSizeInfo->Mem_Size = (pSizeInfo->Mem_Size << 8) | reg_value[0];
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	885b      	ldrh	r3, [r3, #2]
 80069d2:	b21b      	sxth	r3, r3
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	b21a      	sxth	r2, r3
 80069d8:	7b3b      	ldrb	r3, [r7, #12]
 80069da:	b21b      	sxth	r3, r3
 80069dc:	4313      	orrs	r3, r2
 80069de:	b21b      	sxth	r3, r3
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	805a      	strh	r2, [r3, #2]
  return NFCTAG_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <ST25DV_i2c_ReadEHMode>:
  * @brief  Reads the Energy harvesting mode.
  * @param  pEH_mode Pointer on a ST25DV_EH_MODE_STATUS value corresponding to the Energy Harvesting state.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadEHMode( ST25DV_EH_MODE_STATUS * const pEH_mode )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint8_t reg_value;
  NFCTAG_Status_t status;
  
  /* Read actual value of EH_MODE register */
  status = ST25DV_i2c_ReadRegister( &reg_value, ST25DV_EH_MODE_REG, 1 );
 80069f8:	f107 030e 	add.w	r3, r7, #14
 80069fc:	2201      	movs	r2, #1
 80069fe:	2102      	movs	r1, #2
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7ff fed3 	bl	80067ac <ST25DV_i2c_ReadRegister>
 8006a06:	4603      	mov	r3, r0
 8006a08:	73fb      	strb	r3, [r7, #15]
  if( status != NFCTAG_OK )
 8006a0a:	7bfb      	ldrb	r3, [r7, #15]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <ST25DV_i2c_ReadEHMode+0x24>
    return status;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	e00c      	b.n	8006a2e <ST25DV_i2c_ReadEHMode+0x3e>
  
  /* Extract EH_mode configuration */
  if( (reg_value & ST25DV_EH_MODE_MASK) == ST25DV_EH_MODE_MASK )
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	f003 0301 	and.w	r3, r3, #1
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <ST25DV_i2c_ReadEHMode+0x36>
  {
    *pEH_mode = ST25DV_EH_ON_DEMAND;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	e002      	b.n	8006a2c <ST25DV_i2c_ReadEHMode+0x3c>
  }
  else
  {
    *pEH_mode = ST25DV_EH_ACTIVE_AFTER_BOOT;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	701a      	strb	r2, [r3, #0]
  }
  
  return NFCTAG_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <ST25DV_i2c_WriteEHMode>:
  * @details  Needs the I2C Password presentation to be effective.
  * @param  EH_mode ST25DV_EH_MODE_STATUS value for the Energy harvesting mode to be set.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_WriteEHMode( const ST25DV_EH_MODE_STATUS EH_mode )
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_value;
  
  /* Update EH_mode */
  reg_value = (uint8_t)EH_mode;
 8006a40:	79fb      	ldrb	r3, [r7, #7]
 8006a42:	73fb      	strb	r3, [r7, #15]
  
  /* Write EH_MODE register */
  return ST25DV_i2c_WriteRegister( &reg_value, ST25DV_EH_MODE_REG, 1 );
 8006a44:	f107 030f 	add.w	r3, r7, #15
 8006a48:	2201      	movs	r2, #1
 8006a4a:	2102      	movs	r1, #2
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7ff fec0 	bl	80067d2 <ST25DV_i2c_WriteRegister>
 8006a52:	4603      	mov	r3, r0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <ST25DV_i2c_WriteRFMngt>:
  * @details  Needs the I2C Password presentation to be effective.
  * @param  Rfmngt Value of the RF Management configuration to be written.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_WriteRFMngt( const uint8_t Rfmngt )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	4603      	mov	r3, r0
 8006a64:	71fb      	strb	r3, [r7, #7]
  /* Write RF_MNGT register */
  return ST25DV_i2c_WriteRegister( &Rfmngt, ST25DV_RF_MNGT_REG, 1 );
 8006a66:	1dfb      	adds	r3, r7, #7
 8006a68:	2201      	movs	r2, #1
 8006a6a:	2103      	movs	r1, #3
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7ff feb0 	bl	80067d2 <ST25DV_i2c_WriteRegister>
 8006a72:	4603      	mov	r3, r0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3708      	adds	r7, #8
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <ST25DV_i2c_ReadMBMode>:
  * @brief  Reads the Mailbox mode.
  * @param  pMB_mode Pointer on a ST25DV_EH_MODE_STATUS value used to return the Mailbox mode.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadMBMode( ST25DV_EN_STATUS * const pMB_mode )
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint8_t reg_value;
  NFCTAG_Status_t status;
  
  /* Read actual value of MB_MODE register */
  status = ST25DV_i2c_ReadRegister( &reg_value, ST25DV_MB_MODE_REG, 1 );
 8006a84:	f107 030e 	add.w	r3, r7, #14
 8006a88:	2201      	movs	r2, #1
 8006a8a:	210d      	movs	r1, #13
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff fe8d 	bl	80067ac <ST25DV_i2c_ReadRegister>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]
  if( status != NFCTAG_OK )
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <ST25DV_i2c_ReadMBMode+0x24>
  {
    return status;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	e00c      	b.n	8006aba <ST25DV_i2c_ReadMBMode+0x3e>
  }
  
  /* Extract Mailbox mode status */
  if( (reg_value & ST25DV_MB_MODE_RW_MASK) == ST25DV_MB_MODE_RW_MASK )
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <ST25DV_i2c_ReadMBMode+0x36>
  {
    *pMB_mode = ST25DV_ENABLE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	e002      	b.n	8006ab8 <ST25DV_i2c_ReadMBMode+0x3c>
  }
  else
  {
    *pMB_mode = ST25DV_DISABLE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	701a      	strb	r2, [r3, #0]
  }
  
  return NFCTAG_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3710      	adds	r7, #16
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd80      	pop	{r7, pc}

08006ac2 <ST25DV_i2c_WriteMBMode>:
  * @details  Needs the I2C Password presentation to be effective.
  * @param  MB_mode ST25DV_EN_STATUS value corresponding to the Mailbox mode to be set.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_WriteMBMode( const ST25DV_EN_STATUS MB_mode )
{
 8006ac2:	b580      	push	{r7, lr}
 8006ac4:	b084      	sub	sp, #16
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	4603      	mov	r3, r0
 8006aca:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_value;
  
  /* Update Mailbox mode status */
  reg_value = (uint8_t)MB_mode;
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	73fb      	strb	r3, [r7, #15]
  
  /* Write MB_MODE register */
  return ST25DV_i2c_WriteRegister( &reg_value, ST25DV_MB_MODE_REG, 1 );
 8006ad0:	f107 030f 	add.w	r3, r7, #15
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	210d      	movs	r1, #13
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7ff fe7a 	bl	80067d2 <ST25DV_i2c_WriteRegister>
 8006ade:	4603      	mov	r3, r0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <ST25DV_i2c_WriteMBWDG>:
  * @details  Needs the I2C Password presentation to be effective.
  * @param  WdgDelay Watchdog duration coefficient to be written (Watch dog duration = MB_WDG*30 ms +/- 6%).
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_WriteMBWDG( const uint8_t WdgDelay )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	71fb      	strb	r3, [r7, #7]
  uint8_t reg_value;
  
  /* Set Watchdog coefficient delay */
  reg_value = WdgDelay & ST25DV_MB_WDG_DELAY_MASK;
 8006af2:	79fb      	ldrb	r3, [r7, #7]
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	73fb      	strb	r3, [r7, #15]
  
  /* Write MB_MODE register */
  return ST25DV_i2c_WriteRegister( &reg_value, ST25DV_MB_WDG_REG, 1 );
 8006afc:	f107 030f 	add.w	r3, r7, #15
 8006b00:	2201      	movs	r2, #1
 8006b02:	210e      	movs	r1, #14
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fe64 	bl	80067d2 <ST25DV_i2c_WriteRegister>
 8006b0a:	4603      	mov	r3, r0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <ST25DV_i2c_ReadMailboxData>:
  * @param  Offset  Offset in the Mailbox memory, byte number to start the read.
  * @param  NbByte  Number of bytes to be read.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadMailboxData( uint8_t * const pData, const uint16_t Offset, const uint16_t NbByte )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
 8006b20:	4613      	mov	r3, r2
 8006b22:	803b      	strh	r3, [r7, #0]
  if( Offset > ST25DV_MAX_MAILBOX_LENGTH )
 8006b24:	887b      	ldrh	r3, [r7, #2]
 8006b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b2a:	d901      	bls.n	8006b30 <ST25DV_i2c_ReadMailboxData+0x1c>
  {
    return NFCTAG_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	e00a      	b.n	8006b46 <ST25DV_i2c_ReadMailboxData+0x32>
  }
  
  /* Read Data in user memory */
  return ST25DV_IO_MemRead( pData, ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG + Offset, NbByte );
 8006b30:	887b      	ldrh	r3, [r7, #2]
 8006b32:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8006b36:	3308      	adds	r3, #8
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	883b      	ldrh	r3, [r7, #0]
 8006b3c:	21a6      	movs	r1, #166	@ 0xa6
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f7ff fd65 	bl	800660e <ST25DV_IO_MemRead>
 8006b44:	4603      	mov	r3, r0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3708      	adds	r7, #8
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <ST25DV_i2c_WriteMailboxData>:
  * @param  pData   Pointer to the buffer containing the data to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_WriteMailboxData( const uint8_t * const pData, const uint16_t NbByte )
{ 
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	460b      	mov	r3, r1
 8006b58:	807b      	strh	r3, [r7, #2]
  NFCTAG_Status_t status;
  
  /* ST25DV can write a maximum of 256 bytes in Mailbox */
  if( NbByte < ST25DV_MAX_MAILBOX_LENGTH )
 8006b5a:	887b      	ldrh	r3, [r7, #2]
 8006b5c:	2bff      	cmp	r3, #255	@ 0xff
 8006b5e:	d809      	bhi.n	8006b74 <ST25DV_i2c_WriteMailboxData+0x26>
  {
    /* Write NbByte data in memory */
    status = ST25DV_IO_MemWrite( pData, ST25DV_ADDR_DATA_I2C, ST25DV_MAILBOX_RAM_REG, NbByte);
 8006b60:	887b      	ldrh	r3, [r7, #2]
 8006b62:	f242 0208 	movw	r2, #8200	@ 0x2008
 8006b66:	21a6      	movs	r1, #166	@ 0xa6
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff fd0b 	bl	8006584 <ST25DV_IO_MemWrite>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	73fb      	strb	r3, [r7, #15]
 8006b72:	e001      	b.n	8006b78 <ST25DV_i2c_WriteMailboxData+0x2a>
  }
  else
  {
    status = NFCTAG_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <ST25DV_i2c_ReadMailboxRegister>:
  * @param  TarAddr I2C memory address to be read.
  * @param  NbByte  Number of bytes to be read.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadMailboxRegister( uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	807b      	strh	r3, [r7, #2]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	803b      	strh	r3, [r7, #0]
  if( (TarAddr < ST25DV_EH_CTRL_DYN_REG) || (TarAddr > ST25DV_MBLEN_DYN_REG) )
 8006b92:	887b      	ldrh	r3, [r7, #2]
 8006b94:	f242 0201 	movw	r2, #8193	@ 0x2001
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d904      	bls.n	8006ba6 <ST25DV_i2c_ReadMailboxRegister+0x24>
 8006b9c:	887b      	ldrh	r3, [r7, #2]
 8006b9e:	f242 0207 	movw	r2, #8199	@ 0x2007
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d901      	bls.n	8006baa <ST25DV_i2c_ReadMailboxRegister+0x28>
  {
    return NFCTAG_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e006      	b.n	8006bb8 <ST25DV_i2c_ReadMailboxRegister+0x36>
  }
  
  return ST25DV_IO_MemRead( pData, ST25DV_ADDR_DATA_I2C, TarAddr, NbByte );
 8006baa:	883b      	ldrh	r3, [r7, #0]
 8006bac:	887a      	ldrh	r2, [r7, #2]
 8006bae:	21a6      	movs	r1, #166	@ 0xa6
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff fd2c 	bl	800660e <ST25DV_IO_MemRead>
 8006bb6:	4603      	mov	r3, r0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <ST25DV_i2c_WriteMailboxRegister>:
  * @param  TarAddr I2C register address to be written.
  * @param  NbByte  Number of bytes to be written.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_WriteMailboxRegister( const uint8_t * const pData, const uint16_t TarAddr, const uint16_t NbByte )
{ 
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b084      	sub	sp, #16
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	807b      	strh	r3, [r7, #2]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	803b      	strh	r3, [r7, #0]
  NFCTAG_Status_t status;
  
  if( (TarAddr < ST25DV_EH_CTRL_DYN_REG) || (TarAddr > ST25DV_MBLEN_DYN_REG) )
 8006bd0:	887b      	ldrh	r3, [r7, #2]
 8006bd2:	f242 0201 	movw	r2, #8193	@ 0x2001
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d904      	bls.n	8006be4 <ST25DV_i2c_WriteMailboxRegister+0x24>
 8006bda:	887b      	ldrh	r3, [r7, #2]
 8006bdc:	f242 0207 	movw	r2, #8199	@ 0x2007
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d901      	bls.n	8006be8 <ST25DV_i2c_WriteMailboxRegister+0x28>
  {
    return NFCTAG_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e00e      	b.n	8006c06 <ST25DV_i2c_WriteMailboxRegister+0x46>
  }
  
  /* ST25DV can write a maximum of 256 bytes in Mailbox */
  if( NbByte < ST25DV_MAX_MAILBOX_LENGTH )
 8006be8:	883b      	ldrh	r3, [r7, #0]
 8006bea:	2bff      	cmp	r3, #255	@ 0xff
 8006bec:	d808      	bhi.n	8006c00 <ST25DV_i2c_WriteMailboxRegister+0x40>
  {
    /* Write NbByte data in memory */
    status = ST25DV_IO_MemWrite( pData, ST25DV_ADDR_DATA_I2C, TarAddr, NbByte);
 8006bee:	883b      	ldrh	r3, [r7, #0]
 8006bf0:	887a      	ldrh	r2, [r7, #2]
 8006bf2:	21a6      	movs	r1, #166	@ 0xa6
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff fcc5 	bl	8006584 <ST25DV_IO_MemWrite>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73fb      	strb	r3, [r7, #15]
 8006bfe:	e001      	b.n	8006c04 <ST25DV_i2c_WriteMailboxRegister+0x44>
  }
  else
  {
    status = NFCTAG_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <ST25DV_i2c_ReadI2CSecuritySession_Dyn>:
  * @brief  Reads the status of the security session open register.
  * @param  pSession Pointer on a ST25DV_I2CSSO_STATUS value used to return the session status.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadI2CSecuritySession_Dyn( ST25DV_I2CSSO_STATUS * const pSession )
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  uint8_t reg_value;
  NFCTAG_Status_t status;

  /* Read actual value of I2C_SSO_DYN register */
  status = ST25DV_i2c_ReadMailboxRegister( &reg_value, ST25DV_I2C_SSO_DYN_REG, 1 );
 8006c16:	f107 030e 	add.w	r3, r7, #14
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f242 0104 	movw	r1, #8196	@ 0x2004
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ffae 	bl	8006b82 <ST25DV_i2c_ReadMailboxRegister>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
  if( status != NFCTAG_OK )
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <ST25DV_i2c_ReadI2CSecuritySession_Dyn+0x26>
  {
    return status;
 8006c30:	7bfb      	ldrb	r3, [r7, #15]
 8006c32:	e00c      	b.n	8006c4e <ST25DV_i2c_ReadI2CSecuritySession_Dyn+0x40>
  }
  
  /* Extract Open session information */
  if( (reg_value & ST25DV_I2C_SSO_DYN_I2CSSO_MASK) == ST25DV_I2C_SSO_DYN_I2CSSO_MASK )
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d003      	beq.n	8006c46 <ST25DV_i2c_ReadI2CSecuritySession_Dyn+0x38>
  {
    *pSession = ST25DV_SESSION_OPEN;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	701a      	strb	r2, [r3, #0]
 8006c44:	e002      	b.n	8006c4c <ST25DV_i2c_ReadI2CSecuritySession_Dyn+0x3e>
  }
  else
  {
    *pSession = ST25DV_SESSION_CLOSED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
  }
  
  return NFCTAG_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <ST25DV_i2c_ReadITSTStatus_Dyn>:
  *                       - RFWRITE = 0x80
  *
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadITSTStatus_Dyn( uint8_t * const pITStatus )
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b082      	sub	sp, #8
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  /* Read value of ITStatus register */
  return ST25DV_i2c_ReadMailboxRegister( pITStatus, ST25DV_ITSTS_DYN_REG, 1 );
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f242 0105 	movw	r1, #8197	@ 0x2005
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff ff8c 	bl	8006b82 <ST25DV_i2c_ReadMailboxRegister>
 8006c6a:	4603      	mov	r3, r0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <ST25DV_i2c_ResetEHENMode_Dyn>:
/**
  * @brief  Dynamically unsets the Energy Harvesting mode.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ResetEHENMode_Dyn( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
  uint8_t reg_value;
  NFCTAG_Status_t status;
  
  /* Read actual value of EH_CTRL_DYN register */
  status = ST25DV_i2c_ReadMailboxRegister( &reg_value, ST25DV_EH_CTRL_DYN_REG, 1 );
 8006c7a:	1dbb      	adds	r3, r7, #6
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f242 0102 	movw	r1, #8194	@ 0x2002
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff ff7d 	bl	8006b82 <ST25DV_i2c_ReadMailboxRegister>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	71fb      	strb	r3, [r7, #7]
  if( status != NFCTAG_OK )
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <ST25DV_i2c_ResetEHENMode_Dyn+0x22>
  {
    return status;
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	e00c      	b.n	8006cb0 <ST25DV_i2c_ResetEHENMode_Dyn+0x3c>
  }
  
  /* Update Energy Harvesting configuration */
  reg_value &= ST25DV_EH_CTRL_DYN_EH_EN_FIELD;
 8006c96:	79bb      	ldrb	r3, [r7, #6]
 8006c98:	f023 0301 	bic.w	r3, r3, #1
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	71bb      	strb	r3, [r7, #6]
  
  /* Write EH_CTRL_DYN Register */
  return ST25DV_i2c_WriteMailboxRegister( &reg_value, ST25DV_EH_CTRL_DYN_REG, 1 );
 8006ca0:	1dbb      	adds	r3, r7, #6
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	f242 0102 	movw	r1, #8194	@ 0x2002
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7ff ff89 	bl	8006bc0 <ST25DV_i2c_WriteMailboxRegister>
 8006cae:	4603      	mov	r3, r0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3708      	adds	r7, #8
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <ST25DV_i2c_GetRFField_Dyn>:
  * @brief  Checks if RF Field is present in front of the ST25DV.
  * @param  pRF_Field Pointer on a ST25DV_FIELD_STATUS value used to return the field presence.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_GetRFField_Dyn( ST25DV_FIELD_STATUS * const pRF_Field )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  NFCTAG_Status_t status;
  uint8_t reg_value = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	73bb      	strb	r3, [r7, #14]
  
  /* Read actual value of EH_CTRL_DYN register */
  status = ST25DV_i2c_ReadMailboxRegister( &reg_value, ST25DV_EH_CTRL_DYN_REG, 1 );
 8006cc4:	f107 030e 	add.w	r3, r7, #14
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f242 0102 	movw	r1, #8194	@ 0x2002
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f7ff ff57 	bl	8006b82 <ST25DV_i2c_ReadMailboxRegister>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	73fb      	strb	r3, [r7, #15]
  
  /* Extract RF Field information */
  if( status == NFCTAG_OK )
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10d      	bne.n	8006cfa <ST25DV_i2c_GetRFField_Dyn+0x42>
  {
    if( (reg_value & ST25DV_EH_CTRL_DYN_FIELD_ON_MASK) == ST25DV_EH_CTRL_DYN_FIELD_ON_MASK )
 8006cde:	7bbb      	ldrb	r3, [r7, #14]
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d003      	beq.n	8006cf0 <ST25DV_i2c_GetRFField_Dyn+0x38>
    {
      *pRF_Field = ST25DV_FIELD_ON;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
 8006cee:	e002      	b.n	8006cf6 <ST25DV_i2c_GetRFField_Dyn+0x3e>
    }
    else
    {
      *pRF_Field = ST25DV_FIELD_OFF;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	701a      	strb	r2, [r3, #0]
    }
    return NFCTAG_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	e000      	b.n	8006cfc <ST25DV_i2c_GetRFField_Dyn+0x44>
  }
  
  return status;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <ST25DV_i2c_ReadMBCtrl_Dyn>:
  * @brief  Reads the Mailbox ctrl dynamic register.
  * @param  pCtrlStatus Pointer on a ST25DV_MB_CTRL_DYN_STATUS structure used to return the dynamic Mailbox ctrl information.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadMBCtrl_Dyn( ST25DV_MB_CTRL_DYN_STATUS * const pCtrlStatus )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint8_t reg_value;
  NFCTAG_Status_t status;
  
  /* Read MB_CTRL_DYN register */
  status = ST25DV_i2c_ReadMailboxRegister( &reg_value, ST25DV_MB_CTRL_DYN_REG, 1 );
 8006d0c:	f107 030e 	add.w	r3, r7, #14
 8006d10:	2201      	movs	r2, #1
 8006d12:	f242 0106 	movw	r1, #8198	@ 0x2006
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff ff33 	bl	8006b82 <ST25DV_i2c_ReadMailboxRegister>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	73fb      	strb	r3, [r7, #15]
  if( status != NFCTAG_OK )
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <ST25DV_i2c_ReadMBCtrl_Dyn+0x26>
  {
    return status;
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	e02b      	b.n	8006d82 <ST25DV_i2c_ReadMBCtrl_Dyn+0x7e>
  }
  
  /* Extract Mailbox ctrl information */
  pCtrlStatus->MbEnable = (reg_value & ST25DV_MB_CTRL_DYN_MBEN_MASK) >> ST25DV_MB_CTRL_DYN_MBEN_SHIFT;
 8006d2a:	7bbb      	ldrb	r3, [r7, #14]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	701a      	strb	r2, [r3, #0]
  pCtrlStatus->HostPutMsg = (reg_value & ST25DV_MB_CTRL_DYN_HOSTPUTMSG_MASK) >> ST25DV_MB_CTRL_DYN_HOSTPUTMSG_SHIFT;
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	105b      	asrs	r3, r3, #1
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	705a      	strb	r2, [r3, #1]
  pCtrlStatus->RfPutMsg = (reg_value & ST25DV_MB_CTRL_DYN_RFPUTMSG_MASK) >> ST25DV_MB_CTRL_DYN_RFPUTMSG_SHIFT;
 8006d46:	7bbb      	ldrb	r3, [r7, #14]
 8006d48:	109b      	asrs	r3, r3, #2
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	709a      	strb	r2, [r3, #2]
  pCtrlStatus->HostMissMsg = (reg_value & ST25DV_MB_CTRL_DYN_HOSTMISSMSG_MASK) >> ST25DV_MB_CTRL_DYN_HOSTMISSMSG_SHIFT;
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	111b      	asrs	r3, r3, #4
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	70da      	strb	r2, [r3, #3]
  pCtrlStatus->RFMissMsg = (reg_value & ST25DV_MB_CTRL_DYN_RFMISSMSG_MASK) >> ST25DV_MB_CTRL_DYN_RFMISSMSG_SHIFT;
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	115b      	asrs	r3, r3, #5
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	711a      	strb	r2, [r3, #4]
  pCtrlStatus->CurrentMsg = (ST25DV_CURRENT_MSG)((reg_value & ST25DV_MB_CTRL_DYN_CURRENTMSG_MASK) >> ST25DV_MB_CTRL_DYN_CURRENTMSG_SHIFT);
 8006d76:	7bbb      	ldrb	r3, [r7, #14]
 8006d78:	099b      	lsrs	r3, r3, #6
 8006d7a:	b2da      	uxtb	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	715a      	strb	r2, [r3, #5]
  
  return NFCTAG_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <ST25DV_i2c_SetMBEN_Dyn>:
/**
  * @brief  Sets the Mailbox Enable dynamic configuration.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_SetMBEN_Dyn( void )
{
 8006d8a:	b580      	push	{r7, lr}
 8006d8c:	b082      	sub	sp, #8
 8006d8e:	af00      	add	r7, sp, #0
  uint8_t reg_value;
  
  /* Set dynamic Mailbox enable */
  reg_value = ST25DV_MB_CTRL_DYN_MBEN_MASK;
 8006d90:	2301      	movs	r3, #1
 8006d92:	71fb      	strb	r3, [r7, #7]
  
  /* Write MB_CTRL_DYN register */
  return ST25DV_i2c_WriteMailboxRegister( &reg_value, ST25DV_MB_CTRL_DYN_REG, 1 );
 8006d94:	1dfb      	adds	r3, r7, #7
 8006d96:	2201      	movs	r2, #1
 8006d98:	f242 0106 	movw	r1, #8198	@ 0x2006
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7ff ff0f 	bl	8006bc0 <ST25DV_i2c_WriteMailboxRegister>
 8006da2:	4603      	mov	r3, r0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <ST25DV_i2c_ResetMBEN_Dyn>:
/**
  * @brief  Unsets the Mailbox Enable dynamic configuration.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ResetMBEN_Dyn( void )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
  uint8_t reg_value;
  
  /* Set dynamic Mailbox disable */
  reg_value = 0;
 8006db2:	2300      	movs	r3, #0
 8006db4:	71fb      	strb	r3, [r7, #7]
  
  /* Write MB_CTRL_DYN register */
  return ST25DV_i2c_WriteMailboxRegister( &reg_value, ST25DV_MB_CTRL_DYN_REG, 1 );
 8006db6:	1dfb      	adds	r3, r7, #7
 8006db8:	2201      	movs	r2, #1
 8006dba:	f242 0106 	movw	r1, #8198	@ 0x2006
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7ff fefe 	bl	8006bc0 <ST25DV_i2c_WriteMailboxRegister>
 8006dc4:	4603      	mov	r3, r0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3708      	adds	r7, #8
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <ST25DV_i2c_ReadMBLength_Dyn>:
  * @brief  Reads the Mailbox message length dynamic register.
  * @param  pMBLength Pointer on a uint8_t used to return the Mailbox message length.
  * @return NFCTAG_Status_t enum status.
  */
NFCTAG_Status_t ST25DV_i2c_ReadMBLength_Dyn( uint8_t * const pMBLength )
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b082      	sub	sp, #8
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  /* Read actual value of MBLEN_DYN register */
  return ST25DV_i2c_ReadMailboxRegister( pMBLength, ST25DV_MBLEN_DYN_REG, 1 );
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f242 0107 	movw	r1, #8199	@ 0x2007
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f7ff fed0 	bl	8006b82 <ST25DV_i2c_ReadMailboxRegister>
 8006de2:	4603      	mov	r3, r0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <QUEUE_FIFO_Push>:
	_queue->elementSize= _elementSize;
	_queue->elementMax= _elementMax;
}

void QUEUE_FIFO_Push(QUEUE_FIFO_t *_queue, void *_element)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
	memcpy(_queue->storage+ (_queue->elementSize* _queue->head), (uint8_t *)_element, _queue->elementSize);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	8912      	ldrh	r2, [r2, #8]
 8006dfe:	4611      	mov	r1, r2
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	8812      	ldrh	r2, [r2, #0]
 8006e04:	fb01 f202 	mul.w	r2, r1, r2
 8006e08:	1898      	adds	r0, r3, r2
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	891b      	ldrh	r3, [r3, #8]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	f002 f9aa 	bl	800916a <memcpy>
	_queue->head= (_queue->head+ 1)% _queue->elementMax;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	88d2      	ldrh	r2, [r2, #6]
 8006e20:	fb93 f1f2 	sdiv	r1, r3, r2
 8006e24:	fb01 f202 	mul.w	r2, r1, r2
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	801a      	strh	r2, [r3, #0]
	_queue->elementCount= (_queue->elementCount== _queue->elementMax)? _queue->elementMax: _queue->elementCount+ 1;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	885a      	ldrh	r2, [r3, #2]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	88db      	ldrh	r3, [r3, #6]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d102      	bne.n	8006e42 <QUEUE_FIFO_Push+0x56>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	88db      	ldrh	r3, [r3, #6]
 8006e40:	e003      	b.n	8006e4a <QUEUE_FIFO_Push+0x5e>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	885b      	ldrh	r3, [r3, #2]
 8006e46:	3301      	adds	r3, #1
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	8053      	strh	r3, [r2, #2]
}
 8006e4e:	bf00      	nop
 8006e50:	3708      	adds	r7, #8
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
	...

08006e58 <UTILI_usDelay>:

	return _hexStr;
}

void UTILI_usDelay(uint32_t _value)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	__IO uint32_t _multiplier= SystemCoreClock/ (1000000);/*assuming clock in Mhz range*/
 8006e60:	4b0c      	ldr	r3, [pc, #48]	@ (8006e94 <UTILI_usDelay+0x3c>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a0c      	ldr	r2, [pc, #48]	@ (8006e98 <UTILI_usDelay+0x40>)
 8006e66:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6a:	0c9b      	lsrs	r3, r3, #18
 8006e6c:	60fb      	str	r3, [r7, #12]
	__IO uint32_t _waitLoop= _value* _multiplier;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	60bb      	str	r3, [r7, #8]

	while(_waitLoop!= 0)
 8006e78:	e002      	b.n	8006e80 <UTILI_usDelay+0x28>
	{
		_waitLoop--;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	60bb      	str	r3, [r7, #8]
	while(_waitLoop!= 0)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f9      	bne.n	8006e7a <UTILI_usDelay+0x22>
	}
}
 8006e86:	bf00      	nop
 8006e88:	bf00      	nop
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	20000000 	.word	0x20000000
 8006e98:	431bde83 	.word	0x431bde83

08006e9c <UTILI_GetChecksum>:
 * init: 0x0000
 * result: 0xB77B
 */
#define POLY 0xA001
uint16_t UTILI_GetChecksum(uint16_t _crc, uint8_t *_buf, uint32_t _len)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	81fb      	strh	r3, [r7, #14]
    while (_len--)
 8006eaa:	e087      	b.n	8006fbc <UTILI_GetChecksum+0x120>
    {
    	_crc ^= *_buf++;
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	60ba      	str	r2, [r7, #8]
 8006eb2:	781b      	ldrb	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	89fb      	ldrh	r3, [r7, #14]
 8006eb8:	4053      	eors	r3, r2
 8006eba:	81fb      	strh	r3, [r7, #14]
    	_crc = _crc & 1 ? (_crc >> 1) ^ POLY : _crc >> 1;
 8006ebc:	89fb      	ldrh	r3, [r7, #14]
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d006      	beq.n	8006ed4 <UTILI_GetChecksum+0x38>
 8006ec6:	89fb      	ldrh	r3, [r7, #14]
 8006ec8:	085b      	lsrs	r3, r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	4b42      	ldr	r3, [pc, #264]	@ (8006fd8 <UTILI_GetChecksum+0x13c>)
 8006ece:	4053      	eors	r3, r2
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	e002      	b.n	8006eda <UTILI_GetChecksum+0x3e>
 8006ed4:	89fb      	ldrh	r3, [r7, #14]
 8006ed6:	085b      	lsrs	r3, r3, #1
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	81fb      	strh	r3, [r7, #14]
    	_crc = _crc & 1 ? (_crc >> 1) ^ POLY : _crc >> 1;
 8006edc:	89fb      	ldrh	r3, [r7, #14]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d006      	beq.n	8006ef4 <UTILI_GetChecksum+0x58>
 8006ee6:	89fb      	ldrh	r3, [r7, #14]
 8006ee8:	085b      	lsrs	r3, r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	4b3a      	ldr	r3, [pc, #232]	@ (8006fd8 <UTILI_GetChecksum+0x13c>)
 8006eee:	4053      	eors	r3, r2
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	e002      	b.n	8006efa <UTILI_GetChecksum+0x5e>
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
 8006ef6:	085b      	lsrs	r3, r3, #1
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	81fb      	strh	r3, [r7, #14]
    	_crc = _crc & 1 ? (_crc >> 1) ^ POLY : _crc >> 1;
 8006efc:	89fb      	ldrh	r3, [r7, #14]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d006      	beq.n	8006f14 <UTILI_GetChecksum+0x78>
 8006f06:	89fb      	ldrh	r3, [r7, #14]
 8006f08:	085b      	lsrs	r3, r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	4b32      	ldr	r3, [pc, #200]	@ (8006fd8 <UTILI_GetChecksum+0x13c>)
 8006f0e:	4053      	eors	r3, r2
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	e002      	b.n	8006f1a <UTILI_GetChecksum+0x7e>
 8006f14:	89fb      	ldrh	r3, [r7, #14]
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	81fb      	strh	r3, [r7, #14]
    	_crc = _crc & 1 ? (_crc >> 1) ^ POLY : _crc >> 1;
 8006f1c:	89fb      	ldrh	r3, [r7, #14]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d006      	beq.n	8006f34 <UTILI_GetChecksum+0x98>
 8006f26:	89fb      	ldrh	r3, [r7, #14]
 8006f28:	085b      	lsrs	r3, r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8006fd8 <UTILI_GetChecksum+0x13c>)
 8006f2e:	4053      	eors	r3, r2
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	e002      	b.n	8006f3a <UTILI_GetChecksum+0x9e>
 8006f34:	89fb      	ldrh	r3, [r7, #14]
 8006f36:	085b      	lsrs	r3, r3, #1
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	81fb      	strh	r3, [r7, #14]
    	_crc = _crc & 1 ? (_crc >> 1) ^ POLY : _crc >> 1;
 8006f3c:	89fb      	ldrh	r3, [r7, #14]
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d006      	beq.n	8006f54 <UTILI_GetChecksum+0xb8>
 8006f46:	89fb      	ldrh	r3, [r7, #14]
 8006f48:	085b      	lsrs	r3, r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	4b22      	ldr	r3, [pc, #136]	@ (8006fd8 <UTILI_GetChecksum+0x13c>)
 8006f4e:	4053      	eors	r3, r2
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	e002      	b.n	8006f5a <UTILI_GetChecksum+0xbe>
 8006f54:	89fb      	ldrh	r3, [r7, #14]
 8006f56:	085b      	lsrs	r3, r3, #1
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	81fb      	strh	r3, [r7, #14]
    	_crc = _crc & 1 ? (_crc >> 1) ^ POLY : _crc >> 1;
 8006f5c:	89fb      	ldrh	r3, [r7, #14]
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d006      	beq.n	8006f74 <UTILI_GetChecksum+0xd8>
 8006f66:	89fb      	ldrh	r3, [r7, #14]
 8006f68:	085b      	lsrs	r3, r3, #1
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fd8 <UTILI_GetChecksum+0x13c>)
 8006f6e:	4053      	eors	r3, r2
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	e002      	b.n	8006f7a <UTILI_GetChecksum+0xde>
 8006f74:	89fb      	ldrh	r3, [r7, #14]
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	81fb      	strh	r3, [r7, #14]
    	_crc = _crc & 1 ? (_crc >> 1) ^ POLY : _crc >> 1;
 8006f7c:	89fb      	ldrh	r3, [r7, #14]
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d006      	beq.n	8006f94 <UTILI_GetChecksum+0xf8>
 8006f86:	89fb      	ldrh	r3, [r7, #14]
 8006f88:	085b      	lsrs	r3, r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	4b12      	ldr	r3, [pc, #72]	@ (8006fd8 <UTILI_GetChecksum+0x13c>)
 8006f8e:	4053      	eors	r3, r2
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	e002      	b.n	8006f9a <UTILI_GetChecksum+0xfe>
 8006f94:	89fb      	ldrh	r3, [r7, #14]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	81fb      	strh	r3, [r7, #14]
    	_crc = _crc & 1 ? (_crc >> 1) ^ POLY : _crc >> 1;
 8006f9c:	89fb      	ldrh	r3, [r7, #14]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <UTILI_GetChecksum+0x118>
 8006fa6:	89fb      	ldrh	r3, [r7, #14]
 8006fa8:	085b      	lsrs	r3, r3, #1
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <UTILI_GetChecksum+0x13c>)
 8006fae:	4053      	eors	r3, r2
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	e002      	b.n	8006fba <UTILI_GetChecksum+0x11e>
 8006fb4:	89fb      	ldrh	r3, [r7, #14]
 8006fb6:	085b      	lsrs	r3, r3, #1
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	81fb      	strh	r3, [r7, #14]
    while (_len--)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	1e5a      	subs	r2, r3, #1
 8006fc0:	607a      	str	r2, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f47f af72 	bne.w	8006eac <UTILI_GetChecksum+0x10>
    }
    return _crc;
 8006fc8:	89fb      	ldrh	r3, [r7, #14]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	ffffa001 	.word	0xffffa001

08006fdc <DIAG_Code>:
__IO static uint8_t __attribute__((section(".ram2"))) pucBuffer[DIAG_CFG_BUFFER_SIZE]; /*need to remove at flash in linker script, otherwise it will be loaded inside flash and waste memory:*/// >RAM2 /*AT> FLASH*/
__IO static uint8_t *pBuffer;
__IO static uint8_t *pBufferMax;

void DIAG_Code(uint16_t _dcode, uint32_t _value)
{
 8006fdc:	b590      	push	{r4, r7, lr}
 8006fde:	b087      	sub	sp, #28
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	6039      	str	r1, [r7, #0]
 8006fe6:	80fb      	strh	r3, [r7, #6]
	uint8_t _buf[DIAG_CFG_ENTRY_SIZE];
	*((uint16_t *)  (_buf))= _dcode;
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	88fa      	ldrh	r2, [r7, #6]
 8006fee:	801a      	strh	r2, [r3, #0]
	*((uint32_t *)  (_buf+ 2))= SYS_GetTimestamp_s();
 8006ff0:	f107 040c 	add.w	r4, r7, #12
 8006ff4:	3402      	adds	r4, #2
 8006ff6:	f001 f800 	bl	8007ffa <SYS_GetTimestamp_s>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	6023      	str	r3, [r4, #0]
	*((uint32_t *) 	(_buf+ 2+ 4))= _value;
 8006ffe:	f107 030c 	add.w	r3, r7, #12
 8007002:	3306      	adds	r3, #6
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	601a      	str	r2, [r3, #0]

	QUEUE_FIFO_Push(&pConfig->queue, _buf);
 8007008:	4b06      	ldr	r3, [pc, #24]	@ (8007024 <DIAG_Code+0x48>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	f107 020c 	add.w	r2, r7, #12
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f7ff fee9 	bl	8006dec <QUEUE_FIFO_Push>
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	bd90      	pop	{r4, r7, pc}
 8007022:	bf00      	nop
 8007024:	20002b4c 	.word	0x20002b4c

08007028 <MSG_Msg_Depth>:
__IO static uint8_t 	ubMsgArrayTail= 0;

__IO MSG_t		eCurrMsg;

uint8_t MSG_Msg_Depth(void)
{
 8007028:	b480      	push	{r7}
 800702a:	af00      	add	r7, sp, #0
	if(ubMsgArrayTail< ubMsgArrayHead)
 800702c:	4b14      	ldr	r3, [pc, #80]	@ (8007080 <MSG_Msg_Depth+0x58>)
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	4b14      	ldr	r3, [pc, #80]	@ (8007084 <MSG_Msg_Depth+0x5c>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	429a      	cmp	r2, r3
 800703a:	d208      	bcs.n	800704e <MSG_Msg_Depth+0x26>
	{
		return ubMsgArrayHead- ubMsgArrayTail;
 800703c:	4b11      	ldr	r3, [pc, #68]	@ (8007084 <MSG_Msg_Depth+0x5c>)
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b2da      	uxtb	r2, r3
 8007042:	4b0f      	ldr	r3, [pc, #60]	@ (8007080 <MSG_Msg_Depth+0x58>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	b2db      	uxtb	r3, r3
 8007048:	1ad3      	subs	r3, r2, r3
 800704a:	b2db      	uxtb	r3, r3
 800704c:	e013      	b.n	8007076 <MSG_Msg_Depth+0x4e>
	}
	else if(ubMsgArrayTail> ubMsgArrayHead)
 800704e:	4b0c      	ldr	r3, [pc, #48]	@ (8007080 <MSG_Msg_Depth+0x58>)
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	b2da      	uxtb	r2, r3
 8007054:	4b0b      	ldr	r3, [pc, #44]	@ (8007084 <MSG_Msg_Depth+0x5c>)
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	b2db      	uxtb	r3, r3
 800705a:	429a      	cmp	r2, r3
 800705c:	d90a      	bls.n	8007074 <MSG_Msg_Depth+0x4c>
	{
		return (MSG_CFG_MAX_MSG_ARRAY+ ubMsgArrayHead)- ubMsgArrayTail;
 800705e:	4b09      	ldr	r3, [pc, #36]	@ (8007084 <MSG_Msg_Depth+0x5c>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	4b06      	ldr	r3, [pc, #24]	@ (8007080 <MSG_Msg_Depth+0x58>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	b2db      	uxtb	r3, r3
 800706a:	1ad3      	subs	r3, r2, r3
 800706c:	b2db      	uxtb	r3, r3
 800706e:	3305      	adds	r3, #5
 8007070:	b2db      	uxtb	r3, r3
 8007072:	e000      	b.n	8007076 <MSG_Msg_Depth+0x4e>
	}
	else
	{
		return 0;
 8007074:	2300      	movs	r3, #0
	}
}
 8007076:	4618      	mov	r0, r3
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	20002b8d 	.word	0x20002b8d
 8007084:	20002b8c 	.word	0x20002b8c

08007088 <MSG_Msg_Enqueue>:

ErrorStatus MSG_Msg_Enqueue(MSG_t _msg)
{
 8007088:	b590      	push	{r4, r7, lr}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	1d3b      	adds	r3, r7, #4
 8007090:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if(MSG_CFG_MAX_MSG_ARRAY> MSG_Msg_Depth())
 8007094:	f7ff ffc8 	bl	8007028 <MSG_Msg_Depth>
 8007098:	4603      	mov	r3, r0
 800709a:	2b04      	cmp	r3, #4
 800709c:	d822      	bhi.n	80070e4 <MSG_Msg_Enqueue+0x5c>
	{
		eMsgQueue[ubMsgArrayHead]= _msg;
 800709e:	4b14      	ldr	r3, [pc, #80]	@ (80070f0 <MSG_Msg_Enqueue+0x68>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	4619      	mov	r1, r3
 80070a6:	4a13      	ldr	r2, [pc, #76]	@ (80070f4 <MSG_Msg_Enqueue+0x6c>)
 80070a8:	460b      	mov	r3, r1
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	440b      	add	r3, r1
 80070ae:	009b      	lsls	r3, r3, #2
 80070b0:	4413      	add	r3, r2
 80070b2:	461c      	mov	r4, r3
 80070b4:	1d3b      	adds	r3, r7, #4
 80070b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80070ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		ubMsgArrayHead= (ubMsgArrayHead+ 1)% MSG_CFG_MAX_MSG_ARRAY;
 80070be:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <MSG_Msg_Enqueue+0x68>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	4b0c      	ldr	r3, [pc, #48]	@ (80070f8 <MSG_Msg_Enqueue+0x70>)
 80070c8:	fb83 1302 	smull	r1, r3, r3, r2
 80070cc:	1059      	asrs	r1, r3, #1
 80070ce:	17d3      	asrs	r3, r2, #31
 80070d0:	1ac9      	subs	r1, r1, r3
 80070d2:	460b      	mov	r3, r1
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	440b      	add	r3, r1
 80070d8:	1ad1      	subs	r1, r2, r3
 80070da:	b2ca      	uxtb	r2, r1
 80070dc:	4b04      	ldr	r3, [pc, #16]	@ (80070f0 <MSG_Msg_Enqueue+0x68>)
 80070de:	701a      	strb	r2, [r3, #0]
		//DBG_Print("MSG> ubMsgArrayHead: %d ubMsgArrayTail: %d \r\n", ubMsgArrayHead, ubMsgArrayTail);
		return SUCCESS;
 80070e0:	2300      	movs	r3, #0
 80070e2:	e000      	b.n	80070e6 <MSG_Msg_Enqueue+0x5e>
	}
	return ERROR;
 80070e4:	2301      	movs	r3, #1
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3714      	adds	r7, #20
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd90      	pop	{r4, r7, pc}
 80070ee:	bf00      	nop
 80070f0:	20002b8c 	.word	0x20002b8c
 80070f4:	20002b50 	.word	0x20002b50
 80070f8:	66666667 	.word	0x66666667

080070fc <MSG_Msg_Dequeue>:

MSG_t MSG_Msg_Dequeue(void)
{
 80070fc:	b490      	push	{r4, r7}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	MSG_t _msg= {0};
 8007104:	f107 030c 	add.w	r3, r7, #12
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	605a      	str	r2, [r3, #4]
 800710e:	609a      	str	r2, [r3, #8]
	if(ubMsgArrayTail!= ubMsgArrayHead)
 8007110:	4b1a      	ldr	r3, [pc, #104]	@ (800717c <MSG_Msg_Dequeue+0x80>)
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	4b1a      	ldr	r3, [pc, #104]	@ (8007180 <MSG_Msg_Dequeue+0x84>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	429a      	cmp	r2, r3
 800711e:	d01f      	beq.n	8007160 <MSG_Msg_Dequeue+0x64>
	{
		_msg= eMsgQueue[ubMsgArrayTail];
 8007120:	4b16      	ldr	r3, [pc, #88]	@ (800717c <MSG_Msg_Dequeue+0x80>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	b2db      	uxtb	r3, r3
 8007126:	4619      	mov	r1, r3
 8007128:	4a16      	ldr	r2, [pc, #88]	@ (8007184 <MSG_Msg_Dequeue+0x88>)
 800712a:	460b      	mov	r3, r1
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	440b      	add	r3, r1
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	441a      	add	r2, r3
 8007134:	f107 030c 	add.w	r3, r7, #12
 8007138:	ca07      	ldmia	r2, {r0, r1, r2}
 800713a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ubMsgArrayTail= (ubMsgArrayTail+ 1)% MSG_CFG_MAX_MSG_ARRAY;
 800713e:	4b0f      	ldr	r3, [pc, #60]	@ (800717c <MSG_Msg_Dequeue+0x80>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	b2db      	uxtb	r3, r3
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	4b10      	ldr	r3, [pc, #64]	@ (8007188 <MSG_Msg_Dequeue+0x8c>)
 8007148:	fb83 1302 	smull	r1, r3, r3, r2
 800714c:	1059      	asrs	r1, r3, #1
 800714e:	17d3      	asrs	r3, r2, #31
 8007150:	1ac9      	subs	r1, r1, r3
 8007152:	460b      	mov	r3, r1
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	440b      	add	r3, r1
 8007158:	1ad1      	subs	r1, r2, r3
 800715a:	b2ca      	uxtb	r2, r1
 800715c:	4b07      	ldr	r3, [pc, #28]	@ (800717c <MSG_Msg_Dequeue+0x80>)
 800715e:	701a      	strb	r2, [r3, #0]
	}
	return _msg;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	461c      	mov	r4, r3
 8007164:	f107 030c 	add.w	r3, r7, #12
 8007168:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800716c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bc90      	pop	{r4, r7}
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20002b8d 	.word	0x20002b8d
 8007180:	20002b8c 	.word	0x20002b8c
 8007184:	20002b50 	.word	0x20002b50
 8007188:	66666667 	.word	0x66666667

0800718c <MSG_Msg_TaskId_Peek>:

	return _msg;
}

SYS_TaskId_t MSG_Msg_TaskId_Peek(void)
{
 800718c:	b480      	push	{r7}
 800718e:	af00      	add	r7, sp, #0
	return eMsgQueue[ubMsgArrayTail].taskId;
 8007190:	4b08      	ldr	r3, [pc, #32]	@ (80071b4 <MSG_Msg_TaskId_Peek+0x28>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	b2db      	uxtb	r3, r3
 8007196:	4619      	mov	r1, r3
 8007198:	4a07      	ldr	r2, [pc, #28]	@ (80071b8 <MSG_Msg_TaskId_Peek+0x2c>)
 800719a:	460b      	mov	r3, r1
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	440b      	add	r3, r1
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	3306      	adds	r3, #6
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	b2db      	uxtb	r3, r3
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	20002b8d 	.word	0x20002b8d
 80071b8:	20002b50 	.word	0x20002b50

080071bc <KeyExpansion>:
*/
#define getSBoxInvert(num) (rsbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 80071bc:	b480      	push	{r7}
 80071be:	b089      	sub	sp, #36	@ 0x24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	e030      	b.n	800722e <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	441a      	add	r2, r3
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	6879      	ldr	r1, [r7, #4]
 80071da:	440b      	add	r3, r1
 80071dc:	7812      	ldrb	r2, [r2, #0]
 80071de:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	3301      	adds	r3, #1
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	441a      	add	r2, r3
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	3301      	adds	r3, #1
 80071f0:	6879      	ldr	r1, [r7, #4]
 80071f2:	440b      	add	r3, r1
 80071f4:	7812      	ldrb	r2, [r2, #0]
 80071f6:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	3302      	adds	r3, #2
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	441a      	add	r2, r3
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	009b      	lsls	r3, r3, #2
 8007206:	3302      	adds	r3, #2
 8007208:	6879      	ldr	r1, [r7, #4]
 800720a:	440b      	add	r3, r1
 800720c:	7812      	ldrb	r2, [r2, #0]
 800720e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	3303      	adds	r3, #3
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	441a      	add	r2, r3
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	3303      	adds	r3, #3
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	440b      	add	r3, r1
 8007224:	7812      	ldrb	r2, [r2, #0]
 8007226:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	3301      	adds	r3, #1
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b03      	cmp	r3, #3
 8007232:	d9cb      	bls.n	80071cc <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8007234:	2304      	movs	r3, #4
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	e081      	b.n	800733e <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 800723a:	69fb      	ldr	r3, [r7, #28]
 800723c:	3b01      	subs	r3, #1
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	4413      	add	r3, r2
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	3301      	adds	r3, #1
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	4413      	add	r3, r2
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	3302      	adds	r3, #2
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	4413      	add	r3, r2
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	3303      	adds	r3, #3
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	4413      	add	r3, r2
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	f003 0303 	and.w	r3, r3, #3
 8007276:	2b00      	cmp	r3, #0
 8007278:	d125      	bne.n	80072c6 <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800727a:	7b3b      	ldrb	r3, [r7, #12]
 800727c:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 800727e:	7b7b      	ldrb	r3, [r7, #13]
 8007280:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 8007286:	7bfb      	ldrb	r3, [r7, #15]
 8007288:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 800728e:	7b3b      	ldrb	r3, [r7, #12]
 8007290:	461a      	mov	r2, r3
 8007292:	4b30      	ldr	r3, [pc, #192]	@ (8007354 <KeyExpansion+0x198>)
 8007294:	5c9b      	ldrb	r3, [r3, r2]
 8007296:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8007298:	7b7b      	ldrb	r3, [r7, #13]
 800729a:	461a      	mov	r2, r3
 800729c:	4b2d      	ldr	r3, [pc, #180]	@ (8007354 <KeyExpansion+0x198>)
 800729e:	5c9b      	ldrb	r3, [r3, r2]
 80072a0:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	461a      	mov	r2, r3
 80072a6:	4b2b      	ldr	r3, [pc, #172]	@ (8007354 <KeyExpansion+0x198>)
 80072a8:	5c9b      	ldrb	r3, [r3, r2]
 80072aa:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	461a      	mov	r2, r3
 80072b0:	4b28      	ldr	r3, [pc, #160]	@ (8007354 <KeyExpansion+0x198>)
 80072b2:	5c9b      	ldrb	r3, [r3, r2]
 80072b4:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 80072b6:	7b3a      	ldrb	r2, [r7, #12]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	089b      	lsrs	r3, r3, #2
 80072bc:	4926      	ldr	r1, [pc, #152]	@ (8007358 <KeyExpansion+0x19c>)
 80072be:	5ccb      	ldrb	r3, [r1, r3]
 80072c0:	4053      	eors	r3, r2
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	613b      	str	r3, [r7, #16]
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	3b04      	subs	r3, #4
 80072d0:	009b      	lsls	r3, r3, #2
 80072d2:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	4413      	add	r3, r2
 80072da:	7819      	ldrb	r1, [r3, #0]
 80072dc:	7b3a      	ldrb	r2, [r7, #12]
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	4403      	add	r3, r0
 80072e4:	404a      	eors	r2, r1
 80072e6:	b2d2      	uxtb	r2, r2
 80072e8:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	3301      	adds	r3, #1
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	4413      	add	r3, r2
 80072f2:	7819      	ldrb	r1, [r3, #0]
 80072f4:	7b7a      	ldrb	r2, [r7, #13]
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	3301      	adds	r3, #1
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	4403      	add	r3, r0
 80072fe:	404a      	eors	r2, r1
 8007300:	b2d2      	uxtb	r2, r2
 8007302:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	3302      	adds	r3, #2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	4413      	add	r3, r2
 800730c:	7819      	ldrb	r1, [r3, #0]
 800730e:	7bba      	ldrb	r2, [r7, #14]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	3302      	adds	r3, #2
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	4403      	add	r3, r0
 8007318:	404a      	eors	r2, r1
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	3303      	adds	r3, #3
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	4413      	add	r3, r2
 8007326:	7819      	ldrb	r1, [r3, #0]
 8007328:	7bfa      	ldrb	r2, [r7, #15]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3303      	adds	r3, #3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4403      	add	r3, r0
 8007332:	404a      	eors	r2, r1
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	3301      	adds	r3, #1
 800733c:	61fb      	str	r3, [r7, #28]
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	2b2b      	cmp	r3, #43	@ 0x2b
 8007342:	f67f af7a 	bls.w	800723a <KeyExpansion+0x7e>
  }
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	3724      	adds	r7, #36	@ 0x24
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	0800bdf0 	.word	0x0800bdf0
 8007358:	0800bff0 	.word	0x0800bff0

0800735c <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f7ff ff26 	bl	80071bc <KeyExpansion>
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round,state_t* state,uint8_t* RoundKey)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 8007386:	2300      	movs	r3, #0
 8007388:	75fb      	strb	r3, [r7, #23]
 800738a:	e027      	b.n	80073dc <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 800738c:	2300      	movs	r3, #0
 800738e:	75bb      	strb	r3, [r7, #22]
 8007390:	e01e      	b.n	80073d0 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8007392:	7dfa      	ldrb	r2, [r7, #23]
 8007394:	7dbb      	ldrb	r3, [r7, #22]
 8007396:	68b9      	ldr	r1, [r7, #8]
 8007398:	0092      	lsls	r2, r2, #2
 800739a:	440a      	add	r2, r1
 800739c:	4413      	add	r3, r2
 800739e:	7818      	ldrb	r0, [r3, #0]
 80073a0:	7bfb      	ldrb	r3, [r7, #15]
 80073a2:	009a      	lsls	r2, r3, #2
 80073a4:	7dfb      	ldrb	r3, [r7, #23]
 80073a6:	4413      	add	r3, r2
 80073a8:	009a      	lsls	r2, r3, #2
 80073aa:	7dbb      	ldrb	r3, [r7, #22]
 80073ac:	4413      	add	r3, r2
 80073ae:	461a      	mov	r2, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4413      	add	r3, r2
 80073b4:	7819      	ldrb	r1, [r3, #0]
 80073b6:	7dfa      	ldrb	r2, [r7, #23]
 80073b8:	7dbb      	ldrb	r3, [r7, #22]
 80073ba:	4041      	eors	r1, r0
 80073bc:	b2c8      	uxtb	r0, r1
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	0092      	lsls	r2, r2, #2
 80073c2:	440a      	add	r2, r1
 80073c4:	4413      	add	r3, r2
 80073c6:	4602      	mov	r2, r0
 80073c8:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80073ca:	7dbb      	ldrb	r3, [r7, #22]
 80073cc:	3301      	adds	r3, #1
 80073ce:	75bb      	strb	r3, [r7, #22]
 80073d0:	7dbb      	ldrb	r3, [r7, #22]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d9dd      	bls.n	8007392 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	3301      	adds	r3, #1
 80073da:	75fb      	strb	r3, [r7, #23]
 80073dc:	7dfb      	ldrb	r3, [r7, #23]
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d9d4      	bls.n	800738c <AddRoundKey+0x14>
    }
  }
}
 80073e2:	bf00      	nop
 80073e4:	bf00      	nop
 80073e6:	371c      	adds	r7, #28
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
 80073fc:	e01d      	b.n	800743a <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 80073fe:	2300      	movs	r3, #0
 8007400:	73bb      	strb	r3, [r7, #14]
 8007402:	e014      	b.n	800742e <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 8007404:	7bba      	ldrb	r2, [r7, #14]
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	0092      	lsls	r2, r2, #2
 800740c:	440a      	add	r2, r1
 800740e:	4413      	add	r3, r2
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	4618      	mov	r0, r3
 8007414:	7bba      	ldrb	r2, [r7, #14]
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	490d      	ldr	r1, [pc, #52]	@ (8007450 <SubBytes+0x60>)
 800741a:	5c08      	ldrb	r0, [r1, r0]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	0092      	lsls	r2, r2, #2
 8007420:	440a      	add	r2, r1
 8007422:	4413      	add	r3, r2
 8007424:	4602      	mov	r2, r0
 8007426:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8007428:	7bbb      	ldrb	r3, [r7, #14]
 800742a:	3301      	adds	r3, #1
 800742c:	73bb      	strb	r3, [r7, #14]
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b03      	cmp	r3, #3
 8007432:	d9e7      	bls.n	8007404 <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	3301      	adds	r3, #1
 8007438:	73fb      	strb	r3, [r7, #15]
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d9de      	bls.n	80073fe <SubBytes+0xe>
    }
  }
}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	0800bdf0 	.word	0x0800bdf0

08007454 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	795a      	ldrb	r2, [r3, #5]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	7a5a      	ldrb	r2, [r3, #9]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	7b5a      	ldrb	r2, [r3, #13]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	7bfa      	ldrb	r2, [r7, #15]
 800747e:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	789b      	ldrb	r3, [r3, #2]
 8007484:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7a9a      	ldrb	r2, [r3, #10]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	7bfa      	ldrb	r2, [r7, #15]
 8007492:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	799b      	ldrb	r3, [r3, #6]
 8007498:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	7b9a      	ldrb	r2, [r3, #14]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	7bfa      	ldrb	r2, [r7, #15]
 80074a6:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	78db      	ldrb	r3, [r3, #3]
 80074ac:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	7bda      	ldrb	r2, [r3, #15]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	7ada      	ldrb	r2, [r3, #11]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	79da      	ldrb	r2, [r3, #7]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	7bfa      	ldrb	r2, [r7, #15]
 80074ca:	71da      	strb	r2, [r3, #7]
}
 80074cc:	bf00      	nop
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <xtime>:

static uint8_t xtime(uint8_t x)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80074e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074e6:	005b      	lsls	r3, r3, #1
 80074e8:	b25a      	sxtb	r2, r3
 80074ea:	79fb      	ldrb	r3, [r7, #7]
 80074ec:	09db      	lsrs	r3, r3, #7
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	b25b      	sxtb	r3, r3
 80074f2:	4619      	mov	r1, r3
 80074f4:	0049      	lsls	r1, r1, #1
 80074f6:	440b      	add	r3, r1
 80074f8:	4619      	mov	r1, r3
 80074fa:	00c8      	lsls	r0, r1, #3
 80074fc:	4619      	mov	r1, r3
 80074fe:	4603      	mov	r3, r0
 8007500:	440b      	add	r3, r1
 8007502:	b25b      	sxtb	r3, r3
 8007504:	4053      	eors	r3, r2
 8007506:	b25b      	sxtb	r3, r3
 8007508:	b2db      	uxtb	r3, r3
}
 800750a:	4618      	mov	r0, r3
 800750c:	370c      	adds	r7, #12
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
 8007522:	e0a4      	b.n	800766e <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
 8007524:	7bfa      	ldrb	r2, [r7, #15]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800752c:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 800752e:	7bfa      	ldrb	r2, [r7, #15]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8007536:	7bfb      	ldrb	r3, [r7, #15]
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	440b      	add	r3, r1
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	4053      	eors	r3, r2
 8007542:	b2da      	uxtb	r2, r3
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	789b      	ldrb	r3, [r3, #2]
 800754e:	4053      	eors	r3, r2
 8007550:	b2da      	uxtb	r2, r3
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	78db      	ldrb	r3, [r3, #3]
 800755c:	4053      	eors	r3, r2
 800755e:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 8007560:	7bfa      	ldrb	r2, [r7, #15]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	785b      	ldrb	r3, [r3, #1]
 8007572:	4053      	eors	r3, r2
 8007574:	733b      	strb	r3, [r7, #12]
 8007576:	7b3b      	ldrb	r3, [r7, #12]
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff ffad 	bl	80074d8 <xtime>
 800757e:	4603      	mov	r3, r0
 8007580:	733b      	strb	r3, [r7, #12]
 8007582:	7bfa      	ldrb	r2, [r7, #15]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 800758a:	7b3a      	ldrb	r2, [r7, #12]
 800758c:	7b7b      	ldrb	r3, [r7, #13]
 800758e:	4053      	eors	r3, r2
 8007590:	b2db      	uxtb	r3, r3
 8007592:	7bfa      	ldrb	r2, [r7, #15]
 8007594:	404b      	eors	r3, r1
 8007596:	b2d9      	uxtb	r1, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	785a      	ldrb	r2, [r3, #1]
 80075a8:	7bfb      	ldrb	r3, [r7, #15]
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	440b      	add	r3, r1
 80075b0:	789b      	ldrb	r3, [r3, #2]
 80075b2:	4053      	eors	r3, r2
 80075b4:	733b      	strb	r3, [r7, #12]
 80075b6:	7b3b      	ldrb	r3, [r7, #12]
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff ff8d 	bl	80074d8 <xtime>
 80075be:	4603      	mov	r3, r0
 80075c0:	733b      	strb	r3, [r7, #12]
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	7859      	ldrb	r1, [r3, #1]
 80075cc:	7b3a      	ldrb	r2, [r7, #12]
 80075ce:	7b7b      	ldrb	r3, [r7, #13]
 80075d0:	4053      	eors	r3, r2
 80075d2:	b2da      	uxtb	r2, r3
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	404a      	eors	r2, r1
 80075d8:	b2d1      	uxtb	r1, r2
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	460a      	mov	r2, r1
 80075e2:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	789a      	ldrb	r2, [r3, #2]
 80075ee:	7bfb      	ldrb	r3, [r7, #15]
 80075f0:	6879      	ldr	r1, [r7, #4]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	440b      	add	r3, r1
 80075f6:	78db      	ldrb	r3, [r3, #3]
 80075f8:	4053      	eors	r3, r2
 80075fa:	733b      	strb	r3, [r7, #12]
 80075fc:	7b3b      	ldrb	r3, [r7, #12]
 80075fe:	4618      	mov	r0, r3
 8007600:	f7ff ff6a 	bl	80074d8 <xtime>
 8007604:	4603      	mov	r3, r0
 8007606:	733b      	strb	r3, [r7, #12]
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	7899      	ldrb	r1, [r3, #2]
 8007612:	7b3a      	ldrb	r2, [r7, #12]
 8007614:	7b7b      	ldrb	r3, [r7, #13]
 8007616:	4053      	eors	r3, r2
 8007618:	b2da      	uxtb	r2, r3
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	404a      	eors	r2, r1
 800761e:	b2d1      	uxtb	r1, r2
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	460a      	mov	r2, r1
 8007628:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800762a:	7bfb      	ldrb	r3, [r7, #15]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	78da      	ldrb	r2, [r3, #3]
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	4053      	eors	r3, r2
 8007638:	733b      	strb	r3, [r7, #12]
 800763a:	7b3b      	ldrb	r3, [r7, #12]
 800763c:	4618      	mov	r0, r3
 800763e:	f7ff ff4b 	bl	80074d8 <xtime>
 8007642:	4603      	mov	r3, r0
 8007644:	733b      	strb	r3, [r7, #12]
 8007646:	7bfb      	ldrb	r3, [r7, #15]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	78d9      	ldrb	r1, [r3, #3]
 8007650:	7b3a      	ldrb	r2, [r7, #12]
 8007652:	7b7b      	ldrb	r3, [r7, #13]
 8007654:	4053      	eors	r3, r2
 8007656:	b2da      	uxtb	r2, r3
 8007658:	7bfb      	ldrb	r3, [r7, #15]
 800765a:	404a      	eors	r2, r1
 800765c:	b2d1      	uxtb	r1, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	460a      	mov	r2, r1
 8007666:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8007668:	7bfb      	ldrb	r3, [r7, #15]
 800766a:	3301      	adds	r3, #1
 800766c:	73fb      	strb	r3, [r7, #15]
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	2b03      	cmp	r3, #3
 8007672:	f67f af57 	bls.w	8007524 <MixColumns+0xe>
  }
}
 8007676:	bf00      	nop
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8007680:	b5b0      	push	{r4, r5, r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e33b      	b.n	8007d06 <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8007696:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	789b      	ldrb	r3, [r3, #2]
 80076ae:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 80076b0:	687a      	ldr	r2, [r7, #4]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	78db      	ldrb	r3, [r3, #3]
 80076ba:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 80076bc:	7afb      	ldrb	r3, [r7, #11]
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff ff0a 	bl	80074d8 <xtime>
 80076c4:	4603      	mov	r3, r0
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff ff06 	bl	80074d8 <xtime>
 80076cc:	4603      	mov	r3, r0
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff ff02 	bl	80074d8 <xtime>
 80076d4:	4603      	mov	r3, r0
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff fefe 	bl	80074d8 <xtime>
 80076dc:	7abb      	ldrb	r3, [r7, #10]
 80076de:	4618      	mov	r0, r3
 80076e0:	f7ff fefa 	bl	80074d8 <xtime>
 80076e4:	4603      	mov	r3, r0
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff fef6 	bl	80074d8 <xtime>
 80076ec:	7abb      	ldrb	r3, [r7, #10]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7ff fef2 	bl	80074d8 <xtime>
 80076f4:	4603      	mov	r3, r0
 80076f6:	4618      	mov	r0, r3
 80076f8:	f7ff feee 	bl	80074d8 <xtime>
 80076fc:	4603      	mov	r3, r0
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff feea 	bl	80074d8 <xtime>
 8007704:	4603      	mov	r3, r0
 8007706:	4618      	mov	r0, r3
 8007708:	f7ff fee6 	bl	80074d8 <xtime>
 800770c:	7a7b      	ldrb	r3, [r7, #9]
 800770e:	4618      	mov	r0, r3
 8007710:	f7ff fee2 	bl	80074d8 <xtime>
 8007714:	7a7b      	ldrb	r3, [r7, #9]
 8007716:	4618      	mov	r0, r3
 8007718:	f7ff fede 	bl	80074d8 <xtime>
 800771c:	4603      	mov	r3, r0
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff feda 	bl	80074d8 <xtime>
 8007724:	4603      	mov	r3, r0
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fed6 	bl	80074d8 <xtime>
 800772c:	4603      	mov	r3, r0
 800772e:	4618      	mov	r0, r3
 8007730:	f7ff fed2 	bl	80074d8 <xtime>
 8007734:	7a3b      	ldrb	r3, [r7, #8]
 8007736:	4618      	mov	r0, r3
 8007738:	f7ff fece 	bl	80074d8 <xtime>
 800773c:	7a3b      	ldrb	r3, [r7, #8]
 800773e:	4618      	mov	r0, r3
 8007740:	f7ff feca 	bl	80074d8 <xtime>
 8007744:	4603      	mov	r3, r0
 8007746:	4618      	mov	r0, r3
 8007748:	f7ff fec6 	bl	80074d8 <xtime>
 800774c:	7a3b      	ldrb	r3, [r7, #8]
 800774e:	4618      	mov	r0, r3
 8007750:	f7ff fec2 	bl	80074d8 <xtime>
 8007754:	4603      	mov	r3, r0
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff febe 	bl	80074d8 <xtime>
 800775c:	4603      	mov	r3, r0
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff feba 	bl	80074d8 <xtime>
 8007764:	4603      	mov	r3, r0
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff feb6 	bl	80074d8 <xtime>
 800776c:	7afb      	ldrb	r3, [r7, #11]
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff feb2 	bl	80074d8 <xtime>
 8007774:	4603      	mov	r3, r0
 8007776:	461c      	mov	r4, r3
 8007778:	7afb      	ldrb	r3, [r7, #11]
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff feac 	bl	80074d8 <xtime>
 8007780:	4603      	mov	r3, r0
 8007782:	4618      	mov	r0, r3
 8007784:	f7ff fea8 	bl	80074d8 <xtime>
 8007788:	4603      	mov	r3, r0
 800778a:	4063      	eors	r3, r4
 800778c:	b2dc      	uxtb	r4, r3
 800778e:	7afb      	ldrb	r3, [r7, #11]
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff fea1 	bl	80074d8 <xtime>
 8007796:	4603      	mov	r3, r0
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff fe9d 	bl	80074d8 <xtime>
 800779e:	4603      	mov	r3, r0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff fe99 	bl	80074d8 <xtime>
 80077a6:	4603      	mov	r3, r0
 80077a8:	4063      	eors	r3, r4
 80077aa:	b2dc      	uxtb	r4, r3
 80077ac:	7abb      	ldrb	r3, [r7, #10]
 80077ae:	4618      	mov	r0, r3
 80077b0:	f7ff fe92 	bl	80074d8 <xtime>
 80077b4:	4603      	mov	r3, r0
 80077b6:	461a      	mov	r2, r3
 80077b8:	7abb      	ldrb	r3, [r7, #10]
 80077ba:	4053      	eors	r3, r2
 80077bc:	b2dd      	uxtb	r5, r3
 80077be:	7abb      	ldrb	r3, [r7, #10]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f7ff fe89 	bl	80074d8 <xtime>
 80077c6:	4603      	mov	r3, r0
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff fe85 	bl	80074d8 <xtime>
 80077ce:	4603      	mov	r3, r0
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7ff fe81 	bl	80074d8 <xtime>
 80077d6:	4603      	mov	r3, r0
 80077d8:	406b      	eors	r3, r5
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	4063      	eors	r3, r4
 80077de:	b2dc      	uxtb	r4, r3
 80077e0:	7a7b      	ldrb	r3, [r7, #9]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff fe78 	bl	80074d8 <xtime>
 80077e8:	4603      	mov	r3, r0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff fe74 	bl	80074d8 <xtime>
 80077f0:	4603      	mov	r3, r0
 80077f2:	461a      	mov	r2, r3
 80077f4:	7a7b      	ldrb	r3, [r7, #9]
 80077f6:	4053      	eors	r3, r2
 80077f8:	b2dd      	uxtb	r5, r3
 80077fa:	7a7b      	ldrb	r3, [r7, #9]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f7ff fe6b 	bl	80074d8 <xtime>
 8007802:	4603      	mov	r3, r0
 8007804:	4618      	mov	r0, r3
 8007806:	f7ff fe67 	bl	80074d8 <xtime>
 800780a:	4603      	mov	r3, r0
 800780c:	4618      	mov	r0, r3
 800780e:	f7ff fe63 	bl	80074d8 <xtime>
 8007812:	4603      	mov	r3, r0
 8007814:	406b      	eors	r3, r5
 8007816:	b2db      	uxtb	r3, r3
 8007818:	4063      	eors	r3, r4
 800781a:	b2dc      	uxtb	r4, r3
 800781c:	7a3b      	ldrb	r3, [r7, #8]
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff fe5a 	bl	80074d8 <xtime>
 8007824:	4603      	mov	r3, r0
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff fe56 	bl	80074d8 <xtime>
 800782c:	4603      	mov	r3, r0
 800782e:	4618      	mov	r0, r3
 8007830:	f7ff fe52 	bl	80074d8 <xtime>
 8007834:	4603      	mov	r3, r0
 8007836:	461a      	mov	r2, r3
 8007838:	7a3b      	ldrb	r3, [r7, #8]
 800783a:	4053      	eors	r3, r2
 800783c:	b2db      	uxtb	r3, r3
 800783e:	4063      	eors	r3, r4
 8007840:	b2d9      	uxtb	r1, r3
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 800784a:	7afb      	ldrb	r3, [r7, #11]
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fe43 	bl	80074d8 <xtime>
 8007852:	7afb      	ldrb	r3, [r7, #11]
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff fe3f 	bl	80074d8 <xtime>
 800785a:	4603      	mov	r3, r0
 800785c:	4618      	mov	r0, r3
 800785e:	f7ff fe3b 	bl	80074d8 <xtime>
 8007862:	7afb      	ldrb	r3, [r7, #11]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff fe37 	bl	80074d8 <xtime>
 800786a:	4603      	mov	r3, r0
 800786c:	4618      	mov	r0, r3
 800786e:	f7ff fe33 	bl	80074d8 <xtime>
 8007872:	4603      	mov	r3, r0
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff fe2f 	bl	80074d8 <xtime>
 800787a:	4603      	mov	r3, r0
 800787c:	4618      	mov	r0, r3
 800787e:	f7ff fe2b 	bl	80074d8 <xtime>
 8007882:	7abb      	ldrb	r3, [r7, #10]
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff fe27 	bl	80074d8 <xtime>
 800788a:	4603      	mov	r3, r0
 800788c:	4618      	mov	r0, r3
 800788e:	f7ff fe23 	bl	80074d8 <xtime>
 8007892:	4603      	mov	r3, r0
 8007894:	4618      	mov	r0, r3
 8007896:	f7ff fe1f 	bl	80074d8 <xtime>
 800789a:	4603      	mov	r3, r0
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff fe1b 	bl	80074d8 <xtime>
 80078a2:	7a7b      	ldrb	r3, [r7, #9]
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff fe17 	bl	80074d8 <xtime>
 80078aa:	4603      	mov	r3, r0
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fe13 	bl	80074d8 <xtime>
 80078b2:	7a7b      	ldrb	r3, [r7, #9]
 80078b4:	4618      	mov	r0, r3
 80078b6:	f7ff fe0f 	bl	80074d8 <xtime>
 80078ba:	4603      	mov	r3, r0
 80078bc:	4618      	mov	r0, r3
 80078be:	f7ff fe0b 	bl	80074d8 <xtime>
 80078c2:	4603      	mov	r3, r0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7ff fe07 	bl	80074d8 <xtime>
 80078ca:	4603      	mov	r3, r0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7ff fe03 	bl	80074d8 <xtime>
 80078d2:	7a3b      	ldrb	r3, [r7, #8]
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff fdff 	bl	80074d8 <xtime>
 80078da:	7a3b      	ldrb	r3, [r7, #8]
 80078dc:	4618      	mov	r0, r3
 80078de:	f7ff fdfb 	bl	80074d8 <xtime>
 80078e2:	4603      	mov	r3, r0
 80078e4:	4618      	mov	r0, r3
 80078e6:	f7ff fdf7 	bl	80074d8 <xtime>
 80078ea:	4603      	mov	r3, r0
 80078ec:	4618      	mov	r0, r3
 80078ee:	f7ff fdf3 	bl	80074d8 <xtime>
 80078f2:	4603      	mov	r3, r0
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7ff fdef 	bl	80074d8 <xtime>
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7ff fdeb 	bl	80074d8 <xtime>
 8007902:	4603      	mov	r3, r0
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff fde7 	bl	80074d8 <xtime>
 800790a:	4603      	mov	r3, r0
 800790c:	4618      	mov	r0, r3
 800790e:	f7ff fde3 	bl	80074d8 <xtime>
 8007912:	4603      	mov	r3, r0
 8007914:	461a      	mov	r2, r3
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	4053      	eors	r3, r2
 800791a:	b2dc      	uxtb	r4, r3
 800791c:	7abb      	ldrb	r3, [r7, #10]
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff fdda 	bl	80074d8 <xtime>
 8007924:	4603      	mov	r3, r0
 8007926:	461d      	mov	r5, r3
 8007928:	7abb      	ldrb	r3, [r7, #10]
 800792a:	4618      	mov	r0, r3
 800792c:	f7ff fdd4 	bl	80074d8 <xtime>
 8007930:	4603      	mov	r3, r0
 8007932:	4618      	mov	r0, r3
 8007934:	f7ff fdd0 	bl	80074d8 <xtime>
 8007938:	4603      	mov	r3, r0
 800793a:	406b      	eors	r3, r5
 800793c:	b2dd      	uxtb	r5, r3
 800793e:	7abb      	ldrb	r3, [r7, #10]
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff fdc9 	bl	80074d8 <xtime>
 8007946:	4603      	mov	r3, r0
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff fdc5 	bl	80074d8 <xtime>
 800794e:	4603      	mov	r3, r0
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff fdc1 	bl	80074d8 <xtime>
 8007956:	4603      	mov	r3, r0
 8007958:	406b      	eors	r3, r5
 800795a:	b2db      	uxtb	r3, r3
 800795c:	4063      	eors	r3, r4
 800795e:	b2dc      	uxtb	r4, r3
 8007960:	7a7b      	ldrb	r3, [r7, #9]
 8007962:	4618      	mov	r0, r3
 8007964:	f7ff fdb8 	bl	80074d8 <xtime>
 8007968:	4603      	mov	r3, r0
 800796a:	461a      	mov	r2, r3
 800796c:	7a7b      	ldrb	r3, [r7, #9]
 800796e:	4053      	eors	r3, r2
 8007970:	b2dd      	uxtb	r5, r3
 8007972:	7a7b      	ldrb	r3, [r7, #9]
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff fdaf 	bl	80074d8 <xtime>
 800797a:	4603      	mov	r3, r0
 800797c:	4618      	mov	r0, r3
 800797e:	f7ff fdab 	bl	80074d8 <xtime>
 8007982:	4603      	mov	r3, r0
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff fda7 	bl	80074d8 <xtime>
 800798a:	4603      	mov	r3, r0
 800798c:	406b      	eors	r3, r5
 800798e:	b2db      	uxtb	r3, r3
 8007990:	4063      	eors	r3, r4
 8007992:	b2dc      	uxtb	r4, r3
 8007994:	7a3b      	ldrb	r3, [r7, #8]
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff fd9e 	bl	80074d8 <xtime>
 800799c:	4603      	mov	r3, r0
 800799e:	4618      	mov	r0, r3
 80079a0:	f7ff fd9a 	bl	80074d8 <xtime>
 80079a4:	4603      	mov	r3, r0
 80079a6:	461a      	mov	r2, r3
 80079a8:	7a3b      	ldrb	r3, [r7, #8]
 80079aa:	4053      	eors	r3, r2
 80079ac:	b2dd      	uxtb	r5, r3
 80079ae:	7a3b      	ldrb	r3, [r7, #8]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff fd91 	bl	80074d8 <xtime>
 80079b6:	4603      	mov	r3, r0
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff fd8d 	bl	80074d8 <xtime>
 80079be:	4603      	mov	r3, r0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f7ff fd89 	bl	80074d8 <xtime>
 80079c6:	4603      	mov	r3, r0
 80079c8:	406b      	eors	r3, r5
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	4063      	eors	r3, r4
 80079ce:	b2d9      	uxtb	r1, r3
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	460a      	mov	r2, r1
 80079da:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 80079dc:	7afb      	ldrb	r3, [r7, #11]
 80079de:	4618      	mov	r0, r3
 80079e0:	f7ff fd7a 	bl	80074d8 <xtime>
 80079e4:	7afb      	ldrb	r3, [r7, #11]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fd76 	bl	80074d8 <xtime>
 80079ec:	4603      	mov	r3, r0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7ff fd72 	bl	80074d8 <xtime>
 80079f4:	4603      	mov	r3, r0
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff fd6e 	bl	80074d8 <xtime>
 80079fc:	4603      	mov	r3, r0
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff fd6a 	bl	80074d8 <xtime>
 8007a04:	7abb      	ldrb	r3, [r7, #10]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fd66 	bl	80074d8 <xtime>
 8007a0c:	7abb      	ldrb	r3, [r7, #10]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7ff fd62 	bl	80074d8 <xtime>
 8007a14:	4603      	mov	r3, r0
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff fd5e 	bl	80074d8 <xtime>
 8007a1c:	7abb      	ldrb	r3, [r7, #10]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7ff fd5a 	bl	80074d8 <xtime>
 8007a24:	4603      	mov	r3, r0
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7ff fd56 	bl	80074d8 <xtime>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff fd52 	bl	80074d8 <xtime>
 8007a34:	4603      	mov	r3, r0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fd4e 	bl	80074d8 <xtime>
 8007a3c:	7a7b      	ldrb	r3, [r7, #9]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fd4a 	bl	80074d8 <xtime>
 8007a44:	4603      	mov	r3, r0
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7ff fd46 	bl	80074d8 <xtime>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff fd42 	bl	80074d8 <xtime>
 8007a54:	4603      	mov	r3, r0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f7ff fd3e 	bl	80074d8 <xtime>
 8007a5c:	7a3b      	ldrb	r3, [r7, #8]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7ff fd3a 	bl	80074d8 <xtime>
 8007a64:	4603      	mov	r3, r0
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fd36 	bl	80074d8 <xtime>
 8007a6c:	7a3b      	ldrb	r3, [r7, #8]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fd32 	bl	80074d8 <xtime>
 8007a74:	4603      	mov	r3, r0
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fd2e 	bl	80074d8 <xtime>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fd2a 	bl	80074d8 <xtime>
 8007a84:	4603      	mov	r3, r0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff fd26 	bl	80074d8 <xtime>
 8007a8c:	7afb      	ldrb	r3, [r7, #11]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff fd22 	bl	80074d8 <xtime>
 8007a94:	4603      	mov	r3, r0
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7ff fd1e 	bl	80074d8 <xtime>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	7afb      	ldrb	r3, [r7, #11]
 8007aa2:	4053      	eors	r3, r2
 8007aa4:	b2dc      	uxtb	r4, r3
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff fd15 	bl	80074d8 <xtime>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff fd11 	bl	80074d8 <xtime>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f7ff fd0d 	bl	80074d8 <xtime>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	4063      	eors	r3, r4
 8007ac2:	b2dc      	uxtb	r4, r3
 8007ac4:	7abb      	ldrb	r3, [r7, #10]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7ff fd06 	bl	80074d8 <xtime>
 8007acc:	4603      	mov	r3, r0
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff fd02 	bl	80074d8 <xtime>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fcfe 	bl	80074d8 <xtime>
 8007adc:	4603      	mov	r3, r0
 8007ade:	461a      	mov	r2, r3
 8007ae0:	7abb      	ldrb	r3, [r7, #10]
 8007ae2:	4053      	eors	r3, r2
 8007ae4:	b2db      	uxtb	r3, r3
 8007ae6:	4063      	eors	r3, r4
 8007ae8:	b2dc      	uxtb	r4, r3
 8007aea:	7a7b      	ldrb	r3, [r7, #9]
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7ff fcf3 	bl	80074d8 <xtime>
 8007af2:	4603      	mov	r3, r0
 8007af4:	461d      	mov	r5, r3
 8007af6:	7a7b      	ldrb	r3, [r7, #9]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff fced 	bl	80074d8 <xtime>
 8007afe:	4603      	mov	r3, r0
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff fce9 	bl	80074d8 <xtime>
 8007b06:	4603      	mov	r3, r0
 8007b08:	406b      	eors	r3, r5
 8007b0a:	b2dd      	uxtb	r5, r3
 8007b0c:	7a7b      	ldrb	r3, [r7, #9]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff fce2 	bl	80074d8 <xtime>
 8007b14:	4603      	mov	r3, r0
 8007b16:	4618      	mov	r0, r3
 8007b18:	f7ff fcde 	bl	80074d8 <xtime>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7ff fcda 	bl	80074d8 <xtime>
 8007b24:	4603      	mov	r3, r0
 8007b26:	406b      	eors	r3, r5
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	4063      	eors	r3, r4
 8007b2c:	b2dc      	uxtb	r4, r3
 8007b2e:	7a3b      	ldrb	r3, [r7, #8]
 8007b30:	4618      	mov	r0, r3
 8007b32:	f7ff fcd1 	bl	80074d8 <xtime>
 8007b36:	4603      	mov	r3, r0
 8007b38:	461a      	mov	r2, r3
 8007b3a:	7a3b      	ldrb	r3, [r7, #8]
 8007b3c:	4053      	eors	r3, r2
 8007b3e:	b2dd      	uxtb	r5, r3
 8007b40:	7a3b      	ldrb	r3, [r7, #8]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff fcc8 	bl	80074d8 <xtime>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7ff fcc4 	bl	80074d8 <xtime>
 8007b50:	4603      	mov	r3, r0
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7ff fcc0 	bl	80074d8 <xtime>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	406b      	eors	r3, r5
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	4063      	eors	r3, r4
 8007b60:	b2d9      	uxtb	r1, r3
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	460a      	mov	r2, r1
 8007b6c:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff fcb1 	bl	80074d8 <xtime>
 8007b76:	4603      	mov	r3, r0
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7ff fcad 	bl	80074d8 <xtime>
 8007b7e:	7afb      	ldrb	r3, [r7, #11]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7ff fca9 	bl	80074d8 <xtime>
 8007b86:	4603      	mov	r3, r0
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fca5 	bl	80074d8 <xtime>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff fca1 	bl	80074d8 <xtime>
 8007b96:	4603      	mov	r3, r0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fc9d 	bl	80074d8 <xtime>
 8007b9e:	7abb      	ldrb	r3, [r7, #10]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7ff fc99 	bl	80074d8 <xtime>
 8007ba6:	7abb      	ldrb	r3, [r7, #10]
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff fc95 	bl	80074d8 <xtime>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7ff fc91 	bl	80074d8 <xtime>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7ff fc8d 	bl	80074d8 <xtime>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7ff fc89 	bl	80074d8 <xtime>
 8007bc6:	7a7b      	ldrb	r3, [r7, #9]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7ff fc85 	bl	80074d8 <xtime>
 8007bce:	7a7b      	ldrb	r3, [r7, #9]
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff fc81 	bl	80074d8 <xtime>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff fc7d 	bl	80074d8 <xtime>
 8007bde:	7a7b      	ldrb	r3, [r7, #9]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7ff fc79 	bl	80074d8 <xtime>
 8007be6:	4603      	mov	r3, r0
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7ff fc75 	bl	80074d8 <xtime>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff fc71 	bl	80074d8 <xtime>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff fc6d 	bl	80074d8 <xtime>
 8007bfe:	7a3b      	ldrb	r3, [r7, #8]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7ff fc69 	bl	80074d8 <xtime>
 8007c06:	4603      	mov	r3, r0
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7ff fc65 	bl	80074d8 <xtime>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4618      	mov	r0, r3
 8007c12:	f7ff fc61 	bl	80074d8 <xtime>
 8007c16:	4603      	mov	r3, r0
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7ff fc5d 	bl	80074d8 <xtime>
 8007c1e:	7afb      	ldrb	r3, [r7, #11]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff fc59 	bl	80074d8 <xtime>
 8007c26:	4603      	mov	r3, r0
 8007c28:	461a      	mov	r2, r3
 8007c2a:	7afb      	ldrb	r3, [r7, #11]
 8007c2c:	4053      	eors	r3, r2
 8007c2e:	b2dc      	uxtb	r4, r3
 8007c30:	7afb      	ldrb	r3, [r7, #11]
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7ff fc50 	bl	80074d8 <xtime>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff fc4c 	bl	80074d8 <xtime>
 8007c40:	4603      	mov	r3, r0
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7ff fc48 	bl	80074d8 <xtime>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	4063      	eors	r3, r4
 8007c4c:	b2dc      	uxtb	r4, r3
 8007c4e:	7abb      	ldrb	r3, [r7, #10]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7ff fc41 	bl	80074d8 <xtime>
 8007c56:	4603      	mov	r3, r0
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fc3d 	bl	80074d8 <xtime>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	461a      	mov	r2, r3
 8007c62:	7abb      	ldrb	r3, [r7, #10]
 8007c64:	4053      	eors	r3, r2
 8007c66:	b2dd      	uxtb	r5, r3
 8007c68:	7abb      	ldrb	r3, [r7, #10]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fc34 	bl	80074d8 <xtime>
 8007c70:	4603      	mov	r3, r0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7ff fc30 	bl	80074d8 <xtime>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7ff fc2c 	bl	80074d8 <xtime>
 8007c80:	4603      	mov	r3, r0
 8007c82:	406b      	eors	r3, r5
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	4063      	eors	r3, r4
 8007c88:	b2dc      	uxtb	r4, r3
 8007c8a:	7a7b      	ldrb	r3, [r7, #9]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fc23 	bl	80074d8 <xtime>
 8007c92:	4603      	mov	r3, r0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff fc1f 	bl	80074d8 <xtime>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fc1b 	bl	80074d8 <xtime>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	7a7b      	ldrb	r3, [r7, #9]
 8007ca8:	4053      	eors	r3, r2
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	4063      	eors	r3, r4
 8007cae:	b2dc      	uxtb	r4, r3
 8007cb0:	7a3b      	ldrb	r3, [r7, #8]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fc10 	bl	80074d8 <xtime>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	461d      	mov	r5, r3
 8007cbc:	7a3b      	ldrb	r3, [r7, #8]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fc0a 	bl	80074d8 <xtime>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fc06 	bl	80074d8 <xtime>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	406b      	eors	r3, r5
 8007cd0:	b2dd      	uxtb	r5, r3
 8007cd2:	7a3b      	ldrb	r3, [r7, #8]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7ff fbff 	bl	80074d8 <xtime>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7ff fbfb 	bl	80074d8 <xtime>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff fbf7 	bl	80074d8 <xtime>
 8007cea:	4603      	mov	r3, r0
 8007cec:	406b      	eors	r3, r5
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	4063      	eors	r3, r4
 8007cf2:	b2d9      	uxtb	r1, r3
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	009b      	lsls	r3, r3, #2
 8007cfa:	4413      	add	r3, r2
 8007cfc:	460a      	mov	r2, r1
 8007cfe:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b03      	cmp	r3, #3
 8007d0a:	f77f acc0 	ble.w	800768e <InvMixColumns+0xe>
  }
}
 8007d0e:	bf00      	nop
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bdb0      	pop	{r4, r5, r7, pc}

08007d18 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
 8007d24:	e01d      	b.n	8007d62 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8007d26:	2300      	movs	r3, #0
 8007d28:	73bb      	strb	r3, [r7, #14]
 8007d2a:	e014      	b.n	8007d56 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8007d2c:	7bba      	ldrb	r2, [r7, #14]
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	6879      	ldr	r1, [r7, #4]
 8007d32:	0092      	lsls	r2, r2, #2
 8007d34:	440a      	add	r2, r1
 8007d36:	4413      	add	r3, r2
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	7bba      	ldrb	r2, [r7, #14]
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	490d      	ldr	r1, [pc, #52]	@ (8007d78 <InvSubBytes+0x60>)
 8007d42:	5c08      	ldrb	r0, [r1, r0]
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	0092      	lsls	r2, r2, #2
 8007d48:	440a      	add	r2, r1
 8007d4a:	4413      	add	r3, r2
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	3301      	adds	r3, #1
 8007d54:	73bb      	strb	r3, [r7, #14]
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d9e7      	bls.n	8007d2c <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	73fb      	strb	r3, [r7, #15]
 8007d62:	7bfb      	ldrb	r3, [r7, #15]
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d9de      	bls.n	8007d26 <InvSubBytes+0xe>
    }
  }
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	3714      	adds	r7, #20
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	0800bef0 	.word	0x0800bef0

08007d7c <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	7b5b      	ldrb	r3, [r3, #13]
 8007d88:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	7a5a      	ldrb	r2, [r3, #9]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	795a      	ldrb	r2, [r3, #5]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	785a      	ldrb	r2, [r3, #1]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	7bfa      	ldrb	r2, [r7, #15]
 8007da6:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	789b      	ldrb	r3, [r3, #2]
 8007dac:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	7a9a      	ldrb	r2, [r3, #10]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	7bfa      	ldrb	r2, [r7, #15]
 8007dba:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	799b      	ldrb	r3, [r3, #6]
 8007dc0:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7b9a      	ldrb	r2, [r3, #14]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	7bfa      	ldrb	r2, [r7, #15]
 8007dce:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	78db      	ldrb	r3, [r3, #3]
 8007dd4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	79da      	ldrb	r2, [r3, #7]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	7ada      	ldrb	r2, [r3, #11]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	7bda      	ldrb	r2, [r3, #15]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	7bfa      	ldrb	r2, [r7, #15]
 8007df2:	73da      	strb	r2, [r3, #15]
}
 8007df4:	bf00      	nop
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <Cipher>:


// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, uint8_t* RoundKey)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey); 
 8007e0e:	683a      	ldr	r2, [r7, #0]
 8007e10:	6879      	ldr	r1, [r7, #4]
 8007e12:	2000      	movs	r0, #0
 8007e14:	f7ff fab0 	bl	8007378 <AddRoundKey>
  
  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = 1; round < Nr; ++round)
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]
 8007e1c:	e011      	b.n	8007e42 <Cipher+0x42>
  {
    SubBytes(state);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fae6 	bl	80073f0 <SubBytes>
    ShiftRows(state);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff fb15 	bl	8007454 <ShiftRows>
    MixColumns(state);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff fb73 	bl	8007516 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	6879      	ldr	r1, [r7, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff fa9e 	bl	8007378 <AddRoundKey>
  for (round = 1; round < Nr; ++round)
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	73fb      	strb	r3, [r7, #15]
 8007e42:	7bfb      	ldrb	r3, [r7, #15]
 8007e44:	2b09      	cmp	r3, #9
 8007e46:	d9ea      	bls.n	8007e1e <Cipher+0x1e>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  SubBytes(state);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7ff fad1 	bl	80073f0 <SubBytes>
  ShiftRows(state);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f7ff fb00 	bl	8007454 <ShiftRows>
  AddRoundKey(Nr, state, RoundKey);
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	200a      	movs	r0, #10
 8007e5a:	f7ff fa8d 	bl	8007378 <AddRoundKey>
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <InvCipher>:

static void InvCipher(state_t* state,uint8_t* RoundKey)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b084      	sub	sp, #16
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8007e70:	2300      	movs	r3, #0
 8007e72:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey); 
 8007e74:	683a      	ldr	r2, [r7, #0]
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	200a      	movs	r0, #10
 8007e7a:	f7ff fa7d 	bl	8007378 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr-1 rounds are executed in the loop below.
  for (round = (Nr - 1); round > 0; --round)
 8007e7e:	2309      	movs	r3, #9
 8007e80:	73fb      	strb	r3, [r7, #15]
 8007e82:	e011      	b.n	8007ea8 <InvCipher+0x42>
  {
    InvShiftRows(state);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff79 	bl	8007d7c <InvShiftRows>
    InvSubBytes(state);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff ff44 	bl	8007d18 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	6879      	ldr	r1, [r7, #4]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fa6e 	bl	8007378 <AddRoundKey>
    InvMixColumns(state);
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f7ff fbef 	bl	8007680 <InvMixColumns>
  for (round = (Nr - 1); round > 0; --round)
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
 8007ea4:	3b01      	subs	r3, #1
 8007ea6:	73fb      	strb	r3, [r7, #15]
 8007ea8:	7bfb      	ldrb	r3, [r7, #15]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1ea      	bne.n	8007e84 <InvCipher+0x1e>
  }
  
  // The last round is given below.
  // The MixColumns function is not here in the last round.
  InvShiftRows(state);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7ff ff64 	bl	8007d7c <InvShiftRows>
  InvSubBytes(state);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f7ff ff2f 	bl	8007d18 <InvSubBytes>
  AddRoundKey(0, state, RoundKey);
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	6879      	ldr	r1, [r7, #4]
 8007ebe:	2000      	movs	r0, #0
 8007ec0:	f7ff fa5a 	bl	8007378 <AddRoundKey>
}
 8007ec4:	bf00      	nop
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(struct AES_ctx *ctx, uint8_t* buf)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4619      	mov	r1, r3
 8007eda:	6838      	ldr	r0, [r7, #0]
 8007edc:	f7ff ff90 	bl	8007e00 <Cipher>
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <AES_ECB_decrypt>:

void AES_ECB_decrypt(struct AES_ctx* ctx, uint8_t* buf)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	6838      	ldr	r0, [r7, #0]
 8007ef8:	f7ff ffb5 	bl	8007e66 <InvCipher>
}
 8007efc:	bf00      	nop
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <SECURE_KeyInit>:
	//uint8_t _hexstring[256];
	//DBG_Print("SECURE_KeyChange _keyNo:%d _newKey:%s.\r\n", _keyNo, UTILI_BytesToHexString(_newKey, _newKeySize, _hexstring));
}

void SECURE_KeyInit(uint8_t _keyNo)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b082      	sub	sp, #8
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
	if((ucCurrKeyNo!= _keyNo)|| (0== bSecureElemInitialized))
 8007f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f44 <SECURE_KeyInit+0x40>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	79fa      	ldrb	r2, [r7, #7]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d103      	bne.n	8007f20 <SECURE_KeyInit+0x1c>
 8007f18:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <SECURE_KeyInit+0x44>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10d      	bne.n	8007f3c <SECURE_KeyInit+0x38>
	{
		ucCurrKeyNo= _keyNo;
 8007f20:	4a08      	ldr	r2, [pc, #32]	@ (8007f44 <SECURE_KeyInit+0x40>)
 8007f22:	79fb      	ldrb	r3, [r7, #7]
 8007f24:	7013      	strb	r3, [r2, #0]
	    AES_init_ctx(&ctx, pucV[_keyNo]);
 8007f26:	79fb      	ldrb	r3, [r7, #7]
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	4a08      	ldr	r2, [pc, #32]	@ (8007f4c <SECURE_KeyInit+0x48>)
 8007f2c:	4413      	add	r3, r2
 8007f2e:	4619      	mov	r1, r3
 8007f30:	4807      	ldr	r0, [pc, #28]	@ (8007f50 <SECURE_KeyInit+0x4c>)
 8007f32:	f7ff fa13 	bl	800735c <AES_init_ctx>
	    bSecureElemInitialized= 1;
 8007f36:	4b04      	ldr	r3, [pc, #16]	@ (8007f48 <SECURE_KeyInit+0x44>)
 8007f38:	2201      	movs	r2, #1
 8007f3a:	701a      	strb	r2, [r3, #0]

		//DBG_Print("SECURE_KeyInit _keyNo:%d _key:%s.\r\n", _keyNo, UTILI_BytesToHexString(pucV[_keyNo], 16, NULL));
	}
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20002c91 	.word	0x20002c91
 8007f48:	20002c90 	.word	0x20002c90
 8007f4c:	20002b90 	.word	0x20002b90
 8007f50:	20002bd0 	.word	0x20002bd0

08007f54 <SECURE_ECB_Encrypt>:

void SECURE_ECB_Encrypt(uint8_t* _buffer, uint16_t _bufferLen)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	807b      	strh	r3, [r7, #2]
	SECURE_KeyInit(1);
 8007f60:	2001      	movs	r0, #1
 8007f62:	f7ff ffcf 	bl	8007f04 <SECURE_KeyInit>

    for(int i= 0; i< (_bufferLen/ 16); i++)
 8007f66:	2300      	movs	r3, #0
 8007f68:	60fb      	str	r3, [r7, #12]
 8007f6a:	e00b      	b.n	8007f84 <SECURE_ECB_Encrypt+0x30>
    {
    	AES_ECB_encrypt(&ctx, _buffer + (i * 16));
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	461a      	mov	r2, r3
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4413      	add	r3, r2
 8007f76:	4619      	mov	r1, r3
 8007f78:	4808      	ldr	r0, [pc, #32]	@ (8007f9c <SECURE_ECB_Encrypt+0x48>)
 8007f7a:	f7ff ffa7 	bl	8007ecc <AES_ECB_encrypt>
    for(int i= 0; i< (_bufferLen/ 16); i++)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	3301      	adds	r3, #1
 8007f82:	60fb      	str	r3, [r7, #12]
 8007f84:	887b      	ldrh	r3, [r7, #2]
 8007f86:	091b      	lsrs	r3, r3, #4
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	dbec      	blt.n	8007f6c <SECURE_ECB_Encrypt+0x18>
    }
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20002bd0 	.word	0x20002bd0

08007fa0 <SECURE_ECB_Decrypt>:

void SECURE_ECB_Decrypt(uint8_t *_buffer, uint32_t _bufferLen)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
	SECURE_KeyInit(1);
 8007faa:	2001      	movs	r0, #1
 8007fac:	f7ff ffaa 	bl	8007f04 <SECURE_KeyInit>

    for(int i= 0; i< (_bufferLen/ 16); i++)
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	e00b      	b.n	8007fce <SECURE_ECB_Decrypt+0x2e>
    {
    	AES_ECB_decrypt(&ctx, _buffer + (i * 16));
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4808      	ldr	r0, [pc, #32]	@ (8007fe4 <SECURE_ECB_Decrypt+0x44>)
 8007fc4:	f7ff ff90 	bl	8007ee8 <AES_ECB_decrypt>
    for(int i= 0; i< (_bufferLen/ 16); i++)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	091a      	lsrs	r2, r3, #4
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d8ee      	bhi.n	8007fb6 <SECURE_ECB_Decrypt+0x16>
    }
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	20002bd0 	.word	0x20002bd0

08007fe8 <SYS_GetTimestamp_ms>:
	    }
	}
}

uint64_t SYS_GetTimestamp_ms()
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	af00      	add	r7, sp, #0
	return SYSCLK_GetTimestamp_ms();
 8007fec:	f000 f84a 	bl	8008084 <SYSCLK_GetTimestamp_ms>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	460b      	mov	r3, r1
}
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <SYS_GetTimestamp_s>:

uint32_t SYS_GetTimestamp_s()
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	af00      	add	r7, sp, #0
	return SYSCLK_GetTimestamp_s();
 8007ffe:	f000 f84f 	bl	80080a0 <SYSCLK_GetTimestamp_s>
 8008002:	4603      	mov	r3, r0
}
 8008004:	4618      	mov	r0, r3
 8008006:	bd80      	pop	{r7, pc}

08008008 <SYS_IsAwake>:
{
	return (SYSCLK_GetTimestamp_s()- (config.system.utc* 15* 60));
}

bool SYS_IsAwake(SYS_TaskId_t _taskId)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b082      	sub	sp, #8
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	71fb      	strb	r3, [r7, #7]
	return SYSSLEEP_IsAwake(_taskId);
 8008012:	79fb      	ldrb	r3, [r7, #7]
 8008014:	4618      	mov	r0, r3
 8008016:	f000 f9f1 	bl	80083fc <SYSSLEEP_IsAwake>
 800801a:	4603      	mov	r3, r0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <SYS_Sleep>:

void SYS_Sleep(SYS_TaskId_t _taskId, uint32_t _period_ms)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b082      	sub	sp, #8
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	6039      	str	r1, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
	SYSSLEEP_RequestSleep(_taskId, _period_ms);
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	4618      	mov	r0, r3
 8008036:	f000 fa1d 	bl	8008474 <SYSSLEEP_RequestSleep>
	//DBG_Print("%s Request sleep for %d ms. curr:%llu next:%llu Timestamp: %d\r\n",
	//		SYS_GetTaskIdName(_taskId), _period_ms, SYSSLEEP_GetCurrSleepRequest(), SYSSLEEP_GetNextSleepRequest(),  SYSCLK_GetTimestamp_ms());
}
 800803a:	bf00      	nop
 800803c:	3708      	adds	r7, #8
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <HAL_IncTick>:
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_PCLK1);
  LL_RCC_SetI2CClockSource(LL_RCC_I2C2_CLKSOURCE_PCLK1);
}

void HAL_IncTick(void) /*overwrite __weak funct*/
{
 8008044:	b480      	push	{r7}
 8008046:	af00      	add	r7, sp, #0
	/*config.system.*/++SYSCLK_rteSysTick;
 8008048:	4b06      	ldr	r3, [pc, #24]	@ (8008064 <HAL_IncTick+0x20>)
 800804a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804e:	1c50      	adds	r0, r2, #1
 8008050:	f143 0100 	adc.w	r1, r3, #0
 8008054:	4b03      	ldr	r3, [pc, #12]	@ (8008064 <HAL_IncTick+0x20>)
 8008056:	e9c3 0100 	strd	r0, r1, [r3]
}
 800805a:	bf00      	nop
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	20002e38 	.word	0x20002e38

08008068 <HAL_GetTick>:

uint32_t HAL_GetTick(void) /*overwrite __weak funct*/
{
 8008068:	b480      	push	{r7}
 800806a:	af00      	add	r7, sp, #0
	/*note: Most ARM lib using HAL_GetTick took accounts of the wrap:
	 * eg:
	 * delta = (current - start); // The math works and accounts for the wrap
	 * DON'T USE end = (start + x) type constructs.
	 * */
	return (uint32_t)/*config.system.*/SYSCLK_rteSysTick;
 800806c:	4b04      	ldr	r3, [pc, #16]	@ (8008080 <HAL_GetTick+0x18>)
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	4613      	mov	r3, r2
}
 8008074:	4618      	mov	r0, r3
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20002e38 	.word	0x20002e38

08008084 <SYSCLK_GetTimestamp_ms>:

uint64_t SYSCLK_GetTimestamp_ms(void)
{
 8008084:	b480      	push	{r7}
 8008086:	af00      	add	r7, sp, #0
	return SYSCLK_rteSysTick;
 8008088:	4b04      	ldr	r3, [pc, #16]	@ (800809c <SYSCLK_GetTimestamp_ms+0x18>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
}
 800808e:	4610      	mov	r0, r2
 8008090:	4619      	mov	r1, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20002e38 	.word	0x20002e38

080080a0 <SYSCLK_GetTimestamp_s>:

uint32_t SYSCLK_GetTimestamp_s(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
	return (uint32_t)(/*config.system.*/SYSCLK_rteSysTick/ 1000);
 80080a4:	4b06      	ldr	r3, [pc, #24]	@ (80080c0 <SYSCLK_GetTimestamp_s+0x20>)
 80080a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80080aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080ae:	f04f 0300 	mov.w	r3, #0
 80080b2:	f7f8 fd79 	bl	8000ba8 <__aeabi_uldivmod>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4613      	mov	r3, r2
}
 80080bc:	4618      	mov	r0, r3
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20002e38 	.word	0x20002e38

080080c4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	22ff      	movs	r2, #255	@ 0xff
 80080d0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	22ca      	movs	r2, #202	@ 0xca
 80080ea:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2253      	movs	r2, #83	@ 0x53
 80080f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80080f2:	bf00      	nop
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <LL_RTC_WAKEUP_Enable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Enable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Enable(RTC_TypeDef *RTCx)
{
 80080fe:	b480      	push	{r7}
 8008100:	b083      	sub	sp, #12
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	609a      	str	r2, [r3, #8]
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <LL_RTC_WAKEUP_Disable>:
  * @rmtoll RTC_CR           WUTE          LL_RTC_WAKEUP_Disable
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_Disable(RTC_TypeDef *RTCx)
{
 800811e:	b480      	push	{r7}
 8008120:	b083      	sub	sp, #12
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	609a      	str	r2, [r3, #8]
}
 8008132:	bf00      	nop
 8008134:	370c      	adds	r7, #12
 8008136:	46bd      	mov	sp, r7
 8008138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813c:	4770      	bx	lr

0800813e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800813e:	b480      	push	{r7}
 8008140:	b083      	sub	sp, #12
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f023 0207 	bic.w	r2, r3, #7
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	431a      	orrs	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	609a      	str	r2, [r3, #8]
}
 8008158:	bf00      	nop
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <LL_RTC_WAKEUP_SetAutoReload>:
  * @param  RTCx RTC Instance
  * @param  Value Value between Min_Data=0x00 and Max_Data=0xFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetAutoReload(RTC_TypeDef *RTCx, uint32_t Value)
{
 8008164:	b480      	push	{r7}
 8008166:	b083      	sub	sp, #12
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	0c1b      	lsrs	r3, r3, #16
 8008174:	041b      	lsls	r3, r3, #16
 8008176:	683a      	ldr	r2, [r7, #0]
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	615a      	str	r2, [r3, #20]
}
 800817e:	bf00      	nop
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <LL_RTC_ClearFlag_WUT>:
  * @rmtoll ISR          WUTF          LL_RTC_ClearFlag_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_ClearFlag_WUT(RTC_TypeDef *RTCx)
{
 800818a:	b480      	push	{r7}
 800818c:	b083      	sub	sp, #12
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	b2db      	uxtb	r3, r3
 8008198:	f463 6290 	orn	r2, r3, #1152	@ 0x480
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60da      	str	r2, [r3, #12]
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <LL_RTC_IsActiveFlag_WUTW>:
  * @rmtoll ISR          WUTWF         LL_RTC_IsActiveFlag_WUTW
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF));
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f003 0304 	and.w	r3, r3, #4
 80081bc:	2b04      	cmp	r3, #4
 80081be:	bf0c      	ite	eq
 80081c0:	2301      	moveq	r3, #1
 80081c2:	2300      	movne	r3, #0
 80081c4:	b2db      	uxtb	r3, r3
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <LL_RTC_EnableIT_WUT>:
  * @rmtoll RTC_CR          WUTIE         LL_RTC_EnableIT_WUT
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
 80081d2:	b480      	push	{r7}
 80081d4:	b083      	sub	sp, #12
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	609a      	str	r2, [r3, #8]
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
	...

080081f4 <SYSSLEEP_InhibitSleepPeriod_ms>:
	ulMinPeriod= SYSSLEEP_GetTick_ms()- ulMinPeriod;
	ulMinPeriod= (SYSSLEEP_CFG_MIN_PERIOD>= ulMinPeriod)? SYSSLEEP_CFG_MIN_PERIOD: ulMinPeriod;
}

static void __attribute__((optimize("O0"))) SYSSLEEP_InhibitSleepPeriod_ms(uint16_t _period_ms)
{
 80081f4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80081f8:	b082      	sub	sp, #8
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	4603      	mov	r3, r0
 80081fe:	80fb      	strh	r3, [r7, #6]
	tSleepAllowedTime= SYSSLEEP_GetTick_ms() + _period_ms;
 8008200:	f7ff fef2 	bl	8007fe8 <SYS_GetTimestamp_ms>
 8008204:	4602      	mov	r2, r0
 8008206:	460b      	mov	r3, r1
 8008208:	88f9      	ldrh	r1, [r7, #6]
 800820a:	2000      	movs	r0, #0
 800820c:	460c      	mov	r4, r1
 800820e:	4605      	mov	r5, r0
 8008210:	eb12 0804 	adds.w	r8, r2, r4
 8008214:	eb43 0905 	adc.w	r9, r3, r5
 8008218:	4b03      	ldr	r3, [pc, #12]	@ (8008228 <SYSSLEEP_InhibitSleepPeriod_ms+0x34>)
 800821a:	e9c3 8900 	strd	r8, r9, [r3]
}
 800821e:	bf00      	nop
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008228:	20002e50 	.word	0x20002e50

0800822c <SYSSLEEP_SetSleepPeriod_ms>:
{
	return (SYSSLEEP_GetTick_ms()> tSleepAllowedTime)? true: false;
}

static void SYSSLEEP_SetSleepPeriod_ms(uint32_t _period_ms)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
	uint64_t _autoReloadValue= ((_period_ms* 32768UL)/ (16/*LL_RTC_WAKEUPCLOCK_DIV_16*/* 1000UL))- 1;
 8008234:	6879      	ldr	r1, [r7, #4]
 8008236:	03c9      	lsls	r1, r1, #15
 8008238:	4830      	ldr	r0, [pc, #192]	@ (80082fc <SYSSLEEP_SetSleepPeriod_ms+0xd0>)
 800823a:	fba0 0101 	umull	r0, r1, r0, r1
 800823e:	0a89      	lsrs	r1, r1, #10
 8008240:	3901      	subs	r1, #1
 8008242:	2000      	movs	r0, #0
 8008244:	460a      	mov	r2, r1
 8008246:	4603      	mov	r3, r0
 8008248:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if(0xFFFF< _autoReloadValue)
 800824c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008250:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8008254:	f173 0300 	sbcs.w	r3, r3, #0
 8008258:	d305      	bcc.n	8008266 <SYSSLEEP_SetSleepPeriod_ms+0x3a>
	{
		_autoReloadValue= 0xFFFF;
 800825a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	/*TODO: scrutinize this as this was ported from L0 mcu*/
	if(_autoReloadValue> (0x10000- 5))
 8008266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800826a:	f64f 71fc 	movw	r1, #65532	@ 0xfffc
 800826e:	428a      	cmp	r2, r1
 8008270:	f173 0300 	sbcs.w	r3, r3, #0
 8008274:	d306      	bcc.n	8008284 <SYSSLEEP_SetSleepPeriod_ms+0x58>
	{
		_autoReloadValue= (0x10000- 5); /*for 16Mhz, if we set more than (0x10000- 5), mcu might not go to sleep for (_period- 0xFFFF)*/
 8008276:	f64f 72fb 	movw	r2, #65531	@ 0xfffb
 800827a:	f04f 0300 	mov.w	r3, #0
 800827e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008282:	e00b      	b.n	800829c <SYSSLEEP_SetSleepPeriod_ms+0x70>
	}
	else if(4>= _autoReloadValue)
 8008284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008288:	2a05      	cmp	r2, #5
 800828a:	f173 0300 	sbcs.w	r3, r3, #0
 800828e:	d205      	bcs.n	800829c <SYSSLEEP_SetSleepPeriod_ms+0x70>
	{
		_autoReloadValue= 5;/*for div16, resolution is 488.28us, but minimum time base is 2*(488.28us), but on 4Mhz if we set less than 5, the mcu might not even wakeup. maybe timeout occur even while setting up the clock.*/
 8008290:	f04f 0205 	mov.w	r2, #5
 8008294:	f04f 0300 	mov.w	r3, #0
 8008298:	e9c7 2302 	strd	r2, r3, [r7, #8]
	}

	LL_RTC_DisableWriteProtection(RTC);
 800829c:	4818      	ldr	r0, [pc, #96]	@ (8008300 <SYSSLEEP_SetSleepPeriod_ms+0xd4>)
 800829e:	f7ff ff1e 	bl	80080de <LL_RTC_DisableWriteProtection>

	LL_RTC_WAKEUP_Disable(RTC);/* Disable wake up timer to modify it */
 80082a2:	4817      	ldr	r0, [pc, #92]	@ (8008300 <SYSSLEEP_SetSleepPeriod_ms+0xd4>)
 80082a4:	f7ff ff3b 	bl	800811e <LL_RTC_WAKEUP_Disable>
	while(1!= LL_RTC_IsActiveFlag_WUTW(RTC))/* Wait until it is allow to modify wake up reload value */
 80082a8:	bf00      	nop
 80082aa:	4815      	ldr	r0, [pc, #84]	@ (8008300 <SYSSLEEP_SetSleepPeriod_ms+0xd4>)
 80082ac:	f7ff ff7e 	bl	80081ac <LL_RTC_IsActiveFlag_WUTW>
 80082b0:	4603      	mov	r3, r0
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d1f9      	bne.n	80082aa <SYSSLEEP_SetSleepPeriod_ms+0x7e>
	{
	}
	LL_RTC_WAKEUP_SetAutoReload(RTC, _autoReloadValue);
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4619      	mov	r1, r3
 80082ba:	4811      	ldr	r0, [pc, #68]	@ (8008300 <SYSSLEEP_SetSleepPeriod_ms+0xd4>)
 80082bc:	f7ff ff52 	bl	8008164 <LL_RTC_WAKEUP_SetAutoReload>
	LL_RTC_WAKEUP_SetClock(RTC, LL_RTC_WAKEUPCLOCK_DIV_16);
 80082c0:	2100      	movs	r1, #0
 80082c2:	480f      	ldr	r0, [pc, #60]	@ (8008300 <SYSSLEEP_SetSleepPeriod_ms+0xd4>)
 80082c4:	f7ff ff3b 	bl	800813e <LL_RTC_WAKEUP_SetClock>
	/* Enable wake up counter and wake up interrupt */
	LL_RTC_WAKEUP_Enable(RTC);
 80082c8:	480d      	ldr	r0, [pc, #52]	@ (8008300 <SYSSLEEP_SetSleepPeriod_ms+0xd4>)
 80082ca:	f7ff ff18 	bl	80080fe <LL_RTC_WAKEUP_Enable>
	LL_RTC_EnableIT_WUT(RTC);
 80082ce:	480c      	ldr	r0, [pc, #48]	@ (8008300 <SYSSLEEP_SetSleepPeriod_ms+0xd4>)
 80082d0:	f7ff ff7f 	bl	80081d2 <LL_RTC_EnableIT_WUT>
	LL_RTC_ClearFlag_WUT(RTC);
 80082d4:	480a      	ldr	r0, [pc, #40]	@ (8008300 <SYSSLEEP_SetSleepPeriod_ms+0xd4>)
 80082d6:	f7ff ff58 	bl	800818a <LL_RTC_ClearFlag_WUT>

	LL_RTC_EnableWriteProtection(RTC);
 80082da:	4809      	ldr	r0, [pc, #36]	@ (8008300 <SYSSLEEP_SetSleepPeriod_ms+0xd4>)
 80082dc:	f7ff fef2 	bl	80080c4 <LL_RTC_EnableWriteProtection>

	ulCurrRequestTimestamp= SYSSLEEP_GetTick_ms();
 80082e0:	f7ff fe82 	bl	8007fe8 <SYS_GetTimestamp_ms>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4906      	ldr	r1, [pc, #24]	@ (8008304 <SYSSLEEP_SetSleepPeriod_ms+0xd8>)
 80082ea:	e9c1 2300 	strd	r2, r3, [r1]
	SYSSLEEP_InhibitSleepPeriod_ms(9);/*delay to make sure WKUP has enabled and run before going to sleep*/
 80082ee:	2009      	movs	r0, #9
 80082f0:	f7ff ff80 	bl	80081f4 <SYSSLEEP_InhibitSleepPeriod_ms>
	//DBG_Print("_autoReloadValue : %u.\r\n", (uint32_t)_autoReloadValue);
}
 80082f4:	bf00      	nop
 80082f6:	3710      	adds	r7, #16
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	10624dd3 	.word	0x10624dd3
 8008300:	40002800 	.word	0x40002800
 8008304:	20002e48 	.word	0x20002e48

08008308 <SYSSLEEP_RequestAwakeTick>:

static void SYSSLEEP_RequestAwakeTick(uint32_t _requestMs)
{
 8008308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800830c:	b090      	sub	sp, #64	@ 0x40
 800830e:	af00      	add	r7, sp, #0
 8008310:	6378      	str	r0, [r7, #52]	@ 0x34
	uint64_t ulCurrRequestRemaining= (ulCurrRequest- (SYSSLEEP_GetTick_ms()- ulCurrRequestTimestamp));
 8008312:	4b36      	ldr	r3, [pc, #216]	@ (80083ec <SYSSLEEP_RequestAwakeTick+0xe4>)
 8008314:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008318:	f7ff fe66 	bl	8007fe8 <SYS_GetTimestamp_ms>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	ebb4 0802 	subs.w	r8, r4, r2
 8008324:	eb65 0903 	sbc.w	r9, r5, r3
 8008328:	4b31      	ldr	r3, [pc, #196]	@ (80083f0 <SYSSLEEP_RequestAwakeTick+0xe8>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	eb18 0102 	adds.w	r1, r8, r2
 8008332:	6039      	str	r1, [r7, #0]
 8008334:	eb49 0303 	adc.w	r3, r9, r3
 8008338:	607b      	str	r3, [r7, #4]
 800833a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800833e:	e9c7 340e 	strd	r3, r4, [r7, #56]	@ 0x38

	if((_requestMs< ulCurrRequestRemaining)|| (ulMinPeriod>= ulCurrRequestRemaining))
 8008342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008344:	2200      	movs	r2, #0
 8008346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008348:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800834a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800834e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8008352:	4621      	mov	r1, r4
 8008354:	4291      	cmp	r1, r2
 8008356:	4629      	mov	r1, r5
 8008358:	4199      	sbcs	r1, r3
 800835a:	d308      	bcc.n	800836e <SYSSLEEP_RequestAwakeTick+0x66>
 800835c:	4b25      	ldr	r3, [pc, #148]	@ (80083f4 <SYSSLEEP_RequestAwakeTick+0xec>)
 800835e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008362:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008366:	4290      	cmp	r0, r2
 8008368:	eb71 0303 	sbcs.w	r3, r1, r3
 800836c:	d310      	bcc.n	8008390 <SYSSLEEP_RequestAwakeTick+0x88>
	{
		ulCurrRequest= _requestMs;
 800836e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008370:	2200      	movs	r2, #0
 8008372:	623b      	str	r3, [r7, #32]
 8008374:	627a      	str	r2, [r7, #36]	@ 0x24
 8008376:	4b1e      	ldr	r3, [pc, #120]	@ (80083f0 <SYSSLEEP_RequestAwakeTick+0xe8>)
 8008378:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800837c:	e9c3 1200 	strd	r1, r2, [r3]

		SYSSLEEP_SetSleepPeriod_ms(ulCurrRequest);
 8008380:	4b1b      	ldr	r3, [pc, #108]	@ (80083f0 <SYSSLEEP_RequestAwakeTick+0xe8>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	4613      	mov	r3, r2
 8008388:	4618      	mov	r0, r3
 800838a:	f7ff ff4f 	bl	800822c <SYSSLEEP_SetSleepPeriod_ms>
		{
			ulNextRequest= (_requestMs- ulCurrRequestRemaining);
			//DBG_Print("Req: ulCurrRequest : %u, ulNextRequest : %u .\r\n", (uint32_t)ulCurrRequest, (uint32_t)ulNextRequest);
		}
	}
}
 800838e:	e028      	b.n	80083e2 <SYSSLEEP_RequestAwakeTick+0xda>
		if((_requestMs- ulCurrRequestRemaining)< ulNextRequest)
 8008390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008392:	2200      	movs	r2, #0
 8008394:	61bb      	str	r3, [r7, #24]
 8008396:	61fa      	str	r2, [r7, #28]
 8008398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800839c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80083a0:	4621      	mov	r1, r4
 80083a2:	ebb1 0a02 	subs.w	sl, r1, r2
 80083a6:	4629      	mov	r1, r5
 80083a8:	eb61 0b03 	sbc.w	fp, r1, r3
 80083ac:	4b12      	ldr	r3, [pc, #72]	@ (80083f8 <SYSSLEEP_RequestAwakeTick+0xf0>)
 80083ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b2:	4592      	cmp	sl, r2
 80083b4:	eb7b 0303 	sbcs.w	r3, fp, r3
 80083b8:	d213      	bcs.n	80083e2 <SYSSLEEP_RequestAwakeTick+0xda>
			ulNextRequest= (_requestMs- ulCurrRequestRemaining);
 80083ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083bc:	2200      	movs	r2, #0
 80083be:	613b      	str	r3, [r7, #16]
 80083c0:	617a      	str	r2, [r7, #20]
 80083c2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80083c6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80083ca:	4621      	mov	r1, r4
 80083cc:	1a89      	subs	r1, r1, r2
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	4629      	mov	r1, r5
 80083d2:	eb61 0303 	sbc.w	r3, r1, r3
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	4b07      	ldr	r3, [pc, #28]	@ (80083f8 <SYSSLEEP_RequestAwakeTick+0xf0>)
 80083da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80083de:	e9c3 1200 	strd	r1, r2, [r3]
}
 80083e2:	bf00      	nop
 80083e4:	3740      	adds	r7, #64	@ 0x40
 80083e6:	46bd      	mov	sp, r7
 80083e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083ec:	20002e48 	.word	0x20002e48
 80083f0:	20002468 	.word	0x20002468
 80083f4:	20002e40 	.word	0x20002e40
 80083f8:	20002470 	.word	0x20002470

080083fc <SYSSLEEP_IsAwake>:

bool SYSSLEEP_IsAwake(SYS_TaskId_t _taskId)
{
 80083fc:	b5b0      	push	{r4, r5, r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	71fb      	strb	r3, [r7, #7]
	uint64_t _currTick= SYSSLEEP_GetTick_ms();
 8008406:	f7ff fdef 	bl	8007fe8 <SYS_GetTimestamp_ms>
 800840a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	if(_currTick>= (pSYS_TaskInfo[_taskId].sleepTimestamp+ pSYS_TaskInfo[_taskId].sleepPeriod))
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	4a17      	ldr	r2, [pc, #92]	@ (8008470 <SYSSLEEP_IsAwake+0x74>)
 8008412:	011b      	lsls	r3, r3, #4
 8008414:	4413      	add	r3, r2
 8008416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800841a:	79fb      	ldrb	r3, [r7, #7]
 800841c:	4a14      	ldr	r2, [pc, #80]	@ (8008470 <SYSSLEEP_IsAwake+0x74>)
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	4413      	add	r3, r2
 8008422:	3308      	adds	r3, #8
 8008424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008428:	1884      	adds	r4, r0, r2
 800842a:	eb41 0503 	adc.w	r5, r1, r3
 800842e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008432:	42a2      	cmp	r2, r4
 8008434:	41ab      	sbcs	r3, r5
 8008436:	d301      	bcc.n	800843c <SYSSLEEP_IsAwake+0x40>
	{
		return true;
 8008438:	2301      	movs	r3, #1
 800843a:	e014      	b.n	8008466 <SYSSLEEP_IsAwake+0x6a>
	}
	else
	{
		SYSSLEEP_RequestAwakeTick(pSYS_TaskInfo[_taskId].sleepPeriod- (_currTick- pSYS_TaskInfo[_taskId].sleepTimestamp));
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	4a0c      	ldr	r2, [pc, #48]	@ (8008470 <SYSSLEEP_IsAwake+0x74>)
 8008440:	011b      	lsls	r3, r3, #4
 8008442:	4413      	add	r3, r2
 8008444:	3308      	adds	r3, #8
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	4611      	mov	r1, r2
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	4a08      	ldr	r2, [pc, #32]	@ (8008470 <SYSSLEEP_IsAwake+0x74>)
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	4413      	add	r3, r2
 8008454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	1ad3      	subs	r3, r2, r3
 800845c:	440b      	add	r3, r1
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff ff52 	bl	8008308 <SYSSLEEP_RequestAwakeTick>
	}
	return false;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bdb0      	pop	{r4, r5, r7, pc}
 800846e:	bf00      	nop
 8008470:	20002c98 	.word	0x20002c98

08008474 <SYSSLEEP_RequestSleep>:

void SYSSLEEP_RequestSleep(SYS_TaskId_t _taskId, uint32_t _period_ms)
{
 8008474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	6039      	str	r1, [r7, #0]
 800847e:	71fb      	strb	r3, [r7, #7]
	pSYS_TaskInfo[_taskId].sleepTimestamp= SYSSLEEP_GetTick_ms();
 8008480:	79fe      	ldrb	r6, [r7, #7]
 8008482:	f7ff fdb1 	bl	8007fe8 <SYS_GetTimestamp_ms>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	480c      	ldr	r0, [pc, #48]	@ (80084bc <SYSSLEEP_RequestSleep+0x48>)
 800848c:	0131      	lsls	r1, r6, #4
 800848e:	4401      	add	r1, r0
 8008490:	e9c1 2300 	strd	r2, r3, [r1]
	pSYS_TaskInfo[_taskId].sleepPeriod= _period_ms;
 8008494:	79fb      	ldrb	r3, [r7, #7]
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	2100      	movs	r1, #0
 800849a:	4614      	mov	r4, r2
 800849c:	460d      	mov	r5, r1
 800849e:	4a07      	ldr	r2, [pc, #28]	@ (80084bc <SYSSLEEP_RequestSleep+0x48>)
 80084a0:	011b      	lsls	r3, r3, #4
 80084a2:	4413      	add	r3, r2
 80084a4:	3308      	adds	r3, #8
 80084a6:	e9c3 4500 	strd	r4, r5, [r3]
	(void)SYSSLEEP_IsAwake(_taskId); /*call once to initiate sleep*/
 80084aa:	79fb      	ldrb	r3, [r7, #7]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f7ff ffa5 	bl	80083fc <SYSSLEEP_IsAwake>
}
 80084b2:	bf00      	nop
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ba:	bf00      	nop
 80084bc:	20002c98 	.word	0x20002c98

080084c0 <rand>:
 80084c0:	4b16      	ldr	r3, [pc, #88]	@ (800851c <rand+0x5c>)
 80084c2:	b510      	push	{r4, lr}
 80084c4:	681c      	ldr	r4, [r3, #0]
 80084c6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80084c8:	b9b3      	cbnz	r3, 80084f8 <rand+0x38>
 80084ca:	2018      	movs	r0, #24
 80084cc:	f001 fd1e 	bl	8009f0c <malloc>
 80084d0:	4602      	mov	r2, r0
 80084d2:	6320      	str	r0, [r4, #48]	@ 0x30
 80084d4:	b920      	cbnz	r0, 80084e0 <rand+0x20>
 80084d6:	4b12      	ldr	r3, [pc, #72]	@ (8008520 <rand+0x60>)
 80084d8:	4812      	ldr	r0, [pc, #72]	@ (8008524 <rand+0x64>)
 80084da:	2152      	movs	r1, #82	@ 0x52
 80084dc:	f000 fe54 	bl	8009188 <__assert_func>
 80084e0:	4911      	ldr	r1, [pc, #68]	@ (8008528 <rand+0x68>)
 80084e2:	4b12      	ldr	r3, [pc, #72]	@ (800852c <rand+0x6c>)
 80084e4:	e9c0 1300 	strd	r1, r3, [r0]
 80084e8:	4b11      	ldr	r3, [pc, #68]	@ (8008530 <rand+0x70>)
 80084ea:	6083      	str	r3, [r0, #8]
 80084ec:	230b      	movs	r3, #11
 80084ee:	8183      	strh	r3, [r0, #12]
 80084f0:	2100      	movs	r1, #0
 80084f2:	2001      	movs	r0, #1
 80084f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80084f8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80084fa:	480e      	ldr	r0, [pc, #56]	@ (8008534 <rand+0x74>)
 80084fc:	690b      	ldr	r3, [r1, #16]
 80084fe:	694c      	ldr	r4, [r1, #20]
 8008500:	4a0d      	ldr	r2, [pc, #52]	@ (8008538 <rand+0x78>)
 8008502:	4358      	muls	r0, r3
 8008504:	fb02 0004 	mla	r0, r2, r4, r0
 8008508:	fba3 3202 	umull	r3, r2, r3, r2
 800850c:	3301      	adds	r3, #1
 800850e:	eb40 0002 	adc.w	r0, r0, r2
 8008512:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008516:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800851a:	bd10      	pop	{r4, pc}
 800851c:	20002484 	.word	0x20002484
 8008520:	0800bffb 	.word	0x0800bffb
 8008524:	0800c012 	.word	0x0800c012
 8008528:	abcd330e 	.word	0xabcd330e
 800852c:	e66d1234 	.word	0xe66d1234
 8008530:	0005deec 	.word	0x0005deec
 8008534:	5851f42d 	.word	0x5851f42d
 8008538:	4c957f2d 	.word	0x4c957f2d

0800853c <__cvt>:
 800853c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008540:	ec57 6b10 	vmov	r6, r7, d0
 8008544:	2f00      	cmp	r7, #0
 8008546:	460c      	mov	r4, r1
 8008548:	4619      	mov	r1, r3
 800854a:	463b      	mov	r3, r7
 800854c:	bfbb      	ittet	lt
 800854e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008552:	461f      	movlt	r7, r3
 8008554:	2300      	movge	r3, #0
 8008556:	232d      	movlt	r3, #45	@ 0x2d
 8008558:	700b      	strb	r3, [r1, #0]
 800855a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800855c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008560:	4691      	mov	r9, r2
 8008562:	f023 0820 	bic.w	r8, r3, #32
 8008566:	bfbc      	itt	lt
 8008568:	4632      	movlt	r2, r6
 800856a:	4616      	movlt	r6, r2
 800856c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008570:	d005      	beq.n	800857e <__cvt+0x42>
 8008572:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008576:	d100      	bne.n	800857a <__cvt+0x3e>
 8008578:	3401      	adds	r4, #1
 800857a:	2102      	movs	r1, #2
 800857c:	e000      	b.n	8008580 <__cvt+0x44>
 800857e:	2103      	movs	r1, #3
 8008580:	ab03      	add	r3, sp, #12
 8008582:	9301      	str	r3, [sp, #4]
 8008584:	ab02      	add	r3, sp, #8
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	ec47 6b10 	vmov	d0, r6, r7
 800858c:	4653      	mov	r3, sl
 800858e:	4622      	mov	r2, r4
 8008590:	f000 fea2 	bl	80092d8 <_dtoa_r>
 8008594:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008598:	4605      	mov	r5, r0
 800859a:	d119      	bne.n	80085d0 <__cvt+0x94>
 800859c:	f019 0f01 	tst.w	r9, #1
 80085a0:	d00e      	beq.n	80085c0 <__cvt+0x84>
 80085a2:	eb00 0904 	add.w	r9, r0, r4
 80085a6:	2200      	movs	r2, #0
 80085a8:	2300      	movs	r3, #0
 80085aa:	4630      	mov	r0, r6
 80085ac:	4639      	mov	r1, r7
 80085ae:	f7f8 fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80085b2:	b108      	cbz	r0, 80085b8 <__cvt+0x7c>
 80085b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80085b8:	2230      	movs	r2, #48	@ 0x30
 80085ba:	9b03      	ldr	r3, [sp, #12]
 80085bc:	454b      	cmp	r3, r9
 80085be:	d31e      	bcc.n	80085fe <__cvt+0xc2>
 80085c0:	9b03      	ldr	r3, [sp, #12]
 80085c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085c4:	1b5b      	subs	r3, r3, r5
 80085c6:	4628      	mov	r0, r5
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	b004      	add	sp, #16
 80085cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80085d4:	eb00 0904 	add.w	r9, r0, r4
 80085d8:	d1e5      	bne.n	80085a6 <__cvt+0x6a>
 80085da:	7803      	ldrb	r3, [r0, #0]
 80085dc:	2b30      	cmp	r3, #48	@ 0x30
 80085de:	d10a      	bne.n	80085f6 <__cvt+0xba>
 80085e0:	2200      	movs	r2, #0
 80085e2:	2300      	movs	r3, #0
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f7f8 fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80085ec:	b918      	cbnz	r0, 80085f6 <__cvt+0xba>
 80085ee:	f1c4 0401 	rsb	r4, r4, #1
 80085f2:	f8ca 4000 	str.w	r4, [sl]
 80085f6:	f8da 3000 	ldr.w	r3, [sl]
 80085fa:	4499      	add	r9, r3
 80085fc:	e7d3      	b.n	80085a6 <__cvt+0x6a>
 80085fe:	1c59      	adds	r1, r3, #1
 8008600:	9103      	str	r1, [sp, #12]
 8008602:	701a      	strb	r2, [r3, #0]
 8008604:	e7d9      	b.n	80085ba <__cvt+0x7e>

08008606 <__exponent>:
 8008606:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008608:	2900      	cmp	r1, #0
 800860a:	bfba      	itte	lt
 800860c:	4249      	neglt	r1, r1
 800860e:	232d      	movlt	r3, #45	@ 0x2d
 8008610:	232b      	movge	r3, #43	@ 0x2b
 8008612:	2909      	cmp	r1, #9
 8008614:	7002      	strb	r2, [r0, #0]
 8008616:	7043      	strb	r3, [r0, #1]
 8008618:	dd29      	ble.n	800866e <__exponent+0x68>
 800861a:	f10d 0307 	add.w	r3, sp, #7
 800861e:	461d      	mov	r5, r3
 8008620:	270a      	movs	r7, #10
 8008622:	461a      	mov	r2, r3
 8008624:	fbb1 f6f7 	udiv	r6, r1, r7
 8008628:	fb07 1416 	mls	r4, r7, r6, r1
 800862c:	3430      	adds	r4, #48	@ 0x30
 800862e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008632:	460c      	mov	r4, r1
 8008634:	2c63      	cmp	r4, #99	@ 0x63
 8008636:	f103 33ff 	add.w	r3, r3, #4294967295
 800863a:	4631      	mov	r1, r6
 800863c:	dcf1      	bgt.n	8008622 <__exponent+0x1c>
 800863e:	3130      	adds	r1, #48	@ 0x30
 8008640:	1e94      	subs	r4, r2, #2
 8008642:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008646:	1c41      	adds	r1, r0, #1
 8008648:	4623      	mov	r3, r4
 800864a:	42ab      	cmp	r3, r5
 800864c:	d30a      	bcc.n	8008664 <__exponent+0x5e>
 800864e:	f10d 0309 	add.w	r3, sp, #9
 8008652:	1a9b      	subs	r3, r3, r2
 8008654:	42ac      	cmp	r4, r5
 8008656:	bf88      	it	hi
 8008658:	2300      	movhi	r3, #0
 800865a:	3302      	adds	r3, #2
 800865c:	4403      	add	r3, r0
 800865e:	1a18      	subs	r0, r3, r0
 8008660:	b003      	add	sp, #12
 8008662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008664:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008668:	f801 6f01 	strb.w	r6, [r1, #1]!
 800866c:	e7ed      	b.n	800864a <__exponent+0x44>
 800866e:	2330      	movs	r3, #48	@ 0x30
 8008670:	3130      	adds	r1, #48	@ 0x30
 8008672:	7083      	strb	r3, [r0, #2]
 8008674:	70c1      	strb	r1, [r0, #3]
 8008676:	1d03      	adds	r3, r0, #4
 8008678:	e7f1      	b.n	800865e <__exponent+0x58>
	...

0800867c <_printf_float>:
 800867c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008680:	b08d      	sub	sp, #52	@ 0x34
 8008682:	460c      	mov	r4, r1
 8008684:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008688:	4616      	mov	r6, r2
 800868a:	461f      	mov	r7, r3
 800868c:	4605      	mov	r5, r0
 800868e:	f000 fcf5 	bl	800907c <_localeconv_r>
 8008692:	6803      	ldr	r3, [r0, #0]
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	4618      	mov	r0, r3
 8008698:	f7f7 fdea 	bl	8000270 <strlen>
 800869c:	2300      	movs	r3, #0
 800869e:	930a      	str	r3, [sp, #40]	@ 0x28
 80086a0:	f8d8 3000 	ldr.w	r3, [r8]
 80086a4:	9005      	str	r0, [sp, #20]
 80086a6:	3307      	adds	r3, #7
 80086a8:	f023 0307 	bic.w	r3, r3, #7
 80086ac:	f103 0208 	add.w	r2, r3, #8
 80086b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80086b4:	f8d4 b000 	ldr.w	fp, [r4]
 80086b8:	f8c8 2000 	str.w	r2, [r8]
 80086bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80086c4:	9307      	str	r3, [sp, #28]
 80086c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80086ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80086ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008944 <_printf_float+0x2c8>)
 80086d4:	f04f 32ff 	mov.w	r2, #4294967295
 80086d8:	f7f8 fa28 	bl	8000b2c <__aeabi_dcmpun>
 80086dc:	bb70      	cbnz	r0, 800873c <_printf_float+0xc0>
 80086de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086e2:	4b98      	ldr	r3, [pc, #608]	@ (8008944 <_printf_float+0x2c8>)
 80086e4:	f04f 32ff 	mov.w	r2, #4294967295
 80086e8:	f7f8 fa02 	bl	8000af0 <__aeabi_dcmple>
 80086ec:	bb30      	cbnz	r0, 800873c <_printf_float+0xc0>
 80086ee:	2200      	movs	r2, #0
 80086f0:	2300      	movs	r3, #0
 80086f2:	4640      	mov	r0, r8
 80086f4:	4649      	mov	r1, r9
 80086f6:	f7f8 f9f1 	bl	8000adc <__aeabi_dcmplt>
 80086fa:	b110      	cbz	r0, 8008702 <_printf_float+0x86>
 80086fc:	232d      	movs	r3, #45	@ 0x2d
 80086fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008702:	4a91      	ldr	r2, [pc, #580]	@ (8008948 <_printf_float+0x2cc>)
 8008704:	4b91      	ldr	r3, [pc, #580]	@ (800894c <_printf_float+0x2d0>)
 8008706:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800870a:	bf8c      	ite	hi
 800870c:	4690      	movhi	r8, r2
 800870e:	4698      	movls	r8, r3
 8008710:	2303      	movs	r3, #3
 8008712:	6123      	str	r3, [r4, #16]
 8008714:	f02b 0304 	bic.w	r3, fp, #4
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	f04f 0900 	mov.w	r9, #0
 800871e:	9700      	str	r7, [sp, #0]
 8008720:	4633      	mov	r3, r6
 8008722:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008724:	4621      	mov	r1, r4
 8008726:	4628      	mov	r0, r5
 8008728:	f000 f9d2 	bl	8008ad0 <_printf_common>
 800872c:	3001      	adds	r0, #1
 800872e:	f040 808d 	bne.w	800884c <_printf_float+0x1d0>
 8008732:	f04f 30ff 	mov.w	r0, #4294967295
 8008736:	b00d      	add	sp, #52	@ 0x34
 8008738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800873c:	4642      	mov	r2, r8
 800873e:	464b      	mov	r3, r9
 8008740:	4640      	mov	r0, r8
 8008742:	4649      	mov	r1, r9
 8008744:	f7f8 f9f2 	bl	8000b2c <__aeabi_dcmpun>
 8008748:	b140      	cbz	r0, 800875c <_printf_float+0xe0>
 800874a:	464b      	mov	r3, r9
 800874c:	2b00      	cmp	r3, #0
 800874e:	bfbc      	itt	lt
 8008750:	232d      	movlt	r3, #45	@ 0x2d
 8008752:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008756:	4a7e      	ldr	r2, [pc, #504]	@ (8008950 <_printf_float+0x2d4>)
 8008758:	4b7e      	ldr	r3, [pc, #504]	@ (8008954 <_printf_float+0x2d8>)
 800875a:	e7d4      	b.n	8008706 <_printf_float+0x8a>
 800875c:	6863      	ldr	r3, [r4, #4]
 800875e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008762:	9206      	str	r2, [sp, #24]
 8008764:	1c5a      	adds	r2, r3, #1
 8008766:	d13b      	bne.n	80087e0 <_printf_float+0x164>
 8008768:	2306      	movs	r3, #6
 800876a:	6063      	str	r3, [r4, #4]
 800876c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008770:	2300      	movs	r3, #0
 8008772:	6022      	str	r2, [r4, #0]
 8008774:	9303      	str	r3, [sp, #12]
 8008776:	ab0a      	add	r3, sp, #40	@ 0x28
 8008778:	e9cd a301 	strd	sl, r3, [sp, #4]
 800877c:	ab09      	add	r3, sp, #36	@ 0x24
 800877e:	9300      	str	r3, [sp, #0]
 8008780:	6861      	ldr	r1, [r4, #4]
 8008782:	ec49 8b10 	vmov	d0, r8, r9
 8008786:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800878a:	4628      	mov	r0, r5
 800878c:	f7ff fed6 	bl	800853c <__cvt>
 8008790:	9b06      	ldr	r3, [sp, #24]
 8008792:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008794:	2b47      	cmp	r3, #71	@ 0x47
 8008796:	4680      	mov	r8, r0
 8008798:	d129      	bne.n	80087ee <_printf_float+0x172>
 800879a:	1cc8      	adds	r0, r1, #3
 800879c:	db02      	blt.n	80087a4 <_printf_float+0x128>
 800879e:	6863      	ldr	r3, [r4, #4]
 80087a0:	4299      	cmp	r1, r3
 80087a2:	dd41      	ble.n	8008828 <_printf_float+0x1ac>
 80087a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80087a8:	fa5f fa8a 	uxtb.w	sl, sl
 80087ac:	3901      	subs	r1, #1
 80087ae:	4652      	mov	r2, sl
 80087b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80087b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80087b6:	f7ff ff26 	bl	8008606 <__exponent>
 80087ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80087bc:	1813      	adds	r3, r2, r0
 80087be:	2a01      	cmp	r2, #1
 80087c0:	4681      	mov	r9, r0
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	dc02      	bgt.n	80087cc <_printf_float+0x150>
 80087c6:	6822      	ldr	r2, [r4, #0]
 80087c8:	07d2      	lsls	r2, r2, #31
 80087ca:	d501      	bpl.n	80087d0 <_printf_float+0x154>
 80087cc:	3301      	adds	r3, #1
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d0a2      	beq.n	800871e <_printf_float+0xa2>
 80087d8:	232d      	movs	r3, #45	@ 0x2d
 80087da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087de:	e79e      	b.n	800871e <_printf_float+0xa2>
 80087e0:	9a06      	ldr	r2, [sp, #24]
 80087e2:	2a47      	cmp	r2, #71	@ 0x47
 80087e4:	d1c2      	bne.n	800876c <_printf_float+0xf0>
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1c0      	bne.n	800876c <_printf_float+0xf0>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e7bd      	b.n	800876a <_printf_float+0xee>
 80087ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80087f2:	d9db      	bls.n	80087ac <_printf_float+0x130>
 80087f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80087f8:	d118      	bne.n	800882c <_printf_float+0x1b0>
 80087fa:	2900      	cmp	r1, #0
 80087fc:	6863      	ldr	r3, [r4, #4]
 80087fe:	dd0b      	ble.n	8008818 <_printf_float+0x19c>
 8008800:	6121      	str	r1, [r4, #16]
 8008802:	b913      	cbnz	r3, 800880a <_printf_float+0x18e>
 8008804:	6822      	ldr	r2, [r4, #0]
 8008806:	07d0      	lsls	r0, r2, #31
 8008808:	d502      	bpl.n	8008810 <_printf_float+0x194>
 800880a:	3301      	adds	r3, #1
 800880c:	440b      	add	r3, r1
 800880e:	6123      	str	r3, [r4, #16]
 8008810:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008812:	f04f 0900 	mov.w	r9, #0
 8008816:	e7db      	b.n	80087d0 <_printf_float+0x154>
 8008818:	b913      	cbnz	r3, 8008820 <_printf_float+0x1a4>
 800881a:	6822      	ldr	r2, [r4, #0]
 800881c:	07d2      	lsls	r2, r2, #31
 800881e:	d501      	bpl.n	8008824 <_printf_float+0x1a8>
 8008820:	3302      	adds	r3, #2
 8008822:	e7f4      	b.n	800880e <_printf_float+0x192>
 8008824:	2301      	movs	r3, #1
 8008826:	e7f2      	b.n	800880e <_printf_float+0x192>
 8008828:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800882c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800882e:	4299      	cmp	r1, r3
 8008830:	db05      	blt.n	800883e <_printf_float+0x1c2>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	6121      	str	r1, [r4, #16]
 8008836:	07d8      	lsls	r0, r3, #31
 8008838:	d5ea      	bpl.n	8008810 <_printf_float+0x194>
 800883a:	1c4b      	adds	r3, r1, #1
 800883c:	e7e7      	b.n	800880e <_printf_float+0x192>
 800883e:	2900      	cmp	r1, #0
 8008840:	bfd4      	ite	le
 8008842:	f1c1 0202 	rsble	r2, r1, #2
 8008846:	2201      	movgt	r2, #1
 8008848:	4413      	add	r3, r2
 800884a:	e7e0      	b.n	800880e <_printf_float+0x192>
 800884c:	6823      	ldr	r3, [r4, #0]
 800884e:	055a      	lsls	r2, r3, #21
 8008850:	d407      	bmi.n	8008862 <_printf_float+0x1e6>
 8008852:	6923      	ldr	r3, [r4, #16]
 8008854:	4642      	mov	r2, r8
 8008856:	4631      	mov	r1, r6
 8008858:	4628      	mov	r0, r5
 800885a:	47b8      	blx	r7
 800885c:	3001      	adds	r0, #1
 800885e:	d12b      	bne.n	80088b8 <_printf_float+0x23c>
 8008860:	e767      	b.n	8008732 <_printf_float+0xb6>
 8008862:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008866:	f240 80dd 	bls.w	8008a24 <_printf_float+0x3a8>
 800886a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800886e:	2200      	movs	r2, #0
 8008870:	2300      	movs	r3, #0
 8008872:	f7f8 f929 	bl	8000ac8 <__aeabi_dcmpeq>
 8008876:	2800      	cmp	r0, #0
 8008878:	d033      	beq.n	80088e2 <_printf_float+0x266>
 800887a:	4a37      	ldr	r2, [pc, #220]	@ (8008958 <_printf_float+0x2dc>)
 800887c:	2301      	movs	r3, #1
 800887e:	4631      	mov	r1, r6
 8008880:	4628      	mov	r0, r5
 8008882:	47b8      	blx	r7
 8008884:	3001      	adds	r0, #1
 8008886:	f43f af54 	beq.w	8008732 <_printf_float+0xb6>
 800888a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800888e:	4543      	cmp	r3, r8
 8008890:	db02      	blt.n	8008898 <_printf_float+0x21c>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	07d8      	lsls	r0, r3, #31
 8008896:	d50f      	bpl.n	80088b8 <_printf_float+0x23c>
 8008898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	47b8      	blx	r7
 80088a2:	3001      	adds	r0, #1
 80088a4:	f43f af45 	beq.w	8008732 <_printf_float+0xb6>
 80088a8:	f04f 0900 	mov.w	r9, #0
 80088ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80088b0:	f104 0a1a 	add.w	sl, r4, #26
 80088b4:	45c8      	cmp	r8, r9
 80088b6:	dc09      	bgt.n	80088cc <_printf_float+0x250>
 80088b8:	6823      	ldr	r3, [r4, #0]
 80088ba:	079b      	lsls	r3, r3, #30
 80088bc:	f100 8103 	bmi.w	8008ac6 <_printf_float+0x44a>
 80088c0:	68e0      	ldr	r0, [r4, #12]
 80088c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088c4:	4298      	cmp	r0, r3
 80088c6:	bfb8      	it	lt
 80088c8:	4618      	movlt	r0, r3
 80088ca:	e734      	b.n	8008736 <_printf_float+0xba>
 80088cc:	2301      	movs	r3, #1
 80088ce:	4652      	mov	r2, sl
 80088d0:	4631      	mov	r1, r6
 80088d2:	4628      	mov	r0, r5
 80088d4:	47b8      	blx	r7
 80088d6:	3001      	adds	r0, #1
 80088d8:	f43f af2b 	beq.w	8008732 <_printf_float+0xb6>
 80088dc:	f109 0901 	add.w	r9, r9, #1
 80088e0:	e7e8      	b.n	80088b4 <_printf_float+0x238>
 80088e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	dc39      	bgt.n	800895c <_printf_float+0x2e0>
 80088e8:	4a1b      	ldr	r2, [pc, #108]	@ (8008958 <_printf_float+0x2dc>)
 80088ea:	2301      	movs	r3, #1
 80088ec:	4631      	mov	r1, r6
 80088ee:	4628      	mov	r0, r5
 80088f0:	47b8      	blx	r7
 80088f2:	3001      	adds	r0, #1
 80088f4:	f43f af1d 	beq.w	8008732 <_printf_float+0xb6>
 80088f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80088fc:	ea59 0303 	orrs.w	r3, r9, r3
 8008900:	d102      	bne.n	8008908 <_printf_float+0x28c>
 8008902:	6823      	ldr	r3, [r4, #0]
 8008904:	07d9      	lsls	r1, r3, #31
 8008906:	d5d7      	bpl.n	80088b8 <_printf_float+0x23c>
 8008908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800890c:	4631      	mov	r1, r6
 800890e:	4628      	mov	r0, r5
 8008910:	47b8      	blx	r7
 8008912:	3001      	adds	r0, #1
 8008914:	f43f af0d 	beq.w	8008732 <_printf_float+0xb6>
 8008918:	f04f 0a00 	mov.w	sl, #0
 800891c:	f104 0b1a 	add.w	fp, r4, #26
 8008920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008922:	425b      	negs	r3, r3
 8008924:	4553      	cmp	r3, sl
 8008926:	dc01      	bgt.n	800892c <_printf_float+0x2b0>
 8008928:	464b      	mov	r3, r9
 800892a:	e793      	b.n	8008854 <_printf_float+0x1d8>
 800892c:	2301      	movs	r3, #1
 800892e:	465a      	mov	r2, fp
 8008930:	4631      	mov	r1, r6
 8008932:	4628      	mov	r0, r5
 8008934:	47b8      	blx	r7
 8008936:	3001      	adds	r0, #1
 8008938:	f43f aefb 	beq.w	8008732 <_printf_float+0xb6>
 800893c:	f10a 0a01 	add.w	sl, sl, #1
 8008940:	e7ee      	b.n	8008920 <_printf_float+0x2a4>
 8008942:	bf00      	nop
 8008944:	7fefffff 	.word	0x7fefffff
 8008948:	0800c06e 	.word	0x0800c06e
 800894c:	0800c06a 	.word	0x0800c06a
 8008950:	0800c076 	.word	0x0800c076
 8008954:	0800c072 	.word	0x0800c072
 8008958:	0800c07a 	.word	0x0800c07a
 800895c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800895e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008962:	4553      	cmp	r3, sl
 8008964:	bfa8      	it	ge
 8008966:	4653      	movge	r3, sl
 8008968:	2b00      	cmp	r3, #0
 800896a:	4699      	mov	r9, r3
 800896c:	dc36      	bgt.n	80089dc <_printf_float+0x360>
 800896e:	f04f 0b00 	mov.w	fp, #0
 8008972:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008976:	f104 021a 	add.w	r2, r4, #26
 800897a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800897c:	9306      	str	r3, [sp, #24]
 800897e:	eba3 0309 	sub.w	r3, r3, r9
 8008982:	455b      	cmp	r3, fp
 8008984:	dc31      	bgt.n	80089ea <_printf_float+0x36e>
 8008986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008988:	459a      	cmp	sl, r3
 800898a:	dc3a      	bgt.n	8008a02 <_printf_float+0x386>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	07da      	lsls	r2, r3, #31
 8008990:	d437      	bmi.n	8008a02 <_printf_float+0x386>
 8008992:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008994:	ebaa 0903 	sub.w	r9, sl, r3
 8008998:	9b06      	ldr	r3, [sp, #24]
 800899a:	ebaa 0303 	sub.w	r3, sl, r3
 800899e:	4599      	cmp	r9, r3
 80089a0:	bfa8      	it	ge
 80089a2:	4699      	movge	r9, r3
 80089a4:	f1b9 0f00 	cmp.w	r9, #0
 80089a8:	dc33      	bgt.n	8008a12 <_printf_float+0x396>
 80089aa:	f04f 0800 	mov.w	r8, #0
 80089ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089b2:	f104 0b1a 	add.w	fp, r4, #26
 80089b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089b8:	ebaa 0303 	sub.w	r3, sl, r3
 80089bc:	eba3 0309 	sub.w	r3, r3, r9
 80089c0:	4543      	cmp	r3, r8
 80089c2:	f77f af79 	ble.w	80088b8 <_printf_float+0x23c>
 80089c6:	2301      	movs	r3, #1
 80089c8:	465a      	mov	r2, fp
 80089ca:	4631      	mov	r1, r6
 80089cc:	4628      	mov	r0, r5
 80089ce:	47b8      	blx	r7
 80089d0:	3001      	adds	r0, #1
 80089d2:	f43f aeae 	beq.w	8008732 <_printf_float+0xb6>
 80089d6:	f108 0801 	add.w	r8, r8, #1
 80089da:	e7ec      	b.n	80089b6 <_printf_float+0x33a>
 80089dc:	4642      	mov	r2, r8
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	47b8      	blx	r7
 80089e4:	3001      	adds	r0, #1
 80089e6:	d1c2      	bne.n	800896e <_printf_float+0x2f2>
 80089e8:	e6a3      	b.n	8008732 <_printf_float+0xb6>
 80089ea:	2301      	movs	r3, #1
 80089ec:	4631      	mov	r1, r6
 80089ee:	4628      	mov	r0, r5
 80089f0:	9206      	str	r2, [sp, #24]
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	f43f ae9c 	beq.w	8008732 <_printf_float+0xb6>
 80089fa:	9a06      	ldr	r2, [sp, #24]
 80089fc:	f10b 0b01 	add.w	fp, fp, #1
 8008a00:	e7bb      	b.n	800897a <_printf_float+0x2fe>
 8008a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a06:	4631      	mov	r1, r6
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b8      	blx	r7
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d1c0      	bne.n	8008992 <_printf_float+0x316>
 8008a10:	e68f      	b.n	8008732 <_printf_float+0xb6>
 8008a12:	9a06      	ldr	r2, [sp, #24]
 8008a14:	464b      	mov	r3, r9
 8008a16:	4442      	add	r2, r8
 8008a18:	4631      	mov	r1, r6
 8008a1a:	4628      	mov	r0, r5
 8008a1c:	47b8      	blx	r7
 8008a1e:	3001      	adds	r0, #1
 8008a20:	d1c3      	bne.n	80089aa <_printf_float+0x32e>
 8008a22:	e686      	b.n	8008732 <_printf_float+0xb6>
 8008a24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008a28:	f1ba 0f01 	cmp.w	sl, #1
 8008a2c:	dc01      	bgt.n	8008a32 <_printf_float+0x3b6>
 8008a2e:	07db      	lsls	r3, r3, #31
 8008a30:	d536      	bpl.n	8008aa0 <_printf_float+0x424>
 8008a32:	2301      	movs	r3, #1
 8008a34:	4642      	mov	r2, r8
 8008a36:	4631      	mov	r1, r6
 8008a38:	4628      	mov	r0, r5
 8008a3a:	47b8      	blx	r7
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	f43f ae78 	beq.w	8008732 <_printf_float+0xb6>
 8008a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b8      	blx	r7
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f43f ae70 	beq.w	8008732 <_printf_float+0xb6>
 8008a52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a56:	2200      	movs	r2, #0
 8008a58:	2300      	movs	r3, #0
 8008a5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a5e:	f7f8 f833 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a62:	b9c0      	cbnz	r0, 8008a96 <_printf_float+0x41a>
 8008a64:	4653      	mov	r3, sl
 8008a66:	f108 0201 	add.w	r2, r8, #1
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b8      	blx	r7
 8008a70:	3001      	adds	r0, #1
 8008a72:	d10c      	bne.n	8008a8e <_printf_float+0x412>
 8008a74:	e65d      	b.n	8008732 <_printf_float+0xb6>
 8008a76:	2301      	movs	r3, #1
 8008a78:	465a      	mov	r2, fp
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	47b8      	blx	r7
 8008a80:	3001      	adds	r0, #1
 8008a82:	f43f ae56 	beq.w	8008732 <_printf_float+0xb6>
 8008a86:	f108 0801 	add.w	r8, r8, #1
 8008a8a:	45d0      	cmp	r8, sl
 8008a8c:	dbf3      	blt.n	8008a76 <_printf_float+0x3fa>
 8008a8e:	464b      	mov	r3, r9
 8008a90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a94:	e6df      	b.n	8008856 <_printf_float+0x1da>
 8008a96:	f04f 0800 	mov.w	r8, #0
 8008a9a:	f104 0b1a 	add.w	fp, r4, #26
 8008a9e:	e7f4      	b.n	8008a8a <_printf_float+0x40e>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	4642      	mov	r2, r8
 8008aa4:	e7e1      	b.n	8008a6a <_printf_float+0x3ee>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	464a      	mov	r2, r9
 8008aaa:	4631      	mov	r1, r6
 8008aac:	4628      	mov	r0, r5
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	f43f ae3e 	beq.w	8008732 <_printf_float+0xb6>
 8008ab6:	f108 0801 	add.w	r8, r8, #1
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008abe:	1a5b      	subs	r3, r3, r1
 8008ac0:	4543      	cmp	r3, r8
 8008ac2:	dcf0      	bgt.n	8008aa6 <_printf_float+0x42a>
 8008ac4:	e6fc      	b.n	80088c0 <_printf_float+0x244>
 8008ac6:	f04f 0800 	mov.w	r8, #0
 8008aca:	f104 0919 	add.w	r9, r4, #25
 8008ace:	e7f4      	b.n	8008aba <_printf_float+0x43e>

08008ad0 <_printf_common>:
 8008ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	4698      	mov	r8, r3
 8008ad8:	688a      	ldr	r2, [r1, #8]
 8008ada:	690b      	ldr	r3, [r1, #16]
 8008adc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	bfb8      	it	lt
 8008ae4:	4613      	movlt	r3, r2
 8008ae6:	6033      	str	r3, [r6, #0]
 8008ae8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008aec:	4607      	mov	r7, r0
 8008aee:	460c      	mov	r4, r1
 8008af0:	b10a      	cbz	r2, 8008af6 <_printf_common+0x26>
 8008af2:	3301      	adds	r3, #1
 8008af4:	6033      	str	r3, [r6, #0]
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	0699      	lsls	r1, r3, #26
 8008afa:	bf42      	ittt	mi
 8008afc:	6833      	ldrmi	r3, [r6, #0]
 8008afe:	3302      	addmi	r3, #2
 8008b00:	6033      	strmi	r3, [r6, #0]
 8008b02:	6825      	ldr	r5, [r4, #0]
 8008b04:	f015 0506 	ands.w	r5, r5, #6
 8008b08:	d106      	bne.n	8008b18 <_printf_common+0x48>
 8008b0a:	f104 0a19 	add.w	sl, r4, #25
 8008b0e:	68e3      	ldr	r3, [r4, #12]
 8008b10:	6832      	ldr	r2, [r6, #0]
 8008b12:	1a9b      	subs	r3, r3, r2
 8008b14:	42ab      	cmp	r3, r5
 8008b16:	dc26      	bgt.n	8008b66 <_printf_common+0x96>
 8008b18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b1c:	6822      	ldr	r2, [r4, #0]
 8008b1e:	3b00      	subs	r3, #0
 8008b20:	bf18      	it	ne
 8008b22:	2301      	movne	r3, #1
 8008b24:	0692      	lsls	r2, r2, #26
 8008b26:	d42b      	bmi.n	8008b80 <_printf_common+0xb0>
 8008b28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b2c:	4641      	mov	r1, r8
 8008b2e:	4638      	mov	r0, r7
 8008b30:	47c8      	blx	r9
 8008b32:	3001      	adds	r0, #1
 8008b34:	d01e      	beq.n	8008b74 <_printf_common+0xa4>
 8008b36:	6823      	ldr	r3, [r4, #0]
 8008b38:	6922      	ldr	r2, [r4, #16]
 8008b3a:	f003 0306 	and.w	r3, r3, #6
 8008b3e:	2b04      	cmp	r3, #4
 8008b40:	bf02      	ittt	eq
 8008b42:	68e5      	ldreq	r5, [r4, #12]
 8008b44:	6833      	ldreq	r3, [r6, #0]
 8008b46:	1aed      	subeq	r5, r5, r3
 8008b48:	68a3      	ldr	r3, [r4, #8]
 8008b4a:	bf0c      	ite	eq
 8008b4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b50:	2500      	movne	r5, #0
 8008b52:	4293      	cmp	r3, r2
 8008b54:	bfc4      	itt	gt
 8008b56:	1a9b      	subgt	r3, r3, r2
 8008b58:	18ed      	addgt	r5, r5, r3
 8008b5a:	2600      	movs	r6, #0
 8008b5c:	341a      	adds	r4, #26
 8008b5e:	42b5      	cmp	r5, r6
 8008b60:	d11a      	bne.n	8008b98 <_printf_common+0xc8>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e008      	b.n	8008b78 <_printf_common+0xa8>
 8008b66:	2301      	movs	r3, #1
 8008b68:	4652      	mov	r2, sl
 8008b6a:	4641      	mov	r1, r8
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	47c8      	blx	r9
 8008b70:	3001      	adds	r0, #1
 8008b72:	d103      	bne.n	8008b7c <_printf_common+0xac>
 8008b74:	f04f 30ff 	mov.w	r0, #4294967295
 8008b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7c:	3501      	adds	r5, #1
 8008b7e:	e7c6      	b.n	8008b0e <_printf_common+0x3e>
 8008b80:	18e1      	adds	r1, r4, r3
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	2030      	movs	r0, #48	@ 0x30
 8008b86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b8a:	4422      	add	r2, r4
 8008b8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b94:	3302      	adds	r3, #2
 8008b96:	e7c7      	b.n	8008b28 <_printf_common+0x58>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	4641      	mov	r1, r8
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	47c8      	blx	r9
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d0e6      	beq.n	8008b74 <_printf_common+0xa4>
 8008ba6:	3601      	adds	r6, #1
 8008ba8:	e7d9      	b.n	8008b5e <_printf_common+0x8e>
	...

08008bac <_printf_i>:
 8008bac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bb0:	7e0f      	ldrb	r7, [r1, #24]
 8008bb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bb4:	2f78      	cmp	r7, #120	@ 0x78
 8008bb6:	4691      	mov	r9, r2
 8008bb8:	4680      	mov	r8, r0
 8008bba:	460c      	mov	r4, r1
 8008bbc:	469a      	mov	sl, r3
 8008bbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bc2:	d807      	bhi.n	8008bd4 <_printf_i+0x28>
 8008bc4:	2f62      	cmp	r7, #98	@ 0x62
 8008bc6:	d80a      	bhi.n	8008bde <_printf_i+0x32>
 8008bc8:	2f00      	cmp	r7, #0
 8008bca:	f000 80d1 	beq.w	8008d70 <_printf_i+0x1c4>
 8008bce:	2f58      	cmp	r7, #88	@ 0x58
 8008bd0:	f000 80b8 	beq.w	8008d44 <_printf_i+0x198>
 8008bd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bdc:	e03a      	b.n	8008c54 <_printf_i+0xa8>
 8008bde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008be2:	2b15      	cmp	r3, #21
 8008be4:	d8f6      	bhi.n	8008bd4 <_printf_i+0x28>
 8008be6:	a101      	add	r1, pc, #4	@ (adr r1, 8008bec <_printf_i+0x40>)
 8008be8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bec:	08008c45 	.word	0x08008c45
 8008bf0:	08008c59 	.word	0x08008c59
 8008bf4:	08008bd5 	.word	0x08008bd5
 8008bf8:	08008bd5 	.word	0x08008bd5
 8008bfc:	08008bd5 	.word	0x08008bd5
 8008c00:	08008bd5 	.word	0x08008bd5
 8008c04:	08008c59 	.word	0x08008c59
 8008c08:	08008bd5 	.word	0x08008bd5
 8008c0c:	08008bd5 	.word	0x08008bd5
 8008c10:	08008bd5 	.word	0x08008bd5
 8008c14:	08008bd5 	.word	0x08008bd5
 8008c18:	08008d57 	.word	0x08008d57
 8008c1c:	08008c83 	.word	0x08008c83
 8008c20:	08008d11 	.word	0x08008d11
 8008c24:	08008bd5 	.word	0x08008bd5
 8008c28:	08008bd5 	.word	0x08008bd5
 8008c2c:	08008d79 	.word	0x08008d79
 8008c30:	08008bd5 	.word	0x08008bd5
 8008c34:	08008c83 	.word	0x08008c83
 8008c38:	08008bd5 	.word	0x08008bd5
 8008c3c:	08008bd5 	.word	0x08008bd5
 8008c40:	08008d19 	.word	0x08008d19
 8008c44:	6833      	ldr	r3, [r6, #0]
 8008c46:	1d1a      	adds	r2, r3, #4
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	6032      	str	r2, [r6, #0]
 8008c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c54:	2301      	movs	r3, #1
 8008c56:	e09c      	b.n	8008d92 <_printf_i+0x1e6>
 8008c58:	6833      	ldr	r3, [r6, #0]
 8008c5a:	6820      	ldr	r0, [r4, #0]
 8008c5c:	1d19      	adds	r1, r3, #4
 8008c5e:	6031      	str	r1, [r6, #0]
 8008c60:	0606      	lsls	r6, r0, #24
 8008c62:	d501      	bpl.n	8008c68 <_printf_i+0xbc>
 8008c64:	681d      	ldr	r5, [r3, #0]
 8008c66:	e003      	b.n	8008c70 <_printf_i+0xc4>
 8008c68:	0645      	lsls	r5, r0, #25
 8008c6a:	d5fb      	bpl.n	8008c64 <_printf_i+0xb8>
 8008c6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c70:	2d00      	cmp	r5, #0
 8008c72:	da03      	bge.n	8008c7c <_printf_i+0xd0>
 8008c74:	232d      	movs	r3, #45	@ 0x2d
 8008c76:	426d      	negs	r5, r5
 8008c78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c7c:	4858      	ldr	r0, [pc, #352]	@ (8008de0 <_printf_i+0x234>)
 8008c7e:	230a      	movs	r3, #10
 8008c80:	e011      	b.n	8008ca6 <_printf_i+0xfa>
 8008c82:	6821      	ldr	r1, [r4, #0]
 8008c84:	6833      	ldr	r3, [r6, #0]
 8008c86:	0608      	lsls	r0, r1, #24
 8008c88:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c8c:	d402      	bmi.n	8008c94 <_printf_i+0xe8>
 8008c8e:	0649      	lsls	r1, r1, #25
 8008c90:	bf48      	it	mi
 8008c92:	b2ad      	uxthmi	r5, r5
 8008c94:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c96:	4852      	ldr	r0, [pc, #328]	@ (8008de0 <_printf_i+0x234>)
 8008c98:	6033      	str	r3, [r6, #0]
 8008c9a:	bf14      	ite	ne
 8008c9c:	230a      	movne	r3, #10
 8008c9e:	2308      	moveq	r3, #8
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008ca6:	6866      	ldr	r6, [r4, #4]
 8008ca8:	60a6      	str	r6, [r4, #8]
 8008caa:	2e00      	cmp	r6, #0
 8008cac:	db05      	blt.n	8008cba <_printf_i+0x10e>
 8008cae:	6821      	ldr	r1, [r4, #0]
 8008cb0:	432e      	orrs	r6, r5
 8008cb2:	f021 0104 	bic.w	r1, r1, #4
 8008cb6:	6021      	str	r1, [r4, #0]
 8008cb8:	d04b      	beq.n	8008d52 <_printf_i+0x1a6>
 8008cba:	4616      	mov	r6, r2
 8008cbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cc0:	fb03 5711 	mls	r7, r3, r1, r5
 8008cc4:	5dc7      	ldrb	r7, [r0, r7]
 8008cc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cca:	462f      	mov	r7, r5
 8008ccc:	42bb      	cmp	r3, r7
 8008cce:	460d      	mov	r5, r1
 8008cd0:	d9f4      	bls.n	8008cbc <_printf_i+0x110>
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d10b      	bne.n	8008cee <_printf_i+0x142>
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	07df      	lsls	r7, r3, #31
 8008cda:	d508      	bpl.n	8008cee <_printf_i+0x142>
 8008cdc:	6923      	ldr	r3, [r4, #16]
 8008cde:	6861      	ldr	r1, [r4, #4]
 8008ce0:	4299      	cmp	r1, r3
 8008ce2:	bfde      	ittt	le
 8008ce4:	2330      	movle	r3, #48	@ 0x30
 8008ce6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008cea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cee:	1b92      	subs	r2, r2, r6
 8008cf0:	6122      	str	r2, [r4, #16]
 8008cf2:	f8cd a000 	str.w	sl, [sp]
 8008cf6:	464b      	mov	r3, r9
 8008cf8:	aa03      	add	r2, sp, #12
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4640      	mov	r0, r8
 8008cfe:	f7ff fee7 	bl	8008ad0 <_printf_common>
 8008d02:	3001      	adds	r0, #1
 8008d04:	d14a      	bne.n	8008d9c <_printf_i+0x1f0>
 8008d06:	f04f 30ff 	mov.w	r0, #4294967295
 8008d0a:	b004      	add	sp, #16
 8008d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d10:	6823      	ldr	r3, [r4, #0]
 8008d12:	f043 0320 	orr.w	r3, r3, #32
 8008d16:	6023      	str	r3, [r4, #0]
 8008d18:	4832      	ldr	r0, [pc, #200]	@ (8008de4 <_printf_i+0x238>)
 8008d1a:	2778      	movs	r7, #120	@ 0x78
 8008d1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d20:	6823      	ldr	r3, [r4, #0]
 8008d22:	6831      	ldr	r1, [r6, #0]
 8008d24:	061f      	lsls	r7, r3, #24
 8008d26:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d2a:	d402      	bmi.n	8008d32 <_printf_i+0x186>
 8008d2c:	065f      	lsls	r7, r3, #25
 8008d2e:	bf48      	it	mi
 8008d30:	b2ad      	uxthmi	r5, r5
 8008d32:	6031      	str	r1, [r6, #0]
 8008d34:	07d9      	lsls	r1, r3, #31
 8008d36:	bf44      	itt	mi
 8008d38:	f043 0320 	orrmi.w	r3, r3, #32
 8008d3c:	6023      	strmi	r3, [r4, #0]
 8008d3e:	b11d      	cbz	r5, 8008d48 <_printf_i+0x19c>
 8008d40:	2310      	movs	r3, #16
 8008d42:	e7ad      	b.n	8008ca0 <_printf_i+0xf4>
 8008d44:	4826      	ldr	r0, [pc, #152]	@ (8008de0 <_printf_i+0x234>)
 8008d46:	e7e9      	b.n	8008d1c <_printf_i+0x170>
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	f023 0320 	bic.w	r3, r3, #32
 8008d4e:	6023      	str	r3, [r4, #0]
 8008d50:	e7f6      	b.n	8008d40 <_printf_i+0x194>
 8008d52:	4616      	mov	r6, r2
 8008d54:	e7bd      	b.n	8008cd2 <_printf_i+0x126>
 8008d56:	6833      	ldr	r3, [r6, #0]
 8008d58:	6825      	ldr	r5, [r4, #0]
 8008d5a:	6961      	ldr	r1, [r4, #20]
 8008d5c:	1d18      	adds	r0, r3, #4
 8008d5e:	6030      	str	r0, [r6, #0]
 8008d60:	062e      	lsls	r6, r5, #24
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	d501      	bpl.n	8008d6a <_printf_i+0x1be>
 8008d66:	6019      	str	r1, [r3, #0]
 8008d68:	e002      	b.n	8008d70 <_printf_i+0x1c4>
 8008d6a:	0668      	lsls	r0, r5, #25
 8008d6c:	d5fb      	bpl.n	8008d66 <_printf_i+0x1ba>
 8008d6e:	8019      	strh	r1, [r3, #0]
 8008d70:	2300      	movs	r3, #0
 8008d72:	6123      	str	r3, [r4, #16]
 8008d74:	4616      	mov	r6, r2
 8008d76:	e7bc      	b.n	8008cf2 <_printf_i+0x146>
 8008d78:	6833      	ldr	r3, [r6, #0]
 8008d7a:	1d1a      	adds	r2, r3, #4
 8008d7c:	6032      	str	r2, [r6, #0]
 8008d7e:	681e      	ldr	r6, [r3, #0]
 8008d80:	6862      	ldr	r2, [r4, #4]
 8008d82:	2100      	movs	r1, #0
 8008d84:	4630      	mov	r0, r6
 8008d86:	f7f7 fa23 	bl	80001d0 <memchr>
 8008d8a:	b108      	cbz	r0, 8008d90 <_printf_i+0x1e4>
 8008d8c:	1b80      	subs	r0, r0, r6
 8008d8e:	6060      	str	r0, [r4, #4]
 8008d90:	6863      	ldr	r3, [r4, #4]
 8008d92:	6123      	str	r3, [r4, #16]
 8008d94:	2300      	movs	r3, #0
 8008d96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d9a:	e7aa      	b.n	8008cf2 <_printf_i+0x146>
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	4632      	mov	r2, r6
 8008da0:	4649      	mov	r1, r9
 8008da2:	4640      	mov	r0, r8
 8008da4:	47d0      	blx	sl
 8008da6:	3001      	adds	r0, #1
 8008da8:	d0ad      	beq.n	8008d06 <_printf_i+0x15a>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	079b      	lsls	r3, r3, #30
 8008dae:	d413      	bmi.n	8008dd8 <_printf_i+0x22c>
 8008db0:	68e0      	ldr	r0, [r4, #12]
 8008db2:	9b03      	ldr	r3, [sp, #12]
 8008db4:	4298      	cmp	r0, r3
 8008db6:	bfb8      	it	lt
 8008db8:	4618      	movlt	r0, r3
 8008dba:	e7a6      	b.n	8008d0a <_printf_i+0x15e>
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	4632      	mov	r2, r6
 8008dc0:	4649      	mov	r1, r9
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	47d0      	blx	sl
 8008dc6:	3001      	adds	r0, #1
 8008dc8:	d09d      	beq.n	8008d06 <_printf_i+0x15a>
 8008dca:	3501      	adds	r5, #1
 8008dcc:	68e3      	ldr	r3, [r4, #12]
 8008dce:	9903      	ldr	r1, [sp, #12]
 8008dd0:	1a5b      	subs	r3, r3, r1
 8008dd2:	42ab      	cmp	r3, r5
 8008dd4:	dcf2      	bgt.n	8008dbc <_printf_i+0x210>
 8008dd6:	e7eb      	b.n	8008db0 <_printf_i+0x204>
 8008dd8:	2500      	movs	r5, #0
 8008dda:	f104 0619 	add.w	r6, r4, #25
 8008dde:	e7f5      	b.n	8008dcc <_printf_i+0x220>
 8008de0:	0800c07c 	.word	0x0800c07c
 8008de4:	0800c08d 	.word	0x0800c08d

08008de8 <std>:
 8008de8:	2300      	movs	r3, #0
 8008dea:	b510      	push	{r4, lr}
 8008dec:	4604      	mov	r4, r0
 8008dee:	e9c0 3300 	strd	r3, r3, [r0]
 8008df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008df6:	6083      	str	r3, [r0, #8]
 8008df8:	8181      	strh	r1, [r0, #12]
 8008dfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8008dfc:	81c2      	strh	r2, [r0, #14]
 8008dfe:	6183      	str	r3, [r0, #24]
 8008e00:	4619      	mov	r1, r3
 8008e02:	2208      	movs	r2, #8
 8008e04:	305c      	adds	r0, #92	@ 0x5c
 8008e06:	f000 f931 	bl	800906c <memset>
 8008e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e40 <std+0x58>)
 8008e0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e44 <std+0x5c>)
 8008e10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e12:	4b0d      	ldr	r3, [pc, #52]	@ (8008e48 <std+0x60>)
 8008e14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e16:	4b0d      	ldr	r3, [pc, #52]	@ (8008e4c <std+0x64>)
 8008e18:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e50 <std+0x68>)
 8008e1c:	6224      	str	r4, [r4, #32]
 8008e1e:	429c      	cmp	r4, r3
 8008e20:	d006      	beq.n	8008e30 <std+0x48>
 8008e22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e26:	4294      	cmp	r4, r2
 8008e28:	d002      	beq.n	8008e30 <std+0x48>
 8008e2a:	33d0      	adds	r3, #208	@ 0xd0
 8008e2c:	429c      	cmp	r4, r3
 8008e2e:	d105      	bne.n	8008e3c <std+0x54>
 8008e30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e38:	f000 b994 	b.w	8009164 <__retarget_lock_init_recursive>
 8008e3c:	bd10      	pop	{r4, pc}
 8008e3e:	bf00      	nop
 8008e40:	08008f6d 	.word	0x08008f6d
 8008e44:	08008f8f 	.word	0x08008f8f
 8008e48:	08008fc7 	.word	0x08008fc7
 8008e4c:	08008feb 	.word	0x08008feb
 8008e50:	20002e58 	.word	0x20002e58

08008e54 <stdio_exit_handler>:
 8008e54:	4a02      	ldr	r2, [pc, #8]	@ (8008e60 <stdio_exit_handler+0xc>)
 8008e56:	4903      	ldr	r1, [pc, #12]	@ (8008e64 <stdio_exit_handler+0x10>)
 8008e58:	4803      	ldr	r0, [pc, #12]	@ (8008e68 <stdio_exit_handler+0x14>)
 8008e5a:	f000 b869 	b.w	8008f30 <_fwalk_sglue>
 8008e5e:	bf00      	nop
 8008e60:	20002478 	.word	0x20002478
 8008e64:	0800ab25 	.word	0x0800ab25
 8008e68:	20002488 	.word	0x20002488

08008e6c <cleanup_stdio>:
 8008e6c:	6841      	ldr	r1, [r0, #4]
 8008e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ea0 <cleanup_stdio+0x34>)
 8008e70:	4299      	cmp	r1, r3
 8008e72:	b510      	push	{r4, lr}
 8008e74:	4604      	mov	r4, r0
 8008e76:	d001      	beq.n	8008e7c <cleanup_stdio+0x10>
 8008e78:	f001 fe54 	bl	800ab24 <_fflush_r>
 8008e7c:	68a1      	ldr	r1, [r4, #8]
 8008e7e:	4b09      	ldr	r3, [pc, #36]	@ (8008ea4 <cleanup_stdio+0x38>)
 8008e80:	4299      	cmp	r1, r3
 8008e82:	d002      	beq.n	8008e8a <cleanup_stdio+0x1e>
 8008e84:	4620      	mov	r0, r4
 8008e86:	f001 fe4d 	bl	800ab24 <_fflush_r>
 8008e8a:	68e1      	ldr	r1, [r4, #12]
 8008e8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ea8 <cleanup_stdio+0x3c>)
 8008e8e:	4299      	cmp	r1, r3
 8008e90:	d004      	beq.n	8008e9c <cleanup_stdio+0x30>
 8008e92:	4620      	mov	r0, r4
 8008e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e98:	f001 be44 	b.w	800ab24 <_fflush_r>
 8008e9c:	bd10      	pop	{r4, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20002e58 	.word	0x20002e58
 8008ea4:	20002ec0 	.word	0x20002ec0
 8008ea8:	20002f28 	.word	0x20002f28

08008eac <global_stdio_init.part.0>:
 8008eac:	b510      	push	{r4, lr}
 8008eae:	4b0b      	ldr	r3, [pc, #44]	@ (8008edc <global_stdio_init.part.0+0x30>)
 8008eb0:	4c0b      	ldr	r4, [pc, #44]	@ (8008ee0 <global_stdio_init.part.0+0x34>)
 8008eb2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ee4 <global_stdio_init.part.0+0x38>)
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2104      	movs	r1, #4
 8008ebc:	f7ff ff94 	bl	8008de8 <std>
 8008ec0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	2109      	movs	r1, #9
 8008ec8:	f7ff ff8e 	bl	8008de8 <std>
 8008ecc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ed0:	2202      	movs	r2, #2
 8008ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed6:	2112      	movs	r1, #18
 8008ed8:	f7ff bf86 	b.w	8008de8 <std>
 8008edc:	20002f90 	.word	0x20002f90
 8008ee0:	20002e58 	.word	0x20002e58
 8008ee4:	08008e55 	.word	0x08008e55

08008ee8 <__sfp_lock_acquire>:
 8008ee8:	4801      	ldr	r0, [pc, #4]	@ (8008ef0 <__sfp_lock_acquire+0x8>)
 8008eea:	f000 b93c 	b.w	8009166 <__retarget_lock_acquire_recursive>
 8008eee:	bf00      	nop
 8008ef0:	20002f99 	.word	0x20002f99

08008ef4 <__sfp_lock_release>:
 8008ef4:	4801      	ldr	r0, [pc, #4]	@ (8008efc <__sfp_lock_release+0x8>)
 8008ef6:	f000 b937 	b.w	8009168 <__retarget_lock_release_recursive>
 8008efa:	bf00      	nop
 8008efc:	20002f99 	.word	0x20002f99

08008f00 <__sinit>:
 8008f00:	b510      	push	{r4, lr}
 8008f02:	4604      	mov	r4, r0
 8008f04:	f7ff fff0 	bl	8008ee8 <__sfp_lock_acquire>
 8008f08:	6a23      	ldr	r3, [r4, #32]
 8008f0a:	b11b      	cbz	r3, 8008f14 <__sinit+0x14>
 8008f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f10:	f7ff bff0 	b.w	8008ef4 <__sfp_lock_release>
 8008f14:	4b04      	ldr	r3, [pc, #16]	@ (8008f28 <__sinit+0x28>)
 8008f16:	6223      	str	r3, [r4, #32]
 8008f18:	4b04      	ldr	r3, [pc, #16]	@ (8008f2c <__sinit+0x2c>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1f5      	bne.n	8008f0c <__sinit+0xc>
 8008f20:	f7ff ffc4 	bl	8008eac <global_stdio_init.part.0>
 8008f24:	e7f2      	b.n	8008f0c <__sinit+0xc>
 8008f26:	bf00      	nop
 8008f28:	08008e6d 	.word	0x08008e6d
 8008f2c:	20002f90 	.word	0x20002f90

08008f30 <_fwalk_sglue>:
 8008f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f34:	4607      	mov	r7, r0
 8008f36:	4688      	mov	r8, r1
 8008f38:	4614      	mov	r4, r2
 8008f3a:	2600      	movs	r6, #0
 8008f3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f40:	f1b9 0901 	subs.w	r9, r9, #1
 8008f44:	d505      	bpl.n	8008f52 <_fwalk_sglue+0x22>
 8008f46:	6824      	ldr	r4, [r4, #0]
 8008f48:	2c00      	cmp	r4, #0
 8008f4a:	d1f7      	bne.n	8008f3c <_fwalk_sglue+0xc>
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f52:	89ab      	ldrh	r3, [r5, #12]
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d907      	bls.n	8008f68 <_fwalk_sglue+0x38>
 8008f58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	d003      	beq.n	8008f68 <_fwalk_sglue+0x38>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4638      	mov	r0, r7
 8008f64:	47c0      	blx	r8
 8008f66:	4306      	orrs	r6, r0
 8008f68:	3568      	adds	r5, #104	@ 0x68
 8008f6a:	e7e9      	b.n	8008f40 <_fwalk_sglue+0x10>

08008f6c <__sread>:
 8008f6c:	b510      	push	{r4, lr}
 8008f6e:	460c      	mov	r4, r1
 8008f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f74:	f000 f8a8 	bl	80090c8 <_read_r>
 8008f78:	2800      	cmp	r0, #0
 8008f7a:	bfab      	itete	ge
 8008f7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008f7e:	89a3      	ldrhlt	r3, [r4, #12]
 8008f80:	181b      	addge	r3, r3, r0
 8008f82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008f86:	bfac      	ite	ge
 8008f88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008f8a:	81a3      	strhlt	r3, [r4, #12]
 8008f8c:	bd10      	pop	{r4, pc}

08008f8e <__swrite>:
 8008f8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f92:	461f      	mov	r7, r3
 8008f94:	898b      	ldrh	r3, [r1, #12]
 8008f96:	05db      	lsls	r3, r3, #23
 8008f98:	4605      	mov	r5, r0
 8008f9a:	460c      	mov	r4, r1
 8008f9c:	4616      	mov	r6, r2
 8008f9e:	d505      	bpl.n	8008fac <__swrite+0x1e>
 8008fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f000 f87c 	bl	80090a4 <_lseek_r>
 8008fac:	89a3      	ldrh	r3, [r4, #12]
 8008fae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008fb6:	81a3      	strh	r3, [r4, #12]
 8008fb8:	4632      	mov	r2, r6
 8008fba:	463b      	mov	r3, r7
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc2:	f000 b893 	b.w	80090ec <_write_r>

08008fc6 <__sseek>:
 8008fc6:	b510      	push	{r4, lr}
 8008fc8:	460c      	mov	r4, r1
 8008fca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fce:	f000 f869 	bl	80090a4 <_lseek_r>
 8008fd2:	1c43      	adds	r3, r0, #1
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	bf15      	itete	ne
 8008fd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008fda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008fde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008fe2:	81a3      	strheq	r3, [r4, #12]
 8008fe4:	bf18      	it	ne
 8008fe6:	81a3      	strhne	r3, [r4, #12]
 8008fe8:	bd10      	pop	{r4, pc}

08008fea <__sclose>:
 8008fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fee:	f000 b849 	b.w	8009084 <_close_r>

08008ff2 <_vsniprintf_r>:
 8008ff2:	b530      	push	{r4, r5, lr}
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	2c00      	cmp	r4, #0
 8008ff8:	b09b      	sub	sp, #108	@ 0x6c
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	da05      	bge.n	800900c <_vsniprintf_r+0x1a>
 8009000:	238b      	movs	r3, #139	@ 0x8b
 8009002:	6003      	str	r3, [r0, #0]
 8009004:	f04f 30ff 	mov.w	r0, #4294967295
 8009008:	b01b      	add	sp, #108	@ 0x6c
 800900a:	bd30      	pop	{r4, r5, pc}
 800900c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009010:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009014:	f04f 0300 	mov.w	r3, #0
 8009018:	9319      	str	r3, [sp, #100]	@ 0x64
 800901a:	bf14      	ite	ne
 800901c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009020:	4623      	moveq	r3, r4
 8009022:	9302      	str	r3, [sp, #8]
 8009024:	9305      	str	r3, [sp, #20]
 8009026:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800902a:	9100      	str	r1, [sp, #0]
 800902c:	9104      	str	r1, [sp, #16]
 800902e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009032:	4669      	mov	r1, sp
 8009034:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009036:	f001 fbf5 	bl	800a824 <_svfiprintf_r>
 800903a:	1c43      	adds	r3, r0, #1
 800903c:	bfbc      	itt	lt
 800903e:	238b      	movlt	r3, #139	@ 0x8b
 8009040:	602b      	strlt	r3, [r5, #0]
 8009042:	2c00      	cmp	r4, #0
 8009044:	d0e0      	beq.n	8009008 <_vsniprintf_r+0x16>
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	2200      	movs	r2, #0
 800904a:	701a      	strb	r2, [r3, #0]
 800904c:	e7dc      	b.n	8009008 <_vsniprintf_r+0x16>
	...

08009050 <vsniprintf>:
 8009050:	b507      	push	{r0, r1, r2, lr}
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	460a      	mov	r2, r1
 8009058:	4601      	mov	r1, r0
 800905a:	4803      	ldr	r0, [pc, #12]	@ (8009068 <vsniprintf+0x18>)
 800905c:	6800      	ldr	r0, [r0, #0]
 800905e:	f7ff ffc8 	bl	8008ff2 <_vsniprintf_r>
 8009062:	b003      	add	sp, #12
 8009064:	f85d fb04 	ldr.w	pc, [sp], #4
 8009068:	20002484 	.word	0x20002484

0800906c <memset>:
 800906c:	4402      	add	r2, r0
 800906e:	4603      	mov	r3, r0
 8009070:	4293      	cmp	r3, r2
 8009072:	d100      	bne.n	8009076 <memset+0xa>
 8009074:	4770      	bx	lr
 8009076:	f803 1b01 	strb.w	r1, [r3], #1
 800907a:	e7f9      	b.n	8009070 <memset+0x4>

0800907c <_localeconv_r>:
 800907c:	4800      	ldr	r0, [pc, #0]	@ (8009080 <_localeconv_r+0x4>)
 800907e:	4770      	bx	lr
 8009080:	200025c4 	.word	0x200025c4

08009084 <_close_r>:
 8009084:	b538      	push	{r3, r4, r5, lr}
 8009086:	4d06      	ldr	r5, [pc, #24]	@ (80090a0 <_close_r+0x1c>)
 8009088:	2300      	movs	r3, #0
 800908a:	4604      	mov	r4, r0
 800908c:	4608      	mov	r0, r1
 800908e:	602b      	str	r3, [r5, #0]
 8009090:	f7f9 f82a 	bl	80020e8 <_close>
 8009094:	1c43      	adds	r3, r0, #1
 8009096:	d102      	bne.n	800909e <_close_r+0x1a>
 8009098:	682b      	ldr	r3, [r5, #0]
 800909a:	b103      	cbz	r3, 800909e <_close_r+0x1a>
 800909c:	6023      	str	r3, [r4, #0]
 800909e:	bd38      	pop	{r3, r4, r5, pc}
 80090a0:	20002f94 	.word	0x20002f94

080090a4 <_lseek_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d07      	ldr	r5, [pc, #28]	@ (80090c4 <_lseek_r+0x20>)
 80090a8:	4604      	mov	r4, r0
 80090aa:	4608      	mov	r0, r1
 80090ac:	4611      	mov	r1, r2
 80090ae:	2200      	movs	r2, #0
 80090b0:	602a      	str	r2, [r5, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	f7f9 f83f 	bl	8002136 <_lseek>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_lseek_r+0x1e>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_lseek_r+0x1e>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20002f94 	.word	0x20002f94

080090c8 <_read_r>:
 80090c8:	b538      	push	{r3, r4, r5, lr}
 80090ca:	4d07      	ldr	r5, [pc, #28]	@ (80090e8 <_read_r+0x20>)
 80090cc:	4604      	mov	r4, r0
 80090ce:	4608      	mov	r0, r1
 80090d0:	4611      	mov	r1, r2
 80090d2:	2200      	movs	r2, #0
 80090d4:	602a      	str	r2, [r5, #0]
 80090d6:	461a      	mov	r2, r3
 80090d8:	f7f8 ffcd 	bl	8002076 <_read>
 80090dc:	1c43      	adds	r3, r0, #1
 80090de:	d102      	bne.n	80090e6 <_read_r+0x1e>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	b103      	cbz	r3, 80090e6 <_read_r+0x1e>
 80090e4:	6023      	str	r3, [r4, #0]
 80090e6:	bd38      	pop	{r3, r4, r5, pc}
 80090e8:	20002f94 	.word	0x20002f94

080090ec <_write_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	@ (800910c <_write_r+0x20>)
 80090f0:	4604      	mov	r4, r0
 80090f2:	4608      	mov	r0, r1
 80090f4:	4611      	mov	r1, r2
 80090f6:	2200      	movs	r2, #0
 80090f8:	602a      	str	r2, [r5, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	f7f8 ffd8 	bl	80020b0 <_write>
 8009100:	1c43      	adds	r3, r0, #1
 8009102:	d102      	bne.n	800910a <_write_r+0x1e>
 8009104:	682b      	ldr	r3, [r5, #0]
 8009106:	b103      	cbz	r3, 800910a <_write_r+0x1e>
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	bd38      	pop	{r3, r4, r5, pc}
 800910c:	20002f94 	.word	0x20002f94

08009110 <__errno>:
 8009110:	4b01      	ldr	r3, [pc, #4]	@ (8009118 <__errno+0x8>)
 8009112:	6818      	ldr	r0, [r3, #0]
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	20002484 	.word	0x20002484

0800911c <__libc_init_array>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	4d0d      	ldr	r5, [pc, #52]	@ (8009154 <__libc_init_array+0x38>)
 8009120:	4c0d      	ldr	r4, [pc, #52]	@ (8009158 <__libc_init_array+0x3c>)
 8009122:	1b64      	subs	r4, r4, r5
 8009124:	10a4      	asrs	r4, r4, #2
 8009126:	2600      	movs	r6, #0
 8009128:	42a6      	cmp	r6, r4
 800912a:	d109      	bne.n	8009140 <__libc_init_array+0x24>
 800912c:	4d0b      	ldr	r5, [pc, #44]	@ (800915c <__libc_init_array+0x40>)
 800912e:	4c0c      	ldr	r4, [pc, #48]	@ (8009160 <__libc_init_array+0x44>)
 8009130:	f002 f86a 	bl	800b208 <_init>
 8009134:	1b64      	subs	r4, r4, r5
 8009136:	10a4      	asrs	r4, r4, #2
 8009138:	2600      	movs	r6, #0
 800913a:	42a6      	cmp	r6, r4
 800913c:	d105      	bne.n	800914a <__libc_init_array+0x2e>
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	f855 3b04 	ldr.w	r3, [r5], #4
 8009144:	4798      	blx	r3
 8009146:	3601      	adds	r6, #1
 8009148:	e7ee      	b.n	8009128 <__libc_init_array+0xc>
 800914a:	f855 3b04 	ldr.w	r3, [r5], #4
 800914e:	4798      	blx	r3
 8009150:	3601      	adds	r6, #1
 8009152:	e7f2      	b.n	800913a <__libc_init_array+0x1e>
 8009154:	0800c3cc 	.word	0x0800c3cc
 8009158:	0800c3cc 	.word	0x0800c3cc
 800915c:	0800c3cc 	.word	0x0800c3cc
 8009160:	0800c3d0 	.word	0x0800c3d0

08009164 <__retarget_lock_init_recursive>:
 8009164:	4770      	bx	lr

08009166 <__retarget_lock_acquire_recursive>:
 8009166:	4770      	bx	lr

08009168 <__retarget_lock_release_recursive>:
 8009168:	4770      	bx	lr

0800916a <memcpy>:
 800916a:	440a      	add	r2, r1
 800916c:	4291      	cmp	r1, r2
 800916e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009172:	d100      	bne.n	8009176 <memcpy+0xc>
 8009174:	4770      	bx	lr
 8009176:	b510      	push	{r4, lr}
 8009178:	f811 4b01 	ldrb.w	r4, [r1], #1
 800917c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009180:	4291      	cmp	r1, r2
 8009182:	d1f9      	bne.n	8009178 <memcpy+0xe>
 8009184:	bd10      	pop	{r4, pc}
	...

08009188 <__assert_func>:
 8009188:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800918a:	4614      	mov	r4, r2
 800918c:	461a      	mov	r2, r3
 800918e:	4b09      	ldr	r3, [pc, #36]	@ (80091b4 <__assert_func+0x2c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4605      	mov	r5, r0
 8009194:	68d8      	ldr	r0, [r3, #12]
 8009196:	b14c      	cbz	r4, 80091ac <__assert_func+0x24>
 8009198:	4b07      	ldr	r3, [pc, #28]	@ (80091b8 <__assert_func+0x30>)
 800919a:	9100      	str	r1, [sp, #0]
 800919c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091a0:	4906      	ldr	r1, [pc, #24]	@ (80091bc <__assert_func+0x34>)
 80091a2:	462b      	mov	r3, r5
 80091a4:	f001 fce6 	bl	800ab74 <fiprintf>
 80091a8:	f001 fd20 	bl	800abec <abort>
 80091ac:	4b04      	ldr	r3, [pc, #16]	@ (80091c0 <__assert_func+0x38>)
 80091ae:	461c      	mov	r4, r3
 80091b0:	e7f3      	b.n	800919a <__assert_func+0x12>
 80091b2:	bf00      	nop
 80091b4:	20002484 	.word	0x20002484
 80091b8:	0800c09e 	.word	0x0800c09e
 80091bc:	0800c0ab 	.word	0x0800c0ab
 80091c0:	0800c0d9 	.word	0x0800c0d9

080091c4 <quorem>:
 80091c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	6903      	ldr	r3, [r0, #16]
 80091ca:	690c      	ldr	r4, [r1, #16]
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	4607      	mov	r7, r0
 80091d0:	db7e      	blt.n	80092d0 <quorem+0x10c>
 80091d2:	3c01      	subs	r4, #1
 80091d4:	f101 0814 	add.w	r8, r1, #20
 80091d8:	00a3      	lsls	r3, r4, #2
 80091da:	f100 0514 	add.w	r5, r0, #20
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091e4:	9301      	str	r3, [sp, #4]
 80091e6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091ee:	3301      	adds	r3, #1
 80091f0:	429a      	cmp	r2, r3
 80091f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091f6:	fbb2 f6f3 	udiv	r6, r2, r3
 80091fa:	d32e      	bcc.n	800925a <quorem+0x96>
 80091fc:	f04f 0a00 	mov.w	sl, #0
 8009200:	46c4      	mov	ip, r8
 8009202:	46ae      	mov	lr, r5
 8009204:	46d3      	mov	fp, sl
 8009206:	f85c 3b04 	ldr.w	r3, [ip], #4
 800920a:	b298      	uxth	r0, r3
 800920c:	fb06 a000 	mla	r0, r6, r0, sl
 8009210:	0c02      	lsrs	r2, r0, #16
 8009212:	0c1b      	lsrs	r3, r3, #16
 8009214:	fb06 2303 	mla	r3, r6, r3, r2
 8009218:	f8de 2000 	ldr.w	r2, [lr]
 800921c:	b280      	uxth	r0, r0
 800921e:	b292      	uxth	r2, r2
 8009220:	1a12      	subs	r2, r2, r0
 8009222:	445a      	add	r2, fp
 8009224:	f8de 0000 	ldr.w	r0, [lr]
 8009228:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800922c:	b29b      	uxth	r3, r3
 800922e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009232:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009236:	b292      	uxth	r2, r2
 8009238:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800923c:	45e1      	cmp	r9, ip
 800923e:	f84e 2b04 	str.w	r2, [lr], #4
 8009242:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009246:	d2de      	bcs.n	8009206 <quorem+0x42>
 8009248:	9b00      	ldr	r3, [sp, #0]
 800924a:	58eb      	ldr	r3, [r5, r3]
 800924c:	b92b      	cbnz	r3, 800925a <quorem+0x96>
 800924e:	9b01      	ldr	r3, [sp, #4]
 8009250:	3b04      	subs	r3, #4
 8009252:	429d      	cmp	r5, r3
 8009254:	461a      	mov	r2, r3
 8009256:	d32f      	bcc.n	80092b8 <quorem+0xf4>
 8009258:	613c      	str	r4, [r7, #16]
 800925a:	4638      	mov	r0, r7
 800925c:	f001 f97e 	bl	800a55c <__mcmp>
 8009260:	2800      	cmp	r0, #0
 8009262:	db25      	blt.n	80092b0 <quorem+0xec>
 8009264:	4629      	mov	r1, r5
 8009266:	2000      	movs	r0, #0
 8009268:	f858 2b04 	ldr.w	r2, [r8], #4
 800926c:	f8d1 c000 	ldr.w	ip, [r1]
 8009270:	fa1f fe82 	uxth.w	lr, r2
 8009274:	fa1f f38c 	uxth.w	r3, ip
 8009278:	eba3 030e 	sub.w	r3, r3, lr
 800927c:	4403      	add	r3, r0
 800927e:	0c12      	lsrs	r2, r2, #16
 8009280:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009284:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009288:	b29b      	uxth	r3, r3
 800928a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800928e:	45c1      	cmp	r9, r8
 8009290:	f841 3b04 	str.w	r3, [r1], #4
 8009294:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009298:	d2e6      	bcs.n	8009268 <quorem+0xa4>
 800929a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800929e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092a2:	b922      	cbnz	r2, 80092ae <quorem+0xea>
 80092a4:	3b04      	subs	r3, #4
 80092a6:	429d      	cmp	r5, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	d30b      	bcc.n	80092c4 <quorem+0x100>
 80092ac:	613c      	str	r4, [r7, #16]
 80092ae:	3601      	adds	r6, #1
 80092b0:	4630      	mov	r0, r6
 80092b2:	b003      	add	sp, #12
 80092b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	3b04      	subs	r3, #4
 80092bc:	2a00      	cmp	r2, #0
 80092be:	d1cb      	bne.n	8009258 <quorem+0x94>
 80092c0:	3c01      	subs	r4, #1
 80092c2:	e7c6      	b.n	8009252 <quorem+0x8e>
 80092c4:	6812      	ldr	r2, [r2, #0]
 80092c6:	3b04      	subs	r3, #4
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	d1ef      	bne.n	80092ac <quorem+0xe8>
 80092cc:	3c01      	subs	r4, #1
 80092ce:	e7ea      	b.n	80092a6 <quorem+0xe2>
 80092d0:	2000      	movs	r0, #0
 80092d2:	e7ee      	b.n	80092b2 <quorem+0xee>
 80092d4:	0000      	movs	r0, r0
	...

080092d8 <_dtoa_r>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	69c7      	ldr	r7, [r0, #28]
 80092de:	b097      	sub	sp, #92	@ 0x5c
 80092e0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80092e4:	ec55 4b10 	vmov	r4, r5, d0
 80092e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80092ea:	9107      	str	r1, [sp, #28]
 80092ec:	4681      	mov	r9, r0
 80092ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80092f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80092f2:	b97f      	cbnz	r7, 8009314 <_dtoa_r+0x3c>
 80092f4:	2010      	movs	r0, #16
 80092f6:	f000 fe09 	bl	8009f0c <malloc>
 80092fa:	4602      	mov	r2, r0
 80092fc:	f8c9 001c 	str.w	r0, [r9, #28]
 8009300:	b920      	cbnz	r0, 800930c <_dtoa_r+0x34>
 8009302:	4ba9      	ldr	r3, [pc, #676]	@ (80095a8 <_dtoa_r+0x2d0>)
 8009304:	21ef      	movs	r1, #239	@ 0xef
 8009306:	48a9      	ldr	r0, [pc, #676]	@ (80095ac <_dtoa_r+0x2d4>)
 8009308:	f7ff ff3e 	bl	8009188 <__assert_func>
 800930c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009310:	6007      	str	r7, [r0, #0]
 8009312:	60c7      	str	r7, [r0, #12]
 8009314:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009318:	6819      	ldr	r1, [r3, #0]
 800931a:	b159      	cbz	r1, 8009334 <_dtoa_r+0x5c>
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	604a      	str	r2, [r1, #4]
 8009320:	2301      	movs	r3, #1
 8009322:	4093      	lsls	r3, r2
 8009324:	608b      	str	r3, [r1, #8]
 8009326:	4648      	mov	r0, r9
 8009328:	f000 fee6 	bl	800a0f8 <_Bfree>
 800932c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009330:	2200      	movs	r2, #0
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	1e2b      	subs	r3, r5, #0
 8009336:	bfb9      	ittee	lt
 8009338:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800933c:	9305      	strlt	r3, [sp, #20]
 800933e:	2300      	movge	r3, #0
 8009340:	6033      	strge	r3, [r6, #0]
 8009342:	9f05      	ldr	r7, [sp, #20]
 8009344:	4b9a      	ldr	r3, [pc, #616]	@ (80095b0 <_dtoa_r+0x2d8>)
 8009346:	bfbc      	itt	lt
 8009348:	2201      	movlt	r2, #1
 800934a:	6032      	strlt	r2, [r6, #0]
 800934c:	43bb      	bics	r3, r7
 800934e:	d112      	bne.n	8009376 <_dtoa_r+0x9e>
 8009350:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009352:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009356:	6013      	str	r3, [r2, #0]
 8009358:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800935c:	4323      	orrs	r3, r4
 800935e:	f000 855a 	beq.w	8009e16 <_dtoa_r+0xb3e>
 8009362:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009364:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80095c4 <_dtoa_r+0x2ec>
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 855c 	beq.w	8009e26 <_dtoa_r+0xb4e>
 800936e:	f10a 0303 	add.w	r3, sl, #3
 8009372:	f000 bd56 	b.w	8009e22 <_dtoa_r+0xb4a>
 8009376:	ed9d 7b04 	vldr	d7, [sp, #16]
 800937a:	2200      	movs	r2, #0
 800937c:	ec51 0b17 	vmov	r0, r1, d7
 8009380:	2300      	movs	r3, #0
 8009382:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009386:	f7f7 fb9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800938a:	4680      	mov	r8, r0
 800938c:	b158      	cbz	r0, 80093a6 <_dtoa_r+0xce>
 800938e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009390:	2301      	movs	r3, #1
 8009392:	6013      	str	r3, [r2, #0]
 8009394:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009396:	b113      	cbz	r3, 800939e <_dtoa_r+0xc6>
 8009398:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800939a:	4b86      	ldr	r3, [pc, #536]	@ (80095b4 <_dtoa_r+0x2dc>)
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80095c8 <_dtoa_r+0x2f0>
 80093a2:	f000 bd40 	b.w	8009e26 <_dtoa_r+0xb4e>
 80093a6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80093aa:	aa14      	add	r2, sp, #80	@ 0x50
 80093ac:	a915      	add	r1, sp, #84	@ 0x54
 80093ae:	4648      	mov	r0, r9
 80093b0:	f001 f984 	bl	800a6bc <__d2b>
 80093b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80093b8:	9002      	str	r0, [sp, #8]
 80093ba:	2e00      	cmp	r6, #0
 80093bc:	d078      	beq.n	80094b0 <_dtoa_r+0x1d8>
 80093be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093c0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80093c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80093cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80093d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80093d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80093d8:	4619      	mov	r1, r3
 80093da:	2200      	movs	r2, #0
 80093dc:	4b76      	ldr	r3, [pc, #472]	@ (80095b8 <_dtoa_r+0x2e0>)
 80093de:	f7f6 ff53 	bl	8000288 <__aeabi_dsub>
 80093e2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009590 <_dtoa_r+0x2b8>)
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	f7f7 f906 	bl	80005f8 <__aeabi_dmul>
 80093ec:	a36a      	add	r3, pc, #424	@ (adr r3, 8009598 <_dtoa_r+0x2c0>)
 80093ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f2:	f7f6 ff4b 	bl	800028c <__adddf3>
 80093f6:	4604      	mov	r4, r0
 80093f8:	4630      	mov	r0, r6
 80093fa:	460d      	mov	r5, r1
 80093fc:	f7f7 f892 	bl	8000524 <__aeabi_i2d>
 8009400:	a367      	add	r3, pc, #412	@ (adr r3, 80095a0 <_dtoa_r+0x2c8>)
 8009402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009406:	f7f7 f8f7 	bl	80005f8 <__aeabi_dmul>
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	4620      	mov	r0, r4
 8009410:	4629      	mov	r1, r5
 8009412:	f7f6 ff3b 	bl	800028c <__adddf3>
 8009416:	4604      	mov	r4, r0
 8009418:	460d      	mov	r5, r1
 800941a:	f7f7 fb9d 	bl	8000b58 <__aeabi_d2iz>
 800941e:	2200      	movs	r2, #0
 8009420:	4607      	mov	r7, r0
 8009422:	2300      	movs	r3, #0
 8009424:	4620      	mov	r0, r4
 8009426:	4629      	mov	r1, r5
 8009428:	f7f7 fb58 	bl	8000adc <__aeabi_dcmplt>
 800942c:	b140      	cbz	r0, 8009440 <_dtoa_r+0x168>
 800942e:	4638      	mov	r0, r7
 8009430:	f7f7 f878 	bl	8000524 <__aeabi_i2d>
 8009434:	4622      	mov	r2, r4
 8009436:	462b      	mov	r3, r5
 8009438:	f7f7 fb46 	bl	8000ac8 <__aeabi_dcmpeq>
 800943c:	b900      	cbnz	r0, 8009440 <_dtoa_r+0x168>
 800943e:	3f01      	subs	r7, #1
 8009440:	2f16      	cmp	r7, #22
 8009442:	d852      	bhi.n	80094ea <_dtoa_r+0x212>
 8009444:	4b5d      	ldr	r3, [pc, #372]	@ (80095bc <_dtoa_r+0x2e4>)
 8009446:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800944a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009452:	f7f7 fb43 	bl	8000adc <__aeabi_dcmplt>
 8009456:	2800      	cmp	r0, #0
 8009458:	d049      	beq.n	80094ee <_dtoa_r+0x216>
 800945a:	3f01      	subs	r7, #1
 800945c:	2300      	movs	r3, #0
 800945e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009460:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009462:	1b9b      	subs	r3, r3, r6
 8009464:	1e5a      	subs	r2, r3, #1
 8009466:	bf45      	ittet	mi
 8009468:	f1c3 0301 	rsbmi	r3, r3, #1
 800946c:	9300      	strmi	r3, [sp, #0]
 800946e:	2300      	movpl	r3, #0
 8009470:	2300      	movmi	r3, #0
 8009472:	9206      	str	r2, [sp, #24]
 8009474:	bf54      	ite	pl
 8009476:	9300      	strpl	r3, [sp, #0]
 8009478:	9306      	strmi	r3, [sp, #24]
 800947a:	2f00      	cmp	r7, #0
 800947c:	db39      	blt.n	80094f2 <_dtoa_r+0x21a>
 800947e:	9b06      	ldr	r3, [sp, #24]
 8009480:	970d      	str	r7, [sp, #52]	@ 0x34
 8009482:	443b      	add	r3, r7
 8009484:	9306      	str	r3, [sp, #24]
 8009486:	2300      	movs	r3, #0
 8009488:	9308      	str	r3, [sp, #32]
 800948a:	9b07      	ldr	r3, [sp, #28]
 800948c:	2b09      	cmp	r3, #9
 800948e:	d863      	bhi.n	8009558 <_dtoa_r+0x280>
 8009490:	2b05      	cmp	r3, #5
 8009492:	bfc4      	itt	gt
 8009494:	3b04      	subgt	r3, #4
 8009496:	9307      	strgt	r3, [sp, #28]
 8009498:	9b07      	ldr	r3, [sp, #28]
 800949a:	f1a3 0302 	sub.w	r3, r3, #2
 800949e:	bfcc      	ite	gt
 80094a0:	2400      	movgt	r4, #0
 80094a2:	2401      	movle	r4, #1
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d863      	bhi.n	8009570 <_dtoa_r+0x298>
 80094a8:	e8df f003 	tbb	[pc, r3]
 80094ac:	2b375452 	.word	0x2b375452
 80094b0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80094b4:	441e      	add	r6, r3
 80094b6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80094ba:	2b20      	cmp	r3, #32
 80094bc:	bfc1      	itttt	gt
 80094be:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80094c2:	409f      	lslgt	r7, r3
 80094c4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80094c8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80094cc:	bfd6      	itet	le
 80094ce:	f1c3 0320 	rsble	r3, r3, #32
 80094d2:	ea47 0003 	orrgt.w	r0, r7, r3
 80094d6:	fa04 f003 	lslle.w	r0, r4, r3
 80094da:	f7f7 f813 	bl	8000504 <__aeabi_ui2d>
 80094de:	2201      	movs	r2, #1
 80094e0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80094e4:	3e01      	subs	r6, #1
 80094e6:	9212      	str	r2, [sp, #72]	@ 0x48
 80094e8:	e776      	b.n	80093d8 <_dtoa_r+0x100>
 80094ea:	2301      	movs	r3, #1
 80094ec:	e7b7      	b.n	800945e <_dtoa_r+0x186>
 80094ee:	9010      	str	r0, [sp, #64]	@ 0x40
 80094f0:	e7b6      	b.n	8009460 <_dtoa_r+0x188>
 80094f2:	9b00      	ldr	r3, [sp, #0]
 80094f4:	1bdb      	subs	r3, r3, r7
 80094f6:	9300      	str	r3, [sp, #0]
 80094f8:	427b      	negs	r3, r7
 80094fa:	9308      	str	r3, [sp, #32]
 80094fc:	2300      	movs	r3, #0
 80094fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8009500:	e7c3      	b.n	800948a <_dtoa_r+0x1b2>
 8009502:	2301      	movs	r3, #1
 8009504:	9309      	str	r3, [sp, #36]	@ 0x24
 8009506:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009508:	eb07 0b03 	add.w	fp, r7, r3
 800950c:	f10b 0301 	add.w	r3, fp, #1
 8009510:	2b01      	cmp	r3, #1
 8009512:	9303      	str	r3, [sp, #12]
 8009514:	bfb8      	it	lt
 8009516:	2301      	movlt	r3, #1
 8009518:	e006      	b.n	8009528 <_dtoa_r+0x250>
 800951a:	2301      	movs	r3, #1
 800951c:	9309      	str	r3, [sp, #36]	@ 0x24
 800951e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009520:	2b00      	cmp	r3, #0
 8009522:	dd28      	ble.n	8009576 <_dtoa_r+0x29e>
 8009524:	469b      	mov	fp, r3
 8009526:	9303      	str	r3, [sp, #12]
 8009528:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800952c:	2100      	movs	r1, #0
 800952e:	2204      	movs	r2, #4
 8009530:	f102 0514 	add.w	r5, r2, #20
 8009534:	429d      	cmp	r5, r3
 8009536:	d926      	bls.n	8009586 <_dtoa_r+0x2ae>
 8009538:	6041      	str	r1, [r0, #4]
 800953a:	4648      	mov	r0, r9
 800953c:	f000 fd9c 	bl	800a078 <_Balloc>
 8009540:	4682      	mov	sl, r0
 8009542:	2800      	cmp	r0, #0
 8009544:	d142      	bne.n	80095cc <_dtoa_r+0x2f4>
 8009546:	4b1e      	ldr	r3, [pc, #120]	@ (80095c0 <_dtoa_r+0x2e8>)
 8009548:	4602      	mov	r2, r0
 800954a:	f240 11af 	movw	r1, #431	@ 0x1af
 800954e:	e6da      	b.n	8009306 <_dtoa_r+0x2e>
 8009550:	2300      	movs	r3, #0
 8009552:	e7e3      	b.n	800951c <_dtoa_r+0x244>
 8009554:	2300      	movs	r3, #0
 8009556:	e7d5      	b.n	8009504 <_dtoa_r+0x22c>
 8009558:	2401      	movs	r4, #1
 800955a:	2300      	movs	r3, #0
 800955c:	9307      	str	r3, [sp, #28]
 800955e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009560:	f04f 3bff 	mov.w	fp, #4294967295
 8009564:	2200      	movs	r2, #0
 8009566:	f8cd b00c 	str.w	fp, [sp, #12]
 800956a:	2312      	movs	r3, #18
 800956c:	920c      	str	r2, [sp, #48]	@ 0x30
 800956e:	e7db      	b.n	8009528 <_dtoa_r+0x250>
 8009570:	2301      	movs	r3, #1
 8009572:	9309      	str	r3, [sp, #36]	@ 0x24
 8009574:	e7f4      	b.n	8009560 <_dtoa_r+0x288>
 8009576:	f04f 0b01 	mov.w	fp, #1
 800957a:	f8cd b00c 	str.w	fp, [sp, #12]
 800957e:	465b      	mov	r3, fp
 8009580:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009584:	e7d0      	b.n	8009528 <_dtoa_r+0x250>
 8009586:	3101      	adds	r1, #1
 8009588:	0052      	lsls	r2, r2, #1
 800958a:	e7d1      	b.n	8009530 <_dtoa_r+0x258>
 800958c:	f3af 8000 	nop.w
 8009590:	636f4361 	.word	0x636f4361
 8009594:	3fd287a7 	.word	0x3fd287a7
 8009598:	8b60c8b3 	.word	0x8b60c8b3
 800959c:	3fc68a28 	.word	0x3fc68a28
 80095a0:	509f79fb 	.word	0x509f79fb
 80095a4:	3fd34413 	.word	0x3fd34413
 80095a8:	0800bffb 	.word	0x0800bffb
 80095ac:	0800c0e7 	.word	0x0800c0e7
 80095b0:	7ff00000 	.word	0x7ff00000
 80095b4:	0800c07b 	.word	0x0800c07b
 80095b8:	3ff80000 	.word	0x3ff80000
 80095bc:	0800c1f8 	.word	0x0800c1f8
 80095c0:	0800c13f 	.word	0x0800c13f
 80095c4:	0800c0e3 	.word	0x0800c0e3
 80095c8:	0800c07a 	.word	0x0800c07a
 80095cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095d0:	6018      	str	r0, [r3, #0]
 80095d2:	9b03      	ldr	r3, [sp, #12]
 80095d4:	2b0e      	cmp	r3, #14
 80095d6:	f200 80a1 	bhi.w	800971c <_dtoa_r+0x444>
 80095da:	2c00      	cmp	r4, #0
 80095dc:	f000 809e 	beq.w	800971c <_dtoa_r+0x444>
 80095e0:	2f00      	cmp	r7, #0
 80095e2:	dd33      	ble.n	800964c <_dtoa_r+0x374>
 80095e4:	4b9c      	ldr	r3, [pc, #624]	@ (8009858 <_dtoa_r+0x580>)
 80095e6:	f007 020f 	and.w	r2, r7, #15
 80095ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095ee:	ed93 7b00 	vldr	d7, [r3]
 80095f2:	05f8      	lsls	r0, r7, #23
 80095f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80095f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80095fc:	d516      	bpl.n	800962c <_dtoa_r+0x354>
 80095fe:	4b97      	ldr	r3, [pc, #604]	@ (800985c <_dtoa_r+0x584>)
 8009600:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009604:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009608:	f7f7 f920 	bl	800084c <__aeabi_ddiv>
 800960c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009610:	f004 040f 	and.w	r4, r4, #15
 8009614:	2603      	movs	r6, #3
 8009616:	4d91      	ldr	r5, [pc, #580]	@ (800985c <_dtoa_r+0x584>)
 8009618:	b954      	cbnz	r4, 8009630 <_dtoa_r+0x358>
 800961a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800961e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009622:	f7f7 f913 	bl	800084c <__aeabi_ddiv>
 8009626:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800962a:	e028      	b.n	800967e <_dtoa_r+0x3a6>
 800962c:	2602      	movs	r6, #2
 800962e:	e7f2      	b.n	8009616 <_dtoa_r+0x33e>
 8009630:	07e1      	lsls	r1, r4, #31
 8009632:	d508      	bpl.n	8009646 <_dtoa_r+0x36e>
 8009634:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009638:	e9d5 2300 	ldrd	r2, r3, [r5]
 800963c:	f7f6 ffdc 	bl	80005f8 <__aeabi_dmul>
 8009640:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009644:	3601      	adds	r6, #1
 8009646:	1064      	asrs	r4, r4, #1
 8009648:	3508      	adds	r5, #8
 800964a:	e7e5      	b.n	8009618 <_dtoa_r+0x340>
 800964c:	f000 80af 	beq.w	80097ae <_dtoa_r+0x4d6>
 8009650:	427c      	negs	r4, r7
 8009652:	4b81      	ldr	r3, [pc, #516]	@ (8009858 <_dtoa_r+0x580>)
 8009654:	4d81      	ldr	r5, [pc, #516]	@ (800985c <_dtoa_r+0x584>)
 8009656:	f004 020f 	and.w	r2, r4, #15
 800965a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009666:	f7f6 ffc7 	bl	80005f8 <__aeabi_dmul>
 800966a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800966e:	1124      	asrs	r4, r4, #4
 8009670:	2300      	movs	r3, #0
 8009672:	2602      	movs	r6, #2
 8009674:	2c00      	cmp	r4, #0
 8009676:	f040 808f 	bne.w	8009798 <_dtoa_r+0x4c0>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1d3      	bne.n	8009626 <_dtoa_r+0x34e>
 800967e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009680:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 8094 	beq.w	80097b2 <_dtoa_r+0x4da>
 800968a:	4b75      	ldr	r3, [pc, #468]	@ (8009860 <_dtoa_r+0x588>)
 800968c:	2200      	movs	r2, #0
 800968e:	4620      	mov	r0, r4
 8009690:	4629      	mov	r1, r5
 8009692:	f7f7 fa23 	bl	8000adc <__aeabi_dcmplt>
 8009696:	2800      	cmp	r0, #0
 8009698:	f000 808b 	beq.w	80097b2 <_dtoa_r+0x4da>
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 8087 	beq.w	80097b2 <_dtoa_r+0x4da>
 80096a4:	f1bb 0f00 	cmp.w	fp, #0
 80096a8:	dd34      	ble.n	8009714 <_dtoa_r+0x43c>
 80096aa:	4620      	mov	r0, r4
 80096ac:	4b6d      	ldr	r3, [pc, #436]	@ (8009864 <_dtoa_r+0x58c>)
 80096ae:	2200      	movs	r2, #0
 80096b0:	4629      	mov	r1, r5
 80096b2:	f7f6 ffa1 	bl	80005f8 <__aeabi_dmul>
 80096b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096ba:	f107 38ff 	add.w	r8, r7, #4294967295
 80096be:	3601      	adds	r6, #1
 80096c0:	465c      	mov	r4, fp
 80096c2:	4630      	mov	r0, r6
 80096c4:	f7f6 ff2e 	bl	8000524 <__aeabi_i2d>
 80096c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096cc:	f7f6 ff94 	bl	80005f8 <__aeabi_dmul>
 80096d0:	4b65      	ldr	r3, [pc, #404]	@ (8009868 <_dtoa_r+0x590>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	f7f6 fdda 	bl	800028c <__adddf3>
 80096d8:	4605      	mov	r5, r0
 80096da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80096de:	2c00      	cmp	r4, #0
 80096e0:	d16a      	bne.n	80097b8 <_dtoa_r+0x4e0>
 80096e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096e6:	4b61      	ldr	r3, [pc, #388]	@ (800986c <_dtoa_r+0x594>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	f7f6 fdcd 	bl	8000288 <__aeabi_dsub>
 80096ee:	4602      	mov	r2, r0
 80096f0:	460b      	mov	r3, r1
 80096f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096f6:	462a      	mov	r2, r5
 80096f8:	4633      	mov	r3, r6
 80096fa:	f7f7 fa0d 	bl	8000b18 <__aeabi_dcmpgt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	f040 8298 	bne.w	8009c34 <_dtoa_r+0x95c>
 8009704:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009708:	462a      	mov	r2, r5
 800970a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800970e:	f7f7 f9e5 	bl	8000adc <__aeabi_dcmplt>
 8009712:	bb38      	cbnz	r0, 8009764 <_dtoa_r+0x48c>
 8009714:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009718:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800971c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800971e:	2b00      	cmp	r3, #0
 8009720:	f2c0 8157 	blt.w	80099d2 <_dtoa_r+0x6fa>
 8009724:	2f0e      	cmp	r7, #14
 8009726:	f300 8154 	bgt.w	80099d2 <_dtoa_r+0x6fa>
 800972a:	4b4b      	ldr	r3, [pc, #300]	@ (8009858 <_dtoa_r+0x580>)
 800972c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009730:	ed93 7b00 	vldr	d7, [r3]
 8009734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009736:	2b00      	cmp	r3, #0
 8009738:	ed8d 7b00 	vstr	d7, [sp]
 800973c:	f280 80e5 	bge.w	800990a <_dtoa_r+0x632>
 8009740:	9b03      	ldr	r3, [sp, #12]
 8009742:	2b00      	cmp	r3, #0
 8009744:	f300 80e1 	bgt.w	800990a <_dtoa_r+0x632>
 8009748:	d10c      	bne.n	8009764 <_dtoa_r+0x48c>
 800974a:	4b48      	ldr	r3, [pc, #288]	@ (800986c <_dtoa_r+0x594>)
 800974c:	2200      	movs	r2, #0
 800974e:	ec51 0b17 	vmov	r0, r1, d7
 8009752:	f7f6 ff51 	bl	80005f8 <__aeabi_dmul>
 8009756:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800975a:	f7f7 f9d3 	bl	8000b04 <__aeabi_dcmpge>
 800975e:	2800      	cmp	r0, #0
 8009760:	f000 8266 	beq.w	8009c30 <_dtoa_r+0x958>
 8009764:	2400      	movs	r4, #0
 8009766:	4625      	mov	r5, r4
 8009768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800976a:	4656      	mov	r6, sl
 800976c:	ea6f 0803 	mvn.w	r8, r3
 8009770:	2700      	movs	r7, #0
 8009772:	4621      	mov	r1, r4
 8009774:	4648      	mov	r0, r9
 8009776:	f000 fcbf 	bl	800a0f8 <_Bfree>
 800977a:	2d00      	cmp	r5, #0
 800977c:	f000 80bd 	beq.w	80098fa <_dtoa_r+0x622>
 8009780:	b12f      	cbz	r7, 800978e <_dtoa_r+0x4b6>
 8009782:	42af      	cmp	r7, r5
 8009784:	d003      	beq.n	800978e <_dtoa_r+0x4b6>
 8009786:	4639      	mov	r1, r7
 8009788:	4648      	mov	r0, r9
 800978a:	f000 fcb5 	bl	800a0f8 <_Bfree>
 800978e:	4629      	mov	r1, r5
 8009790:	4648      	mov	r0, r9
 8009792:	f000 fcb1 	bl	800a0f8 <_Bfree>
 8009796:	e0b0      	b.n	80098fa <_dtoa_r+0x622>
 8009798:	07e2      	lsls	r2, r4, #31
 800979a:	d505      	bpl.n	80097a8 <_dtoa_r+0x4d0>
 800979c:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097a0:	f7f6 ff2a 	bl	80005f8 <__aeabi_dmul>
 80097a4:	3601      	adds	r6, #1
 80097a6:	2301      	movs	r3, #1
 80097a8:	1064      	asrs	r4, r4, #1
 80097aa:	3508      	adds	r5, #8
 80097ac:	e762      	b.n	8009674 <_dtoa_r+0x39c>
 80097ae:	2602      	movs	r6, #2
 80097b0:	e765      	b.n	800967e <_dtoa_r+0x3a6>
 80097b2:	9c03      	ldr	r4, [sp, #12]
 80097b4:	46b8      	mov	r8, r7
 80097b6:	e784      	b.n	80096c2 <_dtoa_r+0x3ea>
 80097b8:	4b27      	ldr	r3, [pc, #156]	@ (8009858 <_dtoa_r+0x580>)
 80097ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80097c4:	4454      	add	r4, sl
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d054      	beq.n	8009874 <_dtoa_r+0x59c>
 80097ca:	4929      	ldr	r1, [pc, #164]	@ (8009870 <_dtoa_r+0x598>)
 80097cc:	2000      	movs	r0, #0
 80097ce:	f7f7 f83d 	bl	800084c <__aeabi_ddiv>
 80097d2:	4633      	mov	r3, r6
 80097d4:	462a      	mov	r2, r5
 80097d6:	f7f6 fd57 	bl	8000288 <__aeabi_dsub>
 80097da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097de:	4656      	mov	r6, sl
 80097e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097e4:	f7f7 f9b8 	bl	8000b58 <__aeabi_d2iz>
 80097e8:	4605      	mov	r5, r0
 80097ea:	f7f6 fe9b 	bl	8000524 <__aeabi_i2d>
 80097ee:	4602      	mov	r2, r0
 80097f0:	460b      	mov	r3, r1
 80097f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097f6:	f7f6 fd47 	bl	8000288 <__aeabi_dsub>
 80097fa:	3530      	adds	r5, #48	@ 0x30
 80097fc:	4602      	mov	r2, r0
 80097fe:	460b      	mov	r3, r1
 8009800:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009804:	f806 5b01 	strb.w	r5, [r6], #1
 8009808:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800980c:	f7f7 f966 	bl	8000adc <__aeabi_dcmplt>
 8009810:	2800      	cmp	r0, #0
 8009812:	d172      	bne.n	80098fa <_dtoa_r+0x622>
 8009814:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009818:	4911      	ldr	r1, [pc, #68]	@ (8009860 <_dtoa_r+0x588>)
 800981a:	2000      	movs	r0, #0
 800981c:	f7f6 fd34 	bl	8000288 <__aeabi_dsub>
 8009820:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009824:	f7f7 f95a 	bl	8000adc <__aeabi_dcmplt>
 8009828:	2800      	cmp	r0, #0
 800982a:	f040 80b4 	bne.w	8009996 <_dtoa_r+0x6be>
 800982e:	42a6      	cmp	r6, r4
 8009830:	f43f af70 	beq.w	8009714 <_dtoa_r+0x43c>
 8009834:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009838:	4b0a      	ldr	r3, [pc, #40]	@ (8009864 <_dtoa_r+0x58c>)
 800983a:	2200      	movs	r2, #0
 800983c:	f7f6 fedc 	bl	80005f8 <__aeabi_dmul>
 8009840:	4b08      	ldr	r3, [pc, #32]	@ (8009864 <_dtoa_r+0x58c>)
 8009842:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009846:	2200      	movs	r2, #0
 8009848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800984c:	f7f6 fed4 	bl	80005f8 <__aeabi_dmul>
 8009850:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009854:	e7c4      	b.n	80097e0 <_dtoa_r+0x508>
 8009856:	bf00      	nop
 8009858:	0800c1f8 	.word	0x0800c1f8
 800985c:	0800c1d0 	.word	0x0800c1d0
 8009860:	3ff00000 	.word	0x3ff00000
 8009864:	40240000 	.word	0x40240000
 8009868:	401c0000 	.word	0x401c0000
 800986c:	40140000 	.word	0x40140000
 8009870:	3fe00000 	.word	0x3fe00000
 8009874:	4631      	mov	r1, r6
 8009876:	4628      	mov	r0, r5
 8009878:	f7f6 febe 	bl	80005f8 <__aeabi_dmul>
 800987c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009880:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009882:	4656      	mov	r6, sl
 8009884:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009888:	f7f7 f966 	bl	8000b58 <__aeabi_d2iz>
 800988c:	4605      	mov	r5, r0
 800988e:	f7f6 fe49 	bl	8000524 <__aeabi_i2d>
 8009892:	4602      	mov	r2, r0
 8009894:	460b      	mov	r3, r1
 8009896:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800989a:	f7f6 fcf5 	bl	8000288 <__aeabi_dsub>
 800989e:	3530      	adds	r5, #48	@ 0x30
 80098a0:	f806 5b01 	strb.w	r5, [r6], #1
 80098a4:	4602      	mov	r2, r0
 80098a6:	460b      	mov	r3, r1
 80098a8:	42a6      	cmp	r6, r4
 80098aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80098ae:	f04f 0200 	mov.w	r2, #0
 80098b2:	d124      	bne.n	80098fe <_dtoa_r+0x626>
 80098b4:	4baf      	ldr	r3, [pc, #700]	@ (8009b74 <_dtoa_r+0x89c>)
 80098b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80098ba:	f7f6 fce7 	bl	800028c <__adddf3>
 80098be:	4602      	mov	r2, r0
 80098c0:	460b      	mov	r3, r1
 80098c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098c6:	f7f7 f927 	bl	8000b18 <__aeabi_dcmpgt>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d163      	bne.n	8009996 <_dtoa_r+0x6be>
 80098ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098d2:	49a8      	ldr	r1, [pc, #672]	@ (8009b74 <_dtoa_r+0x89c>)
 80098d4:	2000      	movs	r0, #0
 80098d6:	f7f6 fcd7 	bl	8000288 <__aeabi_dsub>
 80098da:	4602      	mov	r2, r0
 80098dc:	460b      	mov	r3, r1
 80098de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098e2:	f7f7 f8fb 	bl	8000adc <__aeabi_dcmplt>
 80098e6:	2800      	cmp	r0, #0
 80098e8:	f43f af14 	beq.w	8009714 <_dtoa_r+0x43c>
 80098ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80098ee:	1e73      	subs	r3, r6, #1
 80098f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098f6:	2b30      	cmp	r3, #48	@ 0x30
 80098f8:	d0f8      	beq.n	80098ec <_dtoa_r+0x614>
 80098fa:	4647      	mov	r7, r8
 80098fc:	e03b      	b.n	8009976 <_dtoa_r+0x69e>
 80098fe:	4b9e      	ldr	r3, [pc, #632]	@ (8009b78 <_dtoa_r+0x8a0>)
 8009900:	f7f6 fe7a 	bl	80005f8 <__aeabi_dmul>
 8009904:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009908:	e7bc      	b.n	8009884 <_dtoa_r+0x5ac>
 800990a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800990e:	4656      	mov	r6, sl
 8009910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009914:	4620      	mov	r0, r4
 8009916:	4629      	mov	r1, r5
 8009918:	f7f6 ff98 	bl	800084c <__aeabi_ddiv>
 800991c:	f7f7 f91c 	bl	8000b58 <__aeabi_d2iz>
 8009920:	4680      	mov	r8, r0
 8009922:	f7f6 fdff 	bl	8000524 <__aeabi_i2d>
 8009926:	e9dd 2300 	ldrd	r2, r3, [sp]
 800992a:	f7f6 fe65 	bl	80005f8 <__aeabi_dmul>
 800992e:	4602      	mov	r2, r0
 8009930:	460b      	mov	r3, r1
 8009932:	4620      	mov	r0, r4
 8009934:	4629      	mov	r1, r5
 8009936:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800993a:	f7f6 fca5 	bl	8000288 <__aeabi_dsub>
 800993e:	f806 4b01 	strb.w	r4, [r6], #1
 8009942:	9d03      	ldr	r5, [sp, #12]
 8009944:	eba6 040a 	sub.w	r4, r6, sl
 8009948:	42a5      	cmp	r5, r4
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	d133      	bne.n	80099b8 <_dtoa_r+0x6e0>
 8009950:	f7f6 fc9c 	bl	800028c <__adddf3>
 8009954:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009958:	4604      	mov	r4, r0
 800995a:	460d      	mov	r5, r1
 800995c:	f7f7 f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 8009960:	b9c0      	cbnz	r0, 8009994 <_dtoa_r+0x6bc>
 8009962:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009966:	4620      	mov	r0, r4
 8009968:	4629      	mov	r1, r5
 800996a:	f7f7 f8ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800996e:	b110      	cbz	r0, 8009976 <_dtoa_r+0x69e>
 8009970:	f018 0f01 	tst.w	r8, #1
 8009974:	d10e      	bne.n	8009994 <_dtoa_r+0x6bc>
 8009976:	9902      	ldr	r1, [sp, #8]
 8009978:	4648      	mov	r0, r9
 800997a:	f000 fbbd 	bl	800a0f8 <_Bfree>
 800997e:	2300      	movs	r3, #0
 8009980:	7033      	strb	r3, [r6, #0]
 8009982:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009984:	3701      	adds	r7, #1
 8009986:	601f      	str	r7, [r3, #0]
 8009988:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 824b 	beq.w	8009e26 <_dtoa_r+0xb4e>
 8009990:	601e      	str	r6, [r3, #0]
 8009992:	e248      	b.n	8009e26 <_dtoa_r+0xb4e>
 8009994:	46b8      	mov	r8, r7
 8009996:	4633      	mov	r3, r6
 8009998:	461e      	mov	r6, r3
 800999a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800999e:	2a39      	cmp	r2, #57	@ 0x39
 80099a0:	d106      	bne.n	80099b0 <_dtoa_r+0x6d8>
 80099a2:	459a      	cmp	sl, r3
 80099a4:	d1f8      	bne.n	8009998 <_dtoa_r+0x6c0>
 80099a6:	2230      	movs	r2, #48	@ 0x30
 80099a8:	f108 0801 	add.w	r8, r8, #1
 80099ac:	f88a 2000 	strb.w	r2, [sl]
 80099b0:	781a      	ldrb	r2, [r3, #0]
 80099b2:	3201      	adds	r2, #1
 80099b4:	701a      	strb	r2, [r3, #0]
 80099b6:	e7a0      	b.n	80098fa <_dtoa_r+0x622>
 80099b8:	4b6f      	ldr	r3, [pc, #444]	@ (8009b78 <_dtoa_r+0x8a0>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	f7f6 fe1c 	bl	80005f8 <__aeabi_dmul>
 80099c0:	2200      	movs	r2, #0
 80099c2:	2300      	movs	r3, #0
 80099c4:	4604      	mov	r4, r0
 80099c6:	460d      	mov	r5, r1
 80099c8:	f7f7 f87e 	bl	8000ac8 <__aeabi_dcmpeq>
 80099cc:	2800      	cmp	r0, #0
 80099ce:	d09f      	beq.n	8009910 <_dtoa_r+0x638>
 80099d0:	e7d1      	b.n	8009976 <_dtoa_r+0x69e>
 80099d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099d4:	2a00      	cmp	r2, #0
 80099d6:	f000 80ea 	beq.w	8009bae <_dtoa_r+0x8d6>
 80099da:	9a07      	ldr	r2, [sp, #28]
 80099dc:	2a01      	cmp	r2, #1
 80099de:	f300 80cd 	bgt.w	8009b7c <_dtoa_r+0x8a4>
 80099e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80099e4:	2a00      	cmp	r2, #0
 80099e6:	f000 80c1 	beq.w	8009b6c <_dtoa_r+0x894>
 80099ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80099ee:	9c08      	ldr	r4, [sp, #32]
 80099f0:	9e00      	ldr	r6, [sp, #0]
 80099f2:	9a00      	ldr	r2, [sp, #0]
 80099f4:	441a      	add	r2, r3
 80099f6:	9200      	str	r2, [sp, #0]
 80099f8:	9a06      	ldr	r2, [sp, #24]
 80099fa:	2101      	movs	r1, #1
 80099fc:	441a      	add	r2, r3
 80099fe:	4648      	mov	r0, r9
 8009a00:	9206      	str	r2, [sp, #24]
 8009a02:	f000 fc2d 	bl	800a260 <__i2b>
 8009a06:	4605      	mov	r5, r0
 8009a08:	b166      	cbz	r6, 8009a24 <_dtoa_r+0x74c>
 8009a0a:	9b06      	ldr	r3, [sp, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	dd09      	ble.n	8009a24 <_dtoa_r+0x74c>
 8009a10:	42b3      	cmp	r3, r6
 8009a12:	9a00      	ldr	r2, [sp, #0]
 8009a14:	bfa8      	it	ge
 8009a16:	4633      	movge	r3, r6
 8009a18:	1ad2      	subs	r2, r2, r3
 8009a1a:	9200      	str	r2, [sp, #0]
 8009a1c:	9a06      	ldr	r2, [sp, #24]
 8009a1e:	1af6      	subs	r6, r6, r3
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	9306      	str	r3, [sp, #24]
 8009a24:	9b08      	ldr	r3, [sp, #32]
 8009a26:	b30b      	cbz	r3, 8009a6c <_dtoa_r+0x794>
 8009a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 80c6 	beq.w	8009bbc <_dtoa_r+0x8e4>
 8009a30:	2c00      	cmp	r4, #0
 8009a32:	f000 80c0 	beq.w	8009bb6 <_dtoa_r+0x8de>
 8009a36:	4629      	mov	r1, r5
 8009a38:	4622      	mov	r2, r4
 8009a3a:	4648      	mov	r0, r9
 8009a3c:	f000 fcc8 	bl	800a3d0 <__pow5mult>
 8009a40:	9a02      	ldr	r2, [sp, #8]
 8009a42:	4601      	mov	r1, r0
 8009a44:	4605      	mov	r5, r0
 8009a46:	4648      	mov	r0, r9
 8009a48:	f000 fc20 	bl	800a28c <__multiply>
 8009a4c:	9902      	ldr	r1, [sp, #8]
 8009a4e:	4680      	mov	r8, r0
 8009a50:	4648      	mov	r0, r9
 8009a52:	f000 fb51 	bl	800a0f8 <_Bfree>
 8009a56:	9b08      	ldr	r3, [sp, #32]
 8009a58:	1b1b      	subs	r3, r3, r4
 8009a5a:	9308      	str	r3, [sp, #32]
 8009a5c:	f000 80b1 	beq.w	8009bc2 <_dtoa_r+0x8ea>
 8009a60:	9a08      	ldr	r2, [sp, #32]
 8009a62:	4641      	mov	r1, r8
 8009a64:	4648      	mov	r0, r9
 8009a66:	f000 fcb3 	bl	800a3d0 <__pow5mult>
 8009a6a:	9002      	str	r0, [sp, #8]
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	4648      	mov	r0, r9
 8009a70:	f000 fbf6 	bl	800a260 <__i2b>
 8009a74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a76:	4604      	mov	r4, r0
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f000 81d8 	beq.w	8009e2e <_dtoa_r+0xb56>
 8009a7e:	461a      	mov	r2, r3
 8009a80:	4601      	mov	r1, r0
 8009a82:	4648      	mov	r0, r9
 8009a84:	f000 fca4 	bl	800a3d0 <__pow5mult>
 8009a88:	9b07      	ldr	r3, [sp, #28]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	f300 809f 	bgt.w	8009bd0 <_dtoa_r+0x8f8>
 8009a92:	9b04      	ldr	r3, [sp, #16]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 8097 	bne.w	8009bc8 <_dtoa_r+0x8f0>
 8009a9a:	9b05      	ldr	r3, [sp, #20]
 8009a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	f040 8093 	bne.w	8009bcc <_dtoa_r+0x8f4>
 8009aa6:	9b05      	ldr	r3, [sp, #20]
 8009aa8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009aac:	0d1b      	lsrs	r3, r3, #20
 8009aae:	051b      	lsls	r3, r3, #20
 8009ab0:	b133      	cbz	r3, 8009ac0 <_dtoa_r+0x7e8>
 8009ab2:	9b00      	ldr	r3, [sp, #0]
 8009ab4:	3301      	adds	r3, #1
 8009ab6:	9300      	str	r3, [sp, #0]
 8009ab8:	9b06      	ldr	r3, [sp, #24]
 8009aba:	3301      	adds	r3, #1
 8009abc:	9306      	str	r3, [sp, #24]
 8009abe:	2301      	movs	r3, #1
 8009ac0:	9308      	str	r3, [sp, #32]
 8009ac2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	f000 81b8 	beq.w	8009e3a <_dtoa_r+0xb62>
 8009aca:	6923      	ldr	r3, [r4, #16]
 8009acc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ad0:	6918      	ldr	r0, [r3, #16]
 8009ad2:	f000 fb79 	bl	800a1c8 <__hi0bits>
 8009ad6:	f1c0 0020 	rsb	r0, r0, #32
 8009ada:	9b06      	ldr	r3, [sp, #24]
 8009adc:	4418      	add	r0, r3
 8009ade:	f010 001f 	ands.w	r0, r0, #31
 8009ae2:	f000 8082 	beq.w	8009bea <_dtoa_r+0x912>
 8009ae6:	f1c0 0320 	rsb	r3, r0, #32
 8009aea:	2b04      	cmp	r3, #4
 8009aec:	dd73      	ble.n	8009bd6 <_dtoa_r+0x8fe>
 8009aee:	9b00      	ldr	r3, [sp, #0]
 8009af0:	f1c0 001c 	rsb	r0, r0, #28
 8009af4:	4403      	add	r3, r0
 8009af6:	9300      	str	r3, [sp, #0]
 8009af8:	9b06      	ldr	r3, [sp, #24]
 8009afa:	4403      	add	r3, r0
 8009afc:	4406      	add	r6, r0
 8009afe:	9306      	str	r3, [sp, #24]
 8009b00:	9b00      	ldr	r3, [sp, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	dd05      	ble.n	8009b12 <_dtoa_r+0x83a>
 8009b06:	9902      	ldr	r1, [sp, #8]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4648      	mov	r0, r9
 8009b0c:	f000 fcba 	bl	800a484 <__lshift>
 8009b10:	9002      	str	r0, [sp, #8]
 8009b12:	9b06      	ldr	r3, [sp, #24]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	dd05      	ble.n	8009b24 <_dtoa_r+0x84c>
 8009b18:	4621      	mov	r1, r4
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4648      	mov	r0, r9
 8009b1e:	f000 fcb1 	bl	800a484 <__lshift>
 8009b22:	4604      	mov	r4, r0
 8009b24:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d061      	beq.n	8009bee <_dtoa_r+0x916>
 8009b2a:	9802      	ldr	r0, [sp, #8]
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	f000 fd15 	bl	800a55c <__mcmp>
 8009b32:	2800      	cmp	r0, #0
 8009b34:	da5b      	bge.n	8009bee <_dtoa_r+0x916>
 8009b36:	2300      	movs	r3, #0
 8009b38:	9902      	ldr	r1, [sp, #8]
 8009b3a:	220a      	movs	r2, #10
 8009b3c:	4648      	mov	r0, r9
 8009b3e:	f000 fafd 	bl	800a13c <__multadd>
 8009b42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b44:	9002      	str	r0, [sp, #8]
 8009b46:	f107 38ff 	add.w	r8, r7, #4294967295
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	f000 8177 	beq.w	8009e3e <_dtoa_r+0xb66>
 8009b50:	4629      	mov	r1, r5
 8009b52:	2300      	movs	r3, #0
 8009b54:	220a      	movs	r2, #10
 8009b56:	4648      	mov	r0, r9
 8009b58:	f000 faf0 	bl	800a13c <__multadd>
 8009b5c:	f1bb 0f00 	cmp.w	fp, #0
 8009b60:	4605      	mov	r5, r0
 8009b62:	dc6f      	bgt.n	8009c44 <_dtoa_r+0x96c>
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	2b02      	cmp	r3, #2
 8009b68:	dc49      	bgt.n	8009bfe <_dtoa_r+0x926>
 8009b6a:	e06b      	b.n	8009c44 <_dtoa_r+0x96c>
 8009b6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b72:	e73c      	b.n	80099ee <_dtoa_r+0x716>
 8009b74:	3fe00000 	.word	0x3fe00000
 8009b78:	40240000 	.word	0x40240000
 8009b7c:	9b03      	ldr	r3, [sp, #12]
 8009b7e:	1e5c      	subs	r4, r3, #1
 8009b80:	9b08      	ldr	r3, [sp, #32]
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	db09      	blt.n	8009b9a <_dtoa_r+0x8c2>
 8009b86:	1b1c      	subs	r4, r3, r4
 8009b88:	9b03      	ldr	r3, [sp, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f6bf af30 	bge.w	80099f0 <_dtoa_r+0x718>
 8009b90:	9b00      	ldr	r3, [sp, #0]
 8009b92:	9a03      	ldr	r2, [sp, #12]
 8009b94:	1a9e      	subs	r6, r3, r2
 8009b96:	2300      	movs	r3, #0
 8009b98:	e72b      	b.n	80099f2 <_dtoa_r+0x71a>
 8009b9a:	9b08      	ldr	r3, [sp, #32]
 8009b9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b9e:	9408      	str	r4, [sp, #32]
 8009ba0:	1ae3      	subs	r3, r4, r3
 8009ba2:	441a      	add	r2, r3
 8009ba4:	9e00      	ldr	r6, [sp, #0]
 8009ba6:	9b03      	ldr	r3, [sp, #12]
 8009ba8:	920d      	str	r2, [sp, #52]	@ 0x34
 8009baa:	2400      	movs	r4, #0
 8009bac:	e721      	b.n	80099f2 <_dtoa_r+0x71a>
 8009bae:	9c08      	ldr	r4, [sp, #32]
 8009bb0:	9e00      	ldr	r6, [sp, #0]
 8009bb2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009bb4:	e728      	b.n	8009a08 <_dtoa_r+0x730>
 8009bb6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009bba:	e751      	b.n	8009a60 <_dtoa_r+0x788>
 8009bbc:	9a08      	ldr	r2, [sp, #32]
 8009bbe:	9902      	ldr	r1, [sp, #8]
 8009bc0:	e750      	b.n	8009a64 <_dtoa_r+0x78c>
 8009bc2:	f8cd 8008 	str.w	r8, [sp, #8]
 8009bc6:	e751      	b.n	8009a6c <_dtoa_r+0x794>
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e779      	b.n	8009ac0 <_dtoa_r+0x7e8>
 8009bcc:	9b04      	ldr	r3, [sp, #16]
 8009bce:	e777      	b.n	8009ac0 <_dtoa_r+0x7e8>
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9308      	str	r3, [sp, #32]
 8009bd4:	e779      	b.n	8009aca <_dtoa_r+0x7f2>
 8009bd6:	d093      	beq.n	8009b00 <_dtoa_r+0x828>
 8009bd8:	9a00      	ldr	r2, [sp, #0]
 8009bda:	331c      	adds	r3, #28
 8009bdc:	441a      	add	r2, r3
 8009bde:	9200      	str	r2, [sp, #0]
 8009be0:	9a06      	ldr	r2, [sp, #24]
 8009be2:	441a      	add	r2, r3
 8009be4:	441e      	add	r6, r3
 8009be6:	9206      	str	r2, [sp, #24]
 8009be8:	e78a      	b.n	8009b00 <_dtoa_r+0x828>
 8009bea:	4603      	mov	r3, r0
 8009bec:	e7f4      	b.n	8009bd8 <_dtoa_r+0x900>
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	46b8      	mov	r8, r7
 8009bf4:	dc20      	bgt.n	8009c38 <_dtoa_r+0x960>
 8009bf6:	469b      	mov	fp, r3
 8009bf8:	9b07      	ldr	r3, [sp, #28]
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	dd1e      	ble.n	8009c3c <_dtoa_r+0x964>
 8009bfe:	f1bb 0f00 	cmp.w	fp, #0
 8009c02:	f47f adb1 	bne.w	8009768 <_dtoa_r+0x490>
 8009c06:	4621      	mov	r1, r4
 8009c08:	465b      	mov	r3, fp
 8009c0a:	2205      	movs	r2, #5
 8009c0c:	4648      	mov	r0, r9
 8009c0e:	f000 fa95 	bl	800a13c <__multadd>
 8009c12:	4601      	mov	r1, r0
 8009c14:	4604      	mov	r4, r0
 8009c16:	9802      	ldr	r0, [sp, #8]
 8009c18:	f000 fca0 	bl	800a55c <__mcmp>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f77f ada3 	ble.w	8009768 <_dtoa_r+0x490>
 8009c22:	4656      	mov	r6, sl
 8009c24:	2331      	movs	r3, #49	@ 0x31
 8009c26:	f806 3b01 	strb.w	r3, [r6], #1
 8009c2a:	f108 0801 	add.w	r8, r8, #1
 8009c2e:	e59f      	b.n	8009770 <_dtoa_r+0x498>
 8009c30:	9c03      	ldr	r4, [sp, #12]
 8009c32:	46b8      	mov	r8, r7
 8009c34:	4625      	mov	r5, r4
 8009c36:	e7f4      	b.n	8009c22 <_dtoa_r+0x94a>
 8009c38:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	f000 8101 	beq.w	8009e46 <_dtoa_r+0xb6e>
 8009c44:	2e00      	cmp	r6, #0
 8009c46:	dd05      	ble.n	8009c54 <_dtoa_r+0x97c>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4632      	mov	r2, r6
 8009c4c:	4648      	mov	r0, r9
 8009c4e:	f000 fc19 	bl	800a484 <__lshift>
 8009c52:	4605      	mov	r5, r0
 8009c54:	9b08      	ldr	r3, [sp, #32]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d05c      	beq.n	8009d14 <_dtoa_r+0xa3c>
 8009c5a:	6869      	ldr	r1, [r5, #4]
 8009c5c:	4648      	mov	r0, r9
 8009c5e:	f000 fa0b 	bl	800a078 <_Balloc>
 8009c62:	4606      	mov	r6, r0
 8009c64:	b928      	cbnz	r0, 8009c72 <_dtoa_r+0x99a>
 8009c66:	4b82      	ldr	r3, [pc, #520]	@ (8009e70 <_dtoa_r+0xb98>)
 8009c68:	4602      	mov	r2, r0
 8009c6a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c6e:	f7ff bb4a 	b.w	8009306 <_dtoa_r+0x2e>
 8009c72:	692a      	ldr	r2, [r5, #16]
 8009c74:	3202      	adds	r2, #2
 8009c76:	0092      	lsls	r2, r2, #2
 8009c78:	f105 010c 	add.w	r1, r5, #12
 8009c7c:	300c      	adds	r0, #12
 8009c7e:	f7ff fa74 	bl	800916a <memcpy>
 8009c82:	2201      	movs	r2, #1
 8009c84:	4631      	mov	r1, r6
 8009c86:	4648      	mov	r0, r9
 8009c88:	f000 fbfc 	bl	800a484 <__lshift>
 8009c8c:	f10a 0301 	add.w	r3, sl, #1
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	eb0a 030b 	add.w	r3, sl, fp
 8009c96:	9308      	str	r3, [sp, #32]
 8009c98:	9b04      	ldr	r3, [sp, #16]
 8009c9a:	f003 0301 	and.w	r3, r3, #1
 8009c9e:	462f      	mov	r7, r5
 8009ca0:	9306      	str	r3, [sp, #24]
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	9b00      	ldr	r3, [sp, #0]
 8009ca6:	9802      	ldr	r0, [sp, #8]
 8009ca8:	4621      	mov	r1, r4
 8009caa:	f103 3bff 	add.w	fp, r3, #4294967295
 8009cae:	f7ff fa89 	bl	80091c4 <quorem>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	3330      	adds	r3, #48	@ 0x30
 8009cb6:	9003      	str	r0, [sp, #12]
 8009cb8:	4639      	mov	r1, r7
 8009cba:	9802      	ldr	r0, [sp, #8]
 8009cbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cbe:	f000 fc4d 	bl	800a55c <__mcmp>
 8009cc2:	462a      	mov	r2, r5
 8009cc4:	9004      	str	r0, [sp, #16]
 8009cc6:	4621      	mov	r1, r4
 8009cc8:	4648      	mov	r0, r9
 8009cca:	f000 fc63 	bl	800a594 <__mdiff>
 8009cce:	68c2      	ldr	r2, [r0, #12]
 8009cd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	bb02      	cbnz	r2, 8009d18 <_dtoa_r+0xa40>
 8009cd6:	4601      	mov	r1, r0
 8009cd8:	9802      	ldr	r0, [sp, #8]
 8009cda:	f000 fc3f 	bl	800a55c <__mcmp>
 8009cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	4631      	mov	r1, r6
 8009ce4:	4648      	mov	r0, r9
 8009ce6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cea:	f000 fa05 	bl	800a0f8 <_Bfree>
 8009cee:	9b07      	ldr	r3, [sp, #28]
 8009cf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009cf2:	9e00      	ldr	r6, [sp, #0]
 8009cf4:	ea42 0103 	orr.w	r1, r2, r3
 8009cf8:	9b06      	ldr	r3, [sp, #24]
 8009cfa:	4319      	orrs	r1, r3
 8009cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfe:	d10d      	bne.n	8009d1c <_dtoa_r+0xa44>
 8009d00:	2b39      	cmp	r3, #57	@ 0x39
 8009d02:	d027      	beq.n	8009d54 <_dtoa_r+0xa7c>
 8009d04:	9a04      	ldr	r2, [sp, #16]
 8009d06:	2a00      	cmp	r2, #0
 8009d08:	dd01      	ble.n	8009d0e <_dtoa_r+0xa36>
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	3331      	adds	r3, #49	@ 0x31
 8009d0e:	f88b 3000 	strb.w	r3, [fp]
 8009d12:	e52e      	b.n	8009772 <_dtoa_r+0x49a>
 8009d14:	4628      	mov	r0, r5
 8009d16:	e7b9      	b.n	8009c8c <_dtoa_r+0x9b4>
 8009d18:	2201      	movs	r2, #1
 8009d1a:	e7e2      	b.n	8009ce2 <_dtoa_r+0xa0a>
 8009d1c:	9904      	ldr	r1, [sp, #16]
 8009d1e:	2900      	cmp	r1, #0
 8009d20:	db04      	blt.n	8009d2c <_dtoa_r+0xa54>
 8009d22:	9807      	ldr	r0, [sp, #28]
 8009d24:	4301      	orrs	r1, r0
 8009d26:	9806      	ldr	r0, [sp, #24]
 8009d28:	4301      	orrs	r1, r0
 8009d2a:	d120      	bne.n	8009d6e <_dtoa_r+0xa96>
 8009d2c:	2a00      	cmp	r2, #0
 8009d2e:	ddee      	ble.n	8009d0e <_dtoa_r+0xa36>
 8009d30:	9902      	ldr	r1, [sp, #8]
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	2201      	movs	r2, #1
 8009d36:	4648      	mov	r0, r9
 8009d38:	f000 fba4 	bl	800a484 <__lshift>
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	9002      	str	r0, [sp, #8]
 8009d40:	f000 fc0c 	bl	800a55c <__mcmp>
 8009d44:	2800      	cmp	r0, #0
 8009d46:	9b00      	ldr	r3, [sp, #0]
 8009d48:	dc02      	bgt.n	8009d50 <_dtoa_r+0xa78>
 8009d4a:	d1e0      	bne.n	8009d0e <_dtoa_r+0xa36>
 8009d4c:	07da      	lsls	r2, r3, #31
 8009d4e:	d5de      	bpl.n	8009d0e <_dtoa_r+0xa36>
 8009d50:	2b39      	cmp	r3, #57	@ 0x39
 8009d52:	d1da      	bne.n	8009d0a <_dtoa_r+0xa32>
 8009d54:	2339      	movs	r3, #57	@ 0x39
 8009d56:	f88b 3000 	strb.w	r3, [fp]
 8009d5a:	4633      	mov	r3, r6
 8009d5c:	461e      	mov	r6, r3
 8009d5e:	3b01      	subs	r3, #1
 8009d60:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d64:	2a39      	cmp	r2, #57	@ 0x39
 8009d66:	d04e      	beq.n	8009e06 <_dtoa_r+0xb2e>
 8009d68:	3201      	adds	r2, #1
 8009d6a:	701a      	strb	r2, [r3, #0]
 8009d6c:	e501      	b.n	8009772 <_dtoa_r+0x49a>
 8009d6e:	2a00      	cmp	r2, #0
 8009d70:	dd03      	ble.n	8009d7a <_dtoa_r+0xaa2>
 8009d72:	2b39      	cmp	r3, #57	@ 0x39
 8009d74:	d0ee      	beq.n	8009d54 <_dtoa_r+0xa7c>
 8009d76:	3301      	adds	r3, #1
 8009d78:	e7c9      	b.n	8009d0e <_dtoa_r+0xa36>
 8009d7a:	9a00      	ldr	r2, [sp, #0]
 8009d7c:	9908      	ldr	r1, [sp, #32]
 8009d7e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d82:	428a      	cmp	r2, r1
 8009d84:	d028      	beq.n	8009dd8 <_dtoa_r+0xb00>
 8009d86:	9902      	ldr	r1, [sp, #8]
 8009d88:	2300      	movs	r3, #0
 8009d8a:	220a      	movs	r2, #10
 8009d8c:	4648      	mov	r0, r9
 8009d8e:	f000 f9d5 	bl	800a13c <__multadd>
 8009d92:	42af      	cmp	r7, r5
 8009d94:	9002      	str	r0, [sp, #8]
 8009d96:	f04f 0300 	mov.w	r3, #0
 8009d9a:	f04f 020a 	mov.w	r2, #10
 8009d9e:	4639      	mov	r1, r7
 8009da0:	4648      	mov	r0, r9
 8009da2:	d107      	bne.n	8009db4 <_dtoa_r+0xadc>
 8009da4:	f000 f9ca 	bl	800a13c <__multadd>
 8009da8:	4607      	mov	r7, r0
 8009daa:	4605      	mov	r5, r0
 8009dac:	9b00      	ldr	r3, [sp, #0]
 8009dae:	3301      	adds	r3, #1
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	e777      	b.n	8009ca4 <_dtoa_r+0x9cc>
 8009db4:	f000 f9c2 	bl	800a13c <__multadd>
 8009db8:	4629      	mov	r1, r5
 8009dba:	4607      	mov	r7, r0
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	220a      	movs	r2, #10
 8009dc0:	4648      	mov	r0, r9
 8009dc2:	f000 f9bb 	bl	800a13c <__multadd>
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	e7f0      	b.n	8009dac <_dtoa_r+0xad4>
 8009dca:	f1bb 0f00 	cmp.w	fp, #0
 8009dce:	bfcc      	ite	gt
 8009dd0:	465e      	movgt	r6, fp
 8009dd2:	2601      	movle	r6, #1
 8009dd4:	4456      	add	r6, sl
 8009dd6:	2700      	movs	r7, #0
 8009dd8:	9902      	ldr	r1, [sp, #8]
 8009dda:	9300      	str	r3, [sp, #0]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	4648      	mov	r0, r9
 8009de0:	f000 fb50 	bl	800a484 <__lshift>
 8009de4:	4621      	mov	r1, r4
 8009de6:	9002      	str	r0, [sp, #8]
 8009de8:	f000 fbb8 	bl	800a55c <__mcmp>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	dcb4      	bgt.n	8009d5a <_dtoa_r+0xa82>
 8009df0:	d102      	bne.n	8009df8 <_dtoa_r+0xb20>
 8009df2:	9b00      	ldr	r3, [sp, #0]
 8009df4:	07db      	lsls	r3, r3, #31
 8009df6:	d4b0      	bmi.n	8009d5a <_dtoa_r+0xa82>
 8009df8:	4633      	mov	r3, r6
 8009dfa:	461e      	mov	r6, r3
 8009dfc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e00:	2a30      	cmp	r2, #48	@ 0x30
 8009e02:	d0fa      	beq.n	8009dfa <_dtoa_r+0xb22>
 8009e04:	e4b5      	b.n	8009772 <_dtoa_r+0x49a>
 8009e06:	459a      	cmp	sl, r3
 8009e08:	d1a8      	bne.n	8009d5c <_dtoa_r+0xa84>
 8009e0a:	2331      	movs	r3, #49	@ 0x31
 8009e0c:	f108 0801 	add.w	r8, r8, #1
 8009e10:	f88a 3000 	strb.w	r3, [sl]
 8009e14:	e4ad      	b.n	8009772 <_dtoa_r+0x49a>
 8009e16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e18:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009e74 <_dtoa_r+0xb9c>
 8009e1c:	b11b      	cbz	r3, 8009e26 <_dtoa_r+0xb4e>
 8009e1e:	f10a 0308 	add.w	r3, sl, #8
 8009e22:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	4650      	mov	r0, sl
 8009e28:	b017      	add	sp, #92	@ 0x5c
 8009e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2e:	9b07      	ldr	r3, [sp, #28]
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	f77f ae2e 	ble.w	8009a92 <_dtoa_r+0x7ba>
 8009e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e38:	9308      	str	r3, [sp, #32]
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	e64d      	b.n	8009ada <_dtoa_r+0x802>
 8009e3e:	f1bb 0f00 	cmp.w	fp, #0
 8009e42:	f77f aed9 	ble.w	8009bf8 <_dtoa_r+0x920>
 8009e46:	4656      	mov	r6, sl
 8009e48:	9802      	ldr	r0, [sp, #8]
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	f7ff f9ba 	bl	80091c4 <quorem>
 8009e50:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009e54:	f806 3b01 	strb.w	r3, [r6], #1
 8009e58:	eba6 020a 	sub.w	r2, r6, sl
 8009e5c:	4593      	cmp	fp, r2
 8009e5e:	ddb4      	ble.n	8009dca <_dtoa_r+0xaf2>
 8009e60:	9902      	ldr	r1, [sp, #8]
 8009e62:	2300      	movs	r3, #0
 8009e64:	220a      	movs	r2, #10
 8009e66:	4648      	mov	r0, r9
 8009e68:	f000 f968 	bl	800a13c <__multadd>
 8009e6c:	9002      	str	r0, [sp, #8]
 8009e6e:	e7eb      	b.n	8009e48 <_dtoa_r+0xb70>
 8009e70:	0800c13f 	.word	0x0800c13f
 8009e74:	0800c0da 	.word	0x0800c0da

08009e78 <_free_r>:
 8009e78:	b538      	push	{r3, r4, r5, lr}
 8009e7a:	4605      	mov	r5, r0
 8009e7c:	2900      	cmp	r1, #0
 8009e7e:	d041      	beq.n	8009f04 <_free_r+0x8c>
 8009e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e84:	1f0c      	subs	r4, r1, #4
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	bfb8      	it	lt
 8009e8a:	18e4      	addlt	r4, r4, r3
 8009e8c:	f000 f8e8 	bl	800a060 <__malloc_lock>
 8009e90:	4a1d      	ldr	r2, [pc, #116]	@ (8009f08 <_free_r+0x90>)
 8009e92:	6813      	ldr	r3, [r2, #0]
 8009e94:	b933      	cbnz	r3, 8009ea4 <_free_r+0x2c>
 8009e96:	6063      	str	r3, [r4, #4]
 8009e98:	6014      	str	r4, [r2, #0]
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ea0:	f000 b8e4 	b.w	800a06c <__malloc_unlock>
 8009ea4:	42a3      	cmp	r3, r4
 8009ea6:	d908      	bls.n	8009eba <_free_r+0x42>
 8009ea8:	6820      	ldr	r0, [r4, #0]
 8009eaa:	1821      	adds	r1, r4, r0
 8009eac:	428b      	cmp	r3, r1
 8009eae:	bf01      	itttt	eq
 8009eb0:	6819      	ldreq	r1, [r3, #0]
 8009eb2:	685b      	ldreq	r3, [r3, #4]
 8009eb4:	1809      	addeq	r1, r1, r0
 8009eb6:	6021      	streq	r1, [r4, #0]
 8009eb8:	e7ed      	b.n	8009e96 <_free_r+0x1e>
 8009eba:	461a      	mov	r2, r3
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	b10b      	cbz	r3, 8009ec4 <_free_r+0x4c>
 8009ec0:	42a3      	cmp	r3, r4
 8009ec2:	d9fa      	bls.n	8009eba <_free_r+0x42>
 8009ec4:	6811      	ldr	r1, [r2, #0]
 8009ec6:	1850      	adds	r0, r2, r1
 8009ec8:	42a0      	cmp	r0, r4
 8009eca:	d10b      	bne.n	8009ee4 <_free_r+0x6c>
 8009ecc:	6820      	ldr	r0, [r4, #0]
 8009ece:	4401      	add	r1, r0
 8009ed0:	1850      	adds	r0, r2, r1
 8009ed2:	4283      	cmp	r3, r0
 8009ed4:	6011      	str	r1, [r2, #0]
 8009ed6:	d1e0      	bne.n	8009e9a <_free_r+0x22>
 8009ed8:	6818      	ldr	r0, [r3, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	6053      	str	r3, [r2, #4]
 8009ede:	4408      	add	r0, r1
 8009ee0:	6010      	str	r0, [r2, #0]
 8009ee2:	e7da      	b.n	8009e9a <_free_r+0x22>
 8009ee4:	d902      	bls.n	8009eec <_free_r+0x74>
 8009ee6:	230c      	movs	r3, #12
 8009ee8:	602b      	str	r3, [r5, #0]
 8009eea:	e7d6      	b.n	8009e9a <_free_r+0x22>
 8009eec:	6820      	ldr	r0, [r4, #0]
 8009eee:	1821      	adds	r1, r4, r0
 8009ef0:	428b      	cmp	r3, r1
 8009ef2:	bf04      	itt	eq
 8009ef4:	6819      	ldreq	r1, [r3, #0]
 8009ef6:	685b      	ldreq	r3, [r3, #4]
 8009ef8:	6063      	str	r3, [r4, #4]
 8009efa:	bf04      	itt	eq
 8009efc:	1809      	addeq	r1, r1, r0
 8009efe:	6021      	streq	r1, [r4, #0]
 8009f00:	6054      	str	r4, [r2, #4]
 8009f02:	e7ca      	b.n	8009e9a <_free_r+0x22>
 8009f04:	bd38      	pop	{r3, r4, r5, pc}
 8009f06:	bf00      	nop
 8009f08:	20002fa0 	.word	0x20002fa0

08009f0c <malloc>:
 8009f0c:	4b02      	ldr	r3, [pc, #8]	@ (8009f18 <malloc+0xc>)
 8009f0e:	4601      	mov	r1, r0
 8009f10:	6818      	ldr	r0, [r3, #0]
 8009f12:	f000 b825 	b.w	8009f60 <_malloc_r>
 8009f16:	bf00      	nop
 8009f18:	20002484 	.word	0x20002484

08009f1c <sbrk_aligned>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8009f5c <sbrk_aligned+0x40>)
 8009f20:	460c      	mov	r4, r1
 8009f22:	6831      	ldr	r1, [r6, #0]
 8009f24:	4605      	mov	r5, r0
 8009f26:	b911      	cbnz	r1, 8009f2e <sbrk_aligned+0x12>
 8009f28:	f000 fe50 	bl	800abcc <_sbrk_r>
 8009f2c:	6030      	str	r0, [r6, #0]
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	f000 fe4b 	bl	800abcc <_sbrk_r>
 8009f36:	1c43      	adds	r3, r0, #1
 8009f38:	d103      	bne.n	8009f42 <sbrk_aligned+0x26>
 8009f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8009f3e:	4620      	mov	r0, r4
 8009f40:	bd70      	pop	{r4, r5, r6, pc}
 8009f42:	1cc4      	adds	r4, r0, #3
 8009f44:	f024 0403 	bic.w	r4, r4, #3
 8009f48:	42a0      	cmp	r0, r4
 8009f4a:	d0f8      	beq.n	8009f3e <sbrk_aligned+0x22>
 8009f4c:	1a21      	subs	r1, r4, r0
 8009f4e:	4628      	mov	r0, r5
 8009f50:	f000 fe3c 	bl	800abcc <_sbrk_r>
 8009f54:	3001      	adds	r0, #1
 8009f56:	d1f2      	bne.n	8009f3e <sbrk_aligned+0x22>
 8009f58:	e7ef      	b.n	8009f3a <sbrk_aligned+0x1e>
 8009f5a:	bf00      	nop
 8009f5c:	20002f9c 	.word	0x20002f9c

08009f60 <_malloc_r>:
 8009f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f64:	1ccd      	adds	r5, r1, #3
 8009f66:	f025 0503 	bic.w	r5, r5, #3
 8009f6a:	3508      	adds	r5, #8
 8009f6c:	2d0c      	cmp	r5, #12
 8009f6e:	bf38      	it	cc
 8009f70:	250c      	movcc	r5, #12
 8009f72:	2d00      	cmp	r5, #0
 8009f74:	4606      	mov	r6, r0
 8009f76:	db01      	blt.n	8009f7c <_malloc_r+0x1c>
 8009f78:	42a9      	cmp	r1, r5
 8009f7a:	d904      	bls.n	8009f86 <_malloc_r+0x26>
 8009f7c:	230c      	movs	r3, #12
 8009f7e:	6033      	str	r3, [r6, #0]
 8009f80:	2000      	movs	r0, #0
 8009f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a05c <_malloc_r+0xfc>
 8009f8a:	f000 f869 	bl	800a060 <__malloc_lock>
 8009f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f92:	461c      	mov	r4, r3
 8009f94:	bb44      	cbnz	r4, 8009fe8 <_malloc_r+0x88>
 8009f96:	4629      	mov	r1, r5
 8009f98:	4630      	mov	r0, r6
 8009f9a:	f7ff ffbf 	bl	8009f1c <sbrk_aligned>
 8009f9e:	1c43      	adds	r3, r0, #1
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	d158      	bne.n	800a056 <_malloc_r+0xf6>
 8009fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8009fa8:	4627      	mov	r7, r4
 8009faa:	2f00      	cmp	r7, #0
 8009fac:	d143      	bne.n	800a036 <_malloc_r+0xd6>
 8009fae:	2c00      	cmp	r4, #0
 8009fb0:	d04b      	beq.n	800a04a <_malloc_r+0xea>
 8009fb2:	6823      	ldr	r3, [r4, #0]
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	4630      	mov	r0, r6
 8009fb8:	eb04 0903 	add.w	r9, r4, r3
 8009fbc:	f000 fe06 	bl	800abcc <_sbrk_r>
 8009fc0:	4581      	cmp	r9, r0
 8009fc2:	d142      	bne.n	800a04a <_malloc_r+0xea>
 8009fc4:	6821      	ldr	r1, [r4, #0]
 8009fc6:	1a6d      	subs	r5, r5, r1
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f7ff ffa6 	bl	8009f1c <sbrk_aligned>
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d03a      	beq.n	800a04a <_malloc_r+0xea>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	442b      	add	r3, r5
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	f8d8 3000 	ldr.w	r3, [r8]
 8009fde:	685a      	ldr	r2, [r3, #4]
 8009fe0:	bb62      	cbnz	r2, 800a03c <_malloc_r+0xdc>
 8009fe2:	f8c8 7000 	str.w	r7, [r8]
 8009fe6:	e00f      	b.n	800a008 <_malloc_r+0xa8>
 8009fe8:	6822      	ldr	r2, [r4, #0]
 8009fea:	1b52      	subs	r2, r2, r5
 8009fec:	d420      	bmi.n	800a030 <_malloc_r+0xd0>
 8009fee:	2a0b      	cmp	r2, #11
 8009ff0:	d917      	bls.n	800a022 <_malloc_r+0xc2>
 8009ff2:	1961      	adds	r1, r4, r5
 8009ff4:	42a3      	cmp	r3, r4
 8009ff6:	6025      	str	r5, [r4, #0]
 8009ff8:	bf18      	it	ne
 8009ffa:	6059      	strne	r1, [r3, #4]
 8009ffc:	6863      	ldr	r3, [r4, #4]
 8009ffe:	bf08      	it	eq
 800a000:	f8c8 1000 	streq.w	r1, [r8]
 800a004:	5162      	str	r2, [r4, r5]
 800a006:	604b      	str	r3, [r1, #4]
 800a008:	4630      	mov	r0, r6
 800a00a:	f000 f82f 	bl	800a06c <__malloc_unlock>
 800a00e:	f104 000b 	add.w	r0, r4, #11
 800a012:	1d23      	adds	r3, r4, #4
 800a014:	f020 0007 	bic.w	r0, r0, #7
 800a018:	1ac2      	subs	r2, r0, r3
 800a01a:	bf1c      	itt	ne
 800a01c:	1a1b      	subne	r3, r3, r0
 800a01e:	50a3      	strne	r3, [r4, r2]
 800a020:	e7af      	b.n	8009f82 <_malloc_r+0x22>
 800a022:	6862      	ldr	r2, [r4, #4]
 800a024:	42a3      	cmp	r3, r4
 800a026:	bf0c      	ite	eq
 800a028:	f8c8 2000 	streq.w	r2, [r8]
 800a02c:	605a      	strne	r2, [r3, #4]
 800a02e:	e7eb      	b.n	800a008 <_malloc_r+0xa8>
 800a030:	4623      	mov	r3, r4
 800a032:	6864      	ldr	r4, [r4, #4]
 800a034:	e7ae      	b.n	8009f94 <_malloc_r+0x34>
 800a036:	463c      	mov	r4, r7
 800a038:	687f      	ldr	r7, [r7, #4]
 800a03a:	e7b6      	b.n	8009faa <_malloc_r+0x4a>
 800a03c:	461a      	mov	r2, r3
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	42a3      	cmp	r3, r4
 800a042:	d1fb      	bne.n	800a03c <_malloc_r+0xdc>
 800a044:	2300      	movs	r3, #0
 800a046:	6053      	str	r3, [r2, #4]
 800a048:	e7de      	b.n	800a008 <_malloc_r+0xa8>
 800a04a:	230c      	movs	r3, #12
 800a04c:	6033      	str	r3, [r6, #0]
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 f80c 	bl	800a06c <__malloc_unlock>
 800a054:	e794      	b.n	8009f80 <_malloc_r+0x20>
 800a056:	6005      	str	r5, [r0, #0]
 800a058:	e7d6      	b.n	800a008 <_malloc_r+0xa8>
 800a05a:	bf00      	nop
 800a05c:	20002fa0 	.word	0x20002fa0

0800a060 <__malloc_lock>:
 800a060:	4801      	ldr	r0, [pc, #4]	@ (800a068 <__malloc_lock+0x8>)
 800a062:	f7ff b880 	b.w	8009166 <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	20002f98 	.word	0x20002f98

0800a06c <__malloc_unlock>:
 800a06c:	4801      	ldr	r0, [pc, #4]	@ (800a074 <__malloc_unlock+0x8>)
 800a06e:	f7ff b87b 	b.w	8009168 <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	20002f98 	.word	0x20002f98

0800a078 <_Balloc>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	69c6      	ldr	r6, [r0, #28]
 800a07c:	4604      	mov	r4, r0
 800a07e:	460d      	mov	r5, r1
 800a080:	b976      	cbnz	r6, 800a0a0 <_Balloc+0x28>
 800a082:	2010      	movs	r0, #16
 800a084:	f7ff ff42 	bl	8009f0c <malloc>
 800a088:	4602      	mov	r2, r0
 800a08a:	61e0      	str	r0, [r4, #28]
 800a08c:	b920      	cbnz	r0, 800a098 <_Balloc+0x20>
 800a08e:	4b18      	ldr	r3, [pc, #96]	@ (800a0f0 <_Balloc+0x78>)
 800a090:	4818      	ldr	r0, [pc, #96]	@ (800a0f4 <_Balloc+0x7c>)
 800a092:	216b      	movs	r1, #107	@ 0x6b
 800a094:	f7ff f878 	bl	8009188 <__assert_func>
 800a098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a09c:	6006      	str	r6, [r0, #0]
 800a09e:	60c6      	str	r6, [r0, #12]
 800a0a0:	69e6      	ldr	r6, [r4, #28]
 800a0a2:	68f3      	ldr	r3, [r6, #12]
 800a0a4:	b183      	cbz	r3, 800a0c8 <_Balloc+0x50>
 800a0a6:	69e3      	ldr	r3, [r4, #28]
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a0ae:	b9b8      	cbnz	r0, 800a0e0 <_Balloc+0x68>
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	fa01 f605 	lsl.w	r6, r1, r5
 800a0b6:	1d72      	adds	r2, r6, #5
 800a0b8:	0092      	lsls	r2, r2, #2
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 fd9d 	bl	800abfa <_calloc_r>
 800a0c0:	b160      	cbz	r0, 800a0dc <_Balloc+0x64>
 800a0c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a0c6:	e00e      	b.n	800a0e6 <_Balloc+0x6e>
 800a0c8:	2221      	movs	r2, #33	@ 0x21
 800a0ca:	2104      	movs	r1, #4
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	f000 fd94 	bl	800abfa <_calloc_r>
 800a0d2:	69e3      	ldr	r3, [r4, #28]
 800a0d4:	60f0      	str	r0, [r6, #12]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d1e4      	bne.n	800a0a6 <_Balloc+0x2e>
 800a0dc:	2000      	movs	r0, #0
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	6802      	ldr	r2, [r0, #0]
 800a0e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0ec:	e7f7      	b.n	800a0de <_Balloc+0x66>
 800a0ee:	bf00      	nop
 800a0f0:	0800bffb 	.word	0x0800bffb
 800a0f4:	0800c150 	.word	0x0800c150

0800a0f8 <_Bfree>:
 800a0f8:	b570      	push	{r4, r5, r6, lr}
 800a0fa:	69c6      	ldr	r6, [r0, #28]
 800a0fc:	4605      	mov	r5, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	b976      	cbnz	r6, 800a120 <_Bfree+0x28>
 800a102:	2010      	movs	r0, #16
 800a104:	f7ff ff02 	bl	8009f0c <malloc>
 800a108:	4602      	mov	r2, r0
 800a10a:	61e8      	str	r0, [r5, #28]
 800a10c:	b920      	cbnz	r0, 800a118 <_Bfree+0x20>
 800a10e:	4b09      	ldr	r3, [pc, #36]	@ (800a134 <_Bfree+0x3c>)
 800a110:	4809      	ldr	r0, [pc, #36]	@ (800a138 <_Bfree+0x40>)
 800a112:	218f      	movs	r1, #143	@ 0x8f
 800a114:	f7ff f838 	bl	8009188 <__assert_func>
 800a118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a11c:	6006      	str	r6, [r0, #0]
 800a11e:	60c6      	str	r6, [r0, #12]
 800a120:	b13c      	cbz	r4, 800a132 <_Bfree+0x3a>
 800a122:	69eb      	ldr	r3, [r5, #28]
 800a124:	6862      	ldr	r2, [r4, #4]
 800a126:	68db      	ldr	r3, [r3, #12]
 800a128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a12c:	6021      	str	r1, [r4, #0]
 800a12e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	0800bffb 	.word	0x0800bffb
 800a138:	0800c150 	.word	0x0800c150

0800a13c <__multadd>:
 800a13c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a140:	690d      	ldr	r5, [r1, #16]
 800a142:	4607      	mov	r7, r0
 800a144:	460c      	mov	r4, r1
 800a146:	461e      	mov	r6, r3
 800a148:	f101 0c14 	add.w	ip, r1, #20
 800a14c:	2000      	movs	r0, #0
 800a14e:	f8dc 3000 	ldr.w	r3, [ip]
 800a152:	b299      	uxth	r1, r3
 800a154:	fb02 6101 	mla	r1, r2, r1, r6
 800a158:	0c1e      	lsrs	r6, r3, #16
 800a15a:	0c0b      	lsrs	r3, r1, #16
 800a15c:	fb02 3306 	mla	r3, r2, r6, r3
 800a160:	b289      	uxth	r1, r1
 800a162:	3001      	adds	r0, #1
 800a164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a168:	4285      	cmp	r5, r0
 800a16a:	f84c 1b04 	str.w	r1, [ip], #4
 800a16e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a172:	dcec      	bgt.n	800a14e <__multadd+0x12>
 800a174:	b30e      	cbz	r6, 800a1ba <__multadd+0x7e>
 800a176:	68a3      	ldr	r3, [r4, #8]
 800a178:	42ab      	cmp	r3, r5
 800a17a:	dc19      	bgt.n	800a1b0 <__multadd+0x74>
 800a17c:	6861      	ldr	r1, [r4, #4]
 800a17e:	4638      	mov	r0, r7
 800a180:	3101      	adds	r1, #1
 800a182:	f7ff ff79 	bl	800a078 <_Balloc>
 800a186:	4680      	mov	r8, r0
 800a188:	b928      	cbnz	r0, 800a196 <__multadd+0x5a>
 800a18a:	4602      	mov	r2, r0
 800a18c:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c0 <__multadd+0x84>)
 800a18e:	480d      	ldr	r0, [pc, #52]	@ (800a1c4 <__multadd+0x88>)
 800a190:	21ba      	movs	r1, #186	@ 0xba
 800a192:	f7fe fff9 	bl	8009188 <__assert_func>
 800a196:	6922      	ldr	r2, [r4, #16]
 800a198:	3202      	adds	r2, #2
 800a19a:	f104 010c 	add.w	r1, r4, #12
 800a19e:	0092      	lsls	r2, r2, #2
 800a1a0:	300c      	adds	r0, #12
 800a1a2:	f7fe ffe2 	bl	800916a <memcpy>
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	f7ff ffa5 	bl	800a0f8 <_Bfree>
 800a1ae:	4644      	mov	r4, r8
 800a1b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a1b4:	3501      	adds	r5, #1
 800a1b6:	615e      	str	r6, [r3, #20]
 800a1b8:	6125      	str	r5, [r4, #16]
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c0:	0800c13f 	.word	0x0800c13f
 800a1c4:	0800c150 	.word	0x0800c150

0800a1c8 <__hi0bits>:
 800a1c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	bf36      	itet	cc
 800a1d0:	0403      	lslcc	r3, r0, #16
 800a1d2:	2000      	movcs	r0, #0
 800a1d4:	2010      	movcc	r0, #16
 800a1d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a1da:	bf3c      	itt	cc
 800a1dc:	021b      	lslcc	r3, r3, #8
 800a1de:	3008      	addcc	r0, #8
 800a1e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1e4:	bf3c      	itt	cc
 800a1e6:	011b      	lslcc	r3, r3, #4
 800a1e8:	3004      	addcc	r0, #4
 800a1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1ee:	bf3c      	itt	cc
 800a1f0:	009b      	lslcc	r3, r3, #2
 800a1f2:	3002      	addcc	r0, #2
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	db05      	blt.n	800a204 <__hi0bits+0x3c>
 800a1f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a1fc:	f100 0001 	add.w	r0, r0, #1
 800a200:	bf08      	it	eq
 800a202:	2020      	moveq	r0, #32
 800a204:	4770      	bx	lr

0800a206 <__lo0bits>:
 800a206:	6803      	ldr	r3, [r0, #0]
 800a208:	4602      	mov	r2, r0
 800a20a:	f013 0007 	ands.w	r0, r3, #7
 800a20e:	d00b      	beq.n	800a228 <__lo0bits+0x22>
 800a210:	07d9      	lsls	r1, r3, #31
 800a212:	d421      	bmi.n	800a258 <__lo0bits+0x52>
 800a214:	0798      	lsls	r0, r3, #30
 800a216:	bf49      	itett	mi
 800a218:	085b      	lsrmi	r3, r3, #1
 800a21a:	089b      	lsrpl	r3, r3, #2
 800a21c:	2001      	movmi	r0, #1
 800a21e:	6013      	strmi	r3, [r2, #0]
 800a220:	bf5c      	itt	pl
 800a222:	6013      	strpl	r3, [r2, #0]
 800a224:	2002      	movpl	r0, #2
 800a226:	4770      	bx	lr
 800a228:	b299      	uxth	r1, r3
 800a22a:	b909      	cbnz	r1, 800a230 <__lo0bits+0x2a>
 800a22c:	0c1b      	lsrs	r3, r3, #16
 800a22e:	2010      	movs	r0, #16
 800a230:	b2d9      	uxtb	r1, r3
 800a232:	b909      	cbnz	r1, 800a238 <__lo0bits+0x32>
 800a234:	3008      	adds	r0, #8
 800a236:	0a1b      	lsrs	r3, r3, #8
 800a238:	0719      	lsls	r1, r3, #28
 800a23a:	bf04      	itt	eq
 800a23c:	091b      	lsreq	r3, r3, #4
 800a23e:	3004      	addeq	r0, #4
 800a240:	0799      	lsls	r1, r3, #30
 800a242:	bf04      	itt	eq
 800a244:	089b      	lsreq	r3, r3, #2
 800a246:	3002      	addeq	r0, #2
 800a248:	07d9      	lsls	r1, r3, #31
 800a24a:	d403      	bmi.n	800a254 <__lo0bits+0x4e>
 800a24c:	085b      	lsrs	r3, r3, #1
 800a24e:	f100 0001 	add.w	r0, r0, #1
 800a252:	d003      	beq.n	800a25c <__lo0bits+0x56>
 800a254:	6013      	str	r3, [r2, #0]
 800a256:	4770      	bx	lr
 800a258:	2000      	movs	r0, #0
 800a25a:	4770      	bx	lr
 800a25c:	2020      	movs	r0, #32
 800a25e:	4770      	bx	lr

0800a260 <__i2b>:
 800a260:	b510      	push	{r4, lr}
 800a262:	460c      	mov	r4, r1
 800a264:	2101      	movs	r1, #1
 800a266:	f7ff ff07 	bl	800a078 <_Balloc>
 800a26a:	4602      	mov	r2, r0
 800a26c:	b928      	cbnz	r0, 800a27a <__i2b+0x1a>
 800a26e:	4b05      	ldr	r3, [pc, #20]	@ (800a284 <__i2b+0x24>)
 800a270:	4805      	ldr	r0, [pc, #20]	@ (800a288 <__i2b+0x28>)
 800a272:	f240 1145 	movw	r1, #325	@ 0x145
 800a276:	f7fe ff87 	bl	8009188 <__assert_func>
 800a27a:	2301      	movs	r3, #1
 800a27c:	6144      	str	r4, [r0, #20]
 800a27e:	6103      	str	r3, [r0, #16]
 800a280:	bd10      	pop	{r4, pc}
 800a282:	bf00      	nop
 800a284:	0800c13f 	.word	0x0800c13f
 800a288:	0800c150 	.word	0x0800c150

0800a28c <__multiply>:
 800a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a290:	4617      	mov	r7, r2
 800a292:	690a      	ldr	r2, [r1, #16]
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	429a      	cmp	r2, r3
 800a298:	bfa8      	it	ge
 800a29a:	463b      	movge	r3, r7
 800a29c:	4689      	mov	r9, r1
 800a29e:	bfa4      	itt	ge
 800a2a0:	460f      	movge	r7, r1
 800a2a2:	4699      	movge	r9, r3
 800a2a4:	693d      	ldr	r5, [r7, #16]
 800a2a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	6879      	ldr	r1, [r7, #4]
 800a2ae:	eb05 060a 	add.w	r6, r5, sl
 800a2b2:	42b3      	cmp	r3, r6
 800a2b4:	b085      	sub	sp, #20
 800a2b6:	bfb8      	it	lt
 800a2b8:	3101      	addlt	r1, #1
 800a2ba:	f7ff fedd 	bl	800a078 <_Balloc>
 800a2be:	b930      	cbnz	r0, 800a2ce <__multiply+0x42>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	4b41      	ldr	r3, [pc, #260]	@ (800a3c8 <__multiply+0x13c>)
 800a2c4:	4841      	ldr	r0, [pc, #260]	@ (800a3cc <__multiply+0x140>)
 800a2c6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a2ca:	f7fe ff5d 	bl	8009188 <__assert_func>
 800a2ce:	f100 0414 	add.w	r4, r0, #20
 800a2d2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a2d6:	4623      	mov	r3, r4
 800a2d8:	2200      	movs	r2, #0
 800a2da:	4573      	cmp	r3, lr
 800a2dc:	d320      	bcc.n	800a320 <__multiply+0x94>
 800a2de:	f107 0814 	add.w	r8, r7, #20
 800a2e2:	f109 0114 	add.w	r1, r9, #20
 800a2e6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a2ea:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a2ee:	9302      	str	r3, [sp, #8]
 800a2f0:	1beb      	subs	r3, r5, r7
 800a2f2:	3b15      	subs	r3, #21
 800a2f4:	f023 0303 	bic.w	r3, r3, #3
 800a2f8:	3304      	adds	r3, #4
 800a2fa:	3715      	adds	r7, #21
 800a2fc:	42bd      	cmp	r5, r7
 800a2fe:	bf38      	it	cc
 800a300:	2304      	movcc	r3, #4
 800a302:	9301      	str	r3, [sp, #4]
 800a304:	9b02      	ldr	r3, [sp, #8]
 800a306:	9103      	str	r1, [sp, #12]
 800a308:	428b      	cmp	r3, r1
 800a30a:	d80c      	bhi.n	800a326 <__multiply+0x9a>
 800a30c:	2e00      	cmp	r6, #0
 800a30e:	dd03      	ble.n	800a318 <__multiply+0x8c>
 800a310:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a314:	2b00      	cmp	r3, #0
 800a316:	d055      	beq.n	800a3c4 <__multiply+0x138>
 800a318:	6106      	str	r6, [r0, #16]
 800a31a:	b005      	add	sp, #20
 800a31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a320:	f843 2b04 	str.w	r2, [r3], #4
 800a324:	e7d9      	b.n	800a2da <__multiply+0x4e>
 800a326:	f8b1 a000 	ldrh.w	sl, [r1]
 800a32a:	f1ba 0f00 	cmp.w	sl, #0
 800a32e:	d01f      	beq.n	800a370 <__multiply+0xe4>
 800a330:	46c4      	mov	ip, r8
 800a332:	46a1      	mov	r9, r4
 800a334:	2700      	movs	r7, #0
 800a336:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a33a:	f8d9 3000 	ldr.w	r3, [r9]
 800a33e:	fa1f fb82 	uxth.w	fp, r2
 800a342:	b29b      	uxth	r3, r3
 800a344:	fb0a 330b 	mla	r3, sl, fp, r3
 800a348:	443b      	add	r3, r7
 800a34a:	f8d9 7000 	ldr.w	r7, [r9]
 800a34e:	0c12      	lsrs	r2, r2, #16
 800a350:	0c3f      	lsrs	r7, r7, #16
 800a352:	fb0a 7202 	mla	r2, sl, r2, r7
 800a356:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a360:	4565      	cmp	r5, ip
 800a362:	f849 3b04 	str.w	r3, [r9], #4
 800a366:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a36a:	d8e4      	bhi.n	800a336 <__multiply+0xaa>
 800a36c:	9b01      	ldr	r3, [sp, #4]
 800a36e:	50e7      	str	r7, [r4, r3]
 800a370:	9b03      	ldr	r3, [sp, #12]
 800a372:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a376:	3104      	adds	r1, #4
 800a378:	f1b9 0f00 	cmp.w	r9, #0
 800a37c:	d020      	beq.n	800a3c0 <__multiply+0x134>
 800a37e:	6823      	ldr	r3, [r4, #0]
 800a380:	4647      	mov	r7, r8
 800a382:	46a4      	mov	ip, r4
 800a384:	f04f 0a00 	mov.w	sl, #0
 800a388:	f8b7 b000 	ldrh.w	fp, [r7]
 800a38c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a390:	fb09 220b 	mla	r2, r9, fp, r2
 800a394:	4452      	add	r2, sl
 800a396:	b29b      	uxth	r3, r3
 800a398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a39c:	f84c 3b04 	str.w	r3, [ip], #4
 800a3a0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a3a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3a8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a3ac:	fb09 330a 	mla	r3, r9, sl, r3
 800a3b0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a3b4:	42bd      	cmp	r5, r7
 800a3b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a3ba:	d8e5      	bhi.n	800a388 <__multiply+0xfc>
 800a3bc:	9a01      	ldr	r2, [sp, #4]
 800a3be:	50a3      	str	r3, [r4, r2]
 800a3c0:	3404      	adds	r4, #4
 800a3c2:	e79f      	b.n	800a304 <__multiply+0x78>
 800a3c4:	3e01      	subs	r6, #1
 800a3c6:	e7a1      	b.n	800a30c <__multiply+0x80>
 800a3c8:	0800c13f 	.word	0x0800c13f
 800a3cc:	0800c150 	.word	0x0800c150

0800a3d0 <__pow5mult>:
 800a3d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d4:	4615      	mov	r5, r2
 800a3d6:	f012 0203 	ands.w	r2, r2, #3
 800a3da:	4607      	mov	r7, r0
 800a3dc:	460e      	mov	r6, r1
 800a3de:	d007      	beq.n	800a3f0 <__pow5mult+0x20>
 800a3e0:	4c25      	ldr	r4, [pc, #148]	@ (800a478 <__pow5mult+0xa8>)
 800a3e2:	3a01      	subs	r2, #1
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a3ea:	f7ff fea7 	bl	800a13c <__multadd>
 800a3ee:	4606      	mov	r6, r0
 800a3f0:	10ad      	asrs	r5, r5, #2
 800a3f2:	d03d      	beq.n	800a470 <__pow5mult+0xa0>
 800a3f4:	69fc      	ldr	r4, [r7, #28]
 800a3f6:	b97c      	cbnz	r4, 800a418 <__pow5mult+0x48>
 800a3f8:	2010      	movs	r0, #16
 800a3fa:	f7ff fd87 	bl	8009f0c <malloc>
 800a3fe:	4602      	mov	r2, r0
 800a400:	61f8      	str	r0, [r7, #28]
 800a402:	b928      	cbnz	r0, 800a410 <__pow5mult+0x40>
 800a404:	4b1d      	ldr	r3, [pc, #116]	@ (800a47c <__pow5mult+0xac>)
 800a406:	481e      	ldr	r0, [pc, #120]	@ (800a480 <__pow5mult+0xb0>)
 800a408:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a40c:	f7fe febc 	bl	8009188 <__assert_func>
 800a410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a414:	6004      	str	r4, [r0, #0]
 800a416:	60c4      	str	r4, [r0, #12]
 800a418:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a41c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a420:	b94c      	cbnz	r4, 800a436 <__pow5mult+0x66>
 800a422:	f240 2171 	movw	r1, #625	@ 0x271
 800a426:	4638      	mov	r0, r7
 800a428:	f7ff ff1a 	bl	800a260 <__i2b>
 800a42c:	2300      	movs	r3, #0
 800a42e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a432:	4604      	mov	r4, r0
 800a434:	6003      	str	r3, [r0, #0]
 800a436:	f04f 0900 	mov.w	r9, #0
 800a43a:	07eb      	lsls	r3, r5, #31
 800a43c:	d50a      	bpl.n	800a454 <__pow5mult+0x84>
 800a43e:	4631      	mov	r1, r6
 800a440:	4622      	mov	r2, r4
 800a442:	4638      	mov	r0, r7
 800a444:	f7ff ff22 	bl	800a28c <__multiply>
 800a448:	4631      	mov	r1, r6
 800a44a:	4680      	mov	r8, r0
 800a44c:	4638      	mov	r0, r7
 800a44e:	f7ff fe53 	bl	800a0f8 <_Bfree>
 800a452:	4646      	mov	r6, r8
 800a454:	106d      	asrs	r5, r5, #1
 800a456:	d00b      	beq.n	800a470 <__pow5mult+0xa0>
 800a458:	6820      	ldr	r0, [r4, #0]
 800a45a:	b938      	cbnz	r0, 800a46c <__pow5mult+0x9c>
 800a45c:	4622      	mov	r2, r4
 800a45e:	4621      	mov	r1, r4
 800a460:	4638      	mov	r0, r7
 800a462:	f7ff ff13 	bl	800a28c <__multiply>
 800a466:	6020      	str	r0, [r4, #0]
 800a468:	f8c0 9000 	str.w	r9, [r0]
 800a46c:	4604      	mov	r4, r0
 800a46e:	e7e4      	b.n	800a43a <__pow5mult+0x6a>
 800a470:	4630      	mov	r0, r6
 800a472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a476:	bf00      	nop
 800a478:	0800c1c4 	.word	0x0800c1c4
 800a47c:	0800bffb 	.word	0x0800bffb
 800a480:	0800c150 	.word	0x0800c150

0800a484 <__lshift>:
 800a484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a488:	460c      	mov	r4, r1
 800a48a:	6849      	ldr	r1, [r1, #4]
 800a48c:	6923      	ldr	r3, [r4, #16]
 800a48e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a492:	68a3      	ldr	r3, [r4, #8]
 800a494:	4607      	mov	r7, r0
 800a496:	4691      	mov	r9, r2
 800a498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a49c:	f108 0601 	add.w	r6, r8, #1
 800a4a0:	42b3      	cmp	r3, r6
 800a4a2:	db0b      	blt.n	800a4bc <__lshift+0x38>
 800a4a4:	4638      	mov	r0, r7
 800a4a6:	f7ff fde7 	bl	800a078 <_Balloc>
 800a4aa:	4605      	mov	r5, r0
 800a4ac:	b948      	cbnz	r0, 800a4c2 <__lshift+0x3e>
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	4b28      	ldr	r3, [pc, #160]	@ (800a554 <__lshift+0xd0>)
 800a4b2:	4829      	ldr	r0, [pc, #164]	@ (800a558 <__lshift+0xd4>)
 800a4b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a4b8:	f7fe fe66 	bl	8009188 <__assert_func>
 800a4bc:	3101      	adds	r1, #1
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	e7ee      	b.n	800a4a0 <__lshift+0x1c>
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	f100 0114 	add.w	r1, r0, #20
 800a4c8:	f100 0210 	add.w	r2, r0, #16
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	4553      	cmp	r3, sl
 800a4d0:	db33      	blt.n	800a53a <__lshift+0xb6>
 800a4d2:	6920      	ldr	r0, [r4, #16]
 800a4d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a4d8:	f104 0314 	add.w	r3, r4, #20
 800a4dc:	f019 091f 	ands.w	r9, r9, #31
 800a4e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a4e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a4e8:	d02b      	beq.n	800a542 <__lshift+0xbe>
 800a4ea:	f1c9 0e20 	rsb	lr, r9, #32
 800a4ee:	468a      	mov	sl, r1
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	6818      	ldr	r0, [r3, #0]
 800a4f4:	fa00 f009 	lsl.w	r0, r0, r9
 800a4f8:	4310      	orrs	r0, r2
 800a4fa:	f84a 0b04 	str.w	r0, [sl], #4
 800a4fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a502:	459c      	cmp	ip, r3
 800a504:	fa22 f20e 	lsr.w	r2, r2, lr
 800a508:	d8f3      	bhi.n	800a4f2 <__lshift+0x6e>
 800a50a:	ebac 0304 	sub.w	r3, ip, r4
 800a50e:	3b15      	subs	r3, #21
 800a510:	f023 0303 	bic.w	r3, r3, #3
 800a514:	3304      	adds	r3, #4
 800a516:	f104 0015 	add.w	r0, r4, #21
 800a51a:	4560      	cmp	r0, ip
 800a51c:	bf88      	it	hi
 800a51e:	2304      	movhi	r3, #4
 800a520:	50ca      	str	r2, [r1, r3]
 800a522:	b10a      	cbz	r2, 800a528 <__lshift+0xa4>
 800a524:	f108 0602 	add.w	r6, r8, #2
 800a528:	3e01      	subs	r6, #1
 800a52a:	4638      	mov	r0, r7
 800a52c:	612e      	str	r6, [r5, #16]
 800a52e:	4621      	mov	r1, r4
 800a530:	f7ff fde2 	bl	800a0f8 <_Bfree>
 800a534:	4628      	mov	r0, r5
 800a536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a53a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a53e:	3301      	adds	r3, #1
 800a540:	e7c5      	b.n	800a4ce <__lshift+0x4a>
 800a542:	3904      	subs	r1, #4
 800a544:	f853 2b04 	ldr.w	r2, [r3], #4
 800a548:	f841 2f04 	str.w	r2, [r1, #4]!
 800a54c:	459c      	cmp	ip, r3
 800a54e:	d8f9      	bhi.n	800a544 <__lshift+0xc0>
 800a550:	e7ea      	b.n	800a528 <__lshift+0xa4>
 800a552:	bf00      	nop
 800a554:	0800c13f 	.word	0x0800c13f
 800a558:	0800c150 	.word	0x0800c150

0800a55c <__mcmp>:
 800a55c:	690a      	ldr	r2, [r1, #16]
 800a55e:	4603      	mov	r3, r0
 800a560:	6900      	ldr	r0, [r0, #16]
 800a562:	1a80      	subs	r0, r0, r2
 800a564:	b530      	push	{r4, r5, lr}
 800a566:	d10e      	bne.n	800a586 <__mcmp+0x2a>
 800a568:	3314      	adds	r3, #20
 800a56a:	3114      	adds	r1, #20
 800a56c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a570:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a574:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a578:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a57c:	4295      	cmp	r5, r2
 800a57e:	d003      	beq.n	800a588 <__mcmp+0x2c>
 800a580:	d205      	bcs.n	800a58e <__mcmp+0x32>
 800a582:	f04f 30ff 	mov.w	r0, #4294967295
 800a586:	bd30      	pop	{r4, r5, pc}
 800a588:	42a3      	cmp	r3, r4
 800a58a:	d3f3      	bcc.n	800a574 <__mcmp+0x18>
 800a58c:	e7fb      	b.n	800a586 <__mcmp+0x2a>
 800a58e:	2001      	movs	r0, #1
 800a590:	e7f9      	b.n	800a586 <__mcmp+0x2a>
	...

0800a594 <__mdiff>:
 800a594:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a598:	4689      	mov	r9, r1
 800a59a:	4606      	mov	r6, r0
 800a59c:	4611      	mov	r1, r2
 800a59e:	4648      	mov	r0, r9
 800a5a0:	4614      	mov	r4, r2
 800a5a2:	f7ff ffdb 	bl	800a55c <__mcmp>
 800a5a6:	1e05      	subs	r5, r0, #0
 800a5a8:	d112      	bne.n	800a5d0 <__mdiff+0x3c>
 800a5aa:	4629      	mov	r1, r5
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f7ff fd63 	bl	800a078 <_Balloc>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	b928      	cbnz	r0, 800a5c2 <__mdiff+0x2e>
 800a5b6:	4b3f      	ldr	r3, [pc, #252]	@ (800a6b4 <__mdiff+0x120>)
 800a5b8:	f240 2137 	movw	r1, #567	@ 0x237
 800a5bc:	483e      	ldr	r0, [pc, #248]	@ (800a6b8 <__mdiff+0x124>)
 800a5be:	f7fe fde3 	bl	8009188 <__assert_func>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a5c8:	4610      	mov	r0, r2
 800a5ca:	b003      	add	sp, #12
 800a5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5d0:	bfbc      	itt	lt
 800a5d2:	464b      	movlt	r3, r9
 800a5d4:	46a1      	movlt	r9, r4
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a5dc:	bfba      	itte	lt
 800a5de:	461c      	movlt	r4, r3
 800a5e0:	2501      	movlt	r5, #1
 800a5e2:	2500      	movge	r5, #0
 800a5e4:	f7ff fd48 	bl	800a078 <_Balloc>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	b918      	cbnz	r0, 800a5f4 <__mdiff+0x60>
 800a5ec:	4b31      	ldr	r3, [pc, #196]	@ (800a6b4 <__mdiff+0x120>)
 800a5ee:	f240 2145 	movw	r1, #581	@ 0x245
 800a5f2:	e7e3      	b.n	800a5bc <__mdiff+0x28>
 800a5f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a5f8:	6926      	ldr	r6, [r4, #16]
 800a5fa:	60c5      	str	r5, [r0, #12]
 800a5fc:	f109 0310 	add.w	r3, r9, #16
 800a600:	f109 0514 	add.w	r5, r9, #20
 800a604:	f104 0e14 	add.w	lr, r4, #20
 800a608:	f100 0b14 	add.w	fp, r0, #20
 800a60c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a610:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a614:	9301      	str	r3, [sp, #4]
 800a616:	46d9      	mov	r9, fp
 800a618:	f04f 0c00 	mov.w	ip, #0
 800a61c:	9b01      	ldr	r3, [sp, #4]
 800a61e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a622:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a626:	9301      	str	r3, [sp, #4]
 800a628:	fa1f f38a 	uxth.w	r3, sl
 800a62c:	4619      	mov	r1, r3
 800a62e:	b283      	uxth	r3, r0
 800a630:	1acb      	subs	r3, r1, r3
 800a632:	0c00      	lsrs	r0, r0, #16
 800a634:	4463      	add	r3, ip
 800a636:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a63a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a63e:	b29b      	uxth	r3, r3
 800a640:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a644:	4576      	cmp	r6, lr
 800a646:	f849 3b04 	str.w	r3, [r9], #4
 800a64a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a64e:	d8e5      	bhi.n	800a61c <__mdiff+0x88>
 800a650:	1b33      	subs	r3, r6, r4
 800a652:	3b15      	subs	r3, #21
 800a654:	f023 0303 	bic.w	r3, r3, #3
 800a658:	3415      	adds	r4, #21
 800a65a:	3304      	adds	r3, #4
 800a65c:	42a6      	cmp	r6, r4
 800a65e:	bf38      	it	cc
 800a660:	2304      	movcc	r3, #4
 800a662:	441d      	add	r5, r3
 800a664:	445b      	add	r3, fp
 800a666:	461e      	mov	r6, r3
 800a668:	462c      	mov	r4, r5
 800a66a:	4544      	cmp	r4, r8
 800a66c:	d30e      	bcc.n	800a68c <__mdiff+0xf8>
 800a66e:	f108 0103 	add.w	r1, r8, #3
 800a672:	1b49      	subs	r1, r1, r5
 800a674:	f021 0103 	bic.w	r1, r1, #3
 800a678:	3d03      	subs	r5, #3
 800a67a:	45a8      	cmp	r8, r5
 800a67c:	bf38      	it	cc
 800a67e:	2100      	movcc	r1, #0
 800a680:	440b      	add	r3, r1
 800a682:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a686:	b191      	cbz	r1, 800a6ae <__mdiff+0x11a>
 800a688:	6117      	str	r7, [r2, #16]
 800a68a:	e79d      	b.n	800a5c8 <__mdiff+0x34>
 800a68c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a690:	46e6      	mov	lr, ip
 800a692:	0c08      	lsrs	r0, r1, #16
 800a694:	fa1c fc81 	uxtah	ip, ip, r1
 800a698:	4471      	add	r1, lr
 800a69a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a69e:	b289      	uxth	r1, r1
 800a6a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a6a4:	f846 1b04 	str.w	r1, [r6], #4
 800a6a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6ac:	e7dd      	b.n	800a66a <__mdiff+0xd6>
 800a6ae:	3f01      	subs	r7, #1
 800a6b0:	e7e7      	b.n	800a682 <__mdiff+0xee>
 800a6b2:	bf00      	nop
 800a6b4:	0800c13f 	.word	0x0800c13f
 800a6b8:	0800c150 	.word	0x0800c150

0800a6bc <__d2b>:
 800a6bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a6c0:	460f      	mov	r7, r1
 800a6c2:	2101      	movs	r1, #1
 800a6c4:	ec59 8b10 	vmov	r8, r9, d0
 800a6c8:	4616      	mov	r6, r2
 800a6ca:	f7ff fcd5 	bl	800a078 <_Balloc>
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	b930      	cbnz	r0, 800a6e0 <__d2b+0x24>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	4b23      	ldr	r3, [pc, #140]	@ (800a764 <__d2b+0xa8>)
 800a6d6:	4824      	ldr	r0, [pc, #144]	@ (800a768 <__d2b+0xac>)
 800a6d8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a6dc:	f7fe fd54 	bl	8009188 <__assert_func>
 800a6e0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a6e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a6e8:	b10d      	cbz	r5, 800a6ee <__d2b+0x32>
 800a6ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	f1b8 0300 	subs.w	r3, r8, #0
 800a6f4:	d023      	beq.n	800a73e <__d2b+0x82>
 800a6f6:	4668      	mov	r0, sp
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	f7ff fd84 	bl	800a206 <__lo0bits>
 800a6fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a702:	b1d0      	cbz	r0, 800a73a <__d2b+0x7e>
 800a704:	f1c0 0320 	rsb	r3, r0, #32
 800a708:	fa02 f303 	lsl.w	r3, r2, r3
 800a70c:	430b      	orrs	r3, r1
 800a70e:	40c2      	lsrs	r2, r0
 800a710:	6163      	str	r3, [r4, #20]
 800a712:	9201      	str	r2, [sp, #4]
 800a714:	9b01      	ldr	r3, [sp, #4]
 800a716:	61a3      	str	r3, [r4, #24]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	bf0c      	ite	eq
 800a71c:	2201      	moveq	r2, #1
 800a71e:	2202      	movne	r2, #2
 800a720:	6122      	str	r2, [r4, #16]
 800a722:	b1a5      	cbz	r5, 800a74e <__d2b+0x92>
 800a724:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a728:	4405      	add	r5, r0
 800a72a:	603d      	str	r5, [r7, #0]
 800a72c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a730:	6030      	str	r0, [r6, #0]
 800a732:	4620      	mov	r0, r4
 800a734:	b003      	add	sp, #12
 800a736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a73a:	6161      	str	r1, [r4, #20]
 800a73c:	e7ea      	b.n	800a714 <__d2b+0x58>
 800a73e:	a801      	add	r0, sp, #4
 800a740:	f7ff fd61 	bl	800a206 <__lo0bits>
 800a744:	9b01      	ldr	r3, [sp, #4]
 800a746:	6163      	str	r3, [r4, #20]
 800a748:	3020      	adds	r0, #32
 800a74a:	2201      	movs	r2, #1
 800a74c:	e7e8      	b.n	800a720 <__d2b+0x64>
 800a74e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a752:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a756:	6038      	str	r0, [r7, #0]
 800a758:	6918      	ldr	r0, [r3, #16]
 800a75a:	f7ff fd35 	bl	800a1c8 <__hi0bits>
 800a75e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a762:	e7e5      	b.n	800a730 <__d2b+0x74>
 800a764:	0800c13f 	.word	0x0800c13f
 800a768:	0800c150 	.word	0x0800c150

0800a76c <__ssputs_r>:
 800a76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a770:	688e      	ldr	r6, [r1, #8]
 800a772:	461f      	mov	r7, r3
 800a774:	42be      	cmp	r6, r7
 800a776:	680b      	ldr	r3, [r1, #0]
 800a778:	4682      	mov	sl, r0
 800a77a:	460c      	mov	r4, r1
 800a77c:	4690      	mov	r8, r2
 800a77e:	d82d      	bhi.n	800a7dc <__ssputs_r+0x70>
 800a780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a788:	d026      	beq.n	800a7d8 <__ssputs_r+0x6c>
 800a78a:	6965      	ldr	r5, [r4, #20]
 800a78c:	6909      	ldr	r1, [r1, #16]
 800a78e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a792:	eba3 0901 	sub.w	r9, r3, r1
 800a796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a79a:	1c7b      	adds	r3, r7, #1
 800a79c:	444b      	add	r3, r9
 800a79e:	106d      	asrs	r5, r5, #1
 800a7a0:	429d      	cmp	r5, r3
 800a7a2:	bf38      	it	cc
 800a7a4:	461d      	movcc	r5, r3
 800a7a6:	0553      	lsls	r3, r2, #21
 800a7a8:	d527      	bpl.n	800a7fa <__ssputs_r+0x8e>
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	f7ff fbd8 	bl	8009f60 <_malloc_r>
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	b360      	cbz	r0, 800a80e <__ssputs_r+0xa2>
 800a7b4:	6921      	ldr	r1, [r4, #16]
 800a7b6:	464a      	mov	r2, r9
 800a7b8:	f7fe fcd7 	bl	800916a <memcpy>
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7c6:	81a3      	strh	r3, [r4, #12]
 800a7c8:	6126      	str	r6, [r4, #16]
 800a7ca:	6165      	str	r5, [r4, #20]
 800a7cc:	444e      	add	r6, r9
 800a7ce:	eba5 0509 	sub.w	r5, r5, r9
 800a7d2:	6026      	str	r6, [r4, #0]
 800a7d4:	60a5      	str	r5, [r4, #8]
 800a7d6:	463e      	mov	r6, r7
 800a7d8:	42be      	cmp	r6, r7
 800a7da:	d900      	bls.n	800a7de <__ssputs_r+0x72>
 800a7dc:	463e      	mov	r6, r7
 800a7de:	6820      	ldr	r0, [r4, #0]
 800a7e0:	4632      	mov	r2, r6
 800a7e2:	4641      	mov	r1, r8
 800a7e4:	f000 f9d8 	bl	800ab98 <memmove>
 800a7e8:	68a3      	ldr	r3, [r4, #8]
 800a7ea:	1b9b      	subs	r3, r3, r6
 800a7ec:	60a3      	str	r3, [r4, #8]
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	4433      	add	r3, r6
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fa:	462a      	mov	r2, r5
 800a7fc:	f000 fa23 	bl	800ac46 <_realloc_r>
 800a800:	4606      	mov	r6, r0
 800a802:	2800      	cmp	r0, #0
 800a804:	d1e0      	bne.n	800a7c8 <__ssputs_r+0x5c>
 800a806:	6921      	ldr	r1, [r4, #16]
 800a808:	4650      	mov	r0, sl
 800a80a:	f7ff fb35 	bl	8009e78 <_free_r>
 800a80e:	230c      	movs	r3, #12
 800a810:	f8ca 3000 	str.w	r3, [sl]
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295
 800a820:	e7e9      	b.n	800a7f6 <__ssputs_r+0x8a>
	...

0800a824 <_svfiprintf_r>:
 800a824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	4698      	mov	r8, r3
 800a82a:	898b      	ldrh	r3, [r1, #12]
 800a82c:	061b      	lsls	r3, r3, #24
 800a82e:	b09d      	sub	sp, #116	@ 0x74
 800a830:	4607      	mov	r7, r0
 800a832:	460d      	mov	r5, r1
 800a834:	4614      	mov	r4, r2
 800a836:	d510      	bpl.n	800a85a <_svfiprintf_r+0x36>
 800a838:	690b      	ldr	r3, [r1, #16]
 800a83a:	b973      	cbnz	r3, 800a85a <_svfiprintf_r+0x36>
 800a83c:	2140      	movs	r1, #64	@ 0x40
 800a83e:	f7ff fb8f 	bl	8009f60 <_malloc_r>
 800a842:	6028      	str	r0, [r5, #0]
 800a844:	6128      	str	r0, [r5, #16]
 800a846:	b930      	cbnz	r0, 800a856 <_svfiprintf_r+0x32>
 800a848:	230c      	movs	r3, #12
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295
 800a850:	b01d      	add	sp, #116	@ 0x74
 800a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a856:	2340      	movs	r3, #64	@ 0x40
 800a858:	616b      	str	r3, [r5, #20]
 800a85a:	2300      	movs	r3, #0
 800a85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a85e:	2320      	movs	r3, #32
 800a860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a864:	f8cd 800c 	str.w	r8, [sp, #12]
 800a868:	2330      	movs	r3, #48	@ 0x30
 800a86a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa08 <_svfiprintf_r+0x1e4>
 800a86e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a872:	f04f 0901 	mov.w	r9, #1
 800a876:	4623      	mov	r3, r4
 800a878:	469a      	mov	sl, r3
 800a87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a87e:	b10a      	cbz	r2, 800a884 <_svfiprintf_r+0x60>
 800a880:	2a25      	cmp	r2, #37	@ 0x25
 800a882:	d1f9      	bne.n	800a878 <_svfiprintf_r+0x54>
 800a884:	ebba 0b04 	subs.w	fp, sl, r4
 800a888:	d00b      	beq.n	800a8a2 <_svfiprintf_r+0x7e>
 800a88a:	465b      	mov	r3, fp
 800a88c:	4622      	mov	r2, r4
 800a88e:	4629      	mov	r1, r5
 800a890:	4638      	mov	r0, r7
 800a892:	f7ff ff6b 	bl	800a76c <__ssputs_r>
 800a896:	3001      	adds	r0, #1
 800a898:	f000 80a7 	beq.w	800a9ea <_svfiprintf_r+0x1c6>
 800a89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a89e:	445a      	add	r2, fp
 800a8a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f000 809f 	beq.w	800a9ea <_svfiprintf_r+0x1c6>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8b6:	f10a 0a01 	add.w	sl, sl, #1
 800a8ba:	9304      	str	r3, [sp, #16]
 800a8bc:	9307      	str	r3, [sp, #28]
 800a8be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8c4:	4654      	mov	r4, sl
 800a8c6:	2205      	movs	r2, #5
 800a8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8cc:	484e      	ldr	r0, [pc, #312]	@ (800aa08 <_svfiprintf_r+0x1e4>)
 800a8ce:	f7f5 fc7f 	bl	80001d0 <memchr>
 800a8d2:	9a04      	ldr	r2, [sp, #16]
 800a8d4:	b9d8      	cbnz	r0, 800a90e <_svfiprintf_r+0xea>
 800a8d6:	06d0      	lsls	r0, r2, #27
 800a8d8:	bf44      	itt	mi
 800a8da:	2320      	movmi	r3, #32
 800a8dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8e0:	0711      	lsls	r1, r2, #28
 800a8e2:	bf44      	itt	mi
 800a8e4:	232b      	movmi	r3, #43	@ 0x2b
 800a8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8f0:	d015      	beq.n	800a91e <_svfiprintf_r+0xfa>
 800a8f2:	9a07      	ldr	r2, [sp, #28]
 800a8f4:	4654      	mov	r4, sl
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	f04f 0c0a 	mov.w	ip, #10
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a902:	3b30      	subs	r3, #48	@ 0x30
 800a904:	2b09      	cmp	r3, #9
 800a906:	d94b      	bls.n	800a9a0 <_svfiprintf_r+0x17c>
 800a908:	b1b0      	cbz	r0, 800a938 <_svfiprintf_r+0x114>
 800a90a:	9207      	str	r2, [sp, #28]
 800a90c:	e014      	b.n	800a938 <_svfiprintf_r+0x114>
 800a90e:	eba0 0308 	sub.w	r3, r0, r8
 800a912:	fa09 f303 	lsl.w	r3, r9, r3
 800a916:	4313      	orrs	r3, r2
 800a918:	9304      	str	r3, [sp, #16]
 800a91a:	46a2      	mov	sl, r4
 800a91c:	e7d2      	b.n	800a8c4 <_svfiprintf_r+0xa0>
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	1d19      	adds	r1, r3, #4
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	9103      	str	r1, [sp, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	bfbb      	ittet	lt
 800a92a:	425b      	neglt	r3, r3
 800a92c:	f042 0202 	orrlt.w	r2, r2, #2
 800a930:	9307      	strge	r3, [sp, #28]
 800a932:	9307      	strlt	r3, [sp, #28]
 800a934:	bfb8      	it	lt
 800a936:	9204      	strlt	r2, [sp, #16]
 800a938:	7823      	ldrb	r3, [r4, #0]
 800a93a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a93c:	d10a      	bne.n	800a954 <_svfiprintf_r+0x130>
 800a93e:	7863      	ldrb	r3, [r4, #1]
 800a940:	2b2a      	cmp	r3, #42	@ 0x2a
 800a942:	d132      	bne.n	800a9aa <_svfiprintf_r+0x186>
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	1d1a      	adds	r2, r3, #4
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	9203      	str	r2, [sp, #12]
 800a94c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a950:	3402      	adds	r4, #2
 800a952:	9305      	str	r3, [sp, #20]
 800a954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa18 <_svfiprintf_r+0x1f4>
 800a958:	7821      	ldrb	r1, [r4, #0]
 800a95a:	2203      	movs	r2, #3
 800a95c:	4650      	mov	r0, sl
 800a95e:	f7f5 fc37 	bl	80001d0 <memchr>
 800a962:	b138      	cbz	r0, 800a974 <_svfiprintf_r+0x150>
 800a964:	9b04      	ldr	r3, [sp, #16]
 800a966:	eba0 000a 	sub.w	r0, r0, sl
 800a96a:	2240      	movs	r2, #64	@ 0x40
 800a96c:	4082      	lsls	r2, r0
 800a96e:	4313      	orrs	r3, r2
 800a970:	3401      	adds	r4, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a978:	4824      	ldr	r0, [pc, #144]	@ (800aa0c <_svfiprintf_r+0x1e8>)
 800a97a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a97e:	2206      	movs	r2, #6
 800a980:	f7f5 fc26 	bl	80001d0 <memchr>
 800a984:	2800      	cmp	r0, #0
 800a986:	d036      	beq.n	800a9f6 <_svfiprintf_r+0x1d2>
 800a988:	4b21      	ldr	r3, [pc, #132]	@ (800aa10 <_svfiprintf_r+0x1ec>)
 800a98a:	bb1b      	cbnz	r3, 800a9d4 <_svfiprintf_r+0x1b0>
 800a98c:	9b03      	ldr	r3, [sp, #12]
 800a98e:	3307      	adds	r3, #7
 800a990:	f023 0307 	bic.w	r3, r3, #7
 800a994:	3308      	adds	r3, #8
 800a996:	9303      	str	r3, [sp, #12]
 800a998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a99a:	4433      	add	r3, r6
 800a99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a99e:	e76a      	b.n	800a876 <_svfiprintf_r+0x52>
 800a9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	e7a8      	b.n	800a8fc <_svfiprintf_r+0xd8>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	3401      	adds	r4, #1
 800a9ae:	9305      	str	r3, [sp, #20]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f04f 0c0a 	mov.w	ip, #10
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9bc:	3a30      	subs	r2, #48	@ 0x30
 800a9be:	2a09      	cmp	r2, #9
 800a9c0:	d903      	bls.n	800a9ca <_svfiprintf_r+0x1a6>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0c6      	beq.n	800a954 <_svfiprintf_r+0x130>
 800a9c6:	9105      	str	r1, [sp, #20]
 800a9c8:	e7c4      	b.n	800a954 <_svfiprintf_r+0x130>
 800a9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e7f0      	b.n	800a9b6 <_svfiprintf_r+0x192>
 800a9d4:	ab03      	add	r3, sp, #12
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	462a      	mov	r2, r5
 800a9da:	4b0e      	ldr	r3, [pc, #56]	@ (800aa14 <_svfiprintf_r+0x1f0>)
 800a9dc:	a904      	add	r1, sp, #16
 800a9de:	4638      	mov	r0, r7
 800a9e0:	f7fd fe4c 	bl	800867c <_printf_float>
 800a9e4:	1c42      	adds	r2, r0, #1
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	d1d6      	bne.n	800a998 <_svfiprintf_r+0x174>
 800a9ea:	89ab      	ldrh	r3, [r5, #12]
 800a9ec:	065b      	lsls	r3, r3, #25
 800a9ee:	f53f af2d 	bmi.w	800a84c <_svfiprintf_r+0x28>
 800a9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9f4:	e72c      	b.n	800a850 <_svfiprintf_r+0x2c>
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	462a      	mov	r2, r5
 800a9fc:	4b05      	ldr	r3, [pc, #20]	@ (800aa14 <_svfiprintf_r+0x1f0>)
 800a9fe:	a904      	add	r1, sp, #16
 800aa00:	4638      	mov	r0, r7
 800aa02:	f7fe f8d3 	bl	8008bac <_printf_i>
 800aa06:	e7ed      	b.n	800a9e4 <_svfiprintf_r+0x1c0>
 800aa08:	0800c1a9 	.word	0x0800c1a9
 800aa0c:	0800c1b3 	.word	0x0800c1b3
 800aa10:	0800867d 	.word	0x0800867d
 800aa14:	0800a76d 	.word	0x0800a76d
 800aa18:	0800c1af 	.word	0x0800c1af

0800aa1c <__sflush_r>:
 800aa1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aa20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa24:	0716      	lsls	r6, r2, #28
 800aa26:	4605      	mov	r5, r0
 800aa28:	460c      	mov	r4, r1
 800aa2a:	d454      	bmi.n	800aad6 <__sflush_r+0xba>
 800aa2c:	684b      	ldr	r3, [r1, #4]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	dc02      	bgt.n	800aa38 <__sflush_r+0x1c>
 800aa32:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd48      	ble.n	800aaca <__sflush_r+0xae>
 800aa38:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa3a:	2e00      	cmp	r6, #0
 800aa3c:	d045      	beq.n	800aaca <__sflush_r+0xae>
 800aa3e:	2300      	movs	r3, #0
 800aa40:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa44:	682f      	ldr	r7, [r5, #0]
 800aa46:	6a21      	ldr	r1, [r4, #32]
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	d030      	beq.n	800aaae <__sflush_r+0x92>
 800aa4c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	0759      	lsls	r1, r3, #29
 800aa52:	d505      	bpl.n	800aa60 <__sflush_r+0x44>
 800aa54:	6863      	ldr	r3, [r4, #4]
 800aa56:	1ad2      	subs	r2, r2, r3
 800aa58:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa5a:	b10b      	cbz	r3, 800aa60 <__sflush_r+0x44>
 800aa5c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa5e:	1ad2      	subs	r2, r2, r3
 800aa60:	2300      	movs	r3, #0
 800aa62:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa64:	6a21      	ldr	r1, [r4, #32]
 800aa66:	4628      	mov	r0, r5
 800aa68:	47b0      	blx	r6
 800aa6a:	1c43      	adds	r3, r0, #1
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	d106      	bne.n	800aa7e <__sflush_r+0x62>
 800aa70:	6829      	ldr	r1, [r5, #0]
 800aa72:	291d      	cmp	r1, #29
 800aa74:	d82b      	bhi.n	800aace <__sflush_r+0xb2>
 800aa76:	4a2a      	ldr	r2, [pc, #168]	@ (800ab20 <__sflush_r+0x104>)
 800aa78:	40ca      	lsrs	r2, r1
 800aa7a:	07d6      	lsls	r6, r2, #31
 800aa7c:	d527      	bpl.n	800aace <__sflush_r+0xb2>
 800aa7e:	2200      	movs	r2, #0
 800aa80:	6062      	str	r2, [r4, #4]
 800aa82:	04d9      	lsls	r1, r3, #19
 800aa84:	6922      	ldr	r2, [r4, #16]
 800aa86:	6022      	str	r2, [r4, #0]
 800aa88:	d504      	bpl.n	800aa94 <__sflush_r+0x78>
 800aa8a:	1c42      	adds	r2, r0, #1
 800aa8c:	d101      	bne.n	800aa92 <__sflush_r+0x76>
 800aa8e:	682b      	ldr	r3, [r5, #0]
 800aa90:	b903      	cbnz	r3, 800aa94 <__sflush_r+0x78>
 800aa92:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa94:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa96:	602f      	str	r7, [r5, #0]
 800aa98:	b1b9      	cbz	r1, 800aaca <__sflush_r+0xae>
 800aa9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa9e:	4299      	cmp	r1, r3
 800aaa0:	d002      	beq.n	800aaa8 <__sflush_r+0x8c>
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f7ff f9e8 	bl	8009e78 <_free_r>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	6363      	str	r3, [r4, #52]	@ 0x34
 800aaac:	e00d      	b.n	800aaca <__sflush_r+0xae>
 800aaae:	2301      	movs	r3, #1
 800aab0:	4628      	mov	r0, r5
 800aab2:	47b0      	blx	r6
 800aab4:	4602      	mov	r2, r0
 800aab6:	1c50      	adds	r0, r2, #1
 800aab8:	d1c9      	bne.n	800aa4e <__sflush_r+0x32>
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d0c6      	beq.n	800aa4e <__sflush_r+0x32>
 800aac0:	2b1d      	cmp	r3, #29
 800aac2:	d001      	beq.n	800aac8 <__sflush_r+0xac>
 800aac4:	2b16      	cmp	r3, #22
 800aac6:	d11e      	bne.n	800ab06 <__sflush_r+0xea>
 800aac8:	602f      	str	r7, [r5, #0]
 800aaca:	2000      	movs	r0, #0
 800aacc:	e022      	b.n	800ab14 <__sflush_r+0xf8>
 800aace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aad2:	b21b      	sxth	r3, r3
 800aad4:	e01b      	b.n	800ab0e <__sflush_r+0xf2>
 800aad6:	690f      	ldr	r7, [r1, #16]
 800aad8:	2f00      	cmp	r7, #0
 800aada:	d0f6      	beq.n	800aaca <__sflush_r+0xae>
 800aadc:	0793      	lsls	r3, r2, #30
 800aade:	680e      	ldr	r6, [r1, #0]
 800aae0:	bf08      	it	eq
 800aae2:	694b      	ldreq	r3, [r1, #20]
 800aae4:	600f      	str	r7, [r1, #0]
 800aae6:	bf18      	it	ne
 800aae8:	2300      	movne	r3, #0
 800aaea:	eba6 0807 	sub.w	r8, r6, r7
 800aaee:	608b      	str	r3, [r1, #8]
 800aaf0:	f1b8 0f00 	cmp.w	r8, #0
 800aaf4:	dde9      	ble.n	800aaca <__sflush_r+0xae>
 800aaf6:	6a21      	ldr	r1, [r4, #32]
 800aaf8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aafa:	4643      	mov	r3, r8
 800aafc:	463a      	mov	r2, r7
 800aafe:	4628      	mov	r0, r5
 800ab00:	47b0      	blx	r6
 800ab02:	2800      	cmp	r0, #0
 800ab04:	dc08      	bgt.n	800ab18 <__sflush_r+0xfc>
 800ab06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab0e:	81a3      	strh	r3, [r4, #12]
 800ab10:	f04f 30ff 	mov.w	r0, #4294967295
 800ab14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab18:	4407      	add	r7, r0
 800ab1a:	eba8 0800 	sub.w	r8, r8, r0
 800ab1e:	e7e7      	b.n	800aaf0 <__sflush_r+0xd4>
 800ab20:	20400001 	.word	0x20400001

0800ab24 <_fflush_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	690b      	ldr	r3, [r1, #16]
 800ab28:	4605      	mov	r5, r0
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	b913      	cbnz	r3, 800ab34 <_fflush_r+0x10>
 800ab2e:	2500      	movs	r5, #0
 800ab30:	4628      	mov	r0, r5
 800ab32:	bd38      	pop	{r3, r4, r5, pc}
 800ab34:	b118      	cbz	r0, 800ab3e <_fflush_r+0x1a>
 800ab36:	6a03      	ldr	r3, [r0, #32]
 800ab38:	b90b      	cbnz	r3, 800ab3e <_fflush_r+0x1a>
 800ab3a:	f7fe f9e1 	bl	8008f00 <__sinit>
 800ab3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d0f3      	beq.n	800ab2e <_fflush_r+0xa>
 800ab46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab48:	07d0      	lsls	r0, r2, #31
 800ab4a:	d404      	bmi.n	800ab56 <_fflush_r+0x32>
 800ab4c:	0599      	lsls	r1, r3, #22
 800ab4e:	d402      	bmi.n	800ab56 <_fflush_r+0x32>
 800ab50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab52:	f7fe fb08 	bl	8009166 <__retarget_lock_acquire_recursive>
 800ab56:	4628      	mov	r0, r5
 800ab58:	4621      	mov	r1, r4
 800ab5a:	f7ff ff5f 	bl	800aa1c <__sflush_r>
 800ab5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab60:	07da      	lsls	r2, r3, #31
 800ab62:	4605      	mov	r5, r0
 800ab64:	d4e4      	bmi.n	800ab30 <_fflush_r+0xc>
 800ab66:	89a3      	ldrh	r3, [r4, #12]
 800ab68:	059b      	lsls	r3, r3, #22
 800ab6a:	d4e1      	bmi.n	800ab30 <_fflush_r+0xc>
 800ab6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab6e:	f7fe fafb 	bl	8009168 <__retarget_lock_release_recursive>
 800ab72:	e7dd      	b.n	800ab30 <_fflush_r+0xc>

0800ab74 <fiprintf>:
 800ab74:	b40e      	push	{r1, r2, r3}
 800ab76:	b503      	push	{r0, r1, lr}
 800ab78:	4601      	mov	r1, r0
 800ab7a:	ab03      	add	r3, sp, #12
 800ab7c:	4805      	ldr	r0, [pc, #20]	@ (800ab94 <fiprintf+0x20>)
 800ab7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab82:	6800      	ldr	r0, [r0, #0]
 800ab84:	9301      	str	r3, [sp, #4]
 800ab86:	f000 f8c3 	bl	800ad10 <_vfiprintf_r>
 800ab8a:	b002      	add	sp, #8
 800ab8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab90:	b003      	add	sp, #12
 800ab92:	4770      	bx	lr
 800ab94:	20002484 	.word	0x20002484

0800ab98 <memmove>:
 800ab98:	4288      	cmp	r0, r1
 800ab9a:	b510      	push	{r4, lr}
 800ab9c:	eb01 0402 	add.w	r4, r1, r2
 800aba0:	d902      	bls.n	800aba8 <memmove+0x10>
 800aba2:	4284      	cmp	r4, r0
 800aba4:	4623      	mov	r3, r4
 800aba6:	d807      	bhi.n	800abb8 <memmove+0x20>
 800aba8:	1e43      	subs	r3, r0, #1
 800abaa:	42a1      	cmp	r1, r4
 800abac:	d008      	beq.n	800abc0 <memmove+0x28>
 800abae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abb6:	e7f8      	b.n	800abaa <memmove+0x12>
 800abb8:	4402      	add	r2, r0
 800abba:	4601      	mov	r1, r0
 800abbc:	428a      	cmp	r2, r1
 800abbe:	d100      	bne.n	800abc2 <memmove+0x2a>
 800abc0:	bd10      	pop	{r4, pc}
 800abc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800abc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800abca:	e7f7      	b.n	800abbc <memmove+0x24>

0800abcc <_sbrk_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	4d06      	ldr	r5, [pc, #24]	@ (800abe8 <_sbrk_r+0x1c>)
 800abd0:	2300      	movs	r3, #0
 800abd2:	4604      	mov	r4, r0
 800abd4:	4608      	mov	r0, r1
 800abd6:	602b      	str	r3, [r5, #0]
 800abd8:	f7f7 faba 	bl	8002150 <_sbrk>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d102      	bne.n	800abe6 <_sbrk_r+0x1a>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	b103      	cbz	r3, 800abe6 <_sbrk_r+0x1a>
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	20002f94 	.word	0x20002f94

0800abec <abort>:
 800abec:	b508      	push	{r3, lr}
 800abee:	2006      	movs	r0, #6
 800abf0:	f000 fa62 	bl	800b0b8 <raise>
 800abf4:	2001      	movs	r0, #1
 800abf6:	f7f7 fa33 	bl	8002060 <_exit>

0800abfa <_calloc_r>:
 800abfa:	b570      	push	{r4, r5, r6, lr}
 800abfc:	fba1 5402 	umull	r5, r4, r1, r2
 800ac00:	b934      	cbnz	r4, 800ac10 <_calloc_r+0x16>
 800ac02:	4629      	mov	r1, r5
 800ac04:	f7ff f9ac 	bl	8009f60 <_malloc_r>
 800ac08:	4606      	mov	r6, r0
 800ac0a:	b928      	cbnz	r0, 800ac18 <_calloc_r+0x1e>
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	bd70      	pop	{r4, r5, r6, pc}
 800ac10:	220c      	movs	r2, #12
 800ac12:	6002      	str	r2, [r0, #0]
 800ac14:	2600      	movs	r6, #0
 800ac16:	e7f9      	b.n	800ac0c <_calloc_r+0x12>
 800ac18:	462a      	mov	r2, r5
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	f7fe fa26 	bl	800906c <memset>
 800ac20:	e7f4      	b.n	800ac0c <_calloc_r+0x12>

0800ac22 <__ascii_mbtowc>:
 800ac22:	b082      	sub	sp, #8
 800ac24:	b901      	cbnz	r1, 800ac28 <__ascii_mbtowc+0x6>
 800ac26:	a901      	add	r1, sp, #4
 800ac28:	b142      	cbz	r2, 800ac3c <__ascii_mbtowc+0x1a>
 800ac2a:	b14b      	cbz	r3, 800ac40 <__ascii_mbtowc+0x1e>
 800ac2c:	7813      	ldrb	r3, [r2, #0]
 800ac2e:	600b      	str	r3, [r1, #0]
 800ac30:	7812      	ldrb	r2, [r2, #0]
 800ac32:	1e10      	subs	r0, r2, #0
 800ac34:	bf18      	it	ne
 800ac36:	2001      	movne	r0, #1
 800ac38:	b002      	add	sp, #8
 800ac3a:	4770      	bx	lr
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	e7fb      	b.n	800ac38 <__ascii_mbtowc+0x16>
 800ac40:	f06f 0001 	mvn.w	r0, #1
 800ac44:	e7f8      	b.n	800ac38 <__ascii_mbtowc+0x16>

0800ac46 <_realloc_r>:
 800ac46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac4a:	4607      	mov	r7, r0
 800ac4c:	4614      	mov	r4, r2
 800ac4e:	460d      	mov	r5, r1
 800ac50:	b921      	cbnz	r1, 800ac5c <_realloc_r+0x16>
 800ac52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac56:	4611      	mov	r1, r2
 800ac58:	f7ff b982 	b.w	8009f60 <_malloc_r>
 800ac5c:	b92a      	cbnz	r2, 800ac6a <_realloc_r+0x24>
 800ac5e:	f7ff f90b 	bl	8009e78 <_free_r>
 800ac62:	4625      	mov	r5, r4
 800ac64:	4628      	mov	r0, r5
 800ac66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac6a:	f000 fa41 	bl	800b0f0 <_malloc_usable_size_r>
 800ac6e:	4284      	cmp	r4, r0
 800ac70:	4606      	mov	r6, r0
 800ac72:	d802      	bhi.n	800ac7a <_realloc_r+0x34>
 800ac74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac78:	d8f4      	bhi.n	800ac64 <_realloc_r+0x1e>
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	f7ff f96f 	bl	8009f60 <_malloc_r>
 800ac82:	4680      	mov	r8, r0
 800ac84:	b908      	cbnz	r0, 800ac8a <_realloc_r+0x44>
 800ac86:	4645      	mov	r5, r8
 800ac88:	e7ec      	b.n	800ac64 <_realloc_r+0x1e>
 800ac8a:	42b4      	cmp	r4, r6
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	bf28      	it	cs
 800ac92:	4632      	movcs	r2, r6
 800ac94:	f7fe fa69 	bl	800916a <memcpy>
 800ac98:	4629      	mov	r1, r5
 800ac9a:	4638      	mov	r0, r7
 800ac9c:	f7ff f8ec 	bl	8009e78 <_free_r>
 800aca0:	e7f1      	b.n	800ac86 <_realloc_r+0x40>

0800aca2 <__ascii_wctomb>:
 800aca2:	4603      	mov	r3, r0
 800aca4:	4608      	mov	r0, r1
 800aca6:	b141      	cbz	r1, 800acba <__ascii_wctomb+0x18>
 800aca8:	2aff      	cmp	r2, #255	@ 0xff
 800acaa:	d904      	bls.n	800acb6 <__ascii_wctomb+0x14>
 800acac:	228a      	movs	r2, #138	@ 0x8a
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	f04f 30ff 	mov.w	r0, #4294967295
 800acb4:	4770      	bx	lr
 800acb6:	700a      	strb	r2, [r1, #0]
 800acb8:	2001      	movs	r0, #1
 800acba:	4770      	bx	lr

0800acbc <__sfputc_r>:
 800acbc:	6893      	ldr	r3, [r2, #8]
 800acbe:	3b01      	subs	r3, #1
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	b410      	push	{r4}
 800acc4:	6093      	str	r3, [r2, #8]
 800acc6:	da08      	bge.n	800acda <__sfputc_r+0x1e>
 800acc8:	6994      	ldr	r4, [r2, #24]
 800acca:	42a3      	cmp	r3, r4
 800accc:	db01      	blt.n	800acd2 <__sfputc_r+0x16>
 800acce:	290a      	cmp	r1, #10
 800acd0:	d103      	bne.n	800acda <__sfputc_r+0x1e>
 800acd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800acd6:	f000 b933 	b.w	800af40 <__swbuf_r>
 800acda:	6813      	ldr	r3, [r2, #0]
 800acdc:	1c58      	adds	r0, r3, #1
 800acde:	6010      	str	r0, [r2, #0]
 800ace0:	7019      	strb	r1, [r3, #0]
 800ace2:	4608      	mov	r0, r1
 800ace4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <__sfputs_r>:
 800acea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acec:	4606      	mov	r6, r0
 800acee:	460f      	mov	r7, r1
 800acf0:	4614      	mov	r4, r2
 800acf2:	18d5      	adds	r5, r2, r3
 800acf4:	42ac      	cmp	r4, r5
 800acf6:	d101      	bne.n	800acfc <__sfputs_r+0x12>
 800acf8:	2000      	movs	r0, #0
 800acfa:	e007      	b.n	800ad0c <__sfputs_r+0x22>
 800acfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad00:	463a      	mov	r2, r7
 800ad02:	4630      	mov	r0, r6
 800ad04:	f7ff ffda 	bl	800acbc <__sfputc_r>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d1f3      	bne.n	800acf4 <__sfputs_r+0xa>
 800ad0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad10 <_vfiprintf_r>:
 800ad10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad14:	460d      	mov	r5, r1
 800ad16:	b09d      	sub	sp, #116	@ 0x74
 800ad18:	4614      	mov	r4, r2
 800ad1a:	4698      	mov	r8, r3
 800ad1c:	4606      	mov	r6, r0
 800ad1e:	b118      	cbz	r0, 800ad28 <_vfiprintf_r+0x18>
 800ad20:	6a03      	ldr	r3, [r0, #32]
 800ad22:	b90b      	cbnz	r3, 800ad28 <_vfiprintf_r+0x18>
 800ad24:	f7fe f8ec 	bl	8008f00 <__sinit>
 800ad28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad2a:	07d9      	lsls	r1, r3, #31
 800ad2c:	d405      	bmi.n	800ad3a <_vfiprintf_r+0x2a>
 800ad2e:	89ab      	ldrh	r3, [r5, #12]
 800ad30:	059a      	lsls	r2, r3, #22
 800ad32:	d402      	bmi.n	800ad3a <_vfiprintf_r+0x2a>
 800ad34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad36:	f7fe fa16 	bl	8009166 <__retarget_lock_acquire_recursive>
 800ad3a:	89ab      	ldrh	r3, [r5, #12]
 800ad3c:	071b      	lsls	r3, r3, #28
 800ad3e:	d501      	bpl.n	800ad44 <_vfiprintf_r+0x34>
 800ad40:	692b      	ldr	r3, [r5, #16]
 800ad42:	b99b      	cbnz	r3, 800ad6c <_vfiprintf_r+0x5c>
 800ad44:	4629      	mov	r1, r5
 800ad46:	4630      	mov	r0, r6
 800ad48:	f000 f938 	bl	800afbc <__swsetup_r>
 800ad4c:	b170      	cbz	r0, 800ad6c <_vfiprintf_r+0x5c>
 800ad4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad50:	07dc      	lsls	r4, r3, #31
 800ad52:	d504      	bpl.n	800ad5e <_vfiprintf_r+0x4e>
 800ad54:	f04f 30ff 	mov.w	r0, #4294967295
 800ad58:	b01d      	add	sp, #116	@ 0x74
 800ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5e:	89ab      	ldrh	r3, [r5, #12]
 800ad60:	0598      	lsls	r0, r3, #22
 800ad62:	d4f7      	bmi.n	800ad54 <_vfiprintf_r+0x44>
 800ad64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad66:	f7fe f9ff 	bl	8009168 <__retarget_lock_release_recursive>
 800ad6a:	e7f3      	b.n	800ad54 <_vfiprintf_r+0x44>
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad70:	2320      	movs	r3, #32
 800ad72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad76:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad7a:	2330      	movs	r3, #48	@ 0x30
 800ad7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800af2c <_vfiprintf_r+0x21c>
 800ad80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad84:	f04f 0901 	mov.w	r9, #1
 800ad88:	4623      	mov	r3, r4
 800ad8a:	469a      	mov	sl, r3
 800ad8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad90:	b10a      	cbz	r2, 800ad96 <_vfiprintf_r+0x86>
 800ad92:	2a25      	cmp	r2, #37	@ 0x25
 800ad94:	d1f9      	bne.n	800ad8a <_vfiprintf_r+0x7a>
 800ad96:	ebba 0b04 	subs.w	fp, sl, r4
 800ad9a:	d00b      	beq.n	800adb4 <_vfiprintf_r+0xa4>
 800ad9c:	465b      	mov	r3, fp
 800ad9e:	4622      	mov	r2, r4
 800ada0:	4629      	mov	r1, r5
 800ada2:	4630      	mov	r0, r6
 800ada4:	f7ff ffa1 	bl	800acea <__sfputs_r>
 800ada8:	3001      	adds	r0, #1
 800adaa:	f000 80a7 	beq.w	800aefc <_vfiprintf_r+0x1ec>
 800adae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adb0:	445a      	add	r2, fp
 800adb2:	9209      	str	r2, [sp, #36]	@ 0x24
 800adb4:	f89a 3000 	ldrb.w	r3, [sl]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 809f 	beq.w	800aefc <_vfiprintf_r+0x1ec>
 800adbe:	2300      	movs	r3, #0
 800adc0:	f04f 32ff 	mov.w	r2, #4294967295
 800adc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adc8:	f10a 0a01 	add.w	sl, sl, #1
 800adcc:	9304      	str	r3, [sp, #16]
 800adce:	9307      	str	r3, [sp, #28]
 800add0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800add4:	931a      	str	r3, [sp, #104]	@ 0x68
 800add6:	4654      	mov	r4, sl
 800add8:	2205      	movs	r2, #5
 800adda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adde:	4853      	ldr	r0, [pc, #332]	@ (800af2c <_vfiprintf_r+0x21c>)
 800ade0:	f7f5 f9f6 	bl	80001d0 <memchr>
 800ade4:	9a04      	ldr	r2, [sp, #16]
 800ade6:	b9d8      	cbnz	r0, 800ae20 <_vfiprintf_r+0x110>
 800ade8:	06d1      	lsls	r1, r2, #27
 800adea:	bf44      	itt	mi
 800adec:	2320      	movmi	r3, #32
 800adee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adf2:	0713      	lsls	r3, r2, #28
 800adf4:	bf44      	itt	mi
 800adf6:	232b      	movmi	r3, #43	@ 0x2b
 800adf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ae00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae02:	d015      	beq.n	800ae30 <_vfiprintf_r+0x120>
 800ae04:	9a07      	ldr	r2, [sp, #28]
 800ae06:	4654      	mov	r4, sl
 800ae08:	2000      	movs	r0, #0
 800ae0a:	f04f 0c0a 	mov.w	ip, #10
 800ae0e:	4621      	mov	r1, r4
 800ae10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae14:	3b30      	subs	r3, #48	@ 0x30
 800ae16:	2b09      	cmp	r3, #9
 800ae18:	d94b      	bls.n	800aeb2 <_vfiprintf_r+0x1a2>
 800ae1a:	b1b0      	cbz	r0, 800ae4a <_vfiprintf_r+0x13a>
 800ae1c:	9207      	str	r2, [sp, #28]
 800ae1e:	e014      	b.n	800ae4a <_vfiprintf_r+0x13a>
 800ae20:	eba0 0308 	sub.w	r3, r0, r8
 800ae24:	fa09 f303 	lsl.w	r3, r9, r3
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	9304      	str	r3, [sp, #16]
 800ae2c:	46a2      	mov	sl, r4
 800ae2e:	e7d2      	b.n	800add6 <_vfiprintf_r+0xc6>
 800ae30:	9b03      	ldr	r3, [sp, #12]
 800ae32:	1d19      	adds	r1, r3, #4
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	9103      	str	r1, [sp, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	bfbb      	ittet	lt
 800ae3c:	425b      	neglt	r3, r3
 800ae3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ae42:	9307      	strge	r3, [sp, #28]
 800ae44:	9307      	strlt	r3, [sp, #28]
 800ae46:	bfb8      	it	lt
 800ae48:	9204      	strlt	r2, [sp, #16]
 800ae4a:	7823      	ldrb	r3, [r4, #0]
 800ae4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae4e:	d10a      	bne.n	800ae66 <_vfiprintf_r+0x156>
 800ae50:	7863      	ldrb	r3, [r4, #1]
 800ae52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae54:	d132      	bne.n	800aebc <_vfiprintf_r+0x1ac>
 800ae56:	9b03      	ldr	r3, [sp, #12]
 800ae58:	1d1a      	adds	r2, r3, #4
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	9203      	str	r2, [sp, #12]
 800ae5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae62:	3402      	adds	r4, #2
 800ae64:	9305      	str	r3, [sp, #20]
 800ae66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800af3c <_vfiprintf_r+0x22c>
 800ae6a:	7821      	ldrb	r1, [r4, #0]
 800ae6c:	2203      	movs	r2, #3
 800ae6e:	4650      	mov	r0, sl
 800ae70:	f7f5 f9ae 	bl	80001d0 <memchr>
 800ae74:	b138      	cbz	r0, 800ae86 <_vfiprintf_r+0x176>
 800ae76:	9b04      	ldr	r3, [sp, #16]
 800ae78:	eba0 000a 	sub.w	r0, r0, sl
 800ae7c:	2240      	movs	r2, #64	@ 0x40
 800ae7e:	4082      	lsls	r2, r0
 800ae80:	4313      	orrs	r3, r2
 800ae82:	3401      	adds	r4, #1
 800ae84:	9304      	str	r3, [sp, #16]
 800ae86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae8a:	4829      	ldr	r0, [pc, #164]	@ (800af30 <_vfiprintf_r+0x220>)
 800ae8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae90:	2206      	movs	r2, #6
 800ae92:	f7f5 f99d 	bl	80001d0 <memchr>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	d03f      	beq.n	800af1a <_vfiprintf_r+0x20a>
 800ae9a:	4b26      	ldr	r3, [pc, #152]	@ (800af34 <_vfiprintf_r+0x224>)
 800ae9c:	bb1b      	cbnz	r3, 800aee6 <_vfiprintf_r+0x1d6>
 800ae9e:	9b03      	ldr	r3, [sp, #12]
 800aea0:	3307      	adds	r3, #7
 800aea2:	f023 0307 	bic.w	r3, r3, #7
 800aea6:	3308      	adds	r3, #8
 800aea8:	9303      	str	r3, [sp, #12]
 800aeaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeac:	443b      	add	r3, r7
 800aeae:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb0:	e76a      	b.n	800ad88 <_vfiprintf_r+0x78>
 800aeb2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	2001      	movs	r0, #1
 800aeba:	e7a8      	b.n	800ae0e <_vfiprintf_r+0xfe>
 800aebc:	2300      	movs	r3, #0
 800aebe:	3401      	adds	r4, #1
 800aec0:	9305      	str	r3, [sp, #20]
 800aec2:	4619      	mov	r1, r3
 800aec4:	f04f 0c0a 	mov.w	ip, #10
 800aec8:	4620      	mov	r0, r4
 800aeca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aece:	3a30      	subs	r2, #48	@ 0x30
 800aed0:	2a09      	cmp	r2, #9
 800aed2:	d903      	bls.n	800aedc <_vfiprintf_r+0x1cc>
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d0c6      	beq.n	800ae66 <_vfiprintf_r+0x156>
 800aed8:	9105      	str	r1, [sp, #20]
 800aeda:	e7c4      	b.n	800ae66 <_vfiprintf_r+0x156>
 800aedc:	fb0c 2101 	mla	r1, ip, r1, r2
 800aee0:	4604      	mov	r4, r0
 800aee2:	2301      	movs	r3, #1
 800aee4:	e7f0      	b.n	800aec8 <_vfiprintf_r+0x1b8>
 800aee6:	ab03      	add	r3, sp, #12
 800aee8:	9300      	str	r3, [sp, #0]
 800aeea:	462a      	mov	r2, r5
 800aeec:	4b12      	ldr	r3, [pc, #72]	@ (800af38 <_vfiprintf_r+0x228>)
 800aeee:	a904      	add	r1, sp, #16
 800aef0:	4630      	mov	r0, r6
 800aef2:	f7fd fbc3 	bl	800867c <_printf_float>
 800aef6:	4607      	mov	r7, r0
 800aef8:	1c78      	adds	r0, r7, #1
 800aefa:	d1d6      	bne.n	800aeaa <_vfiprintf_r+0x19a>
 800aefc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aefe:	07d9      	lsls	r1, r3, #31
 800af00:	d405      	bmi.n	800af0e <_vfiprintf_r+0x1fe>
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	059a      	lsls	r2, r3, #22
 800af06:	d402      	bmi.n	800af0e <_vfiprintf_r+0x1fe>
 800af08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af0a:	f7fe f92d 	bl	8009168 <__retarget_lock_release_recursive>
 800af0e:	89ab      	ldrh	r3, [r5, #12]
 800af10:	065b      	lsls	r3, r3, #25
 800af12:	f53f af1f 	bmi.w	800ad54 <_vfiprintf_r+0x44>
 800af16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af18:	e71e      	b.n	800ad58 <_vfiprintf_r+0x48>
 800af1a:	ab03      	add	r3, sp, #12
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	462a      	mov	r2, r5
 800af20:	4b05      	ldr	r3, [pc, #20]	@ (800af38 <_vfiprintf_r+0x228>)
 800af22:	a904      	add	r1, sp, #16
 800af24:	4630      	mov	r0, r6
 800af26:	f7fd fe41 	bl	8008bac <_printf_i>
 800af2a:	e7e4      	b.n	800aef6 <_vfiprintf_r+0x1e6>
 800af2c:	0800c1a9 	.word	0x0800c1a9
 800af30:	0800c1b3 	.word	0x0800c1b3
 800af34:	0800867d 	.word	0x0800867d
 800af38:	0800aceb 	.word	0x0800aceb
 800af3c:	0800c1af 	.word	0x0800c1af

0800af40 <__swbuf_r>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	460e      	mov	r6, r1
 800af44:	4614      	mov	r4, r2
 800af46:	4605      	mov	r5, r0
 800af48:	b118      	cbz	r0, 800af52 <__swbuf_r+0x12>
 800af4a:	6a03      	ldr	r3, [r0, #32]
 800af4c:	b90b      	cbnz	r3, 800af52 <__swbuf_r+0x12>
 800af4e:	f7fd ffd7 	bl	8008f00 <__sinit>
 800af52:	69a3      	ldr	r3, [r4, #24]
 800af54:	60a3      	str	r3, [r4, #8]
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	071a      	lsls	r2, r3, #28
 800af5a:	d501      	bpl.n	800af60 <__swbuf_r+0x20>
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	b943      	cbnz	r3, 800af72 <__swbuf_r+0x32>
 800af60:	4621      	mov	r1, r4
 800af62:	4628      	mov	r0, r5
 800af64:	f000 f82a 	bl	800afbc <__swsetup_r>
 800af68:	b118      	cbz	r0, 800af72 <__swbuf_r+0x32>
 800af6a:	f04f 37ff 	mov.w	r7, #4294967295
 800af6e:	4638      	mov	r0, r7
 800af70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af72:	6823      	ldr	r3, [r4, #0]
 800af74:	6922      	ldr	r2, [r4, #16]
 800af76:	1a98      	subs	r0, r3, r2
 800af78:	6963      	ldr	r3, [r4, #20]
 800af7a:	b2f6      	uxtb	r6, r6
 800af7c:	4283      	cmp	r3, r0
 800af7e:	4637      	mov	r7, r6
 800af80:	dc05      	bgt.n	800af8e <__swbuf_r+0x4e>
 800af82:	4621      	mov	r1, r4
 800af84:	4628      	mov	r0, r5
 800af86:	f7ff fdcd 	bl	800ab24 <_fflush_r>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	d1ed      	bne.n	800af6a <__swbuf_r+0x2a>
 800af8e:	68a3      	ldr	r3, [r4, #8]
 800af90:	3b01      	subs	r3, #1
 800af92:	60a3      	str	r3, [r4, #8]
 800af94:	6823      	ldr	r3, [r4, #0]
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	6022      	str	r2, [r4, #0]
 800af9a:	701e      	strb	r6, [r3, #0]
 800af9c:	6962      	ldr	r2, [r4, #20]
 800af9e:	1c43      	adds	r3, r0, #1
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d004      	beq.n	800afae <__swbuf_r+0x6e>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	07db      	lsls	r3, r3, #31
 800afa8:	d5e1      	bpl.n	800af6e <__swbuf_r+0x2e>
 800afaa:	2e0a      	cmp	r6, #10
 800afac:	d1df      	bne.n	800af6e <__swbuf_r+0x2e>
 800afae:	4621      	mov	r1, r4
 800afb0:	4628      	mov	r0, r5
 800afb2:	f7ff fdb7 	bl	800ab24 <_fflush_r>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d0d9      	beq.n	800af6e <__swbuf_r+0x2e>
 800afba:	e7d6      	b.n	800af6a <__swbuf_r+0x2a>

0800afbc <__swsetup_r>:
 800afbc:	b538      	push	{r3, r4, r5, lr}
 800afbe:	4b29      	ldr	r3, [pc, #164]	@ (800b064 <__swsetup_r+0xa8>)
 800afc0:	4605      	mov	r5, r0
 800afc2:	6818      	ldr	r0, [r3, #0]
 800afc4:	460c      	mov	r4, r1
 800afc6:	b118      	cbz	r0, 800afd0 <__swsetup_r+0x14>
 800afc8:	6a03      	ldr	r3, [r0, #32]
 800afca:	b90b      	cbnz	r3, 800afd0 <__swsetup_r+0x14>
 800afcc:	f7fd ff98 	bl	8008f00 <__sinit>
 800afd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afd4:	0719      	lsls	r1, r3, #28
 800afd6:	d422      	bmi.n	800b01e <__swsetup_r+0x62>
 800afd8:	06da      	lsls	r2, r3, #27
 800afda:	d407      	bmi.n	800afec <__swsetup_r+0x30>
 800afdc:	2209      	movs	r2, #9
 800afde:	602a      	str	r2, [r5, #0]
 800afe0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afe4:	81a3      	strh	r3, [r4, #12]
 800afe6:	f04f 30ff 	mov.w	r0, #4294967295
 800afea:	e033      	b.n	800b054 <__swsetup_r+0x98>
 800afec:	0758      	lsls	r0, r3, #29
 800afee:	d512      	bpl.n	800b016 <__swsetup_r+0x5a>
 800aff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aff2:	b141      	cbz	r1, 800b006 <__swsetup_r+0x4a>
 800aff4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aff8:	4299      	cmp	r1, r3
 800affa:	d002      	beq.n	800b002 <__swsetup_r+0x46>
 800affc:	4628      	mov	r0, r5
 800affe:	f7fe ff3b 	bl	8009e78 <_free_r>
 800b002:	2300      	movs	r3, #0
 800b004:	6363      	str	r3, [r4, #52]	@ 0x34
 800b006:	89a3      	ldrh	r3, [r4, #12]
 800b008:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b00c:	81a3      	strh	r3, [r4, #12]
 800b00e:	2300      	movs	r3, #0
 800b010:	6063      	str	r3, [r4, #4]
 800b012:	6923      	ldr	r3, [r4, #16]
 800b014:	6023      	str	r3, [r4, #0]
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	f043 0308 	orr.w	r3, r3, #8
 800b01c:	81a3      	strh	r3, [r4, #12]
 800b01e:	6923      	ldr	r3, [r4, #16]
 800b020:	b94b      	cbnz	r3, 800b036 <__swsetup_r+0x7a>
 800b022:	89a3      	ldrh	r3, [r4, #12]
 800b024:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b028:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b02c:	d003      	beq.n	800b036 <__swsetup_r+0x7a>
 800b02e:	4621      	mov	r1, r4
 800b030:	4628      	mov	r0, r5
 800b032:	f000 f88b 	bl	800b14c <__smakebuf_r>
 800b036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b03a:	f013 0201 	ands.w	r2, r3, #1
 800b03e:	d00a      	beq.n	800b056 <__swsetup_r+0x9a>
 800b040:	2200      	movs	r2, #0
 800b042:	60a2      	str	r2, [r4, #8]
 800b044:	6962      	ldr	r2, [r4, #20]
 800b046:	4252      	negs	r2, r2
 800b048:	61a2      	str	r2, [r4, #24]
 800b04a:	6922      	ldr	r2, [r4, #16]
 800b04c:	b942      	cbnz	r2, 800b060 <__swsetup_r+0xa4>
 800b04e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b052:	d1c5      	bne.n	800afe0 <__swsetup_r+0x24>
 800b054:	bd38      	pop	{r3, r4, r5, pc}
 800b056:	0799      	lsls	r1, r3, #30
 800b058:	bf58      	it	pl
 800b05a:	6962      	ldrpl	r2, [r4, #20]
 800b05c:	60a2      	str	r2, [r4, #8]
 800b05e:	e7f4      	b.n	800b04a <__swsetup_r+0x8e>
 800b060:	2000      	movs	r0, #0
 800b062:	e7f7      	b.n	800b054 <__swsetup_r+0x98>
 800b064:	20002484 	.word	0x20002484

0800b068 <_raise_r>:
 800b068:	291f      	cmp	r1, #31
 800b06a:	b538      	push	{r3, r4, r5, lr}
 800b06c:	4605      	mov	r5, r0
 800b06e:	460c      	mov	r4, r1
 800b070:	d904      	bls.n	800b07c <_raise_r+0x14>
 800b072:	2316      	movs	r3, #22
 800b074:	6003      	str	r3, [r0, #0]
 800b076:	f04f 30ff 	mov.w	r0, #4294967295
 800b07a:	bd38      	pop	{r3, r4, r5, pc}
 800b07c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b07e:	b112      	cbz	r2, 800b086 <_raise_r+0x1e>
 800b080:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b084:	b94b      	cbnz	r3, 800b09a <_raise_r+0x32>
 800b086:	4628      	mov	r0, r5
 800b088:	f000 f830 	bl	800b0ec <_getpid_r>
 800b08c:	4622      	mov	r2, r4
 800b08e:	4601      	mov	r1, r0
 800b090:	4628      	mov	r0, r5
 800b092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b096:	f000 b817 	b.w	800b0c8 <_kill_r>
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d00a      	beq.n	800b0b4 <_raise_r+0x4c>
 800b09e:	1c59      	adds	r1, r3, #1
 800b0a0:	d103      	bne.n	800b0aa <_raise_r+0x42>
 800b0a2:	2316      	movs	r3, #22
 800b0a4:	6003      	str	r3, [r0, #0]
 800b0a6:	2001      	movs	r0, #1
 800b0a8:	e7e7      	b.n	800b07a <_raise_r+0x12>
 800b0aa:	2100      	movs	r1, #0
 800b0ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	4798      	blx	r3
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	e7e0      	b.n	800b07a <_raise_r+0x12>

0800b0b8 <raise>:
 800b0b8:	4b02      	ldr	r3, [pc, #8]	@ (800b0c4 <raise+0xc>)
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	6818      	ldr	r0, [r3, #0]
 800b0be:	f7ff bfd3 	b.w	800b068 <_raise_r>
 800b0c2:	bf00      	nop
 800b0c4:	20002484 	.word	0x20002484

0800b0c8 <_kill_r>:
 800b0c8:	b538      	push	{r3, r4, r5, lr}
 800b0ca:	4d07      	ldr	r5, [pc, #28]	@ (800b0e8 <_kill_r+0x20>)
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	4608      	mov	r0, r1
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	602b      	str	r3, [r5, #0]
 800b0d6:	f7f6 ffb3 	bl	8002040 <_kill>
 800b0da:	1c43      	adds	r3, r0, #1
 800b0dc:	d102      	bne.n	800b0e4 <_kill_r+0x1c>
 800b0de:	682b      	ldr	r3, [r5, #0]
 800b0e0:	b103      	cbz	r3, 800b0e4 <_kill_r+0x1c>
 800b0e2:	6023      	str	r3, [r4, #0]
 800b0e4:	bd38      	pop	{r3, r4, r5, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20002f94 	.word	0x20002f94

0800b0ec <_getpid_r>:
 800b0ec:	f7f6 bfa0 	b.w	8002030 <_getpid>

0800b0f0 <_malloc_usable_size_r>:
 800b0f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0f4:	1f18      	subs	r0, r3, #4
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	bfbc      	itt	lt
 800b0fa:	580b      	ldrlt	r3, [r1, r0]
 800b0fc:	18c0      	addlt	r0, r0, r3
 800b0fe:	4770      	bx	lr

0800b100 <__swhatbuf_r>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	460c      	mov	r4, r1
 800b104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b108:	2900      	cmp	r1, #0
 800b10a:	b096      	sub	sp, #88	@ 0x58
 800b10c:	4615      	mov	r5, r2
 800b10e:	461e      	mov	r6, r3
 800b110:	da0d      	bge.n	800b12e <__swhatbuf_r+0x2e>
 800b112:	89a3      	ldrh	r3, [r4, #12]
 800b114:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b118:	f04f 0100 	mov.w	r1, #0
 800b11c:	bf14      	ite	ne
 800b11e:	2340      	movne	r3, #64	@ 0x40
 800b120:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b124:	2000      	movs	r0, #0
 800b126:	6031      	str	r1, [r6, #0]
 800b128:	602b      	str	r3, [r5, #0]
 800b12a:	b016      	add	sp, #88	@ 0x58
 800b12c:	bd70      	pop	{r4, r5, r6, pc}
 800b12e:	466a      	mov	r2, sp
 800b130:	f000 f848 	bl	800b1c4 <_fstat_r>
 800b134:	2800      	cmp	r0, #0
 800b136:	dbec      	blt.n	800b112 <__swhatbuf_r+0x12>
 800b138:	9901      	ldr	r1, [sp, #4]
 800b13a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b13e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b142:	4259      	negs	r1, r3
 800b144:	4159      	adcs	r1, r3
 800b146:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b14a:	e7eb      	b.n	800b124 <__swhatbuf_r+0x24>

0800b14c <__smakebuf_r>:
 800b14c:	898b      	ldrh	r3, [r1, #12]
 800b14e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b150:	079d      	lsls	r5, r3, #30
 800b152:	4606      	mov	r6, r0
 800b154:	460c      	mov	r4, r1
 800b156:	d507      	bpl.n	800b168 <__smakebuf_r+0x1c>
 800b158:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	6123      	str	r3, [r4, #16]
 800b160:	2301      	movs	r3, #1
 800b162:	6163      	str	r3, [r4, #20]
 800b164:	b003      	add	sp, #12
 800b166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b168:	ab01      	add	r3, sp, #4
 800b16a:	466a      	mov	r2, sp
 800b16c:	f7ff ffc8 	bl	800b100 <__swhatbuf_r>
 800b170:	9f00      	ldr	r7, [sp, #0]
 800b172:	4605      	mov	r5, r0
 800b174:	4639      	mov	r1, r7
 800b176:	4630      	mov	r0, r6
 800b178:	f7fe fef2 	bl	8009f60 <_malloc_r>
 800b17c:	b948      	cbnz	r0, 800b192 <__smakebuf_r+0x46>
 800b17e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b182:	059a      	lsls	r2, r3, #22
 800b184:	d4ee      	bmi.n	800b164 <__smakebuf_r+0x18>
 800b186:	f023 0303 	bic.w	r3, r3, #3
 800b18a:	f043 0302 	orr.w	r3, r3, #2
 800b18e:	81a3      	strh	r3, [r4, #12]
 800b190:	e7e2      	b.n	800b158 <__smakebuf_r+0xc>
 800b192:	89a3      	ldrh	r3, [r4, #12]
 800b194:	6020      	str	r0, [r4, #0]
 800b196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b19a:	81a3      	strh	r3, [r4, #12]
 800b19c:	9b01      	ldr	r3, [sp, #4]
 800b19e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1a2:	b15b      	cbz	r3, 800b1bc <__smakebuf_r+0x70>
 800b1a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1a8:	4630      	mov	r0, r6
 800b1aa:	f000 f81d 	bl	800b1e8 <_isatty_r>
 800b1ae:	b128      	cbz	r0, 800b1bc <__smakebuf_r+0x70>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	f023 0303 	bic.w	r3, r3, #3
 800b1b6:	f043 0301 	orr.w	r3, r3, #1
 800b1ba:	81a3      	strh	r3, [r4, #12]
 800b1bc:	89a3      	ldrh	r3, [r4, #12]
 800b1be:	431d      	orrs	r5, r3
 800b1c0:	81a5      	strh	r5, [r4, #12]
 800b1c2:	e7cf      	b.n	800b164 <__smakebuf_r+0x18>

0800b1c4 <_fstat_r>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	4d07      	ldr	r5, [pc, #28]	@ (800b1e4 <_fstat_r+0x20>)
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	4608      	mov	r0, r1
 800b1ce:	4611      	mov	r1, r2
 800b1d0:	602b      	str	r3, [r5, #0]
 800b1d2:	f7f6 ff95 	bl	8002100 <_fstat>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d102      	bne.n	800b1e0 <_fstat_r+0x1c>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	b103      	cbz	r3, 800b1e0 <_fstat_r+0x1c>
 800b1de:	6023      	str	r3, [r4, #0]
 800b1e0:	bd38      	pop	{r3, r4, r5, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20002f94 	.word	0x20002f94

0800b1e8 <_isatty_r>:
 800b1e8:	b538      	push	{r3, r4, r5, lr}
 800b1ea:	4d06      	ldr	r5, [pc, #24]	@ (800b204 <_isatty_r+0x1c>)
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	4608      	mov	r0, r1
 800b1f2:	602b      	str	r3, [r5, #0]
 800b1f4:	f7f6 ff94 	bl	8002120 <_isatty>
 800b1f8:	1c43      	adds	r3, r0, #1
 800b1fa:	d102      	bne.n	800b202 <_isatty_r+0x1a>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	b103      	cbz	r3, 800b202 <_isatty_r+0x1a>
 800b200:	6023      	str	r3, [r4, #0]
 800b202:	bd38      	pop	{r3, r4, r5, pc}
 800b204:	20002f94 	.word	0x20002f94

0800b208 <_init>:
 800b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20a:	bf00      	nop
 800b20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20e:	bc08      	pop	{r3}
 800b210:	469e      	mov	lr, r3
 800b212:	4770      	bx	lr

0800b214 <_fini>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	bf00      	nop
 800b218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21a:	bc08      	pop	{r3}
 800b21c:	469e      	mov	lr, r3
 800b21e:	4770      	bx	lr

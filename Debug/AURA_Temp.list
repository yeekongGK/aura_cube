
AURA_Temp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f8c  08009680  08009680  0000a680  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a60c  0800a60c  0000e5c0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a60c  0800a60c  0000b60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a614  0800a614  0000e5c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a614  0800a614  0000b614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a618  0800a618  0000b618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000025c0  20000000  0800a61c  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  200025c0  0800cbdc  0000e5c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c04  0800cbdc  0000ec04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e5c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e423  00000000  00000000  0000e5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ab  00000000  00000000  0002ca13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001630  00000000  00000000  00030dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e7  00000000  00000000  000323f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000288e3  00000000  00000000  000334d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f9fc  00000000  00000000  0005bdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e85c5  00000000  00000000  0007b7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00163d7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a74  00000000  00000000  00163dc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016a834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200025c0 	.word	0x200025c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009664 	.word	0x08009664

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200025c4 	.word	0x200025c4
 80001cc:	08009664 	.word	0x08009664

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000eda:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <MX_CRC_Init+0x40>)
 8000edc:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000ede:	4b0c      	ldr	r3, [pc, #48]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000eea:	4b09      	ldr	r3, [pc, #36]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000ef0:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	@ (8000f10 <MX_CRC_Init+0x3c>)
 8000efe:	f001 f9cd 	bl	800229c <HAL_CRC_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f08:	f000 fbf2 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200025dc 	.word	0x200025dc
 8000f14:	40023000 	.word	0x40023000

08000f18 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <HAL_CRC_MspInit+0x38>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d10b      	bne.n	8000f42 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_CRC_MspInit+0x3c>)
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f2e:	4a09      	ldr	r2, [pc, #36]	@ (8000f54 <HAL_CRC_MspInit+0x3c>)
 8000f30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f34:	6493      	str	r3, [r2, #72]	@ 0x48
 8000f36:	4b07      	ldr	r3, [pc, #28]	@ (8000f54 <HAL_CRC_MspInit+0x3c>)
 8000f38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40023000 	.word	0x40023000
 8000f54:	40021000 	.word	0x40021000

08000f58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08a      	sub	sp, #40	@ 0x28
 8000f5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b56      	ldr	r3, [pc, #344]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	4a55      	ldr	r2, [pc, #340]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7a:	4b53      	ldr	r3, [pc, #332]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f86:	4b50      	ldr	r3, [pc, #320]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	4a4f      	ldr	r2, [pc, #316]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f92:	4b4d      	ldr	r3, [pc, #308]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b4a      	ldr	r3, [pc, #296]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	4a49      	ldr	r2, [pc, #292]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000faa:	4b47      	ldr	r3, [pc, #284]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	60bb      	str	r3, [r7, #8]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	4b44      	ldr	r3, [pc, #272]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	4a43      	ldr	r2, [pc, #268]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc2:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <MX_GPIO_Init+0x170>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_PSM_EINT_GPIO_Port, NB_PSM_EINT_Pin, GPIO_PIN_RESET);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fd4:	483d      	ldr	r0, [pc, #244]	@ (80010cc <MX_GPIO_Init+0x174>)
 8000fd6:	f001 fbcd 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2146      	movs	r1, #70	@ 0x46
 8000fde:	483c      	ldr	r0, [pc, #240]	@ (80010d0 <MX_GPIO_Init+0x178>)
 8000fe0:	f001 fbc8 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NFC_PWR_Pin|NB_ONOFF_Pin, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fee:	f001 fbc1 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NB_RESET_GPIO_Port, NB_RESET_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2108      	movs	r1, #8
 8000ff6:	4837      	ldr	r0, [pc, #220]	@ (80010d4 <MX_GPIO_Init+0x17c>)
 8000ff8:	f001 fbbc 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NB_PSM_EINT_Pin */
  GPIO_InitStruct.Pin = NB_PSM_EINT_Pin;
 8000ffc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_PSM_EINT_GPIO_Port, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	482d      	ldr	r0, [pc, #180]	@ (80010cc <MX_GPIO_Init+0x174>)
 8001016:	f001 fa33 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT2_Pin MEMS_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin|MEMS_INT1_Pin;
 800101a:	2303      	movs	r3, #3
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4829      	ldr	r0, [pc, #164]	@ (80010d4 <MX_GPIO_Init+0x17c>)
 800102e:	f001 fa27 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBATT_ADC_Pin NFC_BUSY_Pin COMP2_INP_CH1_Pin TAMPER_IN_Pin
                           VBATT_DET_Pin PWR_BY_MAG_Pin */
  GPIO_InitStruct.Pin = VBATT_ADC_Pin|NFC_BUSY_Pin|COMP2_INP_CH1_Pin|TAMPER_IN_Pin
 8001032:	f640 132d 	movw	r3, #2349	@ 0x92d
 8001036:	617b      	str	r3, [r7, #20]
                          |VBATT_DET_Pin|PWR_BY_MAG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800104a:	f001 fa19 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : NB_PWR_BYPASS_Pin NB_PWR_EN_Pin PWR_EN_Pin */
  GPIO_InitStruct.Pin = NB_PWR_BYPASS_Pin|NB_PWR_EN_Pin|PWR_EN_Pin;
 800104e:	2346      	movs	r3, #70	@ 0x46
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	481a      	ldr	r0, [pc, #104]	@ (80010d0 <MX_GPIO_Init+0x178>)
 8001066:	f001 fa0b 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : SIM_DT_Pin FUEL_GAUGE_ALRT_Pin */
  GPIO_InitStruct.Pin = SIM_DT_Pin|FUEL_GAUGE_ALRT_Pin;
 800106a:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4814      	ldr	r0, [pc, #80]	@ (80010d0 <MX_GPIO_Init+0x178>)
 8001080:	f001 f9fe 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pins : NFC_PWR_Pin NB_ONOFF_Pin */
  GPIO_InitStruct.Pin = NFC_PWR_Pin|NB_ONOFF_Pin;
 8001084:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8001088:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010a0:	f001 f9ee 	bl	8002480 <HAL_GPIO_Init>

  /*Configure GPIO pin : NB_RESET_Pin */
  GPIO_InitStruct.Pin = NB_RESET_Pin;
 80010a4:	2308      	movs	r3, #8
 80010a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NB_RESET_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <MX_GPIO_Init+0x17c>)
 80010bc:	f001 f9e0 	bl	8002480 <HAL_GPIO_Init>

}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	@ 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000
 80010cc:	48000800 	.word	0x48000800
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48001c00 	.word	0x48001c00

080010d8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	@ (800114c <MX_I2C1_Init+0x74>)
 80010de:	4a1c      	ldr	r2, [pc, #112]	@ (8001150 <MX_I2C1_Init+0x78>)
 80010e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 80010e2:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <MX_I2C1_Init+0x74>)
 80010e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <MX_I2C1_Init+0x7c>)
 80010e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010e8:	4b18      	ldr	r3, [pc, #96]	@ (800114c <MX_I2C1_Init+0x74>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ee:	4b17      	ldr	r3, [pc, #92]	@ (800114c <MX_I2C1_Init+0x74>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	4b15      	ldr	r3, [pc, #84]	@ (800114c <MX_I2C1_Init+0x74>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010fa:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_I2C1_Init+0x74>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <MX_I2C1_Init+0x74>)
 8001102:	2200      	movs	r2, #0
 8001104:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_I2C1_Init+0x74>)
 8001108:	2200      	movs	r2, #0
 800110a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_I2C1_Init+0x74>)
 800110e:	2200      	movs	r2, #0
 8001110:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001112:	480e      	ldr	r0, [pc, #56]	@ (800114c <MX_I2C1_Init+0x74>)
 8001114:	f001 fb46 	bl	80027a4 <HAL_I2C_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800111e:	f000 fae7 	bl	80016f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001122:	2100      	movs	r1, #0
 8001124:	4809      	ldr	r0, [pc, #36]	@ (800114c <MX_I2C1_Init+0x74>)
 8001126:	f002 f9b5 	bl	8003494 <HAL_I2CEx_ConfigAnalogFilter>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001130:	f000 fade 	bl	80016f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001134:	2100      	movs	r1, #0
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_I2C1_Init+0x74>)
 8001138:	f002 f9f7 	bl	800352a <HAL_I2CEx_ConfigDigitalFilter>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001142:	f000 fad5 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20002600 	.word	0x20002600
 8001150:	40005400 	.word	0x40005400
 8001154:	00100d14 	.word	0x00100d14

08001158 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_I2C2_Init+0x74>)
 800115e:	4a1c      	ldr	r2, [pc, #112]	@ (80011d0 <MX_I2C2_Init+0x78>)
 8001160:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100D14;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <MX_I2C2_Init+0x74>)
 8001164:	4a1b      	ldr	r2, [pc, #108]	@ (80011d4 <MX_I2C2_Init+0x7c>)
 8001166:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_I2C2_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800116e:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MX_I2C2_Init+0x74>)
 8001170:	2201      	movs	r2, #1
 8001172:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001174:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <MX_I2C2_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_I2C2_Init+0x74>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <MX_I2C2_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_I2C2_Init+0x74>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_I2C2_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001192:	480e      	ldr	r0, [pc, #56]	@ (80011cc <MX_I2C2_Init+0x74>)
 8001194:	f001 fb06 	bl	80027a4 <HAL_I2C_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800119e:	f000 faa7 	bl	80016f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011a2:	2100      	movs	r1, #0
 80011a4:	4809      	ldr	r0, [pc, #36]	@ (80011cc <MX_I2C2_Init+0x74>)
 80011a6:	f002 f975 	bl	8003494 <HAL_I2CEx_ConfigAnalogFilter>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011b0:	f000 fa9e 	bl	80016f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011b4:	2100      	movs	r1, #0
 80011b6:	4805      	ldr	r0, [pc, #20]	@ (80011cc <MX_I2C2_Init+0x74>)
 80011b8:	f002 f9b7 	bl	800352a <HAL_I2CEx_ConfigDigitalFilter>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011c2:	f000 fa95 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20002654 	.word	0x20002654
 80011d0:	40005800 	.word	0x40005800
 80011d4:	00100d14 	.word	0x00100d14

080011d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b0a4      	sub	sp, #144	@ 0x90
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2260      	movs	r2, #96	@ 0x60
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f006 f965 	bl	80074c8 <memset>
  if(i2cHandle->Instance==I2C1)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a41      	ldr	r2, [pc, #260]	@ (8001308 <HAL_I2C_MspInit+0x130>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d13b      	bne.n	8001280 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001208:	2340      	movs	r3, #64	@ 0x40
 800120a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800120c:	2300      	movs	r3, #0
 800120e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	4618      	mov	r0, r3
 8001216:	f003 fa05 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001220:	f000 fa66 	bl	80016f0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001224:	4b39      	ldr	r3, [pc, #228]	@ (800130c <HAL_I2C_MspInit+0x134>)
 8001226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001228:	4a38      	ldr	r2, [pc, #224]	@ (800130c <HAL_I2C_MspInit+0x134>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001230:	4b36      	ldr	r3, [pc, #216]	@ (800130c <HAL_I2C_MspInit+0x134>)
 8001232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|GPIO_PIN_9;
 800123c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001240:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001242:	2312      	movs	r3, #18
 8001244:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124e:	2303      	movs	r3, #3
 8001250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001254:	2304      	movs	r3, #4
 8001256:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800125e:	4619      	mov	r1, r3
 8001260:	482b      	ldr	r0, [pc, #172]	@ (8001310 <HAL_I2C_MspInit+0x138>)
 8001262:	f001 f90d 	bl	8002480 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001266:	4b29      	ldr	r3, [pc, #164]	@ (800130c <HAL_I2C_MspInit+0x134>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	4a28      	ldr	r2, [pc, #160]	@ (800130c <HAL_I2C_MspInit+0x134>)
 800126c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001270:	6593      	str	r3, [r2, #88]	@ 0x58
 8001272:	4b26      	ldr	r3, [pc, #152]	@ (800130c <HAL_I2C_MspInit+0x134>)
 8001274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800127e:	e03f      	b.n	8001300 <HAL_I2C_MspInit+0x128>
  else if(i2cHandle->Instance==I2C2)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a23      	ldr	r2, [pc, #140]	@ (8001314 <HAL_I2C_MspInit+0x13c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d13a      	bne.n	8001300 <HAL_I2C_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800128a:	2380      	movs	r3, #128	@ 0x80
 800128c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800128e:	2300      	movs	r3, #0
 8001290:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4618      	mov	r0, r3
 8001298:	f003 f9c4 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80012a2:	f000 fa25 	bl	80016f0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a6:	4b19      	ldr	r3, [pc, #100]	@ (800130c <HAL_I2C_MspInit+0x134>)
 80012a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012aa:	4a18      	ldr	r2, [pc, #96]	@ (800130c <HAL_I2C_MspInit+0x134>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012b2:	4b16      	ldr	r3, [pc, #88]	@ (800130c <HAL_I2C_MspInit+0x134>)
 80012b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2SCL_Pin|I2C2_SDA_Pin;
 80012be:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80012c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012d6:	2304      	movs	r3, #4
 80012d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012dc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012e0:	4619      	mov	r1, r3
 80012e2:	480b      	ldr	r0, [pc, #44]	@ (8001310 <HAL_I2C_MspInit+0x138>)
 80012e4:	f001 f8cc 	bl	8002480 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012e8:	4b08      	ldr	r3, [pc, #32]	@ (800130c <HAL_I2C_MspInit+0x134>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ec:	4a07      	ldr	r2, [pc, #28]	@ (800130c <HAL_I2C_MspInit+0x134>)
 80012ee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_I2C_MspInit+0x134>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	bf00      	nop
 8001302:	3790      	adds	r7, #144	@ 0x90
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40005400 	.word	0x40005400
 800130c:	40021000 	.word	0x40021000
 8001310:	48000400 	.word	0x48000400
 8001314:	40005800 	.word	0x40005800

08001318 <I2C1_MemWrite>:
}

/* USER CODE BEGIN 1 */

HAL_StatusTypeDef I2C1_MemWrite(uint16_t _devAddr, uint16_t _memAddress, uint16_t _memAddSize, uint8_t *_pData, uint16_t _size, uint32_t _timeout)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af04      	add	r7, sp, #16
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	4603      	mov	r3, r0
 8001322:	81fb      	strh	r3, [r7, #14]
 8001324:	460b      	mov	r3, r1
 8001326:	81bb      	strh	r3, [r7, #12]
 8001328:	4613      	mov	r3, r2
 800132a:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Write(&hi2c1, _devAddr, _memAddress, _memAddSize, (uint8_t *)_pData, _size, _timeout);
 800132c:	8978      	ldrh	r0, [r7, #10]
 800132e:	89ba      	ldrh	r2, [r7, #12]
 8001330:	89f9      	ldrh	r1, [r7, #14]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	9302      	str	r3, [sp, #8]
 8001336:	8b3b      	ldrh	r3, [r7, #24]
 8001338:	9301      	str	r3, [sp, #4]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	9300      	str	r3, [sp, #0]
 800133e:	4603      	mov	r3, r0
 8001340:	4803      	ldr	r0, [pc, #12]	@ (8001350 <I2C1_MemWrite+0x38>)
 8001342:	f001 facb 	bl	80028dc <HAL_I2C_Mem_Write>
 8001346:	4603      	mov	r3, r0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20002600 	.word	0x20002600

08001354 <I2C1_MemRead>:

HAL_StatusTypeDef I2C1_MemRead(uint16_t _devAddr, uint16_t _memAddress, uint16_t _memAddSize, uint8_t *_pData, uint16_t _size, uint32_t _timeout)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af04      	add	r7, sp, #16
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4603      	mov	r3, r0
 800135e:	81fb      	strh	r3, [r7, #14]
 8001360:	460b      	mov	r3, r1
 8001362:	81bb      	strh	r3, [r7, #12]
 8001364:	4613      	mov	r3, r2
 8001366:	817b      	strh	r3, [r7, #10]
	return HAL_I2C_Mem_Read(&hi2c1, _devAddr, _memAddress, _memAddSize, _pData, _size, _timeout );
 8001368:	8978      	ldrh	r0, [r7, #10]
 800136a:	89ba      	ldrh	r2, [r7, #12]
 800136c:	89f9      	ldrh	r1, [r7, #14]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	8b3b      	ldrh	r3, [r7, #24]
 8001374:	9301      	str	r3, [sp, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	4603      	mov	r3, r0
 800137c:	4803      	ldr	r0, [pc, #12]	@ (800138c <I2C1_MemRead+0x38>)
 800137e:	f001 fbc1 	bl	8002b04 <HAL_I2C_Mem_Read>
 8001382:	4603      	mov	r3, r0
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20002600 	.word	0x20002600

08001390 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001394:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 8001396:	4a17      	ldr	r2, [pc, #92]	@ (80013f4 <MX_LPTIM1_Init+0x64>)
 8001398:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800139a:	4b15      	ldr	r3, [pc, #84]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 80013a6:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 80013ac:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80013b2:	4b0f      	ldr	r3, [pc, #60]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b8:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80013c0:	4b0b      	ldr	r3, [pc, #44]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013c8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80013cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80013ce:	4b08      	ldr	r3, [pc, #32]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80013da:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <MX_LPTIM1_Init+0x60>)
 80013dc:	f002 f8f2 	bl	80035c4 <HAL_LPTIM_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 80013e6:	f000 f983 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	200026a8 	.word	0x200026a8
 80013f4:	40007c00 	.word	0x40007c00

080013f8 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0a2      	sub	sp, #136	@ 0x88
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2260      	movs	r2, #96	@ 0x60
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f006 f855 	bl	80074c8 <memset>
  if(lptimHandle->Instance==LPTIM1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a24      	ldr	r2, [pc, #144]	@ (80014b4 <HAL_LPTIM_MspInit+0xbc>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d140      	bne.n	80014aa <HAL_LPTIM_MspInit+0xb2>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001428:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800142c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800142e:	2300      	movs	r3, #0
 8001430:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4618      	mov	r0, r3
 8001438:	f003 f8f4 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8001442:	f000 f955 	bl	80016f0 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_LPTIM_MspInit+0xc0>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144a:	4a1b      	ldr	r2, [pc, #108]	@ (80014b8 <HAL_LPTIM_MspInit+0xc0>)
 800144c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001450:	6593      	str	r3, [r2, #88]	@ 0x58
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_LPTIM_MspInit+0xc0>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800145e:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <HAL_LPTIM_MspInit+0xc0>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001462:	4a15      	ldr	r2, [pc, #84]	@ (80014b8 <HAL_LPTIM_MspInit+0xc0>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800146a:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <HAL_LPTIM_MspInit+0xc0>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001476:	23a0      	movs	r3, #160	@ 0xa0
 8001478:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001488:	2301      	movs	r3, #1
 800148a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001492:	4619      	mov	r1, r3
 8001494:	4809      	ldr	r0, [pc, #36]	@ (80014bc <HAL_LPTIM_MspInit+0xc4>)
 8001496:	f000 fff3 	bl	8002480 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2041      	movs	r0, #65	@ 0x41
 80014a0:	f000 feb7 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80014a4:	2041      	movs	r0, #65	@ 0x41
 80014a6:	f000 fed0 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80014aa:	bf00      	nop
 80014ac:	3788      	adds	r7, #136	@ 0x88
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40007c00 	.word	0x40007c00
 80014b8:	40021000 	.word	0x40021000
 80014bc:	48000400 	.word	0x48000400

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014c4:	b08a      	sub	sp, #40	@ 0x28
 80014c6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c8:	f000 fd0b 	bl	8001ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014cc:	f000 f88a 	bl	80015e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d0:	f7ff fd42 	bl	8000f58 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80014d4:	f7ff ff5c 	bl	8001390 <MX_LPTIM1_Init>
  MX_I2C1_Init();
 80014d8:	f7ff fdfe 	bl	80010d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80014dc:	f7ff fe3c 	bl	8001158 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 80014e0:	f000 fbd8 	bl	8001c94 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80014e4:	f000 fc02 	bl	8001cec <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80014e8:	f000 f9ec 	bl	80018c4 <MX_SPI1_Init>
  MX_RTC_Init();
 80014ec:	f000 f906 	bl	80016fc <MX_RTC_Init>
//  MX_WWDG_Init();
  MX_CRC_Init();
 80014f0:	f7ff fcf0 	bl	8000ed4 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */


  BatteryMonitor_Init();
 80014f4:	f005 fa07 	bl	8006906 <BatteryMonitor_Init>

  for (uint16_t addr = 1; addr < 128; addr++)
 80014f8:	2301      	movs	r3, #1
 80014fa:	82fb      	strh	r3, [r7, #22]
 80014fc:	e012      	b.n	8001524 <main+0x64>
  {
	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(addr << 1), 2, 10) == HAL_OK)
 80014fe:	8afb      	ldrh	r3, [r7, #22]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	b299      	uxth	r1, r3
 8001504:	230a      	movs	r3, #10
 8001506:	2202      	movs	r2, #2
 8001508:	482f      	ldr	r0, [pc, #188]	@ (80015c8 <main+0x108>)
 800150a:	f001 fc15 	bl	8002d38 <HAL_I2C_IsDeviceReady>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d104      	bne.n	800151e <main+0x5e>
	  {
		  UART_Printf("Found device at 0x%02X\r\n", addr);
 8001514:	8afb      	ldrh	r3, [r7, #22]
 8001516:	4619      	mov	r1, r3
 8001518:	482c      	ldr	r0, [pc, #176]	@ (80015cc <main+0x10c>)
 800151a:	f000 f8b9 	bl	8001690 <UART_Printf>
  for (uint16_t addr = 1; addr < 128; addr++)
 800151e:	8afb      	ldrh	r3, [r7, #22]
 8001520:	3301      	adds	r3, #1
 8001522:	82fb      	strh	r3, [r7, #22]
 8001524:	8afb      	ldrh	r3, [r7, #22]
 8001526:	2b7f      	cmp	r3, #127	@ 0x7f
 8001528:	d9e9      	bls.n	80014fe <main+0x3e>
	  }
  }

//  CFG_ApplyDefaults(&config);
  UART_Printf("test %d\n\r", config.system.mcuFrequency);
 800152a:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <main+0x110>)
 800152c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800152e:	4619      	mov	r1, r3
 8001530:	4828      	ldr	r0, [pc, #160]	@ (80015d4 <main+0x114>)
 8001532:	f000 f8ad 	bl	8001690 <UART_Printf>
  //     maxim_max1726x_clear_por();               // Clear the POR flag
  //     UART_Printf("Initialization complete.\r\n");
  // } else {
  //     UART_Printf("No POR detected. MAX1726x already configured.\r\n");
  // }
  MAX17260_Register_printout();
 8001536:	f005 f991 	bl	800685c <MAX17260_Register_printout>
    
    uint16_t vcell_raw;
    int16_t current_raw; // Current can be negative (discharging)

    // Read State of Charge (%) using the library's helper function
    soc_percentage = maxim_max1726x_get_repsoc();
 800153a:	f005 fa0b 	bl	8006954 <maxim_max1726x_get_repsoc>
 800153e:	ed87 0a04 	vstr	s0, [r7, #16]

    // Read raw register values for Voltage and Current
    maxim_max1726x_read_reg(MAX1726X_VCELL_REG, &vcell_raw);
 8001542:	1dbb      	adds	r3, r7, #6
 8001544:	4619      	mov	r1, r3
 8001546:	2009      	movs	r0, #9
 8001548:	f005 f9ef 	bl	800692a <maxim_max1726x_read_reg>
    maxim_max1726x_read_reg(MAX1726X_CURRENT_REG, (uint16_t*)&current_raw);
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	200a      	movs	r0, #10
 8001552:	f005 f9ea 	bl	800692a <maxim_max1726x_read_reg>

    // Convert raw values to human-readable format
    // Datasheet: VCell LSB = 78.125 uV
    voltage_f = vcell_raw * 78.125f / 1000.0f; // Result in mV
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	ee07 3a90 	vmov	s15, r3
 800155c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001560:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80015d8 <main+0x118>
 8001564:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001568:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80015dc <main+0x11c>
 800156c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001570:	edc7 7a03 	vstr	s15, [r7, #12]
    
    // Datasheet: Current LSB = 1.5625 uV / Rsense. Assuming Rsense = 10mOhm (0.01 Ohm)
    // LSB = 1.5625uV / 0.01Ohm = 156.25 uA = 0.15625 mA
    current_f = current_raw * 0.15625f; // Result in mA
 8001574:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	eeb4 7a04 	vmov.f32	s14, #68	@ 0x3e200000  0.1562500
 8001584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001588:	edc7 7a02 	vstr	s15, [r7, #8]

    // Print the results
    UART_Printf("SOC: %.2f%%, Voltage: %.0f mV, Current: %.2f mA\r\n", 
 800158c:	6938      	ldr	r0, [r7, #16]
 800158e:	f7fe ffdb 	bl	8000548 <__aeabi_f2d>
 8001592:	4680      	mov	r8, r0
 8001594:	4689      	mov	r9, r1
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7fe ffd6 	bl	8000548 <__aeabi_f2d>
 800159c:	4604      	mov	r4, r0
 800159e:	460d      	mov	r5, r1
 80015a0:	68b8      	ldr	r0, [r7, #8]
 80015a2:	f7fe ffd1 	bl	8000548 <__aeabi_f2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80015ae:	e9cd 4500 	strd	r4, r5, [sp]
 80015b2:	4642      	mov	r2, r8
 80015b4:	464b      	mov	r3, r9
 80015b6:	480a      	ldr	r0, [pc, #40]	@ (80015e0 <main+0x120>)
 80015b8:	f000 f86a 	bl	8001690 <UART_Printf>
            soc_percentage, voltage_f, current_f);

    // Wait for a couple of seconds before the next reading
    HAL_Delay(2000);
 80015bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015c0:	f000 fd04 	bl	8001fcc <HAL_Delay>
  {
 80015c4:	bf00      	nop
 80015c6:	e7b8      	b.n	800153a <main+0x7a>
 80015c8:	20002600 	.word	0x20002600
 80015cc:	08009680 	.word	0x08009680
 80015d0:	20000010 	.word	0x20000010
 80015d4:	0800969c 	.word	0x0800969c
 80015d8:	429c4000 	.word	0x429c4000
 80015dc:	447a0000 	.word	0x447a0000
 80015e0:	080096a8 	.word	0x080096a8

080015e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b096      	sub	sp, #88	@ 0x58
 80015e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	2244      	movs	r2, #68	@ 0x44
 80015f0:	2100      	movs	r1, #0
 80015f2:	4618      	mov	r0, r3
 80015f4:	f005 ff68 	bl	80074c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f8:	463b      	mov	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	601a      	str	r2, [r3, #0]
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	60da      	str	r2, [r3, #12]
 8001604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800160a:	f002 f97d 	bl	8003908 <HAL_PWREx_ControlVoltageScaling>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001614:	f000 f86c 	bl	80016f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001618:	f002 f958 	bl	80038cc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800161c:	4b1b      	ldr	r3, [pc, #108]	@ (800168c <SystemClock_Config+0xa8>)
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001622:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <SystemClock_Config+0xa8>)
 8001624:	f023 0318 	bic.w	r3, r3, #24
 8001628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800162c:	2314      	movs	r3, #20
 800162e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001634:	2301      	movs	r3, #1
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800163c:	2360      	movs	r3, #96	@ 0x60
 800163e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001640:	2300      	movs	r3, #0
 8001642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4618      	mov	r0, r3
 800164a:	f002 f9b3 	bl	80039b4 <HAL_RCC_OscConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001654:	f000 f84c 	bl	80016f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001658:	230f      	movs	r3, #15
 800165a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001668:	2300      	movs	r3, #0
 800166a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800166c:	463b      	mov	r3, r7
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f002 fdb3 	bl	80041dc <HAL_RCC_ClockConfig>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800167c:	f000 f838 	bl	80016f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001680:	f003 fa1a 	bl	8004ab8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001684:	bf00      	nop
 8001686:	3758      	adds	r7, #88	@ 0x58
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40021000 	.word	0x40021000

08001690 <UART_Printf>:

/* USER CODE BEGIN 4 */

void UART_Printf(char *format, ...)
{
 8001690:	b40f      	push	{r0, r1, r2, r3}
 8001692:	b580      	push	{r7, lr}
 8001694:	b0c2      	sub	sp, #264	@ 0x108
 8001696:	af00      	add	r7, sp, #0
  char str[256];
  va_list args;
  va_start(args, format);
 8001698:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 800169c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80016a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016a4:	601a      	str	r2, [r3, #0]
  vsnprintf(str, sizeof(str), format, args);
 80016a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80016aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80016ae:	f107 0008 	add.w	r0, r7, #8
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016bc:	f005 fef6 	bl	80074ac <vsniprintf>
  va_end(args);

  HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80016c0:	f107 0308 	add.w	r3, r7, #8
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe fdd3 	bl	8000270 <strlen>
 80016ca:	4603      	mov	r3, r0
 80016cc:	b29a      	uxth	r2, r3
 80016ce:	f107 0108 	add.w	r1, r7, #8
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
 80016d6:	4805      	ldr	r0, [pc, #20]	@ (80016ec <UART_Printf+0x5c>)
 80016d8:	f004 f845 	bl	8005766 <HAL_UART_Transmit>
}
 80016dc:	bf00      	nop
 80016de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80016e2:	46bd      	mov	sp, r7
 80016e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016e8:	b004      	add	sp, #16
 80016ea:	4770      	bx	lr
 80016ec:	20002818 	.word	0x20002818

080016f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f4:	b672      	cpsid	i
}
 80016f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <Error_Handler+0x8>

080016fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b092      	sub	sp, #72	@ 0x48
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001702:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
 8001710:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001712:	2300      	movs	r3, #0
 8001714:	633b      	str	r3, [r7, #48]	@ 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	222c      	movs	r2, #44	@ 0x2c
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f005 fed3 	bl	80074c8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001722:	4b3c      	ldr	r3, [pc, #240]	@ (8001814 <MX_RTC_Init+0x118>)
 8001724:	4a3c      	ldr	r2, [pc, #240]	@ (8001818 <MX_RTC_Init+0x11c>)
 8001726:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001728:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <MX_RTC_Init+0x118>)
 800172a:	2200      	movs	r2, #0
 800172c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800172e:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <MX_RTC_Init+0x118>)
 8001730:	227f      	movs	r2, #127	@ 0x7f
 8001732:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001734:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <MX_RTC_Init+0x118>)
 8001736:	22ff      	movs	r2, #255	@ 0xff
 8001738:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800173a:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <MX_RTC_Init+0x118>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001740:	4b34      	ldr	r3, [pc, #208]	@ (8001814 <MX_RTC_Init+0x118>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001746:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <MX_RTC_Init+0x118>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800174c:	4b31      	ldr	r3, [pc, #196]	@ (8001814 <MX_RTC_Init+0x118>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001752:	4830      	ldr	r0, [pc, #192]	@ (8001814 <MX_RTC_Init+0x118>)
 8001754:	f003 fab2 	bl	8004cbc <HAL_RTC_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800175e:	f7ff ffc7 	bl	80016f0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001762:	2300      	movs	r3, #0
 8001764:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  sTime.Minutes = 0x0;
 8001768:	2300      	movs	r3, #0
 800176a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  sTime.Seconds = 0x0;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001774:	2300      	movs	r3, #0
 8001776:	643b      	str	r3, [r7, #64]	@ 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001778:	2300      	movs	r3, #0
 800177a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800177c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001780:	2201      	movs	r2, #1
 8001782:	4619      	mov	r1, r3
 8001784:	4823      	ldr	r0, [pc, #140]	@ (8001814 <MX_RTC_Init+0x118>)
 8001786:	f003 fb59 	bl	8004e3c <HAL_RTC_SetTime>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8001790:	f7ff ffae 	bl	80016f0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001794:	2301      	movs	r3, #1
 8001796:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 800179a:	2301      	movs	r3, #1
 800179c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  sDate.Date = 0x1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  sDate.Year = 0x0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80017ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80017b0:	2201      	movs	r2, #1
 80017b2:	4619      	mov	r1, r3
 80017b4:	4817      	ldr	r0, [pc, #92]	@ (8001814 <MX_RTC_Init+0x118>)
 80017b6:	f003 fbde 	bl	8004f76 <HAL_RTC_SetDate>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 80017c0:	f7ff ff96 	bl	80016f0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017dc:	2300      	movs	r3, #0
 80017de:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 80017ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2201      	movs	r2, #1
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	@ (8001814 <MX_RTC_Init+0x118>)
 80017fc:	f003 fc42 	bl	8005084 <HAL_RTC_SetAlarm_IT>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8001806:	f7ff ff73 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3748      	adds	r7, #72	@ 0x48
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200026e0 	.word	0x200026e0
 8001818:	40002800 	.word	0x40002800

0800181c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b09a      	sub	sp, #104	@ 0x68
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	2260      	movs	r2, #96	@ 0x60
 800182a:	2100      	movs	r1, #0
 800182c:	4618      	mov	r0, r3
 800182e:	f005 fe4b 	bl	80074c8 <memset>
  if(rtcHandle->Instance==RTC)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a13      	ldr	r2, [pc, #76]	@ (8001884 <HAL_RTC_MspInit+0x68>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d11f      	bne.n	800187c <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800183c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001842:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001846:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fee9 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001858:	f7ff ff4a 	bl	80016f0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800185c:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <HAL_RTC_MspInit+0x6c>)
 800185e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001862:	4a09      	ldr	r2, [pc, #36]	@ (8001888 <HAL_RTC_MspInit+0x6c>)
 8001864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2029      	movs	r0, #41	@ 0x29
 8001872:	f000 fcce 	bl	8002212 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001876:	2029      	movs	r0, #41	@ 0x29
 8001878:	f000 fce7 	bl	800224a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800187c:	bf00      	nop
 800187e:	3768      	adds	r7, #104	@ 0x68
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40002800 	.word	0x40002800
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a08      	ldr	r2, [pc, #32]	@ (80018bc <HAL_RTC_MspDeInit+0x30>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10a      	bne.n	80018b4 <HAL_RTC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_RTC_MspDeInit+0x34>)
 80018a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a4:	4a06      	ldr	r2, [pc, #24]	@ (80018c0 <HAL_RTC_MspDeInit+0x34>)
 80018a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80018aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* RTC interrupt Deinit */
    HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);
 80018ae:	2029      	movs	r0, #41	@ 0x29
 80018b0:	f000 fcd9 	bl	8002266 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	40002800 	.word	0x40002800
 80018c0:	40021000 	.word	0x40021000

080018c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_SPI1_Init+0x74>)
 80018ca:	4a1c      	ldr	r2, [pc, #112]	@ (800193c <MX_SPI1_Init+0x78>)
 80018cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <MX_SPI1_Init+0x74>)
 80018d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_SPI1_Init+0x74>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80018dc:	4b16      	ldr	r3, [pc, #88]	@ (8001938 <MX_SPI1_Init+0x74>)
 80018de:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80018e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018e4:	4b14      	ldr	r3, [pc, #80]	@ (8001938 <MX_SPI1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018ea:	4b13      	ldr	r3, [pc, #76]	@ (8001938 <MX_SPI1_Init+0x74>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018f0:	4b11      	ldr	r3, [pc, #68]	@ (8001938 <MX_SPI1_Init+0x74>)
 80018f2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80018f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001938 <MX_SPI1_Init+0x74>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <MX_SPI1_Init+0x74>)
 8001900:	2200      	movs	r2, #0
 8001902:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001904:	4b0c      	ldr	r3, [pc, #48]	@ (8001938 <MX_SPI1_Init+0x74>)
 8001906:	2200      	movs	r2, #0
 8001908:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800190a:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <MX_SPI1_Init+0x74>)
 800190c:	2200      	movs	r2, #0
 800190e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <MX_SPI1_Init+0x74>)
 8001912:	2207      	movs	r2, #7
 8001914:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001916:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <MX_SPI1_Init+0x74>)
 8001918:	2200      	movs	r2, #0
 800191a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800191c:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <MX_SPI1_Init+0x74>)
 800191e:	2208      	movs	r2, #8
 8001920:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001922:	4805      	ldr	r0, [pc, #20]	@ (8001938 <MX_SPI1_Init+0x74>)
 8001924:	f003 fe2e 	bl	8005584 <HAL_SPI_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800192e:	f7ff fedf 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20002728 	.word	0x20002728
 800193c:	40013000 	.word	0x40013000

08001940 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	@ 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a25      	ldr	r2, [pc, #148]	@ (80019f4 <HAL_SPI_MspInit+0xb4>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d144      	bne.n	80019ec <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001962:	4b25      	ldr	r3, [pc, #148]	@ (80019f8 <HAL_SPI_MspInit+0xb8>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001966:	4a24      	ldr	r2, [pc, #144]	@ (80019f8 <HAL_SPI_MspInit+0xb8>)
 8001968:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800196c:	6613      	str	r3, [r2, #96]	@ 0x60
 800196e:	4b22      	ldr	r3, [pc, #136]	@ (80019f8 <HAL_SPI_MspInit+0xb8>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001972:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <HAL_SPI_MspInit+0xb8>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800197e:	4a1e      	ldr	r2, [pc, #120]	@ (80019f8 <HAL_SPI_MspInit+0xb8>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001986:	4b1c      	ldr	r3, [pc, #112]	@ (80019f8 <HAL_SPI_MspInit+0xb8>)
 8001988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <HAL_SPI_MspInit+0xb8>)
 8001994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001996:	4a18      	ldr	r2, [pc, #96]	@ (80019f8 <HAL_SPI_MspInit+0xb8>)
 8001998:	f043 0302 	orr.w	r3, r3, #2
 800199c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800199e:	4b16      	ldr	r3, [pc, #88]	@ (80019f8 <HAL_SPI_MspInit+0xb8>)
 80019a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB0     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80019aa:	23c2      	movs	r3, #194	@ 0xc2
 80019ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b6:	2303      	movs	r3, #3
 80019b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ba:	2305      	movs	r3, #5
 80019bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019c8:	f000 fd5a 	bl	8002480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 80019cc:	2301      	movs	r3, #1
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019dc:	2305      	movs	r3, #5
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4805      	ldr	r0, [pc, #20]	@ (80019fc <HAL_SPI_MspInit+0xbc>)
 80019e8:	f000 fd4a 	bl	8002480 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	@ 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40013000 	.word	0x40013000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	48000400 	.word	0x48000400

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	4b0f      	ldr	r3, [pc, #60]	@ (8001a44 <HAL_MspInit+0x44>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a44 <HAL_MspInit+0x44>)
 8001a0c:	f043 0301 	orr.w	r3, r3, #1
 8001a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a12:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <HAL_MspInit+0x44>)
 8001a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1e:	4b09      	ldr	r3, [pc, #36]	@ (8001a44 <HAL_MspInit+0x44>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a22:	4a08      	ldr	r2, [pc, #32]	@ (8001a44 <HAL_MspInit+0x44>)
 8001a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_MspInit+0x44>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000

08001a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <NMI_Handler+0x4>

08001a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <HardFault_Handler+0x4>

08001a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a5c:	bf00      	nop
 8001a5e:	e7fd      	b.n	8001a5c <MemManage_Handler+0x4>

08001a60 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <BusFault_Handler+0x4>

08001a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <UsageFault_Handler+0x4>

08001a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9e:	f000 fa75 	bl	8001f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <WWDG_IRQHandler>:

/**
  * @brief This function handles Window watchdog interrupt.
  */
void WWDG_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN WWDG_IRQn 0 */

  /* USER CODE END WWDG_IRQn 0 */
  HAL_WWDG_IRQHandler(&hwwdg);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <WWDG_IRQHandler+0x10>)
 8001aae:	f004 fb58 	bl	8006162 <HAL_WWDG_IRQHandler>
  /* USER CODE BEGIN WWDG_IRQn 1 */

  /* USER CODE END WWDG_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200028a0 	.word	0x200028a0

08001abc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <RTC_Alarm_IRQHandler+0x10>)
 8001ac2:	f003 fc1b 	bl	80052fc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200026e0 	.word	0x200026e0

08001ad0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <LPTIM1_IRQHandler+0x10>)
 8001ad6:	f001 fe17 	bl	8003708 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200026a8 	.word	0x200026a8

08001ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return 1;
 8001ae8:	2301      	movs	r3, #1
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <_kill>:

int _kill(int pid, int sig)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001afe:	f005 fd35 	bl	800756c <__errno>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2216      	movs	r2, #22
 8001b06:	601a      	str	r2, [r3, #0]
  return -1;
 8001b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3708      	adds	r7, #8
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_exit>:

void _exit (int status)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f7ff ffe7 	bl	8001af4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b26:	bf00      	nop
 8001b28:	e7fd      	b.n	8001b26 <_exit+0x12>

08001b2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	60f8      	str	r0, [r7, #12]
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
 8001b3a:	e00a      	b.n	8001b52 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b3c:	f3af 8000 	nop.w
 8001b40:	4601      	mov	r1, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	60ba      	str	r2, [r7, #8]
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbf0      	blt.n	8001b3c <_read+0x12>
  }

  return len;
 8001b5a:	687b      	ldr	r3, [r7, #4]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e009      	b.n	8001b8a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	60ba      	str	r2, [r7, #8]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	3301      	adds	r3, #1
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	dbf1      	blt.n	8001b76 <_write+0x12>
  }
  return len;
 8001b92:	687b      	ldr	r3, [r7, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_close>:

int _close(int file)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ba4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bc4:	605a      	str	r2, [r3, #4]
  return 0;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <_isatty>:

int _isatty(int file)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b085      	sub	sp, #20
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c0c:	4a14      	ldr	r2, [pc, #80]	@ (8001c60 <_sbrk+0x5c>)
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <_sbrk+0x60>)
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4b13      	ldr	r3, [pc, #76]	@ (8001c68 <_sbrk+0x64>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c20:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <_sbrk+0x64>)
 8001c22:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <_sbrk+0x68>)
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	4b10      	ldr	r3, [pc, #64]	@ (8001c68 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d207      	bcs.n	8001c44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c34:	f005 fc9a 	bl	800756c <__errno>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c42:	e009      	b.n	8001c58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c44:	4b08      	ldr	r3, [pc, #32]	@ (8001c68 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	4a05      	ldr	r2, [pc, #20]	@ (8001c68 <_sbrk+0x64>)
 8001c54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c56:	68fb      	ldr	r3, [r7, #12]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2000c000 	.word	0x2000c000
 8001c64:	00000400 	.word	0x00000400
 8001c68:	2000278c 	.word	0x2000278c
 8001c6c:	20002c08 	.word	0x20002c08

08001c70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c74:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <SystemInit+0x20>)
 8001c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c7a:	4a05      	ldr	r2, [pc, #20]	@ (8001c90 <SystemInit+0x20>)
 8001c7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	e000ed00 	.word	0xe000ed00

08001c94 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001c9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ce8 <MX_LPUART1_UART_Init+0x54>)
 8001c9c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001ca0:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8001ca4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001cac:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001cba:	220c      	movs	r2, #12
 8001cbc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc4:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001cd0:	4804      	ldr	r0, [pc, #16]	@ (8001ce4 <MX_LPUART1_UART_Init+0x50>)
 8001cd2:	f003 fcfa 	bl	80056ca <HAL_UART_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001cdc:	f7ff fd08 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20002790 	.word	0x20002790
 8001ce8:	40008000 	.word	0x40008000

08001cec <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cf0:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001cf2:	4a15      	ldr	r2, [pc, #84]	@ (8001d48 <MX_USART1_UART_Init+0x5c>)
 8001cf4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cf6:	4b13      	ldr	r3, [pc, #76]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001cf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cfc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d04:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d10:	4b0c      	ldr	r3, [pc, #48]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d12:	220c      	movs	r2, #12
 8001d14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d16:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d22:	4b08      	ldr	r3, [pc, #32]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d28:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d2e:	4805      	ldr	r0, [pc, #20]	@ (8001d44 <MX_USART1_UART_Init+0x58>)
 8001d30:	f003 fccb 	bl	80056ca <HAL_UART_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001d3a:	f7ff fcd9 	bl	80016f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20002818 	.word	0x20002818
 8001d48:	40013800 	.word	0x40013800

08001d4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0a4      	sub	sp, #144	@ 0x90
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d54:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	605a      	str	r2, [r3, #4]
 8001d5e:	609a      	str	r2, [r3, #8]
 8001d60:	60da      	str	r2, [r3, #12]
 8001d62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	2260      	movs	r2, #96	@ 0x60
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f005 fbab 	bl	80074c8 <memset>
  if(uartHandle->Instance==LPUART1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a42      	ldr	r2, [pc, #264]	@ (8001e80 <HAL_UART_MspInit+0x134>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d13b      	bne.n	8001df4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d80:	2300      	movs	r3, #0
 8001d82:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f002 fc4b 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d94:	f7ff fcac 	bl	80016f0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d98:	4b3a      	ldr	r3, [pc, #232]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9c:	4a39      	ldr	r2, [pc, #228]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001da4:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	61bb      	str	r3, [r7, #24]
 8001dae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db0:	4b34      	ldr	r3, [pc, #208]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db4:	4a33      	ldr	r2, [pc, #204]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dbc:	4b31      	ldr	r3, [pc, #196]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = LPUART1_RX_Pin|LPUART1_TX_Pin;
 8001dc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001dcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001de0:	2308      	movs	r3, #8
 8001de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001dea:	4619      	mov	r1, r3
 8001dec:	4826      	ldr	r0, [pc, #152]	@ (8001e88 <HAL_UART_MspInit+0x13c>)
 8001dee:	f000 fb47 	bl	8002480 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001df2:	e040      	b.n	8001e76 <HAL_UART_MspInit+0x12a>
  else if(uartHandle->Instance==USART1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a24      	ldr	r2, [pc, #144]	@ (8001e8c <HAL_UART_MspInit+0x140>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d13b      	bne.n	8001e76 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e02:	2300      	movs	r3, #0
 8001e04:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f002 fc0a 	bl	8004624 <HAL_RCCEx_PeriphCLKConfig>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001e16:	f7ff fc6b 	bl	80016f0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1e:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001e20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e26:	4b17      	ldr	r3, [pc, #92]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e2e:	613b      	str	r3, [r7, #16]
 8001e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e36:	4a13      	ldr	r2, [pc, #76]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <HAL_UART_MspInit+0x138>)
 8001e40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8001e4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001e4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e62:	2307      	movs	r3, #7
 8001e64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e72:	f000 fb05 	bl	8002480 <HAL_GPIO_Init>
}
 8001e76:	bf00      	nop
 8001e78:	3790      	adds	r7, #144	@ 0x90
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40008000 	.word	0x40008000
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48000400 	.word	0x48000400
 8001e8c:	40013800 	.word	0x40013800

08001e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e94:	f7ff feec 	bl	8001c70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	@ (8001ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	@ (8001ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <LoopForever+0xe>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001edc <LoopForever+0x16>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f005 fb5b 	bl	8007578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ec2:	f7ff fafd 	bl	80014c0 <main>

08001ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ec6:	e7fe      	b.n	8001ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec8:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	200025c0 	.word	0x200025c0
  ldr r2, =_sidata
 8001ed4:	0800a61c 	.word	0x0800a61c
  ldr r2, =_sbss
 8001ed8:	200025c0 	.word	0x200025c0
  ldr r4, =_ebss
 8001edc:	20002c04 	.word	0x20002c04

08001ee0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC1_IRQHandler>

08001ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eec:	2003      	movs	r0, #3
 8001eee:	f000 f985 	bl	80021fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f000 f80e 	bl	8001f14 <HAL_InitTick>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	71fb      	strb	r3, [r7, #7]
 8001f02:	e001      	b.n	8001f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f04:	f7ff fd7c 	bl	8001a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f08:	79fb      	ldrb	r3, [r7, #7]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
	...

08001f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f20:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <HAL_InitTick+0x6c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d023      	beq.n	8001f70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f28:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <HAL_InitTick+0x70>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <HAL_InitTick+0x6c>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f99f 	bl	8002282 <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10f      	bne.n	8001f6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b0f      	cmp	r3, #15
 8001f4e:	d809      	bhi.n	8001f64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f50:	2200      	movs	r2, #0
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	f04f 30ff 	mov.w	r0, #4294967295
 8001f58:	f000 f95b 	bl	8002212 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001f88 <HAL_InitTick+0x74>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6013      	str	r3, [r2, #0]
 8001f62:	e007      	b.n	8001f74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	73fb      	strb	r3, [r7, #15]
 8001f68:	e004      	b.n	8001f74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	e001      	b.n	8001f74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000004 	.word	0x20000004

08001f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x20>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4413      	add	r3, r2
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_IncTick+0x24>)
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	200028b4 	.word	0x200028b4

08001fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <HAL_GetTick+0x14>)
 8001fba:	681b      	ldr	r3, [r3, #0]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	200028b4 	.word	0x200028b4

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff ffee 	bl	8001fb4 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffde 	bl	8001fb4 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800203c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4907      	ldr	r1, [pc, #28]	@ (80020b0 <__NVIC_EnableIRQ+0x38>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000e100 	.word	0xe000e100

080020b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db12      	blt.n	80020ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c6:	79fb      	ldrb	r3, [r7, #7]
 80020c8:	f003 021f 	and.w	r2, r3, #31
 80020cc:	490a      	ldr	r1, [pc, #40]	@ (80020f8 <__NVIC_DisableIRQ+0x44>)
 80020ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d2:	095b      	lsrs	r3, r3, #5
 80020d4:	2001      	movs	r0, #1
 80020d6:	fa00 f202 	lsl.w	r2, r0, r2
 80020da:	3320      	adds	r3, #32
 80020dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020e0:	f3bf 8f4f 	dsb	sy
}
 80020e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80020e6:	f3bf 8f6f 	isb	sy
}
 80020ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000e100 	.word	0xe000e100

080020fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	6039      	str	r1, [r7, #0]
 8002106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210c:	2b00      	cmp	r3, #0
 800210e:	db0a      	blt.n	8002126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	b2da      	uxtb	r2, r3
 8002114:	490c      	ldr	r1, [pc, #48]	@ (8002148 <__NVIC_SetPriority+0x4c>)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	0112      	lsls	r2, r2, #4
 800211c:	b2d2      	uxtb	r2, r2
 800211e:	440b      	add	r3, r1
 8002120:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002124:	e00a      	b.n	800213c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4908      	ldr	r1, [pc, #32]	@ (800214c <__NVIC_SetPriority+0x50>)
 800212c:	79fb      	ldrb	r3, [r7, #7]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3b04      	subs	r3, #4
 8002134:	0112      	lsls	r2, r2, #4
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	440b      	add	r3, r1
 800213a:	761a      	strb	r2, [r3, #24]
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000e100 	.word	0xe000e100
 800214c:	e000ed00 	.word	0xe000ed00

08002150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002150:	b480      	push	{r7}
 8002152:	b089      	sub	sp, #36	@ 0x24
 8002154:	af00      	add	r7, sp, #0
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	60b9      	str	r1, [r7, #8]
 800215a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1c3 0307 	rsb	r3, r3, #7
 800216a:	2b04      	cmp	r3, #4
 800216c:	bf28      	it	cs
 800216e:	2304      	movcs	r3, #4
 8002170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3304      	adds	r3, #4
 8002176:	2b06      	cmp	r3, #6
 8002178:	d902      	bls.n	8002180 <NVIC_EncodePriority+0x30>
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	3b03      	subs	r3, #3
 800217e:	e000      	b.n	8002182 <NVIC_EncodePriority+0x32>
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002184:	f04f 32ff 	mov.w	r2, #4294967295
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002198:	f04f 31ff 	mov.w	r1, #4294967295
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	fa01 f303 	lsl.w	r3, r1, r3
 80021a2:	43d9      	mvns	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a8:	4313      	orrs	r3, r2
         );
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3724      	adds	r7, #36	@ 0x24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3b01      	subs	r3, #1
 80021c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021c8:	d301      	bcc.n	80021ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ca:	2301      	movs	r3, #1
 80021cc:	e00f      	b.n	80021ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <SysTick_Config+0x40>)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021d6:	210f      	movs	r1, #15
 80021d8:	f04f 30ff 	mov.w	r0, #4294967295
 80021dc:	f7ff ff8e 	bl	80020fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e0:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <SysTick_Config+0x40>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021e6:	4b04      	ldr	r3, [pc, #16]	@ (80021f8 <SysTick_Config+0x40>)
 80021e8:	2207      	movs	r2, #7
 80021ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	e000e010 	.word	0xe000e010

080021fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f7ff ff05 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	4603      	mov	r3, r0
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
 800221e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff1a 	bl	800205c <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff8e 	bl	8002150 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5d 	bl	80020fc <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	4603      	mov	r3, r0
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff0d 	bl	8002078 <__NVIC_EnableIRQ>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff1d 	bl	80020b4 <__NVIC_DisableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ff94 	bl	80021b8 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e054      	b.n	8002358 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7f5b      	ldrb	r3, [r3, #29]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fe2a 	bl	8000f18 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	791b      	ldrb	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d10c      	bne.n	80022ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a22      	ldr	r2, [pc, #136]	@ (8002360 <HAL_CRC_Init+0xc4>)
 80022d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0218 	bic.w	r2, r2, #24
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	e00c      	b.n	8002306 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6899      	ldr	r1, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	461a      	mov	r2, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f834 	bl	8002364 <HAL_CRCEx_Polynomial_Set>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e028      	b.n	8002358 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	795b      	ldrb	r3, [r3, #5]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d105      	bne.n	800231a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f04f 32ff 	mov.w	r2, #4294967295
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	e004      	b.n	8002324 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6912      	ldr	r2, [r2, #16]
 8002322:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	699a      	ldr	r2, [r3, #24]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	04c11db7 	.word	0x04c11db7

08002364 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002370:	2300      	movs	r3, #0
 8002372:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002374:	231f      	movs	r3, #31
 8002376:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	75fb      	strb	r3, [r7, #23]
 8002386:	e063      	b.n	8002450 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002388:	bf00      	nop
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1e5a      	subs	r2, r3, #1
 800238e:	613a      	str	r2, [r7, #16]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d009      	beq.n	80023a8 <HAL_CRCEx_Polynomial_Set+0x44>
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f003 031f 	and.w	r3, r3, #31
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b18      	cmp	r3, #24
 80023ac:	d846      	bhi.n	800243c <HAL_CRCEx_Polynomial_Set+0xd8>
 80023ae:	a201      	add	r2, pc, #4	@ (adr r2, 80023b4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80023b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b4:	08002443 	.word	0x08002443
 80023b8:	0800243d 	.word	0x0800243d
 80023bc:	0800243d 	.word	0x0800243d
 80023c0:	0800243d 	.word	0x0800243d
 80023c4:	0800243d 	.word	0x0800243d
 80023c8:	0800243d 	.word	0x0800243d
 80023cc:	0800243d 	.word	0x0800243d
 80023d0:	0800243d 	.word	0x0800243d
 80023d4:	08002431 	.word	0x08002431
 80023d8:	0800243d 	.word	0x0800243d
 80023dc:	0800243d 	.word	0x0800243d
 80023e0:	0800243d 	.word	0x0800243d
 80023e4:	0800243d 	.word	0x0800243d
 80023e8:	0800243d 	.word	0x0800243d
 80023ec:	0800243d 	.word	0x0800243d
 80023f0:	0800243d 	.word	0x0800243d
 80023f4:	08002425 	.word	0x08002425
 80023f8:	0800243d 	.word	0x0800243d
 80023fc:	0800243d 	.word	0x0800243d
 8002400:	0800243d 	.word	0x0800243d
 8002404:	0800243d 	.word	0x0800243d
 8002408:	0800243d 	.word	0x0800243d
 800240c:	0800243d 	.word	0x0800243d
 8002410:	0800243d 	.word	0x0800243d
 8002414:	08002419 	.word	0x08002419
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b06      	cmp	r3, #6
 800241c:	d913      	bls.n	8002446 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8002422:	e010      	b.n	8002446 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	2b07      	cmp	r3, #7
 8002428:	d90f      	bls.n	800244a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800242e:	e00c      	b.n	800244a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b0f      	cmp	r3, #15
 8002434:	d90b      	bls.n	800244e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800243a:	e008      	b.n	800244e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
        break;
 8002440:	e006      	b.n	8002450 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002442:	bf00      	nop
 8002444:	e004      	b.n	8002450 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8002446:	bf00      	nop
 8002448:	e002      	b.n	8002450 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800244a:	bf00      	nop
 800244c:	e000      	b.n	8002450 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800244e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8002450:	7dfb      	ldrb	r3, [r7, #23]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f023 0118 	bic.w	r1, r3, #24
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002472:	7dfb      	ldrb	r3, [r7, #23]
}
 8002474:	4618      	mov	r0, r3
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002480:	b480      	push	{r7}
 8002482:	b087      	sub	sp, #28
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800248e:	e154      	b.n	800273a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	2101      	movs	r1, #1
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	fa01 f303 	lsl.w	r3, r1, r3
 800249c:	4013      	ands	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8146 	beq.w	8002734 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d005      	beq.n	80024c0 <HAL_GPIO_Init+0x40>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d130      	bne.n	8002522 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	2203      	movs	r2, #3
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	693a      	ldr	r2, [r7, #16]
 80024ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024f6:	2201      	movs	r2, #1
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	4013      	ands	r3, r2
 8002504:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 0201 	and.w	r2, r3, #1
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	2b03      	cmp	r3, #3
 800252c:	d017      	beq.n	800255e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	2203      	movs	r2, #3
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	4013      	ands	r3, r2
 8002544:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689a      	ldr	r2, [r3, #8]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	fa02 f303 	lsl.w	r3, r2, r3
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d123      	bne.n	80025b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	08da      	lsrs	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	220f      	movs	r2, #15
 8002582:	fa02 f303 	lsl.w	r3, r2, r3
 8002586:	43db      	mvns	r3, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4013      	ands	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	08da      	lsrs	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3208      	adds	r2, #8
 80025ac:	6939      	ldr	r1, [r7, #16]
 80025ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	2203      	movs	r2, #3
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 0203 	and.w	r2, r3, #3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80a0 	beq.w	8002734 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f4:	4b58      	ldr	r3, [pc, #352]	@ (8002758 <HAL_GPIO_Init+0x2d8>)
 80025f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f8:	4a57      	ldr	r2, [pc, #348]	@ (8002758 <HAL_GPIO_Init+0x2d8>)
 80025fa:	f043 0301 	orr.w	r3, r3, #1
 80025fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8002600:	4b55      	ldr	r3, [pc, #340]	@ (8002758 <HAL_GPIO_Init+0x2d8>)
 8002602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800260c:	4a53      	ldr	r2, [pc, #332]	@ (800275c <HAL_GPIO_Init+0x2dc>)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	089b      	lsrs	r3, r3, #2
 8002612:	3302      	adds	r3, #2
 8002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002618:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0303 	and.w	r3, r3, #3
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	220f      	movs	r2, #15
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	43db      	mvns	r3, r3
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002636:	d019      	beq.n	800266c <HAL_GPIO_Init+0x1ec>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a49      	ldr	r2, [pc, #292]	@ (8002760 <HAL_GPIO_Init+0x2e0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d013      	beq.n	8002668 <HAL_GPIO_Init+0x1e8>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a48      	ldr	r2, [pc, #288]	@ (8002764 <HAL_GPIO_Init+0x2e4>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d00d      	beq.n	8002664 <HAL_GPIO_Init+0x1e4>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	4a47      	ldr	r2, [pc, #284]	@ (8002768 <HAL_GPIO_Init+0x2e8>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d007      	beq.n	8002660 <HAL_GPIO_Init+0x1e0>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a46      	ldr	r2, [pc, #280]	@ (800276c <HAL_GPIO_Init+0x2ec>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_GPIO_Init+0x1dc>
 8002658:	2304      	movs	r3, #4
 800265a:	e008      	b.n	800266e <HAL_GPIO_Init+0x1ee>
 800265c:	2307      	movs	r3, #7
 800265e:	e006      	b.n	800266e <HAL_GPIO_Init+0x1ee>
 8002660:	2303      	movs	r3, #3
 8002662:	e004      	b.n	800266e <HAL_GPIO_Init+0x1ee>
 8002664:	2302      	movs	r3, #2
 8002666:	e002      	b.n	800266e <HAL_GPIO_Init+0x1ee>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_GPIO_Init+0x1ee>
 800266c:	2300      	movs	r3, #0
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	f002 0203 	and.w	r2, r2, #3
 8002674:	0092      	lsls	r2, r2, #2
 8002676:	4093      	lsls	r3, r2
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800267e:	4937      	ldr	r1, [pc, #220]	@ (800275c <HAL_GPIO_Init+0x2dc>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800268c:	4b38      	ldr	r3, [pc, #224]	@ (8002770 <HAL_GPIO_Init+0x2f0>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002770 <HAL_GPIO_Init+0x2f0>)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002770 <HAL_GPIO_Init+0x2f0>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026da:	4a25      	ldr	r2, [pc, #148]	@ (8002770 <HAL_GPIO_Init+0x2f0>)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026e0:	4b23      	ldr	r3, [pc, #140]	@ (8002770 <HAL_GPIO_Init+0x2f0>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002704:	4a1a      	ldr	r2, [pc, #104]	@ (8002770 <HAL_GPIO_Init+0x2f0>)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800270a:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_GPIO_Init+0x2f0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800272e:	4a10      	ldr	r2, [pc, #64]	@ (8002770 <HAL_GPIO_Init+0x2f0>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f aea3 	bne.w	8002490 <HAL_GPIO_Init+0x10>
  }
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000
 8002760:	48000400 	.word	0x48000400
 8002764:	48000800 	.word	0x48000800
 8002768:	48000c00 	.word	0x48000c00
 800276c:	48001000 	.word	0x48001000
 8002770:	40010400 	.word	0x40010400

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002790:	e002      	b.n	8002798 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002792:	887a      	ldrh	r2, [r7, #2]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002798:	bf00      	nop
 800279a:	370c      	adds	r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e08d      	b.n	80028d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d106      	bne.n	80027d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7fe fd04 	bl	80011d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2224      	movs	r2, #36	@ 0x24
 80027d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80027f4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002804:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	e006      	b.n	800282c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800282a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d108      	bne.n	8002846 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685a      	ldr	r2, [r3, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	e007      	b.n	8002856 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685a      	ldr	r2, [r3, #4]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002854:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002868:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002878:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	69d9      	ldr	r1, [r3, #28]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1a      	ldr	r2, [r3, #32]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f042 0201 	orr.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	4608      	mov	r0, r1
 80028e6:	4611      	mov	r1, r2
 80028e8:	461a      	mov	r2, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	817b      	strh	r3, [r7, #10]
 80028ee:	460b      	mov	r3, r1
 80028f0:	813b      	strh	r3, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b20      	cmp	r3, #32
 8002900:	f040 80f9 	bne.w	8002af6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_I2C_Mem_Write+0x34>
 800290a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002916:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0ed      	b.n	8002af8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_I2C_Mem_Write+0x4e>
 8002926:	2302      	movs	r3, #2
 8002928:	e0e6      	b.n	8002af8 <HAL_I2C_Mem_Write+0x21c>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002932:	f7ff fb3f 	bl	8001fb4 <HAL_GetTick>
 8002936:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	2319      	movs	r3, #25
 800293e:	2201      	movs	r2, #1
 8002940:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fbaf 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e0d1      	b.n	8002af8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2221      	movs	r2, #33	@ 0x21
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2240      	movs	r2, #64	@ 0x40
 8002960:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a3a      	ldr	r2, [r7, #32]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002974:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800297c:	88f8      	ldrh	r0, [r7, #6]
 800297e:	893a      	ldrh	r2, [r7, #8]
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	9301      	str	r3, [sp, #4]
 8002986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4603      	mov	r3, r0
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fabf 	bl	8002f10 <I2C_RequestMemoryWrite>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0a9      	b.n	8002af8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2bff      	cmp	r3, #255	@ 0xff
 80029ac:	d90e      	bls.n	80029cc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	22ff      	movs	r2, #255	@ 0xff
 80029b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	8979      	ldrh	r1, [r7, #10]
 80029bc:	2300      	movs	r3, #0
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f000 fd33 	bl	8003430 <I2C_TransferConfig>
 80029ca:	e00f      	b.n	80029ec <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	8979      	ldrh	r1, [r7, #10]
 80029de:	2300      	movs	r3, #0
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f000 fd22 	bl	8003430 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fbb2 	bl	800315a <I2C_WaitOnTXISFlagUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e07b      	b.n	8002af8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d034      	beq.n	8002aa4 <HAL_I2C_Mem_Write+0x1c8>
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d130      	bne.n	8002aa4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2180      	movs	r1, #128	@ 0x80
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fb2b 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e04d      	b.n	8002af8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2bff      	cmp	r3, #255	@ 0xff
 8002a64:	d90e      	bls.n	8002a84 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	22ff      	movs	r2, #255	@ 0xff
 8002a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	8979      	ldrh	r1, [r7, #10]
 8002a74:	2300      	movs	r3, #0
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 fcd7 	bl	8003430 <I2C_TransferConfig>
 8002a82:	e00f      	b.n	8002aa4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	2300      	movs	r3, #0
 8002a98:	9300      	str	r3, [sp, #0]
 8002a9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 fcc6 	bl	8003430 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d19e      	bne.n	80029ec <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fb98 	bl	80031e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e01a      	b.n	8002af8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <HAL_I2C_Mem_Write+0x224>)
 8002ad6:	400b      	ands	r3, r1
 8002ad8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2220      	movs	r2, #32
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002af6:	2302      	movs	r3, #2
  }
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3718      	adds	r7, #24
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	fe00e800 	.word	0xfe00e800

08002b04 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af02      	add	r7, sp, #8
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	4608      	mov	r0, r1
 8002b0e:	4611      	mov	r1, r2
 8002b10:	461a      	mov	r2, r3
 8002b12:	4603      	mov	r3, r0
 8002b14:	817b      	strh	r3, [r7, #10]
 8002b16:	460b      	mov	r3, r1
 8002b18:	813b      	strh	r3, [r7, #8]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b20      	cmp	r3, #32
 8002b28:	f040 80fd 	bne.w	8002d26 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <HAL_I2C_Mem_Read+0x34>
 8002b32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0f1      	b.n	8002d28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_I2C_Mem_Read+0x4e>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e0ea      	b.n	8002d28 <HAL_I2C_Mem_Read+0x224>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b5a:	f7ff fa2b 	bl	8001fb4 <HAL_GetTick>
 8002b5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	2319      	movs	r3, #25
 8002b66:	2201      	movs	r2, #1
 8002b68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fa9b 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e0d5      	b.n	8002d28 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2222      	movs	r2, #34	@ 0x22
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2240      	movs	r2, #64	@ 0x40
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a3a      	ldr	r2, [r7, #32]
 8002b96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ba4:	88f8      	ldrh	r0, [r7, #6]
 8002ba6:	893a      	ldrh	r2, [r7, #8]
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f9ff 	bl	8002fb8 <I2C_RequestMemoryRead>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0ad      	b.n	8002d28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2bff      	cmp	r3, #255	@ 0xff
 8002bd4:	d90e      	bls.n	8002bf4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	8979      	ldrh	r1, [r7, #10]
 8002be4:	4b52      	ldr	r3, [pc, #328]	@ (8002d30 <HAL_I2C_Mem_Read+0x22c>)
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 fc1f 	bl	8003430 <I2C_TransferConfig>
 8002bf2:	e00f      	b.n	8002c14 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	8979      	ldrh	r1, [r7, #10]
 8002c06:	4b4a      	ldr	r3, [pc, #296]	@ (8002d30 <HAL_I2C_Mem_Read+0x22c>)
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fc0e 	bl	8003430 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2104      	movs	r1, #4
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fa42 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e07c      	b.n	8002d28 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c40:	1c5a      	adds	r2, r3, #1
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d034      	beq.n	8002cd4 <HAL_I2C_Mem_Read+0x1d0>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d130      	bne.n	8002cd4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c78:	2200      	movs	r2, #0
 8002c7a:	2180      	movs	r1, #128	@ 0x80
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fa13 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e04d      	b.n	8002d28 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	2bff      	cmp	r3, #255	@ 0xff
 8002c94:	d90e      	bls.n	8002cb4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	8979      	ldrh	r1, [r7, #10]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fbbf 	bl	8003430 <I2C_TransferConfig>
 8002cb2:	e00f      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	8979      	ldrh	r1, [r7, #10]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f000 fbae 	bl	8003430 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d19a      	bne.n	8002c14 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 fa80 	bl	80031e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e01a      	b.n	8002d28 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_I2C_Mem_Read+0x230>)
 8002d06:	400b      	ands	r3, r1
 8002d08:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2220      	movs	r2, #32
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	80002400 	.word	0x80002400
 8002d34:	fe00e800 	.word	0xfe00e800

08002d38 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	603b      	str	r3, [r7, #0]
 8002d44:	460b      	mov	r3, r1
 8002d46:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	f040 80d6 	bne.w	8002f06 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d68:	d101      	bne.n	8002d6e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e0cc      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d101      	bne.n	8002d7c <HAL_I2C_IsDeviceReady+0x44>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	e0c5      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x1d0>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2224      	movs	r2, #36	@ 0x24
 8002d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d107      	bne.n	8002daa <HAL_I2C_IsDeviceReady+0x72>
 8002d9a:	897b      	ldrh	r3, [r7, #10]
 8002d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002da0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002da4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002da8:	e006      	b.n	8002db8 <HAL_I2C_IsDeviceReady+0x80>
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002db0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002db4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	6812      	ldr	r2, [r2, #0]
 8002dbc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002dbe:	f7ff f8f9 	bl	8001fb4 <HAL_GetTick>
 8002dc2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002df0:	e034      	b.n	8002e5c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d01a      	beq.n	8002e30 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7ff f8db 	bl	8001fb4 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <HAL_I2C_IsDeviceReady+0xd8>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10f      	bne.n	8002e30 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2220      	movs	r2, #32
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e1c:	f043 0220 	orr.w	r2, r3, #32
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e06b      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f003 0320 	and.w	r3, r3, #32
 8002e3a:	2b20      	cmp	r3, #32
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2301      	moveq	r3, #1
 8002e40:	2300      	movne	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b10      	cmp	r3, #16
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002e5c:	7ffb      	ldrb	r3, [r7, #31]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <HAL_I2C_IsDeviceReady+0x130>
 8002e62:	7fbb      	ldrb	r3, [r7, #30]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0c4      	beq.n	8002df2 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b10      	cmp	r3, #16
 8002e74:	d01a      	beq.n	8002eac <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2120      	movs	r1, #32
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f911 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e03b      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2220      	movs	r2, #32
 8002e96:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e02d      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	2120      	movs	r1, #32
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f8f6 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e020      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2210      	movs	r2, #16
 8002ecc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	f63f af56 	bhi.w	8002d92 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef2:	f043 0220 	orr.w	r2, r3, #32
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3720      	adds	r7, #32
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af02      	add	r7, sp, #8
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	4608      	mov	r0, r1
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4603      	mov	r3, r0
 8002f20:	817b      	strh	r3, [r7, #10]
 8002f22:	460b      	mov	r3, r1
 8002f24:	813b      	strh	r3, [r7, #8]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002f2a:	88fb      	ldrh	r3, [r7, #6]
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <I2C_RequestMemoryWrite+0xa4>)
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fa79 	bl	8003430 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	69b9      	ldr	r1, [r7, #24]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f909 	bl	800315a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e02c      	b.n	8002fac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f58:	893b      	ldrh	r3, [r7, #8]
 8002f5a:	b2da      	uxtb	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f62:	e015      	b.n	8002f90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f64:	893b      	ldrh	r3, [r7, #8]
 8002f66:	0a1b      	lsrs	r3, r3, #8
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f72:	69fa      	ldr	r2, [r7, #28]
 8002f74:	69b9      	ldr	r1, [r7, #24]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8ef 	bl	800315a <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e012      	b.n	8002fac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f86:	893b      	ldrh	r3, [r7, #8]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2200      	movs	r2, #0
 8002f98:	2180      	movs	r1, #128	@ 0x80
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f884 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e000      	b.n	8002fac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	80002000 	.word	0x80002000

08002fb8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	4608      	mov	r0, r1
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	817b      	strh	r3, [r7, #10]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	813b      	strh	r3, [r7, #8]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	8979      	ldrh	r1, [r7, #10]
 8002fd8:	4b20      	ldr	r3, [pc, #128]	@ (800305c <I2C_RequestMemoryRead+0xa4>)
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f000 fa26 	bl	8003430 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	69b9      	ldr	r1, [r7, #24]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f8b6 	bl	800315a <I2C_WaitOnTXISFlagUntilTimeout>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e02c      	b.n	8003052 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ff8:	88fb      	ldrh	r3, [r7, #6]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d105      	bne.n	800300a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ffe:	893b      	ldrh	r3, [r7, #8]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	629a      	str	r2, [r3, #40]	@ 0x28
 8003008:	e015      	b.n	8003036 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800300a:	893b      	ldrh	r3, [r7, #8]
 800300c:	0a1b      	lsrs	r3, r3, #8
 800300e:	b29b      	uxth	r3, r3
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 f89c 	bl	800315a <I2C_WaitOnTXISFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e012      	b.n	8003052 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800302c:	893b      	ldrh	r3, [r7, #8]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2200      	movs	r2, #0
 800303e:	2140      	movs	r1, #64	@ 0x40
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f831 	bl	80030a8 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	80002000 	.word	0x80002000

08003060 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b02      	cmp	r3, #2
 8003074:	d103      	bne.n	800307e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2200      	movs	r2, #0
 800307c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b01      	cmp	r3, #1
 800308a:	d007      	beq.n	800309c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	699a      	ldr	r2, [r3, #24]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f042 0201 	orr.w	r2, r2, #1
 800309a:	619a      	str	r2, [r3, #24]
  }
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030b8:	e03b      	b.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	6839      	ldr	r1, [r7, #0]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8d6 	bl	8003270 <I2C_IsErrorOccurred>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e041      	b.n	8003152 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d4:	d02d      	beq.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d6:	f7fe ff6d 	bl	8001fb4 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d302      	bcc.n	80030ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d122      	bne.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	4013      	ands	r3, r2
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	bf0c      	ite	eq
 80030fc:	2301      	moveq	r3, #1
 80030fe:	2300      	movne	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	461a      	mov	r2, r3
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	429a      	cmp	r2, r3
 8003108:	d113      	bne.n	8003132 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e00f      	b.n	8003152 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699a      	ldr	r2, [r3, #24]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	429a      	cmp	r2, r3
 800314e:	d0b4      	beq.n	80030ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003166:	e033      	b.n	80031d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 f87f 	bl	8003270 <I2C_IsErrorOccurred>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e031      	b.n	80031e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d025      	beq.n	80031d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003184:	f7fe ff16 	bl	8001fb4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	429a      	cmp	r2, r3
 8003192:	d302      	bcc.n	800319a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d11a      	bne.n	80031d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d013      	beq.n	80031d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ac:	f043 0220 	orr.w	r2, r3, #32
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e007      	b.n	80031e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d1c4      	bne.n	8003168 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031f4:	e02f      	b.n	8003256 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	68b9      	ldr	r1, [r7, #8]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f000 f838 	bl	8003270 <I2C_IsErrorOccurred>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e02d      	b.n	8003266 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe fed3 	bl	8001fb4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11a      	bne.n	8003256 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b20      	cmp	r3, #32
 800322c:	d013      	beq.n	8003256 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003232:	f043 0220 	orr.w	r2, r3, #32
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e007      	b.n	8003266 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b20      	cmp	r3, #32
 8003262:	d1c8      	bne.n	80031f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08a      	sub	sp, #40	@ 0x28
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 0310 	and.w	r3, r3, #16
 8003298:	2b00      	cmp	r3, #0
 800329a:	d068      	beq.n	800336e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2210      	movs	r2, #16
 80032a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80032a4:	e049      	b.n	800333a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d045      	beq.n	800333a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fe fe81 	bl	8001fb4 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <I2C_IsErrorOccurred+0x54>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d13a      	bne.n	800333a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032e6:	d121      	bne.n	800332c <I2C_IsErrorOccurred+0xbc>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ee:	d01d      	beq.n	800332c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	2b20      	cmp	r3, #32
 80032f4:	d01a      	beq.n	800332c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003304:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003306:	f7fe fe55 	bl	8001fb4 <HAL_GetTick>
 800330a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800330c:	e00e      	b.n	800332c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800330e:	f7fe fe51 	bl	8001fb4 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b19      	cmp	r3, #25
 800331a:	d907      	bls.n	800332c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	f043 0320 	orr.w	r3, r3, #32
 8003322:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800332a:	e006      	b.n	800333a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b20      	cmp	r3, #32
 8003338:	d1e9      	bne.n	800330e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b20      	cmp	r3, #32
 8003346:	d003      	beq.n	8003350 <I2C_IsErrorOccurred+0xe0>
 8003348:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0aa      	beq.n	80032a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003350:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003354:	2b00      	cmp	r3, #0
 8003356:	d103      	bne.n	8003360 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2220      	movs	r2, #32
 800335e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003360:	6a3b      	ldr	r3, [r7, #32]
 8003362:	f043 0304 	orr.w	r3, r3, #4
 8003366:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00b      	beq.n	8003398 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003380:	6a3b      	ldr	r3, [r7, #32]
 8003382:	f043 0301 	orr.w	r3, r3, #1
 8003386:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003390:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00b      	beq.n	80033ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f043 0308 	orr.w	r3, r3, #8
 80033a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	f043 0302 	orr.w	r3, r3, #2
 80033ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80033dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01c      	beq.n	800341e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	f7ff fe3b 	bl	8003060 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	6859      	ldr	r1, [r3, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <I2C_IsErrorOccurred+0x1bc>)
 80033f6:	400b      	ands	r3, r1
 80033f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800341e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003422:	4618      	mov	r0, r3
 8003424:	3728      	adds	r7, #40	@ 0x28
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	fe00e800 	.word	0xfe00e800

08003430 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	460b      	mov	r3, r1
 800343c:	817b      	strh	r3, [r7, #10]
 800343e:	4613      	mov	r3, r2
 8003440:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003442:	897b      	ldrh	r3, [r7, #10]
 8003444:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003448:	7a7b      	ldrb	r3, [r7, #9]
 800344a:	041b      	lsls	r3, r3, #16
 800344c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003450:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	4313      	orrs	r3, r2
 800345a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800345e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	0d5b      	lsrs	r3, r3, #21
 800346a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800346e:	4b08      	ldr	r3, [pc, #32]	@ (8003490 <I2C_TransferConfig+0x60>)
 8003470:	430b      	orrs	r3, r1
 8003472:	43db      	mvns	r3, r3
 8003474:	ea02 0103 	and.w	r1, r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003482:	bf00      	nop
 8003484:	371c      	adds	r7, #28
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	03ff63ff 	.word	0x03ff63ff

08003494 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d138      	bne.n	800351c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e032      	b.n	800351e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2224      	movs	r2, #36	@ 0x24
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80034e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6819      	ldr	r1, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800352a:	b480      	push	{r7}
 800352c:	b085      	sub	sp, #20
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b20      	cmp	r3, #32
 800353e:	d139      	bne.n	80035b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800354a:	2302      	movs	r3, #2
 800354c:	e033      	b.n	80035b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2224      	movs	r2, #36	@ 0x24
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0201 	bic.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800357c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	021b      	lsls	r3, r3, #8
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	e000      	b.n	80035b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035b4:	2302      	movs	r3, #2
  }
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
	...

080035c4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e08f      	b.n	80036f6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d106      	bne.n	80035f6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7fd ff01 	bl	80013f8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2202      	movs	r2, #2
 80035fa:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d004      	beq.n	8003618 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003612:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003616:	d103      	bne.n	8003620 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 031e 	bic.w	r3, r3, #30
 800361e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003628:	4293      	cmp	r3, r2
 800362a:	d005      	beq.n	8003638 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003632:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003636:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4b31      	ldr	r3, [pc, #196]	@ (8003700 <HAL_LPTIM_Init+0x13c>)
 800363c:	4013      	ands	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003648:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800364e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 8003654:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 800365a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	4313      	orrs	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003672:	4313      	orrs	r3, r2
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d004      	beq.n	800368c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003686:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800368a:	d107      	bne.n	800369c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003694:	4313      	orrs	r3, r2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00a      	beq.n	80036be <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80036b0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80036b6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a0e      	ldr	r2, [pc, #56]	@ (8003704 <HAL_LPTIM_Init+0x140>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d108      	bne.n	80036e2 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	621a      	str	r2, [r3, #32]
 80036e0:	e004      	b.n	80036ec <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036ea:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	ff19f1fe 	.word	0xff19f1fe
 8003704:	40007c00 	.word	0x40007c00

08003708 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b01      	cmp	r3, #1
 800371c:	d10d      	bne.n	800373a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b01      	cmp	r3, #1
 800372a:	d106      	bne.n	800373a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2201      	movs	r2, #1
 8003732:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f882 	bl	800383e <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b02      	cmp	r3, #2
 8003746:	d10d      	bne.n	8003764 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d106      	bne.n	8003764 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2202      	movs	r2, #2
 800375c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f877 	bl	8003852 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d10d      	bne.n	800378e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d106      	bne.n	800378e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2204      	movs	r2, #4
 8003786:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f86c 	bl	8003866 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	2b08      	cmp	r3, #8
 800379a:	d10d      	bne.n	80037b8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d106      	bne.n	80037b8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2208      	movs	r2, #8
 80037b0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f861 	bl	800387a <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b10      	cmp	r3, #16
 80037c4:	d10d      	bne.n	80037e2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0310 	and.w	r3, r3, #16
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d106      	bne.n	80037e2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2210      	movs	r2, #16
 80037da:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 f856 	bl	800388e <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d10d      	bne.n	800380c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d106      	bne.n	800380c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2220      	movs	r2, #32
 8003804:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f84b 	bl	80038a2 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003816:	2b40      	cmp	r3, #64	@ 0x40
 8003818:	d10d      	bne.n	8003836 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003824:	2b40      	cmp	r3, #64	@ 0x40
 8003826:	d106      	bne.n	8003836 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2240      	movs	r2, #64	@ 0x40
 800382e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f840 	bl	80038b6 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr

080038a2 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b083      	sub	sp, #12
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
	...

080038cc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038d0:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a04      	ldr	r2, [pc, #16]	@ (80038e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80038d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038da:	6013      	str	r3, [r2, #0]
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40007000 	.word	0x40007000

080038ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038f0:	4b04      	ldr	r3, [pc, #16]	@ (8003904 <HAL_PWREx_GetVoltageRange+0x18>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40007000 	.word	0x40007000

08003908 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003916:	d130      	bne.n	800397a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003918:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003924:	d038      	beq.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003926:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800392e:	4a1e      	ldr	r2, [pc, #120]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003930:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003934:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003936:	4b1d      	ldr	r3, [pc, #116]	@ (80039ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2232      	movs	r2, #50	@ 0x32
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	4a1b      	ldr	r2, [pc, #108]	@ (80039b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003942:	fba2 2303 	umull	r2, r3, r2, r3
 8003946:	0c9b      	lsrs	r3, r3, #18
 8003948:	3301      	adds	r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800394c:	e002      	b.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	3b01      	subs	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003954:	4b14      	ldr	r3, [pc, #80]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003960:	d102      	bne.n	8003968 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d1f2      	bne.n	800394e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003968:	4b0f      	ldr	r3, [pc, #60]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003974:	d110      	bne.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e00f      	b.n	800399a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800397a:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003986:	d007      	beq.n	8003998 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003988:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003990:	4a05      	ldr	r2, [pc, #20]	@ (80039a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003996:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40007000 	.word	0x40007000
 80039ac:	20000000 	.word	0x20000000
 80039b0:	431bde83 	.word	0x431bde83

080039b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b088      	sub	sp, #32
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d102      	bne.n	80039c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f000 bc02 	b.w	80041cc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039c8:	4b96      	ldr	r3, [pc, #600]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f003 030c 	and.w	r3, r3, #12
 80039d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d2:	4b94      	ldr	r3, [pc, #592]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0310 	and.w	r3, r3, #16
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80e4 	beq.w	8003bb2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d007      	beq.n	8003a00 <HAL_RCC_OscConfig+0x4c>
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	f040 808b 	bne.w	8003b0e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	f040 8087 	bne.w	8003b0e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a00:	4b88      	ldr	r3, [pc, #544]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_OscConfig+0x64>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e3d9      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1a      	ldr	r2, [r3, #32]
 8003a1c:	4b81      	ldr	r3, [pc, #516]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <HAL_RCC_OscConfig+0x7e>
 8003a28:	4b7e      	ldr	r3, [pc, #504]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a30:	e005      	b.n	8003a3e <HAL_RCC_OscConfig+0x8a>
 8003a32:	4b7c      	ldr	r3, [pc, #496]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a38:	091b      	lsrs	r3, r3, #4
 8003a3a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d223      	bcs.n	8003a8a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fd8c 	bl	8004564 <RCC_SetFlashLatencyFromMSIRange>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e3ba      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a56:	4b73      	ldr	r3, [pc, #460]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a72      	ldr	r2, [pc, #456]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	f043 0308 	orr.w	r3, r3, #8
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	4b70      	ldr	r3, [pc, #448]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	496d      	ldr	r1, [pc, #436]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a74:	4b6b      	ldr	r3, [pc, #428]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	021b      	lsls	r3, r3, #8
 8003a82:	4968      	ldr	r1, [pc, #416]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]
 8003a88:	e025      	b.n	8003ad6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a8a:	4b66      	ldr	r3, [pc, #408]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a65      	ldr	r2, [pc, #404]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b63      	ldr	r3, [pc, #396]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	4960      	ldr	r1, [pc, #384]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	69db      	ldr	r3, [r3, #28]
 8003ab4:	021b      	lsls	r3, r3, #8
 8003ab6:	495b      	ldr	r1, [pc, #364]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a1b      	ldr	r3, [r3, #32]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fd4c 	bl	8004564 <RCC_SetFlashLatencyFromMSIRange>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e37a      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ad6:	f000 fc81 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8003ada:	4602      	mov	r2, r0
 8003adc:	4b51      	ldr	r3, [pc, #324]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	4950      	ldr	r1, [pc, #320]	@ (8003c28 <HAL_RCC_OscConfig+0x274>)
 8003ae8:	5ccb      	ldrb	r3, [r1, r3]
 8003aea:	f003 031f 	and.w	r3, r3, #31
 8003aee:	fa22 f303 	lsr.w	r3, r2, r3
 8003af2:	4a4e      	ldr	r2, [pc, #312]	@ (8003c2c <HAL_RCC_OscConfig+0x278>)
 8003af4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003af6:	4b4e      	ldr	r3, [pc, #312]	@ (8003c30 <HAL_RCC_OscConfig+0x27c>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fe fa0a 	bl	8001f14 <HAL_InitTick>
 8003b00:	4603      	mov	r3, r0
 8003b02:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d052      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	e35e      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d032      	beq.n	8003b7c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b16:	4b43      	ldr	r3, [pc, #268]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a42      	ldr	r2, [pc, #264]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b1c:	f043 0301 	orr.w	r3, r3, #1
 8003b20:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b22:	f7fe fa47 	bl	8001fb4 <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b2a:	f7fe fa43 	bl	8001fb4 <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e347      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b3c:	4b39      	ldr	r3, [pc, #228]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b48:	4b36      	ldr	r3, [pc, #216]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a35      	ldr	r2, [pc, #212]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	f043 0308 	orr.w	r3, r3, #8
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b33      	ldr	r3, [pc, #204]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4930      	ldr	r1, [pc, #192]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b66:	4b2f      	ldr	r3, [pc, #188]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	492b      	ldr	r1, [pc, #172]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b76:	4313      	orrs	r3, r2
 8003b78:	604b      	str	r3, [r1, #4]
 8003b7a:	e01a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b7c:	4b29      	ldr	r3, [pc, #164]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a28      	ldr	r2, [pc, #160]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b88:	f7fe fa14 	bl	8001fb4 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b90:	f7fe fa10 	bl	8001fb4 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e314      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ba2:	4b20      	ldr	r3, [pc, #128]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f0      	bne.n	8003b90 <HAL_RCC_OscConfig+0x1dc>
 8003bae:	e000      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bb0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d073      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d005      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x21c>
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d10e      	bne.n	8003be8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d10b      	bne.n	8003be8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d063      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d15f      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e2f1      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCC_OscConfig+0x24c>
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a0b      	ldr	r2, [pc, #44]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e025      	b.n	8003c4c <HAL_RCC_OscConfig+0x298>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c08:	d114      	bne.n	8003c34 <HAL_RCC_OscConfig+0x280>
 8003c0a:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a05      	ldr	r2, [pc, #20]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a02      	ldr	r2, [pc, #8]	@ (8003c24 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e013      	b.n	8003c4c <HAL_RCC_OscConfig+0x298>
 8003c24:	40021000 	.word	0x40021000
 8003c28:	0800a24c 	.word	0x0800a24c
 8003c2c:	20000000 	.word	0x20000000
 8003c30:	20000004 	.word	0x20000004
 8003c34:	4ba0      	ldr	r3, [pc, #640]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a9f      	ldr	r2, [pc, #636]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	4b9d      	ldr	r3, [pc, #628]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a9c      	ldr	r2, [pc, #624]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d013      	beq.n	8003c7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c54:	f7fe f9ae 	bl	8001fb4 <HAL_GetTick>
 8003c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c5a:	e008      	b.n	8003c6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c5c:	f7fe f9aa 	bl	8001fb4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	2b64      	cmp	r3, #100	@ 0x64
 8003c68:	d901      	bls.n	8003c6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e2ae      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c6e:	4b92      	ldr	r3, [pc, #584]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d0f0      	beq.n	8003c5c <HAL_RCC_OscConfig+0x2a8>
 8003c7a:	e014      	b.n	8003ca6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f99a 	bl	8001fb4 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c84:	f7fe f996 	bl	8001fb4 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b64      	cmp	r3, #100	@ 0x64
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e29a      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c96:	4b88      	ldr	r3, [pc, #544]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x2d0>
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d060      	beq.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d005      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x310>
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b0c      	cmp	r3, #12
 8003cbc:	d119      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d116      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cc4:	4b7c      	ldr	r3, [pc, #496]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_OscConfig+0x328>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e277      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cdc:	4b76      	ldr	r3, [pc, #472]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	061b      	lsls	r3, r3, #24
 8003cea:	4973      	ldr	r1, [pc, #460]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf0:	e040      	b.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d023      	beq.n	8003d42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfa:	4b6f      	ldr	r3, [pc, #444]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fe f955 	bl	8001fb4 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fe f951 	bl	8001fb4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e255      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d20:	4b65      	ldr	r3, [pc, #404]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b62      	ldr	r3, [pc, #392]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	061b      	lsls	r3, r3, #24
 8003d3a:	495f      	ldr	r1, [pc, #380]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
 8003d40:	e018      	b.n	8003d74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	4b5d      	ldr	r3, [pc, #372]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fe f931 	bl	8001fb4 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fe f92d 	bl	8001fb4 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e231      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d68:	4b53      	ldr	r3, [pc, #332]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f0      	bne.n	8003d56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0308 	and.w	r3, r3, #8
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d03c      	beq.n	8003dfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01c      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d88:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8e:	4a4a      	ldr	r2, [pc, #296]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d98:	f7fe f90c 	bl	8001fb4 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da0:	f7fe f908 	bl	8001fb4 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e20c      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003db2:	4b41      	ldr	r3, [pc, #260]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ef      	beq.n	8003da0 <HAL_RCC_OscConfig+0x3ec>
 8003dc0:	e01b      	b.n	8003dfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc2:	4b3d      	ldr	r3, [pc, #244]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc8:	4a3b      	ldr	r2, [pc, #236]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003dca:	f023 0301 	bic.w	r3, r3, #1
 8003dce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd2:	f7fe f8ef 	bl	8001fb4 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dda:	f7fe f8eb 	bl	8001fb4 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e1ef      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dec:	4b32      	ldr	r3, [pc, #200]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1ef      	bne.n	8003dda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80a6 	beq.w	8003f54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e18:	4b27      	ldr	r3, [pc, #156]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1c:	4a26      	ldr	r2, [pc, #152]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e24:	4b24      	ldr	r3, [pc, #144]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e30:	2301      	movs	r3, #1
 8003e32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e34:	4b21      	ldr	r3, [pc, #132]	@ (8003ebc <HAL_RCC_OscConfig+0x508>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d118      	bne.n	8003e72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e40:	4b1e      	ldr	r3, [pc, #120]	@ (8003ebc <HAL_RCC_OscConfig+0x508>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1d      	ldr	r2, [pc, #116]	@ (8003ebc <HAL_RCC_OscConfig+0x508>)
 8003e46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e4c:	f7fe f8b2 	bl	8001fb4 <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e54:	f7fe f8ae 	bl	8001fb4 <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e1b2      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e66:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <HAL_RCC_OscConfig+0x508>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0f0      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d108      	bne.n	8003e8c <HAL_RCC_OscConfig+0x4d8>
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e80:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e8a:	e029      	b.n	8003ee0 <HAL_RCC_OscConfig+0x52c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d115      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x50c>
 8003e94:	4b08      	ldr	r3, [pc, #32]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	4a07      	ldr	r2, [pc, #28]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ea4:	4b04      	ldr	r3, [pc, #16]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eaa:	4a03      	ldr	r2, [pc, #12]	@ (8003eb8 <HAL_RCC_OscConfig+0x504>)
 8003eac:	f043 0301 	orr.w	r3, r3, #1
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003eb4:	e014      	b.n	8003ee0 <HAL_RCC_OscConfig+0x52c>
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	40007000 	.word	0x40007000
 8003ec0:	4b9a      	ldr	r3, [pc, #616]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec6:	4a99      	ldr	r2, [pc, #612]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003ec8:	f023 0301 	bic.w	r3, r3, #1
 8003ecc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ed0:	4b96      	ldr	r3, [pc, #600]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed6:	4a95      	ldr	r2, [pc, #596]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d016      	beq.n	8003f16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fe f864 	bl	8001fb4 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fe f860 	bl	8001fb4 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e162      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f06:	4b89      	ldr	r3, [pc, #548]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0ed      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x53c>
 8003f14:	e015      	b.n	8003f42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f16:	f7fe f84d 	bl	8001fb4 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f1c:	e00a      	b.n	8003f34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f1e:	f7fe f849 	bl	8001fb4 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e14b      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f34:	4b7d      	ldr	r3, [pc, #500]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1ed      	bne.n	8003f1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f42:	7ffb      	ldrb	r3, [r7, #31]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d105      	bne.n	8003f54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f48:	4b78      	ldr	r3, [pc, #480]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4c:	4a77      	ldr	r2, [pc, #476]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003f4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0320 	and.w	r3, r3, #32
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d03c      	beq.n	8003fda <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01c      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f68:	4b70      	ldr	r3, [pc, #448]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f6e:	4a6f      	ldr	r2, [pc, #444]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f78:	f7fe f81c 	bl	8001fb4 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f80:	f7fe f818 	bl	8001fb4 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e11c      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f92:	4b66      	ldr	r3, [pc, #408]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ef      	beq.n	8003f80 <HAL_RCC_OscConfig+0x5cc>
 8003fa0:	e01b      	b.n	8003fda <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fa2:	4b62      	ldr	r3, [pc, #392]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003fa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fa8:	4a60      	ldr	r2, [pc, #384]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb2:	f7fd ffff 	bl	8001fb4 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fba:	f7fd fffb 	bl	8001fb4 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e0ff      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003fcc:	4b57      	ldr	r3, [pc, #348]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003fce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1ef      	bne.n	8003fba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 80f3 	beq.w	80041ca <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f040 80c9 	bne.w	8004180 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fee:	4b4f      	ldr	r3, [pc, #316]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	f003 0203 	and.w	r2, r3, #3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d12c      	bne.n	800405c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	3b01      	subs	r3, #1
 800400e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d123      	bne.n	800405c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800401e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d11b      	bne.n	800405c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004030:	429a      	cmp	r2, r3
 8004032:	d113      	bne.n	800405c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	3b01      	subs	r3, #1
 8004042:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d109      	bne.n	800405c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d06b      	beq.n	8004134 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d062      	beq.n	8004128 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004062:	4b32      	ldr	r3, [pc, #200]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e0ac      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004072:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2d      	ldr	r2, [pc, #180]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 8004078:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800407c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800407e:	f7fd ff99 	bl	8001fb4 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004084:	e008      	b.n	8004098 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004086:	f7fd ff95 	bl	8001fb4 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d901      	bls.n	8004098 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e099      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004098:	4b24      	ldr	r3, [pc, #144]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f0      	bne.n	8004086 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040a4:	4b21      	ldr	r3, [pc, #132]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	4b21      	ldr	r3, [pc, #132]	@ (8004130 <HAL_RCC_OscConfig+0x77c>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80040b4:	3a01      	subs	r2, #1
 80040b6:	0112      	lsls	r2, r2, #4
 80040b8:	4311      	orrs	r1, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80040be:	0212      	lsls	r2, r2, #8
 80040c0:	4311      	orrs	r1, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040c6:	0852      	lsrs	r2, r2, #1
 80040c8:	3a01      	subs	r2, #1
 80040ca:	0552      	lsls	r2, r2, #21
 80040cc:	4311      	orrs	r1, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80040d2:	0852      	lsrs	r2, r2, #1
 80040d4:	3a01      	subs	r2, #1
 80040d6:	0652      	lsls	r2, r2, #25
 80040d8:	4311      	orrs	r1, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040de:	06d2      	lsls	r2, r2, #27
 80040e0:	430a      	orrs	r2, r1
 80040e2:	4912      	ldr	r1, [pc, #72]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040e8:	4b10      	ldr	r3, [pc, #64]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a0f      	ldr	r2, [pc, #60]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 80040ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040f4:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	4a0c      	ldr	r2, [pc, #48]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 80040fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004100:	f7fd ff58 	bl	8001fb4 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7fd ff54 	bl	8001fb4 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e058      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	4b04      	ldr	r3, [pc, #16]	@ (800412c <HAL_RCC_OscConfig+0x778>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0f0      	beq.n	8004108 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004126:	e050      	b.n	80041ca <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e04f      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
 800412c:	40021000 	.word	0x40021000
 8004130:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004134:	4b27      	ldr	r3, [pc, #156]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d144      	bne.n	80041ca <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004140:	4b24      	ldr	r3, [pc, #144]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a23      	ldr	r2, [pc, #140]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 8004146:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800414a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800414c:	4b21      	ldr	r3, [pc, #132]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	4a20      	ldr	r2, [pc, #128]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 8004152:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004156:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004158:	f7fd ff2c 	bl	8001fb4 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd ff28 	bl	8001fb4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e02c      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004172:	4b18      	ldr	r3, [pc, #96]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0f0      	beq.n	8004160 <HAL_RCC_OscConfig+0x7ac>
 800417e:	e024      	b.n	80041ca <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	2b0c      	cmp	r3, #12
 8004184:	d01f      	beq.n	80041c6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004186:	4b13      	ldr	r3, [pc, #76]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a12      	ldr	r2, [pc, #72]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 800418c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004192:	f7fd ff0f 	bl	8001fb4 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419a:	f7fd ff0b 	bl	8001fb4 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e00f      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041ac:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80041b8:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	4905      	ldr	r1, [pc, #20]	@ (80041d4 <HAL_RCC_OscConfig+0x820>)
 80041be:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <HAL_RCC_OscConfig+0x824>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	60cb      	str	r3, [r1, #12]
 80041c4:	e001      	b.n	80041ca <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3720      	adds	r7, #32
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40021000 	.word	0x40021000
 80041d8:	feeefffc 	.word	0xfeeefffc

080041dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d101      	bne.n	80041f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0e7      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041f0:	4b75      	ldr	r3, [pc, #468]	@ (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d910      	bls.n	8004220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041fe:	4b72      	ldr	r3, [pc, #456]	@ (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f023 0207 	bic.w	r2, r3, #7
 8004206:	4970      	ldr	r1, [pc, #448]	@ (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	4313      	orrs	r3, r2
 800420c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800420e:	4b6e      	ldr	r3, [pc, #440]	@ (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0cf      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d010      	beq.n	800424e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	4b66      	ldr	r3, [pc, #408]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004238:	429a      	cmp	r2, r3
 800423a:	d908      	bls.n	800424e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b63      	ldr	r3, [pc, #396]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4960      	ldr	r1, [pc, #384]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04c      	beq.n	80042f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004262:	4b5a      	ldr	r3, [pc, #360]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d121      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e0a6      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d107      	bne.n	800428a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800427a:	4b54      	ldr	r3, [pc, #336]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d115      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e09a      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d107      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004292:	4b4e      	ldr	r3, [pc, #312]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d109      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e08e      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042a2:	4b4a      	ldr	r3, [pc, #296]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e086      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042b2:	4b46      	ldr	r3, [pc, #280]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f023 0203 	bic.w	r2, r3, #3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4943      	ldr	r1, [pc, #268]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fd fe76 	bl	8001fb4 <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fd fe72 	bl	8001fb4 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e06e      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	4b3a      	ldr	r3, [pc, #232]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 020c 	and.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d1eb      	bne.n	80042cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d010      	beq.n	8004322 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	4b31      	ldr	r3, [pc, #196]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800430c:	429a      	cmp	r2, r3
 800430e:	d208      	bcs.n	8004322 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004310:	4b2e      	ldr	r3, [pc, #184]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	492b      	ldr	r1, [pc, #172]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004322:	4b29      	ldr	r3, [pc, #164]	@ (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0307 	and.w	r3, r3, #7
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d210      	bcs.n	8004352 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004330:	4b25      	ldr	r3, [pc, #148]	@ (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 0207 	bic.w	r2, r3, #7
 8004338:	4923      	ldr	r1, [pc, #140]	@ (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004340:	4b21      	ldr	r3, [pc, #132]	@ (80043c8 <HAL_RCC_ClockConfig+0x1ec>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d001      	beq.n	8004352 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e036      	b.n	80043c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0304 	and.w	r3, r3, #4
 800435a:	2b00      	cmp	r3, #0
 800435c:	d008      	beq.n	8004370 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800435e:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	4918      	ldr	r1, [pc, #96]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800436c:	4313      	orrs	r3, r2
 800436e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d009      	beq.n	8004390 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437c:	4b13      	ldr	r3, [pc, #76]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4910      	ldr	r1, [pc, #64]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 800438c:	4313      	orrs	r3, r2
 800438e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004390:	f000 f824 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8004394:	4602      	mov	r2, r0
 8004396:	4b0d      	ldr	r3, [pc, #52]	@ (80043cc <HAL_RCC_ClockConfig+0x1f0>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 030f 	and.w	r3, r3, #15
 80043a0:	490b      	ldr	r1, [pc, #44]	@ (80043d0 <HAL_RCC_ClockConfig+0x1f4>)
 80043a2:	5ccb      	ldrb	r3, [r1, r3]
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	fa22 f303 	lsr.w	r3, r2, r3
 80043ac:	4a09      	ldr	r2, [pc, #36]	@ (80043d4 <HAL_RCC_ClockConfig+0x1f8>)
 80043ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043b0:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HAL_RCC_ClockConfig+0x1fc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd fdad 	bl	8001f14 <HAL_InitTick>
 80043ba:	4603      	mov	r3, r0
 80043bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80043be:	7afb      	ldrb	r3, [r7, #11]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40022000 	.word	0x40022000
 80043cc:	40021000 	.word	0x40021000
 80043d0:	0800a24c 	.word	0x0800a24c
 80043d4:	20000000 	.word	0x20000000
 80043d8:	20000004 	.word	0x20000004

080043dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043dc:	b480      	push	{r7}
 80043de:	b089      	sub	sp, #36	@ 0x24
 80043e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043e2:	2300      	movs	r3, #0
 80043e4:	61fb      	str	r3, [r7, #28]
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ea:	4b3e      	ldr	r3, [pc, #248]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 030c 	and.w	r3, r3, #12
 80043f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f4:	4b3b      	ldr	r3, [pc, #236]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_GetSysClockFreq+0x34>
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b0c      	cmp	r3, #12
 8004408:	d121      	bne.n	800444e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d11e      	bne.n	800444e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004410:	4b34      	ldr	r3, [pc, #208]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0308 	and.w	r3, r3, #8
 8004418:	2b00      	cmp	r3, #0
 800441a:	d107      	bne.n	800442c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800441c:	4b31      	ldr	r3, [pc, #196]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800441e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	61fb      	str	r3, [r7, #28]
 800442a:	e005      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800442c:	4b2d      	ldr	r3, [pc, #180]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004438:	4a2b      	ldr	r2, [pc, #172]	@ (80044e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004440:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10d      	bne.n	8004464 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b04      	cmp	r3, #4
 8004452:	d102      	bne.n	800445a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004454:	4b25      	ldr	r3, [pc, #148]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e004      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	2b08      	cmp	r3, #8
 800445e:	d101      	bne.n	8004464 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004460:	4b23      	ldr	r3, [pc, #140]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004462:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b0c      	cmp	r3, #12
 8004468:	d134      	bne.n	80044d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800446a:	4b1e      	ldr	r3, [pc, #120]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0303 	and.w	r3, r3, #3
 8004472:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	2b02      	cmp	r3, #2
 8004478:	d003      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0xa6>
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b03      	cmp	r3, #3
 800447e:	d003      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0xac>
 8004480:	e005      	b.n	800448e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004482:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x110>)
 8004484:	617b      	str	r3, [r7, #20]
      break;
 8004486:	e005      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004488:	4b19      	ldr	r3, [pc, #100]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800448a:	617b      	str	r3, [r7, #20]
      break;
 800448c:	e002      	b.n	8004494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	617b      	str	r3, [r7, #20]
      break;
 8004492:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004494:	4b13      	ldr	r3, [pc, #76]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	3301      	adds	r3, #1
 80044a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	0a1b      	lsrs	r3, r3, #8
 80044a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	fb03 f202 	mul.w	r2, r3, r2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044ba:	4b0a      	ldr	r3, [pc, #40]	@ (80044e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	0e5b      	lsrs	r3, r3, #25
 80044c0:	f003 0303 	and.w	r3, r3, #3
 80044c4:	3301      	adds	r3, #1
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044d4:	69bb      	ldr	r3, [r7, #24]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3724      	adds	r7, #36	@ 0x24
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40021000 	.word	0x40021000
 80044e8:	0800a264 	.word	0x0800a264
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	007a1200 	.word	0x007a1200

080044f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044f8:	4b03      	ldr	r3, [pc, #12]	@ (8004508 <HAL_RCC_GetHCLKFreq+0x14>)
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000000 	.word	0x20000000

0800450c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004510:	f7ff fff0 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004514:	4602      	mov	r2, r0
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	0a1b      	lsrs	r3, r3, #8
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	4904      	ldr	r1, [pc, #16]	@ (8004534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004522:	5ccb      	ldrb	r3, [r1, r3]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	0800a25c 	.word	0x0800a25c

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800453c:	f7ff ffda 	bl	80044f4 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b06      	ldr	r3, [pc, #24]	@ (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0adb      	lsrs	r3, r3, #11
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4904      	ldr	r1, [pc, #16]	@ (8004560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	f003 031f 	and.w	r3, r3, #31
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40021000 	.word	0x40021000
 8004560:	0800a25c 	.word	0x0800a25c

08004564 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b086      	sub	sp, #24
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004570:	4b2a      	ldr	r3, [pc, #168]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800457c:	f7ff f9b6 	bl	80038ec <HAL_PWREx_GetVoltageRange>
 8004580:	6178      	str	r0, [r7, #20]
 8004582:	e014      	b.n	80045ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004584:	4b25      	ldr	r3, [pc, #148]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004588:	4a24      	ldr	r2, [pc, #144]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800458a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800458e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004590:	4b22      	ldr	r3, [pc, #136]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800459c:	f7ff f9a6 	bl	80038ec <HAL_PWREx_GetVoltageRange>
 80045a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045a2:	4b1e      	ldr	r3, [pc, #120]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a6:	4a1d      	ldr	r2, [pc, #116]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b4:	d10b      	bne.n	80045ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b80      	cmp	r3, #128	@ 0x80
 80045ba:	d919      	bls.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2ba0      	cmp	r3, #160	@ 0xa0
 80045c0:	d902      	bls.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045c2:	2302      	movs	r3, #2
 80045c4:	613b      	str	r3, [r7, #16]
 80045c6:	e013      	b.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045c8:	2301      	movs	r3, #1
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	e010      	b.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b80      	cmp	r3, #128	@ 0x80
 80045d2:	d902      	bls.n	80045da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045d4:	2303      	movs	r3, #3
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	e00a      	b.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b80      	cmp	r3, #128	@ 0x80
 80045de:	d102      	bne.n	80045e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045e0:	2302      	movs	r3, #2
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	e004      	b.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b70      	cmp	r3, #112	@ 0x70
 80045ea:	d101      	bne.n	80045f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045ec:	2301      	movs	r3, #1
 80045ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 0207 	bic.w	r2, r3, #7
 80045f8:	4909      	ldr	r1, [pc, #36]	@ (8004620 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004600:	4b07      	ldr	r3, [pc, #28]	@ (8004620 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	429a      	cmp	r2, r3
 800460c:	d001      	beq.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e000      	b.n	8004614 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40021000 	.word	0x40021000
 8004620:	40022000 	.word	0x40022000

08004624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800462c:	2300      	movs	r3, #0
 800462e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004630:	2300      	movs	r3, #0
 8004632:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800463c:	2b00      	cmp	r3, #0
 800463e:	d031      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004644:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004648:	d01a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800464a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800464e:	d814      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d009      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004654:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004658:	d10f      	bne.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800465a:	4b5d      	ldr	r3, [pc, #372]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	4a5c      	ldr	r2, [pc, #368]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004664:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004666:	e00c      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3304      	adds	r3, #4
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fa32 	bl	8004ad8 <RCCEx_PLLSAI1_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	74fb      	strb	r3, [r7, #19]
      break;
 800467e:	e000      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004688:	4b51      	ldr	r3, [pc, #324]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004696:	494e      	ldr	r1, [pc, #312]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800469e:	e001      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 809e 	beq.w	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b2:	2300      	movs	r3, #0
 80046b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046b6:	4b46      	ldr	r3, [pc, #280]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046cc:	4b40      	ldr	r3, [pc, #256]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d0:	4a3f      	ldr	r2, [pc, #252]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d8:	4b3d      	ldr	r3, [pc, #244]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e4:	2301      	movs	r3, #1
 80046e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e8:	4b3a      	ldr	r3, [pc, #232]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a39      	ldr	r2, [pc, #228]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046f4:	f7fd fc5e 	bl	8001fb4 <HAL_GetTick>
 80046f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046fa:	e009      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046fc:	f7fd fc5a 	bl	8001fb4 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d902      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	74fb      	strb	r3, [r7, #19]
        break;
 800470e:	e005      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004710:	4b30      	ldr	r3, [pc, #192]	@ (80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ef      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800471c:	7cfb      	ldrb	r3, [r7, #19]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d15a      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004722:	4b2b      	ldr	r3, [pc, #172]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004724:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004728:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800472c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01e      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	429a      	cmp	r2, r3
 800473c:	d019      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800473e:	4b24      	ldr	r3, [pc, #144]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004744:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004748:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800474a:	4b21      	ldr	r3, [pc, #132]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004750:	4a1f      	ldr	r2, [pc, #124]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004756:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800475a:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004760:	4a1b      	ldr	r2, [pc, #108]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004766:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800476a:	4a19      	ldr	r2, [pc, #100]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d016      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800477c:	f7fd fc1a 	bl	8001fb4 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004782:	e00b      	b.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7fd fc16 	bl	8001fb4 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d902      	bls.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	74fb      	strb	r3, [r7, #19]
            break;
 800479a:	e006      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800479c:	4b0c      	ldr	r3, [pc, #48]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800479e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0ec      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80047aa:	7cfb      	ldrb	r3, [r7, #19]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047b0:	4b07      	ldr	r3, [pc, #28]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047be:	4904      	ldr	r1, [pc, #16]	@ (80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80047c6:	e009      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047c8:	7cfb      	ldrb	r3, [r7, #19]
 80047ca:	74bb      	strb	r3, [r7, #18]
 80047cc:	e006      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80047ce:	bf00      	nop
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d8:	7cfb      	ldrb	r3, [r7, #19]
 80047da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047dc:	7c7b      	ldrb	r3, [r7, #17]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d105      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047e6:	4a8c      	ldr	r2, [pc, #560]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047ec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047fa:	4b87      	ldr	r3, [pc, #540]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004800:	f023 0203 	bic.w	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	4983      	ldr	r1, [pc, #524]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0302 	and.w	r3, r3, #2
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800481c:	4b7e      	ldr	r3, [pc, #504]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004822:	f023 020c 	bic.w	r2, r3, #12
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	497b      	ldr	r1, [pc, #492]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800483e:	4b76      	ldr	r3, [pc, #472]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004844:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484c:	4972      	ldr	r1, [pc, #456]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0320 	and.w	r3, r3, #32
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004860:	4b6d      	ldr	r3, [pc, #436]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004866:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800486e:	496a      	ldr	r1, [pc, #424]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004882:	4b65      	ldr	r3, [pc, #404]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004888:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004890:	4961      	ldr	r1, [pc, #388]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048a4:	4b5c      	ldr	r3, [pc, #368]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	4959      	ldr	r1, [pc, #356]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048c6:	4b54      	ldr	r3, [pc, #336]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d4:	4950      	ldr	r1, [pc, #320]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	4948      	ldr	r1, [pc, #288]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800490a:	4b43      	ldr	r3, [pc, #268]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800490c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004910:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004918:	493f      	ldr	r1, [pc, #252]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d028      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800492c:	4b3a      	ldr	r3, [pc, #232]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800492e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004932:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493a:	4937      	ldr	r1, [pc, #220]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004946:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800494a:	d106      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800494c:	4b32      	ldr	r3, [pc, #200]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	4a31      	ldr	r2, [pc, #196]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004956:	60d3      	str	r3, [r2, #12]
 8004958:	e011      	b.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800495e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004962:	d10c      	bne.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	3304      	adds	r3, #4
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f000 f8b4 	bl	8004ad8 <RCCEx_PLLSAI1_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800497a:	7cfb      	ldrb	r3, [r7, #19]
 800497c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d028      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800498a:	4b23      	ldr	r3, [pc, #140]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800498c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004990:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004998:	491f      	ldr	r1, [pc, #124]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 800499a:	4313      	orrs	r3, r2
 800499c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80049a8:	d106      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049b4:	60d3      	str	r3, [r2, #12]
 80049b6:	e011      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049bc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80049c0:	d10c      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3304      	adds	r3, #4
 80049c6:	2101      	movs	r1, #1
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 f885 	bl	8004ad8 <RCCEx_PLLSAI1_Config>
 80049ce:	4603      	mov	r3, r0
 80049d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80049d8:	7cfb      	ldrb	r3, [r7, #19]
 80049da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02b      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049f6:	4908      	ldr	r1, [pc, #32]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a06:	d109      	bne.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a08:	4b03      	ldr	r3, [pc, #12]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a02      	ldr	r2, [pc, #8]	@ (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8004a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a12:	60d3      	str	r3, [r2, #12]
 8004a14:	e014      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a24:	d10c      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	3304      	adds	r3, #4
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 f853 	bl	8004ad8 <RCCEx_PLLSAI1_Config>
 8004a32:	4603      	mov	r3, r0
 8004a34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a36:	7cfb      	ldrb	r3, [r7, #19]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      {
        /* set overall return value */
        status = ret;
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d01c      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a4c:	4b19      	ldr	r3, [pc, #100]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5a:	4916      	ldr	r1, [pc, #88]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a6a:	d10c      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	2102      	movs	r1, #2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f830 	bl	8004ad8 <RCCEx_PLLSAI1_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x462>
      {
        /* set overall return value */
        status = ret;
 8004a82:	7cfb      	ldrb	r3, [r7, #19]
 8004a84:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a92:	4b08      	ldr	r3, [pc, #32]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a98:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aa0:	4904      	ldr	r1, [pc, #16]	@ (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004aa8:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000

08004ab8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004abc:	4b05      	ldr	r3, [pc, #20]	@ (8004ad4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a04      	ldr	r2, [pc, #16]	@ (8004ad4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ac2:	f043 0304 	orr.w	r3, r3, #4
 8004ac6:	6013      	str	r3, [r2, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000

08004ad8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ae6:	4b74      	ldr	r3, [pc, #464]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f003 0303 	and.w	r3, r3, #3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d018      	beq.n	8004b24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004af2:	4b71      	ldr	r3, [pc, #452]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f003 0203 	and.w	r2, r3, #3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d10d      	bne.n	8004b1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
       ||
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d009      	beq.n	8004b1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 0307 	and.w	r3, r3, #7
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
       ||
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d047      	beq.n	8004bae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
 8004b22:	e044      	b.n	8004bae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d018      	beq.n	8004b5e <RCCEx_PLLSAI1_Config+0x86>
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d825      	bhi.n	8004b7c <RCCEx_PLLSAI1_Config+0xa4>
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d002      	beq.n	8004b3a <RCCEx_PLLSAI1_Config+0x62>
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d009      	beq.n	8004b4c <RCCEx_PLLSAI1_Config+0x74>
 8004b38:	e020      	b.n	8004b7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d11d      	bne.n	8004b82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4a:	e01a      	b.n	8004b82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d116      	bne.n	8004b86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b5c:	e013      	b.n	8004b86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b5e:	4b56      	ldr	r3, [pc, #344]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10f      	bne.n	8004b8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b6a:	4b53      	ldr	r3, [pc, #332]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d109      	bne.n	8004b8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b7a:	e006      	b.n	8004b8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e004      	b.n	8004b8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10d      	bne.n	8004bae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b92:	4b49      	ldr	r3, [pc, #292]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6819      	ldr	r1, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	4943      	ldr	r1, [pc, #268]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d17c      	bne.n	8004cae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bb4:	4b40      	ldr	r3, [pc, #256]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a3f      	ldr	r2, [pc, #252]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc0:	f7fd f9f8 	bl	8001fb4 <HAL_GetTick>
 8004bc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bc6:	e009      	b.n	8004bdc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004bc8:	f7fd f9f4 	bl	8001fb4 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d902      	bls.n	8004bdc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bda:	e005      	b.n	8004be8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bdc:	4b36      	ldr	r3, [pc, #216]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ef      	bne.n	8004bc8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d15f      	bne.n	8004cae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d110      	bne.n	8004c16 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bf4:	4b30      	ldr	r3, [pc, #192]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8004bfc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6892      	ldr	r2, [r2, #8]
 8004c04:	0211      	lsls	r1, r2, #8
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68d2      	ldr	r2, [r2, #12]
 8004c0a:	06d2      	lsls	r2, r2, #27
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	492a      	ldr	r1, [pc, #168]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	610b      	str	r3, [r1, #16]
 8004c14:	e027      	b.n	8004c66 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d112      	bne.n	8004c42 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c1c:	4b26      	ldr	r3, [pc, #152]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004c24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6892      	ldr	r2, [r2, #8]
 8004c2c:	0211      	lsls	r1, r2, #8
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	6912      	ldr	r2, [r2, #16]
 8004c32:	0852      	lsrs	r2, r2, #1
 8004c34:	3a01      	subs	r2, #1
 8004c36:	0552      	lsls	r2, r2, #21
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	491f      	ldr	r1, [pc, #124]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	610b      	str	r3, [r1, #16]
 8004c40:	e011      	b.n	8004c66 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c42:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c4a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6892      	ldr	r2, [r2, #8]
 8004c52:	0211      	lsls	r1, r2, #8
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6952      	ldr	r2, [r2, #20]
 8004c58:	0852      	lsrs	r2, r2, #1
 8004c5a:	3a01      	subs	r2, #1
 8004c5c:	0652      	lsls	r2, r2, #25
 8004c5e:	430a      	orrs	r2, r1
 8004c60:	4915      	ldr	r1, [pc, #84]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c66:	4b14      	ldr	r3, [pc, #80]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a13      	ldr	r2, [pc, #76]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c6c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c70:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c72:	f7fd f99f 	bl	8001fb4 <HAL_GetTick>
 8004c76:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c78:	e009      	b.n	8004c8e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c7a:	f7fd f99b 	bl	8001fb4 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d902      	bls.n	8004c8e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	73fb      	strb	r3, [r7, #15]
          break;
 8004c8c:	e005      	b.n	8004c9a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0ef      	beq.n	8004c7a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d106      	bne.n	8004cae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ca0:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca2:	691a      	ldr	r2, [r3, #16]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	4903      	ldr	r1, [pc, #12]	@ (8004cb8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021000 	.word	0x40021000

08004cbc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 809e 	beq.w	8004e0c <HAL_RTC_Init+0x150>
    assert_param(IS_RTC_BINARY_MODE(hrtc->Init.BinMode));
    assert_param(IS_RTC_BINARY_MIX_BCDU(hrtc->Init.BinMixBcdU));
#endif

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d12a      	bne.n	8004d32 <HAL_RTC_Init+0x76>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2020 	strb.w	r2, [r3, #32]
      hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAEventCallback      */
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8004e18 <HAL_RTC_Init+0x15c>)
 8004ce8:	625a      	str	r2, [r3, #36]	@ 0x24
      hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBEventCallback      */
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a4b      	ldr	r2, [pc, #300]	@ (8004e1c <HAL_RTC_Init+0x160>)
 8004cee:	629a      	str	r2, [r3, #40]	@ 0x28
      hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak TimeStampEventCallback   */
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a4b      	ldr	r2, [pc, #300]	@ (8004e20 <HAL_RTC_Init+0x164>)
 8004cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
      hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak WakeUpTimerEventCallback */
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a4a      	ldr	r2, [pc, #296]	@ (8004e24 <HAL_RTC_Init+0x168>)
 8004cfa:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      hrtc->SSRUEventCallback            =  HAL_RTCEx_SSRUEventCallback;             /* Legacy weak SSRUEventCallback */
#endif

#if defined(RTC_TAMPER1_SUPPORT)
      hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak Tamper1EventCallback     */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8004e28 <HAL_RTC_Init+0x16c>)
 8004d00:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* RTC_TAMPER1_SUPPORT */
      hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak Tamper2EventCallback     */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a49      	ldr	r2, [pc, #292]	@ (8004e2c <HAL_RTC_Init+0x170>)
 8004d06:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined(RTC_TAMPER3_SUPPORT)
      hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak Tamper3EventCallback     */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a49      	ldr	r2, [pc, #292]	@ (8004e30 <HAL_RTC_Init+0x174>)
 8004d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RTC_TAMPER3_SUPPORT */

      if (hrtc->MspInitCallback == NULL)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <HAL_RTC_Init+0x60>
      {
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a46      	ldr	r2, [pc, #280]	@ (8004e34 <HAL_RTC_Init+0x178>)
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      /* Init the low level hardware */
      hrtc->MspInitCallback(hrtc);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3

      if (hrtc->MspDeInitCallback == NULL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d102      	bne.n	8004d32 <HAL_RTC_Init+0x76>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a42      	ldr	r2, [pc, #264]	@ (8004e38 <HAL_RTC_Init+0x17c>)
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0310 	and.w	r3, r3, #16
 8004d44:	2b10      	cmp	r3, #16
 8004d46:	d058      	beq.n	8004dfa <HAL_RTC_Init+0x13e>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	22ca      	movs	r2, #202	@ 0xca
 8004d4e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2253      	movs	r2, #83	@ 0x53
 8004d56:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fb45 	bl	80053e8 <RTC_EnterInitMode>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004d62:	7bfb      	ldrb	r3, [r7, #15]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d127      	bne.n	8004db8 <HAL_RTC_Init+0xfc>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d7a:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6899      	ldr	r1, [r3, #8]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	431a      	orrs	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68d2      	ldr	r2, [r2, #12]
 8004da2:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6919      	ldr	r1, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	041a      	lsls	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fb49 	bl	8005450 <RTC_ExitInitMode>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d113      	bne.n	8004df0 <HAL_RTC_Init+0x134>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0203 	bic.w	r2, r2, #3
 8004dd6:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	69da      	ldr	r2, [r3, #28]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	22ff      	movs	r2, #255	@ 0xff
 8004df6:	625a      	str	r2, [r3, #36]	@ 0x24
 8004df8:	e001      	b.n	8004dfe <HAL_RTC_Init+0x142>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <HAL_RTC_Init+0x150>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	0800538d 	.word	0x0800538d
 8004e1c:	08005535 	.word	0x08005535
 8004e20:	0800550d 	.word	0x0800550d
 8004e24:	08005521 	.word	0x08005521
 8004e28:	08005549 	.word	0x08005549
 8004e2c:	0800555d 	.word	0x0800555d
 8004e30:	08005571 	.word	0x08005571
 8004e34:	0800181d 	.word	0x0800181d
 8004e38:	0800188d 	.word	0x0800188d

08004e3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004e3c:	b590      	push	{r4, r7, lr}
 8004e3e:	b087      	sub	sp, #28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_RTC_SetTime+0x1a>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e08b      	b.n	8004f6e <HAL_RTC_SetTime+0x132>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2202      	movs	r2, #2
 8004e62:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	22ca      	movs	r2, #202	@ 0xca
 8004e6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2253      	movs	r2, #83	@ 0x53
 8004e74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e76:	68f8      	ldr	r0, [r7, #12]
 8004e78:	f000 fab6 	bl	80053e8 <RTC_EnterInitMode>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004e80:	7cfb      	ldrb	r3, [r7, #19]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d163      	bne.n	8004f4e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d126      	bne.n	8004eda <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d102      	bne.n	8004ea0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 fb11 	bl	80054cc <RTC_ByteToBcd2>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb0a 	bl	80054cc <RTC_ByteToBcd2>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ebc:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	789b      	ldrb	r3, [r3, #2]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fb02 	bl	80054cc <RTC_ByteToBcd2>
 8004ec8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004eca:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	78db      	ldrb	r3, [r3, #3]
 8004ed2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	e018      	b.n	8004f0c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d102      	bne.n	8004eee <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2200      	movs	r2, #0
 8004eec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004efa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004f00:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	78db      	ldrb	r3, [r3, #3]
 8004f06:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004f16:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004f1a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	689a      	ldr	r2, [r3, #8]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004f2a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	6899      	ldr	r1, [r3, #8]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	68da      	ldr	r2, [r3, #12]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	431a      	orrs	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	430a      	orrs	r2, r1
 8004f42:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 fa83 	bl	8005450 <RTC_ExitInitMode>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	22ff      	movs	r2, #255	@ 0xff
 8004f54:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004f56:	7cfb      	ldrb	r3, [r7, #19]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004f6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd90      	pop	{r4, r7, pc}

08004f76 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004f76:	b590      	push	{r4, r7, lr}
 8004f78:	b087      	sub	sp, #28
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	60f8      	str	r0, [r7, #12]
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_RTC_SetDate+0x1a>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e075      	b.n	800507c <HAL_RTC_SetDate+0x106>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10e      	bne.n	8004fc4 <HAL_RTC_SetDate+0x4e>
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	f003 0310 	and.w	r3, r3, #16
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	f023 0310 	bic.w	r3, r3, #16
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	330a      	adds	r3, #10
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d11c      	bne.n	8005004 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	78db      	ldrb	r3, [r3, #3]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f000 fa7c 	bl	80054cc <RTC_ByteToBcd2>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 fa75 	bl	80054cc <RTC_ByteToBcd2>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004fe6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	789b      	ldrb	r3, [r3, #2]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fa6d 	bl	80054cc <RTC_ByteToBcd2>
 8004ff2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004ff4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e00e      	b.n	8005022 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	78db      	ldrb	r3, [r3, #3]
 8005008:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	785b      	ldrb	r3, [r3, #1]
 800500e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005010:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005016:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	22ca      	movs	r2, #202	@ 0xca
 8005028:	625a      	str	r2, [r3, #36]	@ 0x24
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2253      	movs	r2, #83	@ 0x53
 8005030:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f000 f9d8 	bl	80053e8 <RTC_EnterInitMode>
 8005038:	4603      	mov	r3, r0
 800503a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800503c:	7cfb      	ldrb	r3, [r7, #19]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10c      	bne.n	800505c <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800504c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005050:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f9fc 	bl	8005450 <RTC_ExitInitMode>
 8005058:	4603      	mov	r3, r0
 800505a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	22ff      	movs	r2, #255	@ 0xff
 8005062:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d103      	bne.n	8005072 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800507a:	7cfb      	ldrb	r3, [r7, #19]
}
 800507c:	4618      	mov	r0, r3
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	bd90      	pop	{r4, r7, pc}

08005084 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b089      	sub	sp, #36	@ 0x24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_RTC_SetAlarm_IT+0x1a>
 800509a:	2302      	movs	r3, #2
 800509c:	e127      	b.n	80052ee <HAL_RTC_SetAlarm_IT+0x26a>
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2202      	movs	r2, #2
 80050aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if (Format == RTC_FORMAT_BIN)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d137      	bne.n	8005124 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2200      	movs	r2, #0
 80050c6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 f9fd 	bl	80054cc <RTC_ByteToBcd2>
 80050d2:	4603      	mov	r3, r0
 80050d4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	785b      	ldrb	r3, [r3, #1]
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f9f6 	bl	80054cc <RTC_ByteToBcd2>
 80050e0:	4603      	mov	r3, r0
 80050e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80050e4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	789b      	ldrb	r3, [r3, #2]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 f9ee 	bl	80054cc <RTC_ByteToBcd2>
 80050f0:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80050f2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	78db      	ldrb	r3, [r3, #3]
 80050fa:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80050fc:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f9e0 	bl	80054cc <RTC_ByteToBcd2>
 800510c:	4603      	mov	r3, r0
 800510e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005110:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005118:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800511e:	4313      	orrs	r3, r2
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e023      	b.n	800516c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800512e:	2b00      	cmp	r3, #0
 8005130:	d102      	bne.n	8005138 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2200      	movs	r2, #0
 8005136:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	785b      	ldrb	r3, [r3, #1]
 8005142:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005144:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800514a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	78db      	ldrb	r3, [r3, #3]
 8005150:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005152:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800515a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800515c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005162:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005168:	4313      	orrs	r3, r2
 800516a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	69db      	ldr	r3, [r3, #28]
 8005174:	4313      	orrs	r3, r2
 8005176:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	22ca      	movs	r2, #202	@ 0xca
 800517e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2253      	movs	r2, #83	@ 0x53
 8005186:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005190:	d14a      	bne.n	8005228 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051a0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 80051b2:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80051b4:	f7fc fefe 	bl	8001fb4 <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80051ba:	e015      	b.n	80051e8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051bc:	f7fc fefa 	bl	8001fb4 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051ca:	d90d      	bls.n	80051e8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	22ff      	movs	r2, #255	@ 0xff
 80051d2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2203      	movs	r2, #3
 80051d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e082      	b.n	80052ee <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0e2      	beq.n	80051bc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005214:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689a      	ldr	r2, [r3, #8]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005224:	609a      	str	r2, [r3, #8]
 8005226:	e049      	b.n	80052bc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689a      	ldr	r2, [r3, #8]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005236:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8005248:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800524a:	f7fc feb3 	bl	8001fb4 <HAL_GetTick>
 800524e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005250:	e015      	b.n	800527e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005252:	f7fc feaf 	bl	8001fb4 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005260:	d90d      	bls.n	800527e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	22ff      	movs	r2, #255	@ 0xff
 8005268:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2203      	movs	r2, #3
 800526e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e037      	b.n	80052ee <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0e2      	beq.n	8005252 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69fa      	ldr	r2, [r7, #28]
 8005292:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689a      	ldr	r2, [r3, #8]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052aa:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80052bc:	4b0e      	ldr	r3, [pc, #56]	@ (80052f8 <HAL_RTC_SetAlarm_IT+0x274>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0d      	ldr	r2, [pc, #52]	@ (80052f8 <HAL_RTC_SetAlarm_IT+0x274>)
 80052c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052c6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80052c8:	4b0b      	ldr	r3, [pc, #44]	@ (80052f8 <HAL_RTC_SetAlarm_IT+0x274>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	@ (80052f8 <HAL_RTC_SetAlarm_IT+0x274>)
 80052ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	22ff      	movs	r2, #255	@ 0xff
 80052da:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3724      	adds	r7, #36	@ 0x24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd90      	pop	{r4, r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40010400 	.word	0x40010400

080052fc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005304:	4b20      	ldr	r3, [pc, #128]	@ (8005388 <HAL_RTC_AlarmIRQHandler+0x8c>)
 8005306:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800530a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d013      	beq.n	8005342 <HAL_RTC_AlarmIRQHandler+0x46>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00c      	beq.n	8005342 <HAL_RTC_AlarmIRQHandler+0x46>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	b2da      	uxtb	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8005338:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	4798      	blx	r3
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d013      	beq.n	8005378 <HAL_RTC_AlarmIRQHandler+0x7c>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00c      	beq.n	8005378 <HAL_RTC_AlarmIRQHandler+0x7c>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	b2da      	uxtb	r2, r3
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 800536e:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40010400 	.word	0x40010400

0800538c <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a0d      	ldr	r2, [pc, #52]	@ (80053e4 <HAL_RTC_WaitForSynchro+0x44>)
 80053ae:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80053b0:	f7fc fe00 	bl	8001fb4 <HAL_GetTick>
 80053b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053b6:	e009      	b.n	80053cc <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053b8:	f7fc fdfc 	bl	8001fb4 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053c6:	d901      	bls.n	80053cc <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e007      	b.n	80053dc <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d0ee      	beq.n	80053b8 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	0003ff5f 	.word	0x0003ff5f

080053e8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d120      	bne.n	8005444 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f04f 32ff 	mov.w	r2, #4294967295
 800540a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800540c:	f7fc fdd2 	bl	8001fb4 <HAL_GetTick>
 8005410:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005412:	e00d      	b.n	8005430 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005414:	f7fc fdce 	bl	8001fb4 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005422:	d905      	bls.n	8005430 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2203      	movs	r2, #3
 800542c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d102      	bne.n	8005444 <RTC_EnterInitMode+0x5c>
 800543e:	7bfb      	ldrb	r3, [r7, #15]
 8005440:	2b03      	cmp	r3, #3
 8005442:	d1e7      	bne.n	8005414 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005444:	7bfb      	ldrb	r3, [r7, #15]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005458:	2300      	movs	r3, #0
 800545a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800545c:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <RTC_ExitInitMode+0x78>)
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	4a19      	ldr	r2, [pc, #100]	@ (80054c8 <RTC_ExitInitMode+0x78>)
 8005462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005466:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005468:	4b17      	ldr	r3, [pc, #92]	@ (80054c8 <RTC_ExitInitMode+0x78>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0320 	and.w	r3, r3, #32
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10c      	bne.n	800548e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ff93 	bl	80053a0 <HAL_RTC_WaitForSynchro>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d01e      	beq.n	80054be <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2203      	movs	r2, #3
 8005484:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e017      	b.n	80054be <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800548e:	4b0e      	ldr	r3, [pc, #56]	@ (80054c8 <RTC_ExitInitMode+0x78>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	4a0d      	ldr	r2, [pc, #52]	@ (80054c8 <RTC_ExitInitMode+0x78>)
 8005494:	f023 0320 	bic.w	r3, r3, #32
 8005498:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff ff80 	bl	80053a0 <HAL_RTC_WaitForSynchro>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2203      	movs	r2, #3
 80054aa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80054b2:	4b05      	ldr	r3, [pc, #20]	@ (80054c8 <RTC_ExitInitMode+0x78>)
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	4a04      	ldr	r2, [pc, #16]	@ (80054c8 <RTC_ExitInitMode+0x78>)
 80054b8:	f043 0320 	orr.w	r3, r3, #32
 80054bc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3710      	adds	r7, #16
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}
 80054c8:	40002800 	.word	0x40002800

080054cc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80054da:	79fb      	ldrb	r3, [r7, #7]
 80054dc:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80054de:	e005      	b.n	80054ec <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80054e6:	7afb      	ldrb	r3, [r7, #11]
 80054e8:	3b0a      	subs	r3, #10
 80054ea:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80054ec:	7afb      	ldrb	r3, [r7, #11]
 80054ee:	2b09      	cmp	r3, #9
 80054f0:	d8f6      	bhi.n	80054e0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	7afb      	ldrb	r3, [r7, #11]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b2db      	uxtb	r3, r3
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e095      	b.n	80056c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80055a6:	d009      	beq.n	80055bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	61da      	str	r2, [r3, #28]
 80055ae:	e005      	b.n	80055bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d106      	bne.n	80055dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7fc f9b2 	bl	8001940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80055fc:	d902      	bls.n	8005604 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	e002      	b.n	800560a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005608:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005612:	d007      	beq.n	8005624 <HAL_SPI_Init+0xa0>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005652:	431a      	orrs	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005666:	ea42 0103 	orr.w	r1, r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	699b      	ldr	r3, [r3, #24]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	f003 0204 	and.w	r2, r3, #4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	f003 0310 	and.w	r3, r3, #16
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80056a0:	ea42 0103 	orr.w	r1, r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ca:	b580      	push	{r7, lr}
 80056cc:	b082      	sub	sp, #8
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	e040      	b.n	800575e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d106      	bne.n	80056f2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7fc fb2d 	bl	8001d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2224      	movs	r2, #36	@ 0x24
 80056f6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0201 	bic.w	r2, r2, #1
 8005706:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fb0b 	bl	8005d2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f8ae 	bl	8005878 <UART_SetConfig>
 800571c:	4603      	mov	r3, r0
 800571e:	2b01      	cmp	r3, #1
 8005720:	d101      	bne.n	8005726 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e01b      	b.n	800575e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005734:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005744:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fb8a 	bl	8005e70 <UART_CheckIdleState>
 800575c:	4603      	mov	r3, r0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b08a      	sub	sp, #40	@ 0x28
 800576a:	af02      	add	r7, sp, #8
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	603b      	str	r3, [r7, #0]
 8005772:	4613      	mov	r3, r2
 8005774:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800577a:	2b20      	cmp	r3, #32
 800577c:	d177      	bne.n	800586e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d002      	beq.n	800578a <HAL_UART_Transmit+0x24>
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e070      	b.n	8005870 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2221      	movs	r2, #33	@ 0x21
 800579a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579c:	f7fc fc0a 	bl	8001fb4 <HAL_GetTick>
 80057a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	88fa      	ldrh	r2, [r7, #6]
 80057a6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057ba:	d108      	bne.n	80057ce <HAL_UART_Transmit+0x68>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d104      	bne.n	80057ce <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80057c4:	2300      	movs	r3, #0
 80057c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	61bb      	str	r3, [r7, #24]
 80057cc:	e003      	b.n	80057d6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057d6:	e02f      	b.n	8005838 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2200      	movs	r2, #0
 80057e0:	2180      	movs	r1, #128	@ 0x80
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f000 fbec 	bl	8005fc0 <UART_WaitOnFlagUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d004      	beq.n	80057f8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2220      	movs	r2, #32
 80057f2:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e03b      	b.n	8005870 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10b      	bne.n	8005816 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	881a      	ldrh	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800580a:	b292      	uxth	r2, r2
 800580c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3302      	adds	r3, #2
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	e007      	b.n	8005826 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	781a      	ldrb	r2, [r3, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1c9      	bne.n	80057d8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	9300      	str	r3, [sp, #0]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	2200      	movs	r2, #0
 800584c:	2140      	movs	r1, #64	@ 0x40
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fbb6 	bl	8005fc0 <UART_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d004      	beq.n	8005864 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2220      	movs	r2, #32
 800585e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e005      	b.n	8005870 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2220      	movs	r2, #32
 8005868:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800586a:	2300      	movs	r3, #0
 800586c:	e000      	b.n	8005870 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800586e:	2302      	movs	r3, #2
  }
}
 8005870:	4618      	mov	r0, r3
 8005872:	3720      	adds	r7, #32
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800587c:	b08a      	sub	sp, #40	@ 0x28
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005882:	2300      	movs	r3, #0
 8005884:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	431a      	orrs	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	431a      	orrs	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	4313      	orrs	r3, r2
 800589e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b9e      	ldr	r3, [pc, #632]	@ (8005b20 <UART_SetConfig+0x2a8>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058b0:	430b      	orrs	r3, r1
 80058b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a93      	ldr	r2, [pc, #588]	@ (8005b24 <UART_SetConfig+0x2ac>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d004      	beq.n	80058e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e0:	4313      	orrs	r3, r2
 80058e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f4:	430a      	orrs	r2, r1
 80058f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a8a      	ldr	r2, [pc, #552]	@ (8005b28 <UART_SetConfig+0x2b0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d126      	bne.n	8005950 <UART_SetConfig+0xd8>
 8005902:	4b8a      	ldr	r3, [pc, #552]	@ (8005b2c <UART_SetConfig+0x2b4>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005908:	f003 0303 	and.w	r3, r3, #3
 800590c:	2b03      	cmp	r3, #3
 800590e:	d81b      	bhi.n	8005948 <UART_SetConfig+0xd0>
 8005910:	a201      	add	r2, pc, #4	@ (adr r2, 8005918 <UART_SetConfig+0xa0>)
 8005912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005916:	bf00      	nop
 8005918:	08005929 	.word	0x08005929
 800591c:	08005939 	.word	0x08005939
 8005920:	08005931 	.word	0x08005931
 8005924:	08005941 	.word	0x08005941
 8005928:	2301      	movs	r3, #1
 800592a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800592e:	e0ab      	b.n	8005a88 <UART_SetConfig+0x210>
 8005930:	2302      	movs	r3, #2
 8005932:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005936:	e0a7      	b.n	8005a88 <UART_SetConfig+0x210>
 8005938:	2304      	movs	r3, #4
 800593a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593e:	e0a3      	b.n	8005a88 <UART_SetConfig+0x210>
 8005940:	2308      	movs	r3, #8
 8005942:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005946:	e09f      	b.n	8005a88 <UART_SetConfig+0x210>
 8005948:	2310      	movs	r3, #16
 800594a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800594e:	e09b      	b.n	8005a88 <UART_SetConfig+0x210>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a76      	ldr	r2, [pc, #472]	@ (8005b30 <UART_SetConfig+0x2b8>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d138      	bne.n	80059cc <UART_SetConfig+0x154>
 800595a:	4b74      	ldr	r3, [pc, #464]	@ (8005b2c <UART_SetConfig+0x2b4>)
 800595c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005960:	f003 030c 	and.w	r3, r3, #12
 8005964:	2b0c      	cmp	r3, #12
 8005966:	d82d      	bhi.n	80059c4 <UART_SetConfig+0x14c>
 8005968:	a201      	add	r2, pc, #4	@ (adr r2, 8005970 <UART_SetConfig+0xf8>)
 800596a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596e:	bf00      	nop
 8005970:	080059a5 	.word	0x080059a5
 8005974:	080059c5 	.word	0x080059c5
 8005978:	080059c5 	.word	0x080059c5
 800597c:	080059c5 	.word	0x080059c5
 8005980:	080059b5 	.word	0x080059b5
 8005984:	080059c5 	.word	0x080059c5
 8005988:	080059c5 	.word	0x080059c5
 800598c:	080059c5 	.word	0x080059c5
 8005990:	080059ad 	.word	0x080059ad
 8005994:	080059c5 	.word	0x080059c5
 8005998:	080059c5 	.word	0x080059c5
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059bd 	.word	0x080059bd
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059aa:	e06d      	b.n	8005a88 <UART_SetConfig+0x210>
 80059ac:	2302      	movs	r3, #2
 80059ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059b2:	e069      	b.n	8005a88 <UART_SetConfig+0x210>
 80059b4:	2304      	movs	r3, #4
 80059b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ba:	e065      	b.n	8005a88 <UART_SetConfig+0x210>
 80059bc:	2308      	movs	r3, #8
 80059be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059c2:	e061      	b.n	8005a88 <UART_SetConfig+0x210>
 80059c4:	2310      	movs	r3, #16
 80059c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80059ca:	e05d      	b.n	8005a88 <UART_SetConfig+0x210>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a58      	ldr	r2, [pc, #352]	@ (8005b34 <UART_SetConfig+0x2bc>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d125      	bne.n	8005a22 <UART_SetConfig+0x1aa>
 80059d6:	4b55      	ldr	r3, [pc, #340]	@ (8005b2c <UART_SetConfig+0x2b4>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80059e0:	2b30      	cmp	r3, #48	@ 0x30
 80059e2:	d016      	beq.n	8005a12 <UART_SetConfig+0x19a>
 80059e4:	2b30      	cmp	r3, #48	@ 0x30
 80059e6:	d818      	bhi.n	8005a1a <UART_SetConfig+0x1a2>
 80059e8:	2b20      	cmp	r3, #32
 80059ea:	d00a      	beq.n	8005a02 <UART_SetConfig+0x18a>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	d814      	bhi.n	8005a1a <UART_SetConfig+0x1a2>
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <UART_SetConfig+0x182>
 80059f4:	2b10      	cmp	r3, #16
 80059f6:	d008      	beq.n	8005a0a <UART_SetConfig+0x192>
 80059f8:	e00f      	b.n	8005a1a <UART_SetConfig+0x1a2>
 80059fa:	2300      	movs	r3, #0
 80059fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a00:	e042      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a02:	2302      	movs	r3, #2
 8005a04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a08:	e03e      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a0a:	2304      	movs	r3, #4
 8005a0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a10:	e03a      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a12:	2308      	movs	r3, #8
 8005a14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a18:	e036      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a1a:	2310      	movs	r3, #16
 8005a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a20:	e032      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a3f      	ldr	r2, [pc, #252]	@ (8005b24 <UART_SetConfig+0x2ac>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d12a      	bne.n	8005a82 <UART_SetConfig+0x20a>
 8005a2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b2c <UART_SetConfig+0x2b4>)
 8005a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a32:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a36:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a3a:	d01a      	beq.n	8005a72 <UART_SetConfig+0x1fa>
 8005a3c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005a40:	d81b      	bhi.n	8005a7a <UART_SetConfig+0x202>
 8005a42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a46:	d00c      	beq.n	8005a62 <UART_SetConfig+0x1ea>
 8005a48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a4c:	d815      	bhi.n	8005a7a <UART_SetConfig+0x202>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <UART_SetConfig+0x1e2>
 8005a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a56:	d008      	beq.n	8005a6a <UART_SetConfig+0x1f2>
 8005a58:	e00f      	b.n	8005a7a <UART_SetConfig+0x202>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a60:	e012      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a62:	2302      	movs	r3, #2
 8005a64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a68:	e00e      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a6a:	2304      	movs	r3, #4
 8005a6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a70:	e00a      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a72:	2308      	movs	r3, #8
 8005a74:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a78:	e006      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a7a:	2310      	movs	r3, #16
 8005a7c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a80:	e002      	b.n	8005a88 <UART_SetConfig+0x210>
 8005a82:	2310      	movs	r3, #16
 8005a84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	@ (8005b24 <UART_SetConfig+0x2ac>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	f040 808a 	bne.w	8005ba8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a94:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d824      	bhi.n	8005ae6 <UART_SetConfig+0x26e>
 8005a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa4 <UART_SetConfig+0x22c>)
 8005a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa2:	bf00      	nop
 8005aa4:	08005ac9 	.word	0x08005ac9
 8005aa8:	08005ae7 	.word	0x08005ae7
 8005aac:	08005ad1 	.word	0x08005ad1
 8005ab0:	08005ae7 	.word	0x08005ae7
 8005ab4:	08005ad7 	.word	0x08005ad7
 8005ab8:	08005ae7 	.word	0x08005ae7
 8005abc:	08005ae7 	.word	0x08005ae7
 8005ac0:	08005ae7 	.word	0x08005ae7
 8005ac4:	08005adf 	.word	0x08005adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ac8:	f7fe fd20 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8005acc:	61f8      	str	r0, [r7, #28]
        break;
 8005ace:	e010      	b.n	8005af2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ad0:	4b19      	ldr	r3, [pc, #100]	@ (8005b38 <UART_SetConfig+0x2c0>)
 8005ad2:	61fb      	str	r3, [r7, #28]
        break;
 8005ad4:	e00d      	b.n	8005af2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ad6:	f7fe fc81 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8005ada:	61f8      	str	r0, [r7, #28]
        break;
 8005adc:	e009      	b.n	8005af2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ae2:	61fb      	str	r3, [r7, #28]
        break;
 8005ae4:	e005      	b.n	8005af2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005af0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8109 	beq.w	8005d0c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685a      	ldr	r2, [r3, #4]
 8005afe:	4613      	mov	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	4413      	add	r3, r2
 8005b04:	69fa      	ldr	r2, [r7, #28]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d305      	bcc.n	8005b16 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b10:	69fa      	ldr	r2, [r7, #28]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d912      	bls.n	8005b3c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b1c:	e0f6      	b.n	8005d0c <UART_SetConfig+0x494>
 8005b1e:	bf00      	nop
 8005b20:	efff69f3 	.word	0xefff69f3
 8005b24:	40008000 	.word	0x40008000
 8005b28:	40013800 	.word	0x40013800
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	40004400 	.word	0x40004400
 8005b34:	40004800 	.word	0x40004800
 8005b38:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	461c      	mov	r4, r3
 8005b42:	4615      	mov	r5, r2
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	022b      	lsls	r3, r5, #8
 8005b4e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005b52:	0222      	lsls	r2, r4, #8
 8005b54:	68f9      	ldr	r1, [r7, #12]
 8005b56:	6849      	ldr	r1, [r1, #4]
 8005b58:	0849      	lsrs	r1, r1, #1
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	4688      	mov	r8, r1
 8005b5e:	4681      	mov	r9, r0
 8005b60:	eb12 0a08 	adds.w	sl, r2, r8
 8005b64:	eb43 0b09 	adc.w	fp, r3, r9
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b76:	4650      	mov	r0, sl
 8005b78:	4659      	mov	r1, fp
 8005b7a:	f7fb f815 	bl	8000ba8 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4613      	mov	r3, r2
 8005b84:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b8c:	d308      	bcc.n	8005ba0 <UART_SetConfig+0x328>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b94:	d204      	bcs.n	8005ba0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	60da      	str	r2, [r3, #12]
 8005b9e:	e0b5      	b.n	8005d0c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ba6:	e0b1      	b.n	8005d0c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	69db      	ldr	r3, [r3, #28]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb0:	d15d      	bne.n	8005c6e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8005bb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d827      	bhi.n	8005c0a <UART_SetConfig+0x392>
 8005bba:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc0 <UART_SetConfig+0x348>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005be5 	.word	0x08005be5
 8005bc4:	08005bed 	.word	0x08005bed
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	08005c0b 	.word	0x08005c0b
 8005bd0:	08005bfb 	.word	0x08005bfb
 8005bd4:	08005c0b 	.word	0x08005c0b
 8005bd8:	08005c0b 	.word	0x08005c0b
 8005bdc:	08005c0b 	.word	0x08005c0b
 8005be0:	08005c03 	.word	0x08005c03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be4:	f7fe fc92 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8005be8:	61f8      	str	r0, [r7, #28]
        break;
 8005bea:	e014      	b.n	8005c16 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bec:	f7fe fca4 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8005bf0:	61f8      	str	r0, [r7, #28]
        break;
 8005bf2:	e010      	b.n	8005c16 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf4:	4b4c      	ldr	r3, [pc, #304]	@ (8005d28 <UART_SetConfig+0x4b0>)
 8005bf6:	61fb      	str	r3, [r7, #28]
        break;
 8005bf8:	e00d      	b.n	8005c16 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfa:	f7fe fbef 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8005bfe:	61f8      	str	r0, [r7, #28]
        break;
 8005c00:	e009      	b.n	8005c16 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c06:	61fb      	str	r3, [r7, #28]
        break;
 8005c08:	e005      	b.n	8005c16 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005c14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d077      	beq.n	8005d0c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	005a      	lsls	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	085b      	lsrs	r3, r3, #1
 8005c26:	441a      	add	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b0f      	cmp	r3, #15
 8005c36:	d916      	bls.n	8005c66 <UART_SetConfig+0x3ee>
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c3e:	d212      	bcs.n	8005c66 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f023 030f 	bic.w	r3, r3, #15
 8005c48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	8afb      	ldrh	r3, [r7, #22]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	8afa      	ldrh	r2, [r7, #22]
 8005c62:	60da      	str	r2, [r3, #12]
 8005c64:	e052      	b.n	8005d0c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005c6c:	e04e      	b.n	8005d0c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d827      	bhi.n	8005cc6 <UART_SetConfig+0x44e>
 8005c76:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <UART_SetConfig+0x404>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	08005cc7 	.word	0x08005cc7
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005cc7 	.word	0x08005cc7
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005cc7 	.word	0x08005cc7
 8005c9c:	08005cbf 	.word	0x08005cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f7fe fc34 	bl	800450c <HAL_RCC_GetPCLK1Freq>
 8005ca4:	61f8      	str	r0, [r7, #28]
        break;
 8005ca6:	e014      	b.n	8005cd2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fe fc46 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8005cac:	61f8      	str	r0, [r7, #28]
        break;
 8005cae:	e010      	b.n	8005cd2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d28 <UART_SetConfig+0x4b0>)
 8005cb2:	61fb      	str	r3, [r7, #28]
        break;
 8005cb4:	e00d      	b.n	8005cd2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fe fb91 	bl	80043dc <HAL_RCC_GetSysClockFreq>
 8005cba:	61f8      	str	r0, [r7, #28]
        break;
 8005cbc:	e009      	b.n	8005cd2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cc2:	61fb      	str	r3, [r7, #28]
        break;
 8005cc4:	e005      	b.n	8005cd2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005cd0:	bf00      	nop
    }

    if (pclk != 0U)
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d019      	beq.n	8005d0c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	085a      	lsrs	r2, r3, #1
 8005cde:	69fb      	ldr	r3, [r7, #28]
 8005ce0:	441a      	add	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b0f      	cmp	r3, #15
 8005cf0:	d909      	bls.n	8005d06 <UART_SetConfig+0x48e>
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf8:	d205      	bcs.n	8005d06 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60da      	str	r2, [r3, #12]
 8005d04:	e002      	b.n	8005d0c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005d18:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3728      	adds	r7, #40	@ 0x28
 8005d20:	46bd      	mov	sp, r7
 8005d22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d26:	bf00      	nop
 8005d28:	00f42400 	.word	0x00f42400

08005d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00a      	beq.n	8005d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00a      	beq.n	8005d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9e:	f003 0304 	and.w	r3, r3, #4
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00a      	beq.n	8005dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	430a      	orrs	r2, r1
 8005dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00a      	beq.n	8005e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d01a      	beq.n	8005e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e2a:	d10a      	bne.n	8005e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	430a      	orrs	r2, r1
 8005e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00a      	beq.n	8005e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	605a      	str	r2, [r3, #4]
  }
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b098      	sub	sp, #96	@ 0x60
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e80:	f7fc f898 	bl	8001fb4 <HAL_GetTick>
 8005e84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d12e      	bne.n	8005ef2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f88c 	bl	8005fc0 <UART_WaitOnFlagUntilTimeout>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d021      	beq.n	8005ef2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ebc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ecc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ece:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ed2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ed4:	e841 2300 	strex	r3, r2, [r1]
 8005ed8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1e6      	bne.n	8005eae <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e062      	b.n	8005fb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d149      	bne.n	8005f94 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f856 	bl	8005fc0 <UART_WaitOnFlagUntilTimeout>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d03c      	beq.n	8005f94 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	e853 3f00 	ldrex	r3, [r3]
 8005f26:	623b      	str	r3, [r7, #32]
   return(result);
 8005f28:	6a3b      	ldr	r3, [r7, #32]
 8005f2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f38:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f40:	e841 2300 	strex	r3, r2, [r1]
 8005f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1e6      	bne.n	8005f1a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	3308      	adds	r3, #8
 8005f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f023 0301 	bic.w	r3, r3, #1
 8005f62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3308      	adds	r3, #8
 8005f6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f6c:	61fa      	str	r2, [r7, #28]
 8005f6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	69b9      	ldr	r1, [r7, #24]
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	617b      	str	r3, [r7, #20]
   return(result);
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e5      	bne.n	8005f4c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e011      	b.n	8005fb8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005fb6:	2300      	movs	r3, #0
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3758      	adds	r7, #88	@ 0x58
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd0:	e04f      	b.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d04b      	beq.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fda:	f7fb ffeb 	bl	8001fb4 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d302      	bcc.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e04e      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0304 	and.w	r3, r3, #4
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d037      	beq.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b80      	cmp	r3, #128	@ 0x80
 8006006:	d034      	beq.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b40      	cmp	r3, #64	@ 0x40
 800600c:	d031      	beq.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f003 0308 	and.w	r3, r3, #8
 8006018:	2b08      	cmp	r3, #8
 800601a:	d110      	bne.n	800603e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2208      	movs	r2, #8
 8006022:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 f838 	bl	800609a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2208      	movs	r2, #8
 800602e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e029      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006048:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800604c:	d111      	bne.n	8006072 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006056:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f000 f81e 	bl	800609a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2220      	movs	r2, #32
 8006062:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e00f      	b.n	8006092 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	4013      	ands	r3, r2
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	bf0c      	ite	eq
 8006082:	2301      	moveq	r3, #1
 8006084:	2300      	movne	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	461a      	mov	r2, r3
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	429a      	cmp	r2, r3
 800608e:	d0a0      	beq.n	8005fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006090:	2300      	movs	r3, #0
}
 8006092:	4618      	mov	r0, r3
 8006094:	3710      	adds	r7, #16
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800609a:	b480      	push	{r7}
 800609c:	b095      	sub	sp, #84	@ 0x54
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060aa:	e853 3f00 	ldrex	r3, [r3]
 80060ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80060b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80060c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80060c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80060c8:	e841 2300 	strex	r3, r2, [r1]
 80060cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80060ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1e6      	bne.n	80060a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3308      	adds	r3, #8
 80060da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	f023 0301 	bic.w	r3, r3, #1
 80060ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3308      	adds	r3, #8
 80060f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e5      	bne.n	80060d4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800610c:	2b01      	cmp	r3, #1
 800610e:	d118      	bne.n	8006142 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	e853 3f00 	ldrex	r3, [r3]
 800611c:	60bb      	str	r3, [r7, #8]
   return(result);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f023 0310 	bic.w	r3, r3, #16
 8006124:	647b      	str	r3, [r7, #68]	@ 0x44
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	461a      	mov	r2, r3
 800612c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612e:	61bb      	str	r3, [r7, #24]
 8006130:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006132:	6979      	ldr	r1, [r7, #20]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	e841 2300 	strex	r3, r2, [r1]
 800613a:	613b      	str	r3, [r7, #16]
   return(result);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d1e6      	bne.n	8006110 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2220      	movs	r2, #32
 8006146:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006156:	bf00      	nop
 8006158:	3754      	adds	r7, #84	@ 0x54
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <HAL_WWDG_IRQHandler>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
void HAL_WWDG_IRQHandler(WWDG_HandleTypeDef *hwwdg)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  /* Check if Early Wakeup Interrupt is enable */
  if (__HAL_WWDG_GET_IT_SOURCE(hwwdg, WWDG_IT_EWI) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006178:	d10e      	bne.n	8006198 <HAL_WWDG_IRQHandler+0x36>
  {
    /* Check if WWDG Early Wakeup Interrupt occurred */
    if (__HAL_WWDG_GET_FLAG(hwwdg, WWDG_FLAG_EWIF) != RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b01      	cmp	r3, #1
 8006186:	d107      	bne.n	8006198 <HAL_WWDG_IRQHandler+0x36>
    {
      /* Clear the WWDG Early Wakeup flag */
      __HAL_WWDG_CLEAR_FLAG(hwwdg, WWDG_FLAG_EWIF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f06f 0201 	mvn.w	r2, #1
 8006190:	609a      	str	r2, [r3, #8]
#if (USE_HAL_WWDG_REGISTER_CALLBACKS == 1)
      /* Early Wakeup registered callback */
      hwwdg->EwiCallback(hwwdg);
#else
      /* Early Wakeup callback */
      HAL_WWDG_EarlyWakeupCallback(hwwdg);
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f804 	bl	80061a0 <HAL_WWDG_EarlyWakeupCallback>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */
    }
  }
}
 8006198:	bf00      	nop
 800619a:	3708      	adds	r7, #8
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <HAL_WWDG_EarlyWakeupCallback>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval None
  */
__weak void HAL_WWDG_EarlyWakeupCallback(WWDG_HandleTypeDef *hwwdg)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(hwwdg);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_WWDG_EarlyWakeupCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <i2c_init>:

/**
 * @brief Initializes the I2C peripheral.
 * @note  This is a placeholder. Implement with your hardware's I2C init code.
 */
static void i2c_init(void) {
 80061b4:	b480      	push	{r7}
 80061b6:	af00      	add	r7, sp, #0
    // Example: i2c_master_init(I2C_NUM_0, ...);
}
 80061b8:	bf00      	nop
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <i2c_write>:
 * @param reg_addr The register address to write to.
 * @param data A pointer to the data buffer to write.
 * @param len The number of bytes to write.
 * @return true on success, false on failure.
 */
static bool i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, uint16_t len) {
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b084      	sub	sp, #16
 80061c6:	af02      	add	r7, sp, #8
 80061c8:	603a      	str	r2, [r7, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	4603      	mov	r3, r0
 80061ce:	71fb      	strb	r3, [r7, #7]
 80061d0:	460b      	mov	r3, r1
 80061d2:	71bb      	strb	r3, [r7, #6]
 80061d4:	4613      	mov	r3, r2
 80061d6:	80bb      	strh	r3, [r7, #4]
    // This is a placeholder.
    // Implement this function using your platform's I2C write function.
    // It should handle the START, address, register, data, and STOP conditions.
     return I2C1_MemWrite(dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK;
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	b29b      	uxth	r3, r3
 80061dc:	005b      	lsls	r3, r3, #1
 80061de:	b298      	uxth	r0, r3
 80061e0:	79bb      	ldrb	r3, [r7, #6]
 80061e2:	b299      	uxth	r1, r3
 80061e4:	2364      	movs	r3, #100	@ 0x64
 80061e6:	9301      	str	r3, [sp, #4]
 80061e8:	88bb      	ldrh	r3, [r7, #4]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f7fb f892 	bl	8001318 <I2C1_MemWrite>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bf0c      	ite	eq
 80061fa:	2301      	moveq	r3, #1
 80061fc:	2300      	movne	r3, #0
 80061fe:	b2db      	uxtb	r3, r3
    //return true; // Assume success for now
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <i2c_read>:
 * @param reg_addr The register address to read from.
 * @param data A pointer to the buffer to store the read data.
 * @param len The number of bytes to read.
 * @return true on success, false on failure.
 */
static bool i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t* data, uint16_t len) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af02      	add	r7, sp, #8
 800620e:	603a      	str	r2, [r7, #0]
 8006210:	461a      	mov	r2, r3
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
 8006216:	460b      	mov	r3, r1
 8006218:	71bb      	strb	r3, [r7, #6]
 800621a:	4613      	mov	r3, r2
 800621c:	80bb      	strh	r3, [r7, #4]
    // This is a placeholder.
    // Implement this function using your platform's I2C read function.
    return I2C1_MemRead(dev_addr << 1, reg_addr, I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK;
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	b29b      	uxth	r3, r3
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	b298      	uxth	r0, r3
 8006226:	79bb      	ldrb	r3, [r7, #6]
 8006228:	b299      	uxth	r1, r3
 800622a:	2364      	movs	r3, #100	@ 0x64
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	88bb      	ldrh	r3, [r7, #4]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2201      	movs	r2, #1
 8006236:	f7fb f88d 	bl	8001354 <I2C1_MemRead>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	bf0c      	ite	eq
 8006240:	2301      	moveq	r3, #1
 8006242:	2300      	movne	r3, #0
 8006244:	b2db      	uxtb	r3, r3
    //return true; // Assume success for now
}
 8006246:	4618      	mov	r0, r3
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <delay_ms>:
/**
 * @brief Delays execution for a specified number of milliseconds.
 * @note This is a placeholder. Implement with your hardware's delay function.
 * @param ms Milliseconds to delay.
 */
static void delay_ms(uint32_t ms) {
 800624e:	b480      	push	{r7}
 8006250:	b085      	sub	sp, #20
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
    // Example: vTaskDelay(pdMS_TO_TICKS(ms)); or HAL_Delay(ms);
    volatile uint32_t i, j;
    for (i = 0; i < ms; i++) {
 8006256:	2300      	movs	r3, #0
 8006258:	60fb      	str	r3, [r7, #12]
 800625a:	e00d      	b.n	8006278 <delay_ms+0x2a>
        for (j = 0; j < 1000; j++) {
 800625c:	2300      	movs	r3, #0
 800625e:	60bb      	str	r3, [r7, #8]
 8006260:	e003      	b.n	800626a <delay_ms+0x1c>
            __asm__("nop");
 8006262:	bf00      	nop
        for (j = 0; j < 1000; j++) {
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	3301      	adds	r3, #1
 8006268:	60bb      	str	r3, [r7, #8]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006270:	d3f7      	bcc.n	8006262 <delay_ms+0x14>
    for (i = 0; i < ms; i++) {
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d8ed      	bhi.n	800625c <delay_ms+0xe>
        }
    }
}
 8006280:	bf00      	nop
 8006282:	bf00      	nop
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <MAX17260_Register_WriteSingle>:
//=============================================================================

/**
 * @brief Writes a single 16-bit value to a MAX17260 register.
 */
static bool MAX17260_Register_WriteSingle(uint8_t reg, uint16_t value) {
 800628e:	b580      	push	{r7, lr}
 8006290:	b084      	sub	sp, #16
 8006292:	af00      	add	r7, sp, #0
 8006294:	4603      	mov	r3, r0
 8006296:	460a      	mov	r2, r1
 8006298:	71fb      	strb	r3, [r7, #7]
 800629a:	4613      	mov	r3, r2
 800629c:	80bb      	strh	r3, [r7, #4]
    uint8_t buffer[2];
    // Little-endian format
    buffer[0] = value & 0xFF;
 800629e:	88bb      	ldrh	r3, [r7, #4]
 80062a0:	b2db      	uxtb	r3, r3
 80062a2:	733b      	strb	r3, [r7, #12]
    buffer[1] = (value >> 8) & 0xFF;
 80062a4:	88bb      	ldrh	r3, [r7, #4]
 80062a6:	0a1b      	lsrs	r3, r3, #8
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	737b      	strb	r3, [r7, #13]
    return i2c_write(MAX17260_I2C_ADDRESS, reg, buffer, 2);
 80062ae:	f107 020c 	add.w	r2, r7, #12
 80062b2:	79f9      	ldrb	r1, [r7, #7]
 80062b4:	2302      	movs	r3, #2
 80062b6:	2036      	movs	r0, #54	@ 0x36
 80062b8:	f7ff ff83 	bl	80061c2 <i2c_write>
 80062bc:	4603      	mov	r3, r0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <MAX17260_Register_ReadSingle>:

/**
 * @brief Reads a single 16-bit value from a MAX17260 register.
 */
static bool MAX17260_Register_ReadSingle(uint8_t reg, uint16_t* value) {
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b084      	sub	sp, #16
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	4603      	mov	r3, r0
 80062ce:	6039      	str	r1, [r7, #0]
 80062d0:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[2];
    if (i2c_read(MAX17260_I2C_ADDRESS, reg, buffer, 2)) {
 80062d2:	f107 020c 	add.w	r2, r7, #12
 80062d6:	79f9      	ldrb	r1, [r7, #7]
 80062d8:	2302      	movs	r3, #2
 80062da:	2036      	movs	r0, #54	@ 0x36
 80062dc:	f7ff ff94 	bl	8006208 <i2c_read>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00c      	beq.n	8006300 <MAX17260_Register_ReadSingle+0x3a>
        // Little-endian format
        *value = (uint16_t)buffer[0] | ((uint16_t)buffer[1] << 8);
 80062e6:	7b3b      	ldrb	r3, [r7, #12]
 80062e8:	b21a      	sxth	r2, r3
 80062ea:	7b7b      	ldrb	r3, [r7, #13]
 80062ec:	b21b      	sxth	r3, r3
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	b21b      	sxth	r3, r3
 80062f2:	4313      	orrs	r3, r2
 80062f4:	b21b      	sxth	r3, r3
 80062f6:	b29a      	uxth	r2, r3
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	801a      	strh	r2, [r3, #0]
        return true;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e003      	b.n	8006308 <MAX17260_Register_ReadSingle+0x42>
    }
    *value = 0;
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2200      	movs	r2, #0
 8006304:	801a      	strh	r2, [r3, #0]
    return false;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <IsPOR>:

/**
 * @brief Checks if the MAX17260 has experienced a Power-On-Reset.
 */
static bool IsPOR(void) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
    uint16_t status_val = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	80fb      	strh	r3, [r7, #6]
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 800631a:	1dbb      	adds	r3, r7, #6
 800631c:	4619      	mov	r1, r3
 800631e:	2000      	movs	r0, #0
 8006320:	f7ff ffd1 	bl	80062c6 <MAX17260_Register_ReadSingle>
    // POR bit is bit 1 of the STATUS register
    return (status_val & (1 << 1)) != 0;
 8006324:	88fb      	ldrh	r3, [r7, #6]
 8006326:	f003 0302 	and.w	r3, r3, #2
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf14      	ite	ne
 800632e:	2301      	movne	r3, #1
 8006330:	2300      	moveq	r3, #0
 8006332:	b2db      	uxtb	r3, r3
}
 8006334:	4618      	mov	r0, r3
 8006336:	3708      	adds	r7, #8
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <ClearPOR>:

/**
 * @brief Clears the Power-On-Reset flag in the STATUS register.
 */
static void ClearPOR(void) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
    uint16_t status_val = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	80fb      	strh	r3, [r7, #6]
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 8006346:	1dbb      	adds	r3, r7, #6
 8006348:	4619      	mov	r1, r3
 800634a:	2000      	movs	r0, #0
 800634c:	f7ff ffbb 	bl	80062c6 <MAX17260_Register_ReadSingle>
    // Write the value back, but with the POR bit cleared
    MAX17260_Register_WriteSingle(STATUS, status_val & ~(1 << 1));
 8006350:	88fb      	ldrh	r3, [r7, #6]
 8006352:	f023 0302 	bic.w	r3, r3, #2
 8006356:	b29b      	uxth	r3, r3
 8006358:	4619      	mov	r1, r3
 800635a:	2000      	movs	r0, #0
 800635c:	f7ff ff97 	bl	800628e <MAX17260_Register_WriteSingle>
}
 8006360:	bf00      	nop
 8006362:	3708      	adds	r7, #8
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <Print_MAX1726x_Config2>:
// MAX17260 DRIVER DEBUG
//=============================================================================


void Print_MAX1726x_Config2(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
    uint16_t config2_reg;

    // Read the current value from the config2 register
    // maxim_max1726x_read_reg(MAX1726X_CONFIG2_REG, &config2_reg);
    MAX17260_Register_ReadSingle(CONFIG2, &config2_reg);
 800636e:	1dbb      	adds	r3, r7, #6
 8006370:	4619      	mov	r1, r3
 8006372:	20bb      	movs	r0, #187	@ 0xbb
 8006374:	f7ff ffa7 	bl	80062c6 <MAX17260_Register_ReadSingle>

    UART_Printf("\r\n--- MAX1726x Config2 Register [0x%04X] ---\r\n", config2_reg);
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	4619      	mov	r1, r3
 800637c:	4849      	ldr	r0, [pc, #292]	@ (80064a4 <Print_MAX1726x_Config2+0x13c>)
 800637e:	f7fb f987 	bl	8001690 <UART_Printf>
    UART_Printf("This register controls advanced model and IC features.\r\n");
 8006382:	4849      	ldr	r0, [pc, #292]	@ (80064a8 <Print_MAX1726x_Config2+0x140>)
 8006384:	f7fb f984 	bl	8001690 <UART_Printf>
    UART_Printf("----------------------------------------\r\n");
 8006388:	4848      	ldr	r0, [pc, #288]	@ (80064ac <Print_MAX1726x_Config2+0x144>)
 800638a:	f7fb f981 	bl	8001690 <UART_Printf>

    // Bit 15: Enable Dynamic Power
    UART_Printf("[Bit 15] DP_EN    (Dynamic Power Enable) : %s\r\n",
                (config2_reg & (1 << 15)) ? "ENABLED" : "DISABLED");
 800638e:	88fb      	ldrh	r3, [r7, #6]
 8006390:	b21b      	sxth	r3, r3
    UART_Printf("[Bit 15] DP_EN    (Dynamic Power Enable) : %s\r\n",
 8006392:	2b00      	cmp	r3, #0
 8006394:	da01      	bge.n	800639a <Print_MAX1726x_Config2+0x32>
 8006396:	4b46      	ldr	r3, [pc, #280]	@ (80064b0 <Print_MAX1726x_Config2+0x148>)
 8006398:	e000      	b.n	800639c <Print_MAX1726x_Config2+0x34>
 800639a:	4b46      	ldr	r3, [pc, #280]	@ (80064b4 <Print_MAX1726x_Config2+0x14c>)
 800639c:	4619      	mov	r1, r3
 800639e:	4846      	ldr	r0, [pc, #280]	@ (80064b8 <Print_MAX1726x_Config2+0x150>)
 80063a0:	f7fb f976 	bl	8001690 <UART_Printf>

    // Bit 14: Enable AtRate Function
    UART_Printf("[Bit 14] AtRateEn (AtRate Function En)  : %s\r\n",
                (config2_reg & (1 << 14)) ? "ENABLED" : "DISABLED");
 80063a4:	88fb      	ldrh	r3, [r7, #6]
 80063a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    UART_Printf("[Bit 14] AtRateEn (AtRate Function En)  : %s\r\n",
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d001      	beq.n	80063b2 <Print_MAX1726x_Config2+0x4a>
 80063ae:	4b40      	ldr	r3, [pc, #256]	@ (80064b0 <Print_MAX1726x_Config2+0x148>)
 80063b0:	e000      	b.n	80063b4 <Print_MAX1726x_Config2+0x4c>
 80063b2:	4b40      	ldr	r3, [pc, #256]	@ (80064b4 <Print_MAX1726x_Config2+0x14c>)
 80063b4:	4619      	mov	r1, r3
 80063b6:	4841      	ldr	r0, [pc, #260]	@ (80064bc <Print_MAX1726x_Config2+0x154>)
 80063b8:	f7fb f96a 	bl	8001690 <UART_Printf>
                
    // Bit 12: Enable Constant-Power Load Model
    UART_Printf("[Bit 12] CP_EN    (Constant Power Model) : %s\r\n",
                (config2_reg & (1 << 12)) ? "ENABLED" : "DISABLED");
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    UART_Printf("[Bit 12] CP_EN    (Constant Power Model) : %s\r\n",
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <Print_MAX1726x_Config2+0x62>
 80063c6:	4b3a      	ldr	r3, [pc, #232]	@ (80064b0 <Print_MAX1726x_Config2+0x148>)
 80063c8:	e000      	b.n	80063cc <Print_MAX1726x_Config2+0x64>
 80063ca:	4b3a      	ldr	r3, [pc, #232]	@ (80064b4 <Print_MAX1726x_Config2+0x14c>)
 80063cc:	4619      	mov	r1, r3
 80063ce:	483c      	ldr	r0, [pc, #240]	@ (80064c0 <Print_MAX1726x_Config2+0x158>)
 80063d0:	f7fb f95e 	bl	8001690 <UART_Printf>
                
    // Bit 10: I2C Timeout Disable
    UART_Printf("[Bit 10] TMOUT_DIS(I2C Timeout Disable)  : %s\r\n",
                (config2_reg & (1 << 10)) ? "DISABLED" : "ENABLED");
 80063d4:	88fb      	ldrh	r3, [r7, #6]
 80063d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
    UART_Printf("[Bit 10] TMOUT_DIS(I2C Timeout Disable)  : %s\r\n",
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <Print_MAX1726x_Config2+0x7a>
 80063de:	4b35      	ldr	r3, [pc, #212]	@ (80064b4 <Print_MAX1726x_Config2+0x14c>)
 80063e0:	e000      	b.n	80063e4 <Print_MAX1726x_Config2+0x7c>
 80063e2:	4b33      	ldr	r3, [pc, #204]	@ (80064b0 <Print_MAX1726x_Config2+0x148>)
 80063e4:	4619      	mov	r1, r3
 80063e6:	4837      	ldr	r0, [pc, #220]	@ (80064c4 <Print_MAX1726x_Config2+0x15c>)
 80063e8:	f7fb f952 	bl	8001690 <UART_Printf>
                
    // Bit 9: Enable Thermistor Simulation
    UART_Printf("[Bit 9]  TS_EN    (Thermistor Sim En)    : %s\r\n",
                (config2_reg & (1 << 9)) ? "ENABLED" : "DISABLED");
 80063ec:	88fb      	ldrh	r3, [r7, #6]
 80063ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
    UART_Printf("[Bit 9]  TS_EN    (Thermistor Sim En)    : %s\r\n",
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <Print_MAX1726x_Config2+0x92>
 80063f6:	4b2e      	ldr	r3, [pc, #184]	@ (80064b0 <Print_MAX1726x_Config2+0x148>)
 80063f8:	e000      	b.n	80063fc <Print_MAX1726x_Config2+0x94>
 80063fa:	4b2e      	ldr	r3, [pc, #184]	@ (80064b4 <Print_MAX1726x_Config2+0x14c>)
 80063fc:	4619      	mov	r1, r3
 80063fe:	4832      	ldr	r0, [pc, #200]	@ (80064c8 <Print_MAX1726x_Config2+0x160>)
 8006400:	f7fb f946 	bl	8001690 <UART_Printf>

    // Bit 8: Enable State of Health (SoH) Compensation
    UART_Printf("[Bit 8]  SOH_EN   (SoH Compensation En)  : %s\r\n",
                (config2_reg & (1 << 8)) ? "ENABLED" : "DISABLED");
 8006404:	88fb      	ldrh	r3, [r7, #6]
 8006406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    UART_Printf("[Bit 8]  SOH_EN   (SoH Compensation En)  : %s\r\n",
 800640a:	2b00      	cmp	r3, #0
 800640c:	d001      	beq.n	8006412 <Print_MAX1726x_Config2+0xaa>
 800640e:	4b28      	ldr	r3, [pc, #160]	@ (80064b0 <Print_MAX1726x_Config2+0x148>)
 8006410:	e000      	b.n	8006414 <Print_MAX1726x_Config2+0xac>
 8006412:	4b28      	ldr	r3, [pc, #160]	@ (80064b4 <Print_MAX1726x_Config2+0x14c>)
 8006414:	4619      	mov	r1, r3
 8006416:	482d      	ldr	r0, [pc, #180]	@ (80064cc <Print_MAX1726x_Config2+0x164>)
 8006418:	f7fb f93a 	bl	8001690 <UART_Printf>

    // Bit 7: Force EZ Config Load
    UART_Printf("[Bit 7]  LDMDL    (Load Model Command)   : %s - Writing '1' reloads EZ config.\r\n",
                (config2_reg & (1 << 7)) ? "ACTIVE" : "IDLE");
 800641c:	88fb      	ldrh	r3, [r7, #6]
 800641e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    UART_Printf("[Bit 7]  LDMDL    (Load Model Command)   : %s - Writing '1' reloads EZ config.\r\n",
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <Print_MAX1726x_Config2+0xc2>
 8006426:	4b2a      	ldr	r3, [pc, #168]	@ (80064d0 <Print_MAX1726x_Config2+0x168>)
 8006428:	e000      	b.n	800642c <Print_MAX1726x_Config2+0xc4>
 800642a:	4b2a      	ldr	r3, [pc, #168]	@ (80064d4 <Print_MAX1726x_Config2+0x16c>)
 800642c:	4619      	mov	r1, r3
 800642e:	482a      	ldr	r0, [pc, #168]	@ (80064d8 <Print_MAX1726x_Config2+0x170>)
 8006430:	f7fb f92e 	bl	8001690 <UART_Printf>

    // Bit 5: Enable Ripple and Particle Filter
    UART_Printf("[Bit 5]  RI_EN    (Ripple Filter En)     : %s\r\n",
                (config2_reg & (1 << 5)) ? "ENABLED" : "DISABLED");
 8006434:	88fb      	ldrh	r3, [r7, #6]
 8006436:	f003 0320 	and.w	r3, r3, #32
    UART_Printf("[Bit 5]  RI_EN    (Ripple Filter En)     : %s\r\n",
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <Print_MAX1726x_Config2+0xda>
 800643e:	4b1c      	ldr	r3, [pc, #112]	@ (80064b0 <Print_MAX1726x_Config2+0x148>)
 8006440:	e000      	b.n	8006444 <Print_MAX1726x_Config2+0xdc>
 8006442:	4b1c      	ldr	r3, [pc, #112]	@ (80064b4 <Print_MAX1726x_Config2+0x14c>)
 8006444:	4619      	mov	r1, r3
 8006446:	4825      	ldr	r0, [pc, #148]	@ (80064dc <Print_MAX1726x_Config2+0x174>)
 8006448:	f7fb f922 	bl	8001690 <UART_Printf>

    // Bit 4: Enable Current-Voltage Synchronization
    UART_Printf("[Bit 4]  CVSYNC_EN(CV Sync Enable)       : %s\r\n",
                (config2_reg & (1 << 4)) ? "ENABLED" : "DISABLED");
 800644c:	88fb      	ldrh	r3, [r7, #6]
 800644e:	f003 0310 	and.w	r3, r3, #16
    UART_Printf("[Bit 4]  CVSYNC_EN(CV Sync Enable)       : %s\r\n",
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <Print_MAX1726x_Config2+0xf2>
 8006456:	4b16      	ldr	r3, [pc, #88]	@ (80064b0 <Print_MAX1726x_Config2+0x148>)
 8006458:	e000      	b.n	800645c <Print_MAX1726x_Config2+0xf4>
 800645a:	4b16      	ldr	r3, [pc, #88]	@ (80064b4 <Print_MAX1726x_Config2+0x14c>)
 800645c:	4619      	mov	r1, r3
 800645e:	4820      	ldr	r0, [pc, #128]	@ (80064e0 <Print_MAX1726x_Config2+0x178>)
 8006460:	f7fb f916 	bl	8001690 <UART_Printf>
    
    // Bit 3: Disable Model Comp Learning
    UART_Printf("[Bit 3]  MOD_DIS  (Model Learning Dis)   : %s\r\n",
                (config2_reg & (1 << 3)) ? "LEARNING DISABLED" : "LEARNING ENABLED");
 8006464:	88fb      	ldrh	r3, [r7, #6]
 8006466:	f003 0308 	and.w	r3, r3, #8
    UART_Printf("[Bit 3]  MOD_DIS  (Model Learning Dis)   : %s\r\n",
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <Print_MAX1726x_Config2+0x10a>
 800646e:	4b1d      	ldr	r3, [pc, #116]	@ (80064e4 <Print_MAX1726x_Config2+0x17c>)
 8006470:	e000      	b.n	8006474 <Print_MAX1726x_Config2+0x10c>
 8006472:	4b1d      	ldr	r3, [pc, #116]	@ (80064e8 <Print_MAX1726x_Config2+0x180>)
 8006474:	4619      	mov	r1, r3
 8006476:	481d      	ldr	r0, [pc, #116]	@ (80064ec <Print_MAX1726x_Config2+0x184>)
 8006478:	f7fb f90a 	bl	8001690 <UART_Printf>
    
    // Bit 1: ADC Offset Correction Disable
    UART_Printf("[Bit 1]  ADC_DIS  (ADC Offset Corr Dis)  : %s\r\n",
                (config2_reg & (1 << 1)) ? "DISABLED" : "ENABLED");
 800647c:	88fb      	ldrh	r3, [r7, #6]
 800647e:	f003 0302 	and.w	r3, r3, #2
    UART_Printf("[Bit 1]  ADC_DIS  (ADC Offset Corr Dis)  : %s\r\n",
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <Print_MAX1726x_Config2+0x122>
 8006486:	4b0b      	ldr	r3, [pc, #44]	@ (80064b4 <Print_MAX1726x_Config2+0x14c>)
 8006488:	e000      	b.n	800648c <Print_MAX1726x_Config2+0x124>
 800648a:	4b09      	ldr	r3, [pc, #36]	@ (80064b0 <Print_MAX1726x_Config2+0x148>)
 800648c:	4619      	mov	r1, r3
 800648e:	4818      	ldr	r0, [pc, #96]	@ (80064f0 <Print_MAX1726x_Config2+0x188>)
 8006490:	f7fb f8fe 	bl	8001690 <UART_Printf>

    UART_Printf("----------------------------------------\r\n\r\n");
 8006494:	4817      	ldr	r0, [pc, #92]	@ (80064f4 <Print_MAX1726x_Config2+0x18c>)
 8006496:	f7fb f8fb 	bl	8001690 <UART_Printf>
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	080096dc 	.word	0x080096dc
 80064a8:	0800970c 	.word	0x0800970c
 80064ac:	08009748 	.word	0x08009748
 80064b0:	08009774 	.word	0x08009774
 80064b4:	0800977c 	.word	0x0800977c
 80064b8:	08009788 	.word	0x08009788
 80064bc:	080097b8 	.word	0x080097b8
 80064c0:	080097e8 	.word	0x080097e8
 80064c4:	08009818 	.word	0x08009818
 80064c8:	08009848 	.word	0x08009848
 80064cc:	08009878 	.word	0x08009878
 80064d0:	080098a8 	.word	0x080098a8
 80064d4:	080098b0 	.word	0x080098b0
 80064d8:	080098b8 	.word	0x080098b8
 80064dc:	0800990c 	.word	0x0800990c
 80064e0:	0800993c 	.word	0x0800993c
 80064e4:	0800996c 	.word	0x0800996c
 80064e8:	08009980 	.word	0x08009980
 80064ec:	08009994 	.word	0x08009994
 80064f0:	080099c4 	.word	0x080099c4
 80064f4:	080099f4 	.word	0x080099f4

080064f8 <Print_MAX1726x_Config>:

void Print_MAX1726x_Config(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
    uint16_t config_reg;
    const char* temp_src;

    // Read the current value from the config register
    // maxim_max1726x_read_reg(MAX1726X_CONFIG_REG, &config_reg);
    MAX17260_Register_ReadSingle(CONFIG, &config_reg);
 80064fe:	1cbb      	adds	r3, r7, #2
 8006500:	4619      	mov	r1, r3
 8006502:	201d      	movs	r0, #29
 8006504:	f7ff fedf 	bl	80062c6 <MAX17260_Register_ReadSingle>

    UART_Printf("\r\n--- MAX1726x Config Register [0x%04X] ---\r\n", config_reg);
 8006508:	887b      	ldrh	r3, [r7, #2]
 800650a:	4619      	mov	r1, r3
 800650c:	4845      	ldr	r0, [pc, #276]	@ (8006624 <Print_MAX1726x_Config+0x12c>)
 800650e:	f7fb f8bf 	bl	8001690 <UART_Printf>
    UART_Printf("This register controls alerts and operating modes.\r\n");
 8006512:	4845      	ldr	r0, [pc, #276]	@ (8006628 <Print_MAX1726x_Config+0x130>)
 8006514:	f7fb f8bc 	bl	8001690 <UART_Printf>
    UART_Printf("----------------------------------------\r\n");
 8006518:	4844      	ldr	r0, [pc, #272]	@ (800662c <Print_MAX1726x_Config+0x134>)
 800651a:	f7fb f8b9 	bl	8001690 <UART_Printf>

    // Bit 14: SOC Change Alert Enable
    UART_Printf("[Bit 14] S_INT    (SOC Change Alert En)  : %s\r\n",
                (config_reg & (1 << 14)) ? "ENABLED" : "DISABLED");
 800651e:	887b      	ldrh	r3, [r7, #2]
 8006520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
    UART_Printf("[Bit 14] S_INT    (SOC Change Alert En)  : %s\r\n",
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <Print_MAX1726x_Config+0x34>
 8006528:	4b41      	ldr	r3, [pc, #260]	@ (8006630 <Print_MAX1726x_Config+0x138>)
 800652a:	e000      	b.n	800652e <Print_MAX1726x_Config+0x36>
 800652c:	4b41      	ldr	r3, [pc, #260]	@ (8006634 <Print_MAX1726x_Config+0x13c>)
 800652e:	4619      	mov	r1, r3
 8006530:	4841      	ldr	r0, [pc, #260]	@ (8006638 <Print_MAX1726x_Config+0x140>)
 8006532:	f7fb f8ad 	bl	8001690 <UART_Printf>

    // Bit 13: Thermistor Enable
    UART_Printf("[Bit 13] T_EN     (Thermistor Enable)    : %s\r\n",
                (config_reg & (1 << 13)) ? "ENABLED (External)" : "DISABLED (Internal sensor)");
 8006536:	887b      	ldrh	r3, [r7, #2]
 8006538:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    UART_Printf("[Bit 13] T_EN     (Thermistor Enable)    : %s\r\n",
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <Print_MAX1726x_Config+0x4c>
 8006540:	4b3e      	ldr	r3, [pc, #248]	@ (800663c <Print_MAX1726x_Config+0x144>)
 8006542:	e000      	b.n	8006546 <Print_MAX1726x_Config+0x4e>
 8006544:	4b3e      	ldr	r3, [pc, #248]	@ (8006640 <Print_MAX1726x_Config+0x148>)
 8006546:	4619      	mov	r1, r3
 8006548:	483e      	ldr	r0, [pc, #248]	@ (8006644 <Print_MAX1726x_Config+0x14c>)
 800654a:	f7fb f8a1 	bl	8001690 <UART_Printf>

    // Bit 12: Peak Current Alert Enable
    UART_Printf("[Bit 12] PA_EN    (Peak Current Alert En): %s\r\n",
                (config_reg & (1 << 12)) ? "ENABLED" : "DISABLED");
 800654e:	887b      	ldrh	r3, [r7, #2]
 8006550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    UART_Printf("[Bit 12] PA_EN    (Peak Current Alert En): %s\r\n",
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <Print_MAX1726x_Config+0x64>
 8006558:	4b35      	ldr	r3, [pc, #212]	@ (8006630 <Print_MAX1726x_Config+0x138>)
 800655a:	e000      	b.n	800655e <Print_MAX1726x_Config+0x66>
 800655c:	4b35      	ldr	r3, [pc, #212]	@ (8006634 <Print_MAX1726x_Config+0x13c>)
 800655e:	4619      	mov	r1, r3
 8006560:	4839      	ldr	r0, [pc, #228]	@ (8006648 <Print_MAX1726x_Config+0x150>)
 8006562:	f7fb f895 	bl	8001690 <UART_Printf>

    // Bit 11: Temperature Channel Assignment
    if (config_reg & (1 << 13)) { // T_EN is enabled (external)
 8006566:	887b      	ldrh	r3, [r7, #2]
 8006568:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d009      	beq.n	8006584 <Print_MAX1726x_Config+0x8c>
        temp_src = (config_reg & (1 << 11)) ? "THRM2 pin" : "THRM1 pin";
 8006570:	887b      	ldrh	r3, [r7, #2]
 8006572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <Print_MAX1726x_Config+0x86>
 800657a:	4b34      	ldr	r3, [pc, #208]	@ (800664c <Print_MAX1726x_Config+0x154>)
 800657c:	e000      	b.n	8006580 <Print_MAX1726x_Config+0x88>
 800657e:	4b34      	ldr	r3, [pc, #208]	@ (8006650 <Print_MAX1726x_Config+0x158>)
 8006580:	607b      	str	r3, [r7, #4]
 8006582:	e008      	b.n	8006596 <Print_MAX1726x_Config+0x9e>
    } else { // T_EN is disabled (internal)
        temp_src = (config_reg & (1 << 11)) ? "Die Temp" : "V_CELL Temp";
 8006584:	887b      	ldrh	r3, [r7, #2]
 8006586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <Print_MAX1726x_Config+0x9a>
 800658e:	4b31      	ldr	r3, [pc, #196]	@ (8006654 <Print_MAX1726x_Config+0x15c>)
 8006590:	e000      	b.n	8006594 <Print_MAX1726x_Config+0x9c>
 8006592:	4b31      	ldr	r3, [pc, #196]	@ (8006658 <Print_MAX1726x_Config+0x160>)
 8006594:	607b      	str	r3, [r7, #4]
    }
    UART_Printf("[Bit 11] T_SEL    (Temp Source Select)   : %s\r\n", temp_src);
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	4830      	ldr	r0, [pc, #192]	@ (800665c <Print_MAX1726x_Config+0x164>)
 800659a:	f7fb f879 	bl	8001690 <UART_Printf>

    // Bit 8: Enable Sticky Alerts
    UART_Printf("[Bit 8]  Sticky   (Sticky Alerts)        : %s - If enabled, alert flags are not auto-cleared.\r\n",
                (config_reg & (1 << 8)) ? "ENABLED" : "DISABLED");
 800659e:	887b      	ldrh	r3, [r7, #2]
 80065a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    UART_Printf("[Bit 8]  Sticky   (Sticky Alerts)        : %s - If enabled, alert flags are not auto-cleared.\r\n",
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <Print_MAX1726x_Config+0xb4>
 80065a8:	4b21      	ldr	r3, [pc, #132]	@ (8006630 <Print_MAX1726x_Config+0x138>)
 80065aa:	e000      	b.n	80065ae <Print_MAX1726x_Config+0xb6>
 80065ac:	4b21      	ldr	r3, [pc, #132]	@ (8006634 <Print_MAX1726x_Config+0x13c>)
 80065ae:	4619      	mov	r1, r3
 80065b0:	482b      	ldr	r0, [pc, #172]	@ (8006660 <Print_MAX1726x_Config+0x168>)
 80065b2:	f7fb f86d 	bl	8001690 <UART_Printf>
                
    // Bit 3: ALRT Pin Enable
    UART_Printf("[Bit 3]  A_EN     (ALRT Pin Enable)      : %s - If enabled, the ALRT pin will assert on alerts.\r\n",
                (config_reg & (1 << 3)) ? "ENABLED" : "DISABLED");
 80065b6:	887b      	ldrh	r3, [r7, #2]
 80065b8:	f003 0308 	and.w	r3, r3, #8
    UART_Printf("[Bit 3]  A_EN     (ALRT Pin Enable)      : %s - If enabled, the ALRT pin will assert on alerts.\r\n",
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <Print_MAX1726x_Config+0xcc>
 80065c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006630 <Print_MAX1726x_Config+0x138>)
 80065c2:	e000      	b.n	80065c6 <Print_MAX1726x_Config+0xce>
 80065c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006634 <Print_MAX1726x_Config+0x13c>)
 80065c6:	4619      	mov	r1, r3
 80065c8:	4826      	ldr	r0, [pc, #152]	@ (8006664 <Print_MAX1726x_Config+0x16c>)
 80065ca:	f7fb f861 	bl	8001690 <UART_Printf>

    // Bit 2: State of Charge Alert Enable
    UART_Printf("[Bit 2]  S_EN     (SOC Alert En)         : %s - For main SOC threshold (SAlrtTh).\r\n",
                (config_reg & (1 << 2)) ? "ENABLED" : "DISABLED");
 80065ce:	887b      	ldrh	r3, [r7, #2]
 80065d0:	f003 0304 	and.w	r3, r3, #4
    UART_Printf("[Bit 2]  S_EN     (SOC Alert En)         : %s - For main SOC threshold (SAlrtTh).\r\n",
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d001      	beq.n	80065dc <Print_MAX1726x_Config+0xe4>
 80065d8:	4b15      	ldr	r3, [pc, #84]	@ (8006630 <Print_MAX1726x_Config+0x138>)
 80065da:	e000      	b.n	80065de <Print_MAX1726x_Config+0xe6>
 80065dc:	4b15      	ldr	r3, [pc, #84]	@ (8006634 <Print_MAX1726x_Config+0x13c>)
 80065de:	4619      	mov	r1, r3
 80065e0:	4821      	ldr	r0, [pc, #132]	@ (8006668 <Print_MAX1726x_Config+0x170>)
 80065e2:	f7fb f855 	bl	8001690 <UART_Printf>
                
    // Bit 1: Temperature Alert Enable
    UART_Printf("[Bit 1]  TALRT_EN (Temperature Alert En) : %s\r\n",
                (config_reg & (1 << 1)) ? "ENABLED" : "DISABLED");
 80065e6:	887b      	ldrh	r3, [r7, #2]
 80065e8:	f003 0302 	and.w	r3, r3, #2
    UART_Printf("[Bit 1]  TALRT_EN (Temperature Alert En) : %s\r\n",
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <Print_MAX1726x_Config+0xfc>
 80065f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006630 <Print_MAX1726x_Config+0x138>)
 80065f2:	e000      	b.n	80065f6 <Print_MAX1726x_Config+0xfe>
 80065f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006634 <Print_MAX1726x_Config+0x13c>)
 80065f6:	4619      	mov	r1, r3
 80065f8:	481c      	ldr	r0, [pc, #112]	@ (800666c <Print_MAX1726x_Config+0x174>)
 80065fa:	f7fb f849 	bl	8001690 <UART_Printf>

    // Bit 0: Voltage Alert Enable
    UART_Printf("[Bit 0]  VALRT_EN (Voltage Alert En)     : %s\r\n",
                (config_reg & (1 << 0)) ? "ENABLED" : "DISABLED");
 80065fe:	887b      	ldrh	r3, [r7, #2]
 8006600:	f003 0301 	and.w	r3, r3, #1
    UART_Printf("[Bit 0]  VALRT_EN (Voltage Alert En)     : %s\r\n",
 8006604:	2b00      	cmp	r3, #0
 8006606:	d001      	beq.n	800660c <Print_MAX1726x_Config+0x114>
 8006608:	4b09      	ldr	r3, [pc, #36]	@ (8006630 <Print_MAX1726x_Config+0x138>)
 800660a:	e000      	b.n	800660e <Print_MAX1726x_Config+0x116>
 800660c:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <Print_MAX1726x_Config+0x13c>)
 800660e:	4619      	mov	r1, r3
 8006610:	4817      	ldr	r0, [pc, #92]	@ (8006670 <Print_MAX1726x_Config+0x178>)
 8006612:	f7fb f83d 	bl	8001690 <UART_Printf>

    UART_Printf("----------------------------------------\r\n\r\n");
 8006616:	4817      	ldr	r0, [pc, #92]	@ (8006674 <Print_MAX1726x_Config+0x17c>)
 8006618:	f7fb f83a 	bl	8001690 <UART_Printf>
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	08009a24 	.word	0x08009a24
 8006628:	08009a54 	.word	0x08009a54
 800662c:	08009748 	.word	0x08009748
 8006630:	08009774 	.word	0x08009774
 8006634:	0800977c 	.word	0x0800977c
 8006638:	08009a8c 	.word	0x08009a8c
 800663c:	08009abc 	.word	0x08009abc
 8006640:	08009ad0 	.word	0x08009ad0
 8006644:	08009aec 	.word	0x08009aec
 8006648:	08009b1c 	.word	0x08009b1c
 800664c:	08009b4c 	.word	0x08009b4c
 8006650:	08009b58 	.word	0x08009b58
 8006654:	08009b64 	.word	0x08009b64
 8006658:	08009b70 	.word	0x08009b70
 800665c:	08009b7c 	.word	0x08009b7c
 8006660:	08009bac 	.word	0x08009bac
 8006664:	08009c0c 	.word	0x08009c0c
 8006668:	08009c70 	.word	0x08009c70
 800666c:	08009cc4 	.word	0x08009cc4
 8006670:	08009cf4 	.word	0x08009cf4
 8006674:	080099f4 	.word	0x080099f4

08006678 <Print_MAX1726x_Status>:

void Print_MAX1726x_Status(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b082      	sub	sp, #8
 800667c:	af00      	add	r7, sp, #0
    uint16_t status_reg;

    // Read the current value from the status register
    // maxim_max1726x_read_reg(MAX1726X_STATUS_REG, &status_reg);
    MAX17260_Register_ReadSingle(STATUS, &status_reg);
 800667e:	1dbb      	adds	r3, r7, #6
 8006680:	4619      	mov	r1, r3
 8006682:	2000      	movs	r0, #0
 8006684:	f7ff fe1f 	bl	80062c6 <MAX17260_Register_ReadSingle>

    UART_Printf("\r\n--- MAX1726x Status Register [0x%04X] ---\r\n", status_reg);
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	4619      	mov	r1, r3
 800668c:	485e      	ldr	r0, [pc, #376]	@ (8006808 <Print_MAX1726x_Status+0x190>)
 800668e:	f7fa ffff 	bl	8001690 <UART_Printf>

    // Check each bit and print its meaning and state (1=SET, 0=NOT SET)

    // Bit 15: Battery Insertion
    UART_Printf("[Bit 15] Bst      (Battery Status Alert) : %s - Set on battery insertion.\r\n",
                (status_reg & (1 << 15)) ? "SET" : "NOT SET");
 8006692:	88fb      	ldrh	r3, [r7, #6]
 8006694:	b21b      	sxth	r3, r3
    UART_Printf("[Bit 15] Bst      (Battery Status Alert) : %s - Set on battery insertion.\r\n",
 8006696:	2b00      	cmp	r3, #0
 8006698:	da01      	bge.n	800669e <Print_MAX1726x_Status+0x26>
 800669a:	4b5c      	ldr	r3, [pc, #368]	@ (800680c <Print_MAX1726x_Status+0x194>)
 800669c:	e000      	b.n	80066a0 <Print_MAX1726x_Status+0x28>
 800669e:	4b5c      	ldr	r3, [pc, #368]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 80066a0:	4619      	mov	r1, r3
 80066a2:	485c      	ldr	r0, [pc, #368]	@ (8006814 <Print_MAX1726x_Status+0x19c>)
 80066a4:	f7fa fff4 	bl	8001690 <UART_Printf>
    // UART_Printf("[Bit 14] Sc       (State of Charge Alert): %s - 1%% SOC change or charging termination.\r\n",
    //             (status_reg & (1 << 14)) ? "SET" : "NOT SET");

    // Bit 13: Peak Current Alert
    UART_Printf("[Bit 13] PA       (Peak Current Alert)   : %s - Sustained peak current exceeded.\r\n",
                (status_reg & (1 << 13)) ? "SET" : "NOT SET");
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    UART_Printf("[Bit 13] PA       (Peak Current Alert)   : %s - Sustained peak current exceeded.\r\n",
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <Print_MAX1726x_Status+0x3e>
 80066b2:	4b56      	ldr	r3, [pc, #344]	@ (800680c <Print_MAX1726x_Status+0x194>)
 80066b4:	e000      	b.n	80066b8 <Print_MAX1726x_Status+0x40>
 80066b6:	4b56      	ldr	r3, [pc, #344]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 80066b8:	4619      	mov	r1, r3
 80066ba:	4857      	ldr	r0, [pc, #348]	@ (8006818 <Print_MAX1726x_Status+0x1a0>)
 80066bc:	f7fa ffe8 	bl	8001690 <UART_Printf>

    // Bit 12: Temperature Alert
    UART_Printf("[Bit 12] TA       (Temperature Alert)    : %s - Temperature threshold exceeded.\r\n",
                (status_reg & (1 << 12)) ? "SET" : "NOT SET");
 80066c0:	88fb      	ldrh	r3, [r7, #6]
 80066c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
    UART_Printf("[Bit 12] TA       (Temperature Alert)    : %s - Temperature threshold exceeded.\r\n",
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <Print_MAX1726x_Status+0x56>
 80066ca:	4b50      	ldr	r3, [pc, #320]	@ (800680c <Print_MAX1726x_Status+0x194>)
 80066cc:	e000      	b.n	80066d0 <Print_MAX1726x_Status+0x58>
 80066ce:	4b50      	ldr	r3, [pc, #320]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 80066d0:	4619      	mov	r1, r3
 80066d2:	4852      	ldr	r0, [pc, #328]	@ (800681c <Print_MAX1726x_Status+0x1a4>)
 80066d4:	f7fa ffdc 	bl	8001690 <UART_Printf>

    // Bit 11: Voltage Alert
    UART_Printf("[Bit 11] VA       (Voltage Alert)        : %s - Voltage threshold exceeded.\r\n",
                (status_reg & (1 << 11)) ? "SET" : "NOT SET");
 80066d8:	88fb      	ldrh	r3, [r7, #6]
 80066da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
    UART_Printf("[Bit 11] VA       (Voltage Alert)        : %s - Voltage threshold exceeded.\r\n",
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <Print_MAX1726x_Status+0x6e>
 80066e2:	4b4a      	ldr	r3, [pc, #296]	@ (800680c <Print_MAX1726x_Status+0x194>)
 80066e4:	e000      	b.n	80066e8 <Print_MAX1726x_Status+0x70>
 80066e6:	4b4a      	ldr	r3, [pc, #296]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 80066e8:	4619      	mov	r1, r3
 80066ea:	484d      	ldr	r0, [pc, #308]	@ (8006820 <Print_MAX1726x_Status+0x1a8>)
 80066ec:	f7fa ffd0 	bl	8001690 <UART_Printf>

    // Bit 10: Current Alert
    UART_Printf("[Bit 10] CA       (Current Alert)        : %s - Current threshold exceeded.\r\n",
                (status_reg & (1 << 10)) ? "SET" : "NOT SET");
 80066f0:	88fb      	ldrh	r3, [r7, #6]
 80066f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
    UART_Printf("[Bit 10] CA       (Current Alert)        : %s - Current threshold exceeded.\r\n",
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <Print_MAX1726x_Status+0x86>
 80066fa:	4b44      	ldr	r3, [pc, #272]	@ (800680c <Print_MAX1726x_Status+0x194>)
 80066fc:	e000      	b.n	8006700 <Print_MAX1726x_Status+0x88>
 80066fe:	4b44      	ldr	r3, [pc, #272]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 8006700:	4619      	mov	r1, r3
 8006702:	4848      	ldr	r0, [pc, #288]	@ (8006824 <Print_MAX1726x_Status+0x1ac>)
 8006704:	f7fa ffc4 	bl	8001690 <UART_Printf>

    // Bit 9: Delta SOC Interrupt
    UART_Printf("[Bit 9]  dSOCi    (Delta SOC Interrupt)  : %s - RepSOC changed by 1%%.\r\n",
                (status_reg & (1 << 9)) ? "SET" : "NOT SET");
 8006708:	88fb      	ldrh	r3, [r7, #6]
 800670a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
    UART_Printf("[Bit 9]  dSOCi    (Delta SOC Interrupt)  : %s - RepSOC changed by 1%%.\r\n",
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <Print_MAX1726x_Status+0x9e>
 8006712:	4b3e      	ldr	r3, [pc, #248]	@ (800680c <Print_MAX1726x_Status+0x194>)
 8006714:	e000      	b.n	8006718 <Print_MAX1726x_Status+0xa0>
 8006716:	4b3e      	ldr	r3, [pc, #248]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 8006718:	4619      	mov	r1, r3
 800671a:	4843      	ldr	r0, [pc, #268]	@ (8006828 <Print_MAX1726x_Status+0x1b0>)
 800671c:	f7fa ffb8 	bl	8001690 <UART_Printf>

    // Bit 8: Min Current Alert
    UART_Printf("[Bit 8]  Imn      (Min Current Alert)    : %s - Current fell below min threshold.\r\n",
                (status_reg & (1 << 8)) ? "SET" : "NOT SET");
 8006720:	88fb      	ldrh	r3, [r7, #6]
 8006722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
    UART_Printf("[Bit 8]  Imn      (Min Current Alert)    : %s - Current fell below min threshold.\r\n",
 8006726:	2b00      	cmp	r3, #0
 8006728:	d001      	beq.n	800672e <Print_MAX1726x_Status+0xb6>
 800672a:	4b38      	ldr	r3, [pc, #224]	@ (800680c <Print_MAX1726x_Status+0x194>)
 800672c:	e000      	b.n	8006730 <Print_MAX1726x_Status+0xb8>
 800672e:	4b38      	ldr	r3, [pc, #224]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 8006730:	4619      	mov	r1, r3
 8006732:	483e      	ldr	r0, [pc, #248]	@ (800682c <Print_MAX1726x_Status+0x1b4>)
 8006734:	f7fa ffac 	bl	8001690 <UART_Printf>

    // Bit 7: Max Current Alert
    UART_Printf("[Bit 7]  Imx      (Max Current Alert)    : %s - Current rose above max threshold.\r\n",
                (status_reg & (1 << 7)) ? "SET" : "NOT SET");
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
    UART_Printf("[Bit 7]  Imx      (Max Current Alert)    : %s - Current rose above max threshold.\r\n",
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <Print_MAX1726x_Status+0xce>
 8006742:	4b32      	ldr	r3, [pc, #200]	@ (800680c <Print_MAX1726x_Status+0x194>)
 8006744:	e000      	b.n	8006748 <Print_MAX1726x_Status+0xd0>
 8006746:	4b32      	ldr	r3, [pc, #200]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 8006748:	4619      	mov	r1, r3
 800674a:	4839      	ldr	r0, [pc, #228]	@ (8006830 <Print_MAX1726x_Status+0x1b8>)
 800674c:	f7fa ffa0 	bl	8001690 <UART_Printf>

    // Bit 6: Min Temperature Alert
    UART_Printf("[Bit 6]  Tmn      (Min Temp Alert)       : %s - Temp fell below min threshold.\r\n",
                (status_reg & (1 << 6)) ? "SET" : "NOT SET");
 8006750:	88fb      	ldrh	r3, [r7, #6]
 8006752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    UART_Printf("[Bit 6]  Tmn      (Min Temp Alert)       : %s - Temp fell below min threshold.\r\n",
 8006756:	2b00      	cmp	r3, #0
 8006758:	d001      	beq.n	800675e <Print_MAX1726x_Status+0xe6>
 800675a:	4b2c      	ldr	r3, [pc, #176]	@ (800680c <Print_MAX1726x_Status+0x194>)
 800675c:	e000      	b.n	8006760 <Print_MAX1726x_Status+0xe8>
 800675e:	4b2c      	ldr	r3, [pc, #176]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 8006760:	4619      	mov	r1, r3
 8006762:	4834      	ldr	r0, [pc, #208]	@ (8006834 <Print_MAX1726x_Status+0x1bc>)
 8006764:	f7fa ff94 	bl	8001690 <UART_Printf>

    // Bit 5: Max Temperature Alert
    UART_Printf("[Bit 5]  Tmx      (Max Temp Alert)       : %s - Temp rose above max threshold.\r\n",
                (status_reg & (1 << 5)) ? "SET" : "NOT SET");
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	f003 0320 	and.w	r3, r3, #32
    UART_Printf("[Bit 5]  Tmx      (Max Temp Alert)       : %s - Temp rose above max threshold.\r\n",
 800676e:	2b00      	cmp	r3, #0
 8006770:	d001      	beq.n	8006776 <Print_MAX1726x_Status+0xfe>
 8006772:	4b26      	ldr	r3, [pc, #152]	@ (800680c <Print_MAX1726x_Status+0x194>)
 8006774:	e000      	b.n	8006778 <Print_MAX1726x_Status+0x100>
 8006776:	4b26      	ldr	r3, [pc, #152]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 8006778:	4619      	mov	r1, r3
 800677a:	482f      	ldr	r0, [pc, #188]	@ (8006838 <Print_MAX1726x_Status+0x1c0>)
 800677c:	f7fa ff88 	bl	8001690 <UART_Printf>

    // Bit 4: Min Voltage Alert
    UART_Printf("[Bit 4]  Vmn      (Min Voltage Alert)    : %s - Voltage fell below min threshold.\r\n",
                (status_reg & (1 << 4)) ? "SET" : "NOT SET");
 8006780:	88fb      	ldrh	r3, [r7, #6]
 8006782:	f003 0310 	and.w	r3, r3, #16
    UART_Printf("[Bit 4]  Vmn      (Min Voltage Alert)    : %s - Voltage fell below min threshold.\r\n",
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <Print_MAX1726x_Status+0x116>
 800678a:	4b20      	ldr	r3, [pc, #128]	@ (800680c <Print_MAX1726x_Status+0x194>)
 800678c:	e000      	b.n	8006790 <Print_MAX1726x_Status+0x118>
 800678e:	4b20      	ldr	r3, [pc, #128]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 8006790:	4619      	mov	r1, r3
 8006792:	482a      	ldr	r0, [pc, #168]	@ (800683c <Print_MAX1726x_Status+0x1c4>)
 8006794:	f7fa ff7c 	bl	8001690 <UART_Printf>

    // Bit 3: Max Voltage Alert
    UART_Printf("[Bit 3]  Vmx      (Max Voltage Alert)    : %s - Voltage rose above max threshold.\r\n",
                (status_reg & (1 << 3)) ? "SET" : "NOT SET");
 8006798:	88fb      	ldrh	r3, [r7, #6]
 800679a:	f003 0308 	and.w	r3, r3, #8
    UART_Printf("[Bit 3]  Vmx      (Max Voltage Alert)    : %s - Voltage rose above max threshold.\r\n",
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <Print_MAX1726x_Status+0x12e>
 80067a2:	4b1a      	ldr	r3, [pc, #104]	@ (800680c <Print_MAX1726x_Status+0x194>)
 80067a4:	e000      	b.n	80067a8 <Print_MAX1726x_Status+0x130>
 80067a6:	4b1a      	ldr	r3, [pc, #104]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 80067a8:	4619      	mov	r1, r3
 80067aa:	4825      	ldr	r0, [pc, #148]	@ (8006840 <Print_MAX1726x_Status+0x1c8>)
 80067ac:	f7fa ff70 	bl	8001690 <UART_Printf>

    // Bit 2: State of Charge Alert
    UART_Printf("[Bit 2]  dSOC     (SOC Alert)            : %s - RepSOC crossed main SOC threshold.\r\n",
                (status_reg & (1 << 2)) ? "SET" : "NOT SET");
 80067b0:	88fb      	ldrh	r3, [r7, #6]
 80067b2:	f003 0304 	and.w	r3, r3, #4
    UART_Printf("[Bit 2]  dSOC     (SOC Alert)            : %s - RepSOC crossed main SOC threshold.\r\n",
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <Print_MAX1726x_Status+0x146>
 80067ba:	4b14      	ldr	r3, [pc, #80]	@ (800680c <Print_MAX1726x_Status+0x194>)
 80067bc:	e000      	b.n	80067c0 <Print_MAX1726x_Status+0x148>
 80067be:	4b14      	ldr	r3, [pc, #80]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 80067c0:	4619      	mov	r1, r3
 80067c2:	4820      	ldr	r0, [pc, #128]	@ (8006844 <Print_MAX1726x_Status+0x1cc>)
 80067c4:	f7fa ff64 	bl	8001690 <UART_Printf>

    // Bit 1: Power On Reset
    UART_Printf("[Bit 1]  POR      (Power On Reset)       : %s - Chip has reset since last cleared.\r\n",
                (status_reg & (1 << 1)) ? "SET" : "NOT SET");
 80067c8:	88fb      	ldrh	r3, [r7, #6]
 80067ca:	f003 0302 	and.w	r3, r3, #2
    UART_Printf("[Bit 1]  POR      (Power On Reset)       : %s - Chip has reset since last cleared.\r\n",
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <Print_MAX1726x_Status+0x15e>
 80067d2:	4b0e      	ldr	r3, [pc, #56]	@ (800680c <Print_MAX1726x_Status+0x194>)
 80067d4:	e000      	b.n	80067d8 <Print_MAX1726x_Status+0x160>
 80067d6:	4b0e      	ldr	r3, [pc, #56]	@ (8006810 <Print_MAX1726x_Status+0x198>)
 80067d8:	4619      	mov	r1, r3
 80067da:	481b      	ldr	r0, [pc, #108]	@ (8006848 <Print_MAX1726x_Status+0x1d0>)
 80067dc:	f7fa ff58 	bl	8001690 <UART_Printf>

    // Bit 0: Battery Presence
    UART_Printf("[Bit 0]  BATT_PRES(Battery Presence)     : %s - Indicates if battery is present.\r\n",
                (status_reg & (1 << 0)) ? "PRESENT" : "ABSENT");
 80067e0:	88fb      	ldrh	r3, [r7, #6]
 80067e2:	f003 0301 	and.w	r3, r3, #1
    UART_Printf("[Bit 0]  BATT_PRES(Battery Presence)     : %s - Indicates if battery is present.\r\n",
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <Print_MAX1726x_Status+0x176>
 80067ea:	4b18      	ldr	r3, [pc, #96]	@ (800684c <Print_MAX1726x_Status+0x1d4>)
 80067ec:	e000      	b.n	80067f0 <Print_MAX1726x_Status+0x178>
 80067ee:	4b18      	ldr	r3, [pc, #96]	@ (8006850 <Print_MAX1726x_Status+0x1d8>)
 80067f0:	4619      	mov	r1, r3
 80067f2:	4818      	ldr	r0, [pc, #96]	@ (8006854 <Print_MAX1726x_Status+0x1dc>)
 80067f4:	f7fa ff4c 	bl	8001690 <UART_Printf>

    UART_Printf("----------------------------------------\r\n\r\n");
 80067f8:	4817      	ldr	r0, [pc, #92]	@ (8006858 <Print_MAX1726x_Status+0x1e0>)
 80067fa:	f7fa ff49 	bl	8001690 <UART_Printf>
}
 80067fe:	bf00      	nop
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	08009d24 	.word	0x08009d24
 800680c:	08009d54 	.word	0x08009d54
 8006810:	08009d58 	.word	0x08009d58
 8006814:	08009d60 	.word	0x08009d60
 8006818:	08009dac 	.word	0x08009dac
 800681c:	08009e00 	.word	0x08009e00
 8006820:	08009e54 	.word	0x08009e54
 8006824:	08009ea4 	.word	0x08009ea4
 8006828:	08009ef4 	.word	0x08009ef4
 800682c:	08009f40 	.word	0x08009f40
 8006830:	08009f94 	.word	0x08009f94
 8006834:	08009fe8 	.word	0x08009fe8
 8006838:	0800a03c 	.word	0x0800a03c
 800683c:	0800a090 	.word	0x0800a090
 8006840:	0800a0e4 	.word	0x0800a0e4
 8006844:	0800a138 	.word	0x0800a138
 8006848:	0800a190 	.word	0x0800a190
 800684c:	0800a1e8 	.word	0x0800a1e8
 8006850:	0800a1f0 	.word	0x0800a1f0
 8006854:	0800a1f8 	.word	0x0800a1f8
 8006858:	080099f4 	.word	0x080099f4

0800685c <MAX17260_Register_printout>:

void MAX17260_Register_printout(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
    Print_MAX1726x_Status();
 8006860:	f7ff ff0a 	bl	8006678 <Print_MAX1726x_Status>
    Print_MAX1726x_Config();
 8006864:	f7ff fe48 	bl	80064f8 <Print_MAX1726x_Config>
    Print_MAX1726x_Config2();
 8006868:	f7ff fd7e 	bl	8006368 <Print_MAX1726x_Config2>
}
 800686c:	bf00      	nop
 800686e:	bd80      	pop	{r7, pc}

08006870 <LWInit>:
 * @brief Performs the initial configuration of the MAX17260.
 *
 * This sequence is extracted from the `BATTSENSOR_LWInit` function and is
 * critical for setting up the device's model and configuration.
 */
static void LWInit(void) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
    int16_t value;

    // Exit hibernate mode sequence
    MAX17260_Register_WriteSingle(SOFT_WAKEUP, 0x90);
 8006876:	2190      	movs	r1, #144	@ 0x90
 8006878:	2060      	movs	r0, #96	@ 0x60
 800687a:	f7ff fd08 	bl	800628e <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(HIB_CFG, 0x00);
 800687e:	2100      	movs	r1, #0
 8006880:	20ba      	movs	r0, #186	@ 0xba
 8006882:	f7ff fd04 	bl	800628e <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(SOFT_WAKEUP, 0x00);
 8006886:	2100      	movs	r1, #0
 8006888:	2060      	movs	r0, #96	@ 0x60
 800688a:	f7ff fd00 	bl	800628e <MAX17260_Register_WriteSingle>

    // Initial config values from original file
    MAX17260_Register_WriteSingle(DESIGN_CAP, 0x7FF8);
 800688e:	f647 71f8 	movw	r1, #32760	@ 0x7ff8
 8006892:	2018      	movs	r0, #24
 8006894:	f7ff fcfb 	bl	800628e <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(I_CHG_TERM, 0x0000);
 8006898:	2100      	movs	r1, #0
 800689a:	201e      	movs	r0, #30
 800689c:	f7ff fcf7 	bl	800628e <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(V_EMPTY, 0x9661);
 80068a0:	f249 6161 	movw	r1, #38497	@ 0x9661
 80068a4:	203a      	movs	r0, #58	@ 0x3a
 80068a6:	f7ff fcf2 	bl	800628e <MAX17260_Register_WriteSingle>

    // Write to ModelCfg and wait for it to clear
    MAX17260_Register_WriteSingle(MODEL_CFG, 0x8000);
 80068aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068ae:	20db      	movs	r0, #219	@ 0xdb
 80068b0:	f7ff fced 	bl	800628e <MAX17260_Register_WriteSingle>
    do {
        MAX17260_Register_ReadSingle(MODEL_CFG, (uint16_t*)&value);
 80068b4:	1dbb      	adds	r3, r7, #6
 80068b6:	4619      	mov	r1, r3
 80068b8:	20db      	movs	r0, #219	@ 0xdb
 80068ba:	f7ff fd04 	bl	80062c6 <MAX17260_Register_ReadSingle>
    } while (value != 0x0000);
 80068be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f6      	bne.n	80068b4 <LWInit+0x44>

    uint16_t status_val;
    MAX17260_Register_ReadSingle(STATUS, &status_val);
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	2000      	movs	r0, #0
 80068cc:	f7ff fcfb 	bl	80062c6 <MAX17260_Register_ReadSingle>
    MAX17260_Register_WriteSingle(STATUS, status_val & ~(1 << 1)); // Clear POR bit
 80068d0:	88bb      	ldrh	r3, [r7, #4]
 80068d2:	f023 0302 	bic.w	r3, r3, #2
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	4619      	mov	r1, r3
 80068da:	2000      	movs	r0, #0
 80068dc:	f7ff fcd7 	bl	800628e <MAX17260_Register_WriteSingle>

    MAX17260_Register_WriteSingle(HIB_CFG, 0x870C);
 80068e0:	f248 710c 	movw	r1, #34572	@ 0x870c
 80068e4:	20ba      	movs	r0, #186	@ 0xba
 80068e6:	f7ff fcd2 	bl	800628e <MAX17260_Register_WriteSingle>
    
    // Write final configuration
    MAX17260_Register_WriteSingle(CONFIG2, 0x0658);
 80068ea:	f44f 61cb 	mov.w	r1, #1624	@ 0x658
 80068ee:	20bb      	movs	r0, #187	@ 0xbb
 80068f0:	f7ff fccd 	bl	800628e <MAX17260_Register_WriteSingle>
    MAX17260_Register_WriteSingle(MODEL_CFG, 0x8000);
 80068f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80068f8:	20db      	movs	r0, #219	@ 0xdb
 80068fa:	f7ff fcc8 	bl	800628e <MAX17260_Register_WriteSingle>
}
 80068fe:	bf00      	nop
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <BatteryMonitor_Init>:

//=============================================================================
// PUBLIC FUNCTION IMPLEMENTATIONS
//=============================================================================

void BatteryMonitor_Init(void) {
 8006906:	b580      	push	{r7, lr}
 8006908:	af00      	add	r7, sp, #0
    i2c_init();
 800690a:	f7ff fc53 	bl	80061b4 <i2c_init>

    // Small delay to ensure the sensor is ready after power-up.
    delay_ms(10);
 800690e:	200a      	movs	r0, #10
 8006910:	f7ff fc9d 	bl	800624e <delay_ms>

    if (IsPOR()) {
 8006914:	f7ff fcfc 	bl	8006310 <IsPOR>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <BatteryMonitor_Init+0x20>
        LWInit();
 800691e:	f7ff ffa7 	bl	8006870 <LWInit>
        ClearPOR();
 8006922:	f7ff fd0b 	bl	800633c <ClearPOR>
    }
}
 8006926:	bf00      	nop
 8006928:	bd80      	pop	{r7, pc}

0800692a <maxim_max1726x_read_reg>:
	                  100);                     // A standard timeout in ms
}

/* ************************************************************************* */
void maxim_max1726x_read_reg(uint8_t reg_addr, uint16_t *reg_data)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af02      	add	r7, sp, #8
 8006930:	4603      	mov	r3, r0
 8006932:	6039      	str	r1, [r7, #0]
 8006934:	71fb      	strb	r3, [r7, #7]
//
//	maxim_max32660_i2c1_read(MAX1726X_I2C_ADDR, i2c_data, 2, 0);
//
//	*reg_data = i2c_data[1];
//	*reg_data = ((*reg_data)<<8) | i2c_data[0];
	I2C1_MemRead(MAX1726X_I2C_ADDR,         // The I2C device address (0x6C)
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	b299      	uxth	r1, r3
 800693a:	2364      	movs	r3, #100	@ 0x64
 800693c:	9301      	str	r3, [sp, #4]
 800693e:	2302      	movs	r3, #2
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	2201      	movs	r2, #1
 8006946:	206c      	movs	r0, #108	@ 0x6c
 8006948:	f7fa fd04 	bl	8001354 <I2C1_MemRead>
	                 reg_addr,                  // The register address to read from
	                 I2C_MEMADD_SIZE_8BIT,      // The register address is 8 bits
	                 (uint8_t *)reg_data,       // A pointer to store the received data
	                 2,                         // We are reading 2 bytes
	                 100);                      // A standard timeout in ms
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <maxim_max1726x_get_repsoc>:
	return repcap;
}

/* ************************************************************************* */
float maxim_max1726x_get_repsoc(void)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
	float repsoc;
	maxim_max1726x_read_reg(MAX1726X_REPSOC_REG, &max1726x_regs[MAX1726X_REPSOC_REG]);
 800695a:	490c      	ldr	r1, [pc, #48]	@ (800698c <maxim_max1726x_get_repsoc+0x38>)
 800695c:	2006      	movs	r0, #6
 800695e:	f7ff ffe4 	bl	800692a <maxim_max1726x_read_reg>

	repsoc = (float)max1726x_regs[MAX1726X_REPSOC_REG] / 256.0f;
 8006962:	4b0b      	ldr	r3, [pc, #44]	@ (8006990 <maxim_max1726x_get_repsoc+0x3c>)
 8006964:	899b      	ldrh	r3, [r3, #12]
 8006966:	ee07 3a90 	vmov	s15, r3
 800696a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800696e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8006994 <maxim_max1726x_get_repsoc+0x40>
 8006972:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006976:	edc7 7a01 	vstr	s15, [r7, #4]
	return repsoc;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	ee07 3a90 	vmov	s15, r3
}
 8006980:	eeb0 0a67 	vmov.f32	s0, s15
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	200028c4 	.word	0x200028c4
 8006990:	200028b8 	.word	0x200028b8
 8006994:	43800000 	.word	0x43800000

08006998 <__cvt>:
 8006998:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800699c:	ec57 6b10 	vmov	r6, r7, d0
 80069a0:	2f00      	cmp	r7, #0
 80069a2:	460c      	mov	r4, r1
 80069a4:	4619      	mov	r1, r3
 80069a6:	463b      	mov	r3, r7
 80069a8:	bfbb      	ittet	lt
 80069aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80069ae:	461f      	movlt	r7, r3
 80069b0:	2300      	movge	r3, #0
 80069b2:	232d      	movlt	r3, #45	@ 0x2d
 80069b4:	700b      	strb	r3, [r1, #0]
 80069b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80069bc:	4691      	mov	r9, r2
 80069be:	f023 0820 	bic.w	r8, r3, #32
 80069c2:	bfbc      	itt	lt
 80069c4:	4632      	movlt	r2, r6
 80069c6:	4616      	movlt	r6, r2
 80069c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069cc:	d005      	beq.n	80069da <__cvt+0x42>
 80069ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80069d2:	d100      	bne.n	80069d6 <__cvt+0x3e>
 80069d4:	3401      	adds	r4, #1
 80069d6:	2102      	movs	r1, #2
 80069d8:	e000      	b.n	80069dc <__cvt+0x44>
 80069da:	2103      	movs	r1, #3
 80069dc:	ab03      	add	r3, sp, #12
 80069de:	9301      	str	r3, [sp, #4]
 80069e0:	ab02      	add	r3, sp, #8
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	ec47 6b10 	vmov	d0, r6, r7
 80069e8:	4653      	mov	r3, sl
 80069ea:	4622      	mov	r2, r4
 80069ec:	f000 fe84 	bl	80076f8 <_dtoa_r>
 80069f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80069f4:	4605      	mov	r5, r0
 80069f6:	d119      	bne.n	8006a2c <__cvt+0x94>
 80069f8:	f019 0f01 	tst.w	r9, #1
 80069fc:	d00e      	beq.n	8006a1c <__cvt+0x84>
 80069fe:	eb00 0904 	add.w	r9, r0, r4
 8006a02:	2200      	movs	r2, #0
 8006a04:	2300      	movs	r3, #0
 8006a06:	4630      	mov	r0, r6
 8006a08:	4639      	mov	r1, r7
 8006a0a:	f7fa f85d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a0e:	b108      	cbz	r0, 8006a14 <__cvt+0x7c>
 8006a10:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a14:	2230      	movs	r2, #48	@ 0x30
 8006a16:	9b03      	ldr	r3, [sp, #12]
 8006a18:	454b      	cmp	r3, r9
 8006a1a:	d31e      	bcc.n	8006a5a <__cvt+0xc2>
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a20:	1b5b      	subs	r3, r3, r5
 8006a22:	4628      	mov	r0, r5
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	b004      	add	sp, #16
 8006a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006a30:	eb00 0904 	add.w	r9, r0, r4
 8006a34:	d1e5      	bne.n	8006a02 <__cvt+0x6a>
 8006a36:	7803      	ldrb	r3, [r0, #0]
 8006a38:	2b30      	cmp	r3, #48	@ 0x30
 8006a3a:	d10a      	bne.n	8006a52 <__cvt+0xba>
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4630      	mov	r0, r6
 8006a42:	4639      	mov	r1, r7
 8006a44:	f7fa f840 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a48:	b918      	cbnz	r0, 8006a52 <__cvt+0xba>
 8006a4a:	f1c4 0401 	rsb	r4, r4, #1
 8006a4e:	f8ca 4000 	str.w	r4, [sl]
 8006a52:	f8da 3000 	ldr.w	r3, [sl]
 8006a56:	4499      	add	r9, r3
 8006a58:	e7d3      	b.n	8006a02 <__cvt+0x6a>
 8006a5a:	1c59      	adds	r1, r3, #1
 8006a5c:	9103      	str	r1, [sp, #12]
 8006a5e:	701a      	strb	r2, [r3, #0]
 8006a60:	e7d9      	b.n	8006a16 <__cvt+0x7e>

08006a62 <__exponent>:
 8006a62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a64:	2900      	cmp	r1, #0
 8006a66:	bfba      	itte	lt
 8006a68:	4249      	neglt	r1, r1
 8006a6a:	232d      	movlt	r3, #45	@ 0x2d
 8006a6c:	232b      	movge	r3, #43	@ 0x2b
 8006a6e:	2909      	cmp	r1, #9
 8006a70:	7002      	strb	r2, [r0, #0]
 8006a72:	7043      	strb	r3, [r0, #1]
 8006a74:	dd29      	ble.n	8006aca <__exponent+0x68>
 8006a76:	f10d 0307 	add.w	r3, sp, #7
 8006a7a:	461d      	mov	r5, r3
 8006a7c:	270a      	movs	r7, #10
 8006a7e:	461a      	mov	r2, r3
 8006a80:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a84:	fb07 1416 	mls	r4, r7, r6, r1
 8006a88:	3430      	adds	r4, #48	@ 0x30
 8006a8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a8e:	460c      	mov	r4, r1
 8006a90:	2c63      	cmp	r4, #99	@ 0x63
 8006a92:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a96:	4631      	mov	r1, r6
 8006a98:	dcf1      	bgt.n	8006a7e <__exponent+0x1c>
 8006a9a:	3130      	adds	r1, #48	@ 0x30
 8006a9c:	1e94      	subs	r4, r2, #2
 8006a9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006aa2:	1c41      	adds	r1, r0, #1
 8006aa4:	4623      	mov	r3, r4
 8006aa6:	42ab      	cmp	r3, r5
 8006aa8:	d30a      	bcc.n	8006ac0 <__exponent+0x5e>
 8006aaa:	f10d 0309 	add.w	r3, sp, #9
 8006aae:	1a9b      	subs	r3, r3, r2
 8006ab0:	42ac      	cmp	r4, r5
 8006ab2:	bf88      	it	hi
 8006ab4:	2300      	movhi	r3, #0
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	4403      	add	r3, r0
 8006aba:	1a18      	subs	r0, r3, r0
 8006abc:	b003      	add	sp, #12
 8006abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ac0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006ac4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006ac8:	e7ed      	b.n	8006aa6 <__exponent+0x44>
 8006aca:	2330      	movs	r3, #48	@ 0x30
 8006acc:	3130      	adds	r1, #48	@ 0x30
 8006ace:	7083      	strb	r3, [r0, #2]
 8006ad0:	70c1      	strb	r1, [r0, #3]
 8006ad2:	1d03      	adds	r3, r0, #4
 8006ad4:	e7f1      	b.n	8006aba <__exponent+0x58>
	...

08006ad8 <_printf_float>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	b08d      	sub	sp, #52	@ 0x34
 8006ade:	460c      	mov	r4, r1
 8006ae0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	461f      	mov	r7, r3
 8006ae8:	4605      	mov	r5, r0
 8006aea:	f000 fcf5 	bl	80074d8 <_localeconv_r>
 8006aee:	6803      	ldr	r3, [r0, #0]
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7f9 fbbc 	bl	8000270 <strlen>
 8006af8:	2300      	movs	r3, #0
 8006afa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006afc:	f8d8 3000 	ldr.w	r3, [r8]
 8006b00:	9005      	str	r0, [sp, #20]
 8006b02:	3307      	adds	r3, #7
 8006b04:	f023 0307 	bic.w	r3, r3, #7
 8006b08:	f103 0208 	add.w	r2, r3, #8
 8006b0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b10:	f8d4 b000 	ldr.w	fp, [r4]
 8006b14:	f8c8 2000 	str.w	r2, [r8]
 8006b18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006b20:	9307      	str	r3, [sp, #28]
 8006b22:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006b2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8006da0 <_printf_float+0x2c8>)
 8006b30:	f04f 32ff 	mov.w	r2, #4294967295
 8006b34:	f7f9 fffa 	bl	8000b2c <__aeabi_dcmpun>
 8006b38:	bb70      	cbnz	r0, 8006b98 <_printf_float+0xc0>
 8006b3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b3e:	4b98      	ldr	r3, [pc, #608]	@ (8006da0 <_printf_float+0x2c8>)
 8006b40:	f04f 32ff 	mov.w	r2, #4294967295
 8006b44:	f7f9 ffd4 	bl	8000af0 <__aeabi_dcmple>
 8006b48:	bb30      	cbnz	r0, 8006b98 <_printf_float+0xc0>
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	4640      	mov	r0, r8
 8006b50:	4649      	mov	r1, r9
 8006b52:	f7f9 ffc3 	bl	8000adc <__aeabi_dcmplt>
 8006b56:	b110      	cbz	r0, 8006b5e <_printf_float+0x86>
 8006b58:	232d      	movs	r3, #45	@ 0x2d
 8006b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b5e:	4a91      	ldr	r2, [pc, #580]	@ (8006da4 <_printf_float+0x2cc>)
 8006b60:	4b91      	ldr	r3, [pc, #580]	@ (8006da8 <_printf_float+0x2d0>)
 8006b62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b66:	bf8c      	ite	hi
 8006b68:	4690      	movhi	r8, r2
 8006b6a:	4698      	movls	r8, r3
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	6123      	str	r3, [r4, #16]
 8006b70:	f02b 0304 	bic.w	r3, fp, #4
 8006b74:	6023      	str	r3, [r4, #0]
 8006b76:	f04f 0900 	mov.w	r9, #0
 8006b7a:	9700      	str	r7, [sp, #0]
 8006b7c:	4633      	mov	r3, r6
 8006b7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b80:	4621      	mov	r1, r4
 8006b82:	4628      	mov	r0, r5
 8006b84:	f000 f9d2 	bl	8006f2c <_printf_common>
 8006b88:	3001      	adds	r0, #1
 8006b8a:	f040 808d 	bne.w	8006ca8 <_printf_float+0x1d0>
 8006b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8006b92:	b00d      	add	sp, #52	@ 0x34
 8006b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b98:	4642      	mov	r2, r8
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	f7f9 ffc4 	bl	8000b2c <__aeabi_dcmpun>
 8006ba4:	b140      	cbz	r0, 8006bb8 <_printf_float+0xe0>
 8006ba6:	464b      	mov	r3, r9
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bfbc      	itt	lt
 8006bac:	232d      	movlt	r3, #45	@ 0x2d
 8006bae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006bb2:	4a7e      	ldr	r2, [pc, #504]	@ (8006dac <_printf_float+0x2d4>)
 8006bb4:	4b7e      	ldr	r3, [pc, #504]	@ (8006db0 <_printf_float+0x2d8>)
 8006bb6:	e7d4      	b.n	8006b62 <_printf_float+0x8a>
 8006bb8:	6863      	ldr	r3, [r4, #4]
 8006bba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006bbe:	9206      	str	r2, [sp, #24]
 8006bc0:	1c5a      	adds	r2, r3, #1
 8006bc2:	d13b      	bne.n	8006c3c <_printf_float+0x164>
 8006bc4:	2306      	movs	r3, #6
 8006bc6:	6063      	str	r3, [r4, #4]
 8006bc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006bcc:	2300      	movs	r3, #0
 8006bce:	6022      	str	r2, [r4, #0]
 8006bd0:	9303      	str	r3, [sp, #12]
 8006bd2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006bd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006bd8:	ab09      	add	r3, sp, #36	@ 0x24
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	6861      	ldr	r1, [r4, #4]
 8006bde:	ec49 8b10 	vmov	d0, r8, r9
 8006be2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006be6:	4628      	mov	r0, r5
 8006be8:	f7ff fed6 	bl	8006998 <__cvt>
 8006bec:	9b06      	ldr	r3, [sp, #24]
 8006bee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bf0:	2b47      	cmp	r3, #71	@ 0x47
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	d129      	bne.n	8006c4a <_printf_float+0x172>
 8006bf6:	1cc8      	adds	r0, r1, #3
 8006bf8:	db02      	blt.n	8006c00 <_printf_float+0x128>
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	dd41      	ble.n	8006c84 <_printf_float+0x1ac>
 8006c00:	f1aa 0a02 	sub.w	sl, sl, #2
 8006c04:	fa5f fa8a 	uxtb.w	sl, sl
 8006c08:	3901      	subs	r1, #1
 8006c0a:	4652      	mov	r2, sl
 8006c0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006c10:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c12:	f7ff ff26 	bl	8006a62 <__exponent>
 8006c16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c18:	1813      	adds	r3, r2, r0
 8006c1a:	2a01      	cmp	r2, #1
 8006c1c:	4681      	mov	r9, r0
 8006c1e:	6123      	str	r3, [r4, #16]
 8006c20:	dc02      	bgt.n	8006c28 <_printf_float+0x150>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	07d2      	lsls	r2, r2, #31
 8006c26:	d501      	bpl.n	8006c2c <_printf_float+0x154>
 8006c28:	3301      	adds	r3, #1
 8006c2a:	6123      	str	r3, [r4, #16]
 8006c2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d0a2      	beq.n	8006b7a <_printf_float+0xa2>
 8006c34:	232d      	movs	r3, #45	@ 0x2d
 8006c36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c3a:	e79e      	b.n	8006b7a <_printf_float+0xa2>
 8006c3c:	9a06      	ldr	r2, [sp, #24]
 8006c3e:	2a47      	cmp	r2, #71	@ 0x47
 8006c40:	d1c2      	bne.n	8006bc8 <_printf_float+0xf0>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1c0      	bne.n	8006bc8 <_printf_float+0xf0>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e7bd      	b.n	8006bc6 <_printf_float+0xee>
 8006c4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c4e:	d9db      	bls.n	8006c08 <_printf_float+0x130>
 8006c50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006c54:	d118      	bne.n	8006c88 <_printf_float+0x1b0>
 8006c56:	2900      	cmp	r1, #0
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	dd0b      	ble.n	8006c74 <_printf_float+0x19c>
 8006c5c:	6121      	str	r1, [r4, #16]
 8006c5e:	b913      	cbnz	r3, 8006c66 <_printf_float+0x18e>
 8006c60:	6822      	ldr	r2, [r4, #0]
 8006c62:	07d0      	lsls	r0, r2, #31
 8006c64:	d502      	bpl.n	8006c6c <_printf_float+0x194>
 8006c66:	3301      	adds	r3, #1
 8006c68:	440b      	add	r3, r1
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c6e:	f04f 0900 	mov.w	r9, #0
 8006c72:	e7db      	b.n	8006c2c <_printf_float+0x154>
 8006c74:	b913      	cbnz	r3, 8006c7c <_printf_float+0x1a4>
 8006c76:	6822      	ldr	r2, [r4, #0]
 8006c78:	07d2      	lsls	r2, r2, #31
 8006c7a:	d501      	bpl.n	8006c80 <_printf_float+0x1a8>
 8006c7c:	3302      	adds	r3, #2
 8006c7e:	e7f4      	b.n	8006c6a <_printf_float+0x192>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e7f2      	b.n	8006c6a <_printf_float+0x192>
 8006c84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c8a:	4299      	cmp	r1, r3
 8006c8c:	db05      	blt.n	8006c9a <_printf_float+0x1c2>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	6121      	str	r1, [r4, #16]
 8006c92:	07d8      	lsls	r0, r3, #31
 8006c94:	d5ea      	bpl.n	8006c6c <_printf_float+0x194>
 8006c96:	1c4b      	adds	r3, r1, #1
 8006c98:	e7e7      	b.n	8006c6a <_printf_float+0x192>
 8006c9a:	2900      	cmp	r1, #0
 8006c9c:	bfd4      	ite	le
 8006c9e:	f1c1 0202 	rsble	r2, r1, #2
 8006ca2:	2201      	movgt	r2, #1
 8006ca4:	4413      	add	r3, r2
 8006ca6:	e7e0      	b.n	8006c6a <_printf_float+0x192>
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	055a      	lsls	r2, r3, #21
 8006cac:	d407      	bmi.n	8006cbe <_printf_float+0x1e6>
 8006cae:	6923      	ldr	r3, [r4, #16]
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	4631      	mov	r1, r6
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	47b8      	blx	r7
 8006cb8:	3001      	adds	r0, #1
 8006cba:	d12b      	bne.n	8006d14 <_printf_float+0x23c>
 8006cbc:	e767      	b.n	8006b8e <_printf_float+0xb6>
 8006cbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006cc2:	f240 80dd 	bls.w	8006e80 <_printf_float+0x3a8>
 8006cc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f7f9 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006cd2:	2800      	cmp	r0, #0
 8006cd4:	d033      	beq.n	8006d3e <_printf_float+0x266>
 8006cd6:	4a37      	ldr	r2, [pc, #220]	@ (8006db4 <_printf_float+0x2dc>)
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4631      	mov	r1, r6
 8006cdc:	4628      	mov	r0, r5
 8006cde:	47b8      	blx	r7
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	f43f af54 	beq.w	8006b8e <_printf_float+0xb6>
 8006ce6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006cea:	4543      	cmp	r3, r8
 8006cec:	db02      	blt.n	8006cf4 <_printf_float+0x21c>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	07d8      	lsls	r0, r3, #31
 8006cf2:	d50f      	bpl.n	8006d14 <_printf_float+0x23c>
 8006cf4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cf8:	4631      	mov	r1, r6
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	47b8      	blx	r7
 8006cfe:	3001      	adds	r0, #1
 8006d00:	f43f af45 	beq.w	8006b8e <_printf_float+0xb6>
 8006d04:	f04f 0900 	mov.w	r9, #0
 8006d08:	f108 38ff 	add.w	r8, r8, #4294967295
 8006d0c:	f104 0a1a 	add.w	sl, r4, #26
 8006d10:	45c8      	cmp	r8, r9
 8006d12:	dc09      	bgt.n	8006d28 <_printf_float+0x250>
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	079b      	lsls	r3, r3, #30
 8006d18:	f100 8103 	bmi.w	8006f22 <_printf_float+0x44a>
 8006d1c:	68e0      	ldr	r0, [r4, #12]
 8006d1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d20:	4298      	cmp	r0, r3
 8006d22:	bfb8      	it	lt
 8006d24:	4618      	movlt	r0, r3
 8006d26:	e734      	b.n	8006b92 <_printf_float+0xba>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	4631      	mov	r1, r6
 8006d2e:	4628      	mov	r0, r5
 8006d30:	47b8      	blx	r7
 8006d32:	3001      	adds	r0, #1
 8006d34:	f43f af2b 	beq.w	8006b8e <_printf_float+0xb6>
 8006d38:	f109 0901 	add.w	r9, r9, #1
 8006d3c:	e7e8      	b.n	8006d10 <_printf_float+0x238>
 8006d3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	dc39      	bgt.n	8006db8 <_printf_float+0x2e0>
 8006d44:	4a1b      	ldr	r2, [pc, #108]	@ (8006db4 <_printf_float+0x2dc>)
 8006d46:	2301      	movs	r3, #1
 8006d48:	4631      	mov	r1, r6
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	47b8      	blx	r7
 8006d4e:	3001      	adds	r0, #1
 8006d50:	f43f af1d 	beq.w	8006b8e <_printf_float+0xb6>
 8006d54:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006d58:	ea59 0303 	orrs.w	r3, r9, r3
 8006d5c:	d102      	bne.n	8006d64 <_printf_float+0x28c>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	07d9      	lsls	r1, r3, #31
 8006d62:	d5d7      	bpl.n	8006d14 <_printf_float+0x23c>
 8006d64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	f43f af0d 	beq.w	8006b8e <_printf_float+0xb6>
 8006d74:	f04f 0a00 	mov.w	sl, #0
 8006d78:	f104 0b1a 	add.w	fp, r4, #26
 8006d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d7e:	425b      	negs	r3, r3
 8006d80:	4553      	cmp	r3, sl
 8006d82:	dc01      	bgt.n	8006d88 <_printf_float+0x2b0>
 8006d84:	464b      	mov	r3, r9
 8006d86:	e793      	b.n	8006cb0 <_printf_float+0x1d8>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	465a      	mov	r2, fp
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4628      	mov	r0, r5
 8006d90:	47b8      	blx	r7
 8006d92:	3001      	adds	r0, #1
 8006d94:	f43f aefb 	beq.w	8006b8e <_printf_float+0xb6>
 8006d98:	f10a 0a01 	add.w	sl, sl, #1
 8006d9c:	e7ee      	b.n	8006d7c <_printf_float+0x2a4>
 8006d9e:	bf00      	nop
 8006da0:	7fefffff 	.word	0x7fefffff
 8006da4:	0800a298 	.word	0x0800a298
 8006da8:	0800a294 	.word	0x0800a294
 8006dac:	0800a2a0 	.word	0x0800a2a0
 8006db0:	0800a29c 	.word	0x0800a29c
 8006db4:	0800a2a4 	.word	0x0800a2a4
 8006db8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006dbe:	4553      	cmp	r3, sl
 8006dc0:	bfa8      	it	ge
 8006dc2:	4653      	movge	r3, sl
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	4699      	mov	r9, r3
 8006dc8:	dc36      	bgt.n	8006e38 <_printf_float+0x360>
 8006dca:	f04f 0b00 	mov.w	fp, #0
 8006dce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dd2:	f104 021a 	add.w	r2, r4, #26
 8006dd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006dd8:	9306      	str	r3, [sp, #24]
 8006dda:	eba3 0309 	sub.w	r3, r3, r9
 8006dde:	455b      	cmp	r3, fp
 8006de0:	dc31      	bgt.n	8006e46 <_printf_float+0x36e>
 8006de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006de4:	459a      	cmp	sl, r3
 8006de6:	dc3a      	bgt.n	8006e5e <_printf_float+0x386>
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	07da      	lsls	r2, r3, #31
 8006dec:	d437      	bmi.n	8006e5e <_printf_float+0x386>
 8006dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df0:	ebaa 0903 	sub.w	r9, sl, r3
 8006df4:	9b06      	ldr	r3, [sp, #24]
 8006df6:	ebaa 0303 	sub.w	r3, sl, r3
 8006dfa:	4599      	cmp	r9, r3
 8006dfc:	bfa8      	it	ge
 8006dfe:	4699      	movge	r9, r3
 8006e00:	f1b9 0f00 	cmp.w	r9, #0
 8006e04:	dc33      	bgt.n	8006e6e <_printf_float+0x396>
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006e0e:	f104 0b1a 	add.w	fp, r4, #26
 8006e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e14:	ebaa 0303 	sub.w	r3, sl, r3
 8006e18:	eba3 0309 	sub.w	r3, r3, r9
 8006e1c:	4543      	cmp	r3, r8
 8006e1e:	f77f af79 	ble.w	8006d14 <_printf_float+0x23c>
 8006e22:	2301      	movs	r3, #1
 8006e24:	465a      	mov	r2, fp
 8006e26:	4631      	mov	r1, r6
 8006e28:	4628      	mov	r0, r5
 8006e2a:	47b8      	blx	r7
 8006e2c:	3001      	adds	r0, #1
 8006e2e:	f43f aeae 	beq.w	8006b8e <_printf_float+0xb6>
 8006e32:	f108 0801 	add.w	r8, r8, #1
 8006e36:	e7ec      	b.n	8006e12 <_printf_float+0x33a>
 8006e38:	4642      	mov	r2, r8
 8006e3a:	4631      	mov	r1, r6
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	47b8      	blx	r7
 8006e40:	3001      	adds	r0, #1
 8006e42:	d1c2      	bne.n	8006dca <_printf_float+0x2f2>
 8006e44:	e6a3      	b.n	8006b8e <_printf_float+0xb6>
 8006e46:	2301      	movs	r3, #1
 8006e48:	4631      	mov	r1, r6
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	9206      	str	r2, [sp, #24]
 8006e4e:	47b8      	blx	r7
 8006e50:	3001      	adds	r0, #1
 8006e52:	f43f ae9c 	beq.w	8006b8e <_printf_float+0xb6>
 8006e56:	9a06      	ldr	r2, [sp, #24]
 8006e58:	f10b 0b01 	add.w	fp, fp, #1
 8006e5c:	e7bb      	b.n	8006dd6 <_printf_float+0x2fe>
 8006e5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d1c0      	bne.n	8006dee <_printf_float+0x316>
 8006e6c:	e68f      	b.n	8006b8e <_printf_float+0xb6>
 8006e6e:	9a06      	ldr	r2, [sp, #24]
 8006e70:	464b      	mov	r3, r9
 8006e72:	4442      	add	r2, r8
 8006e74:	4631      	mov	r1, r6
 8006e76:	4628      	mov	r0, r5
 8006e78:	47b8      	blx	r7
 8006e7a:	3001      	adds	r0, #1
 8006e7c:	d1c3      	bne.n	8006e06 <_printf_float+0x32e>
 8006e7e:	e686      	b.n	8006b8e <_printf_float+0xb6>
 8006e80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e84:	f1ba 0f01 	cmp.w	sl, #1
 8006e88:	dc01      	bgt.n	8006e8e <_printf_float+0x3b6>
 8006e8a:	07db      	lsls	r3, r3, #31
 8006e8c:	d536      	bpl.n	8006efc <_printf_float+0x424>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4642      	mov	r2, r8
 8006e92:	4631      	mov	r1, r6
 8006e94:	4628      	mov	r0, r5
 8006e96:	47b8      	blx	r7
 8006e98:	3001      	adds	r0, #1
 8006e9a:	f43f ae78 	beq.w	8006b8e <_printf_float+0xb6>
 8006e9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f ae70 	beq.w	8006b8e <_printf_float+0xb6>
 8006eae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006eba:	f7f9 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ebe:	b9c0      	cbnz	r0, 8006ef2 <_printf_float+0x41a>
 8006ec0:	4653      	mov	r3, sl
 8006ec2:	f108 0201 	add.w	r2, r8, #1
 8006ec6:	4631      	mov	r1, r6
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b8      	blx	r7
 8006ecc:	3001      	adds	r0, #1
 8006ece:	d10c      	bne.n	8006eea <_printf_float+0x412>
 8006ed0:	e65d      	b.n	8006b8e <_printf_float+0xb6>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	465a      	mov	r2, fp
 8006ed6:	4631      	mov	r1, r6
 8006ed8:	4628      	mov	r0, r5
 8006eda:	47b8      	blx	r7
 8006edc:	3001      	adds	r0, #1
 8006ede:	f43f ae56 	beq.w	8006b8e <_printf_float+0xb6>
 8006ee2:	f108 0801 	add.w	r8, r8, #1
 8006ee6:	45d0      	cmp	r8, sl
 8006ee8:	dbf3      	blt.n	8006ed2 <_printf_float+0x3fa>
 8006eea:	464b      	mov	r3, r9
 8006eec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ef0:	e6df      	b.n	8006cb2 <_printf_float+0x1da>
 8006ef2:	f04f 0800 	mov.w	r8, #0
 8006ef6:	f104 0b1a 	add.w	fp, r4, #26
 8006efa:	e7f4      	b.n	8006ee6 <_printf_float+0x40e>
 8006efc:	2301      	movs	r3, #1
 8006efe:	4642      	mov	r2, r8
 8006f00:	e7e1      	b.n	8006ec6 <_printf_float+0x3ee>
 8006f02:	2301      	movs	r3, #1
 8006f04:	464a      	mov	r2, r9
 8006f06:	4631      	mov	r1, r6
 8006f08:	4628      	mov	r0, r5
 8006f0a:	47b8      	blx	r7
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	f43f ae3e 	beq.w	8006b8e <_printf_float+0xb6>
 8006f12:	f108 0801 	add.w	r8, r8, #1
 8006f16:	68e3      	ldr	r3, [r4, #12]
 8006f18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f1a:	1a5b      	subs	r3, r3, r1
 8006f1c:	4543      	cmp	r3, r8
 8006f1e:	dcf0      	bgt.n	8006f02 <_printf_float+0x42a>
 8006f20:	e6fc      	b.n	8006d1c <_printf_float+0x244>
 8006f22:	f04f 0800 	mov.w	r8, #0
 8006f26:	f104 0919 	add.w	r9, r4, #25
 8006f2a:	e7f4      	b.n	8006f16 <_printf_float+0x43e>

08006f2c <_printf_common>:
 8006f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f30:	4616      	mov	r6, r2
 8006f32:	4698      	mov	r8, r3
 8006f34:	688a      	ldr	r2, [r1, #8]
 8006f36:	690b      	ldr	r3, [r1, #16]
 8006f38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	bfb8      	it	lt
 8006f40:	4613      	movlt	r3, r2
 8006f42:	6033      	str	r3, [r6, #0]
 8006f44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006f48:	4607      	mov	r7, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	b10a      	cbz	r2, 8006f52 <_printf_common+0x26>
 8006f4e:	3301      	adds	r3, #1
 8006f50:	6033      	str	r3, [r6, #0]
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	0699      	lsls	r1, r3, #26
 8006f56:	bf42      	ittt	mi
 8006f58:	6833      	ldrmi	r3, [r6, #0]
 8006f5a:	3302      	addmi	r3, #2
 8006f5c:	6033      	strmi	r3, [r6, #0]
 8006f5e:	6825      	ldr	r5, [r4, #0]
 8006f60:	f015 0506 	ands.w	r5, r5, #6
 8006f64:	d106      	bne.n	8006f74 <_printf_common+0x48>
 8006f66:	f104 0a19 	add.w	sl, r4, #25
 8006f6a:	68e3      	ldr	r3, [r4, #12]
 8006f6c:	6832      	ldr	r2, [r6, #0]
 8006f6e:	1a9b      	subs	r3, r3, r2
 8006f70:	42ab      	cmp	r3, r5
 8006f72:	dc26      	bgt.n	8006fc2 <_printf_common+0x96>
 8006f74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f78:	6822      	ldr	r2, [r4, #0]
 8006f7a:	3b00      	subs	r3, #0
 8006f7c:	bf18      	it	ne
 8006f7e:	2301      	movne	r3, #1
 8006f80:	0692      	lsls	r2, r2, #26
 8006f82:	d42b      	bmi.n	8006fdc <_printf_common+0xb0>
 8006f84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f88:	4641      	mov	r1, r8
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	47c8      	blx	r9
 8006f8e:	3001      	adds	r0, #1
 8006f90:	d01e      	beq.n	8006fd0 <_printf_common+0xa4>
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	6922      	ldr	r2, [r4, #16]
 8006f96:	f003 0306 	and.w	r3, r3, #6
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	bf02      	ittt	eq
 8006f9e:	68e5      	ldreq	r5, [r4, #12]
 8006fa0:	6833      	ldreq	r3, [r6, #0]
 8006fa2:	1aed      	subeq	r5, r5, r3
 8006fa4:	68a3      	ldr	r3, [r4, #8]
 8006fa6:	bf0c      	ite	eq
 8006fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fac:	2500      	movne	r5, #0
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	bfc4      	itt	gt
 8006fb2:	1a9b      	subgt	r3, r3, r2
 8006fb4:	18ed      	addgt	r5, r5, r3
 8006fb6:	2600      	movs	r6, #0
 8006fb8:	341a      	adds	r4, #26
 8006fba:	42b5      	cmp	r5, r6
 8006fbc:	d11a      	bne.n	8006ff4 <_printf_common+0xc8>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e008      	b.n	8006fd4 <_printf_common+0xa8>
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	4652      	mov	r2, sl
 8006fc6:	4641      	mov	r1, r8
 8006fc8:	4638      	mov	r0, r7
 8006fca:	47c8      	blx	r9
 8006fcc:	3001      	adds	r0, #1
 8006fce:	d103      	bne.n	8006fd8 <_printf_common+0xac>
 8006fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fd8:	3501      	adds	r5, #1
 8006fda:	e7c6      	b.n	8006f6a <_printf_common+0x3e>
 8006fdc:	18e1      	adds	r1, r4, r3
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	2030      	movs	r0, #48	@ 0x30
 8006fe2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006fe6:	4422      	add	r2, r4
 8006fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006fec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	e7c7      	b.n	8006f84 <_printf_common+0x58>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	4622      	mov	r2, r4
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	47c8      	blx	r9
 8006ffe:	3001      	adds	r0, #1
 8007000:	d0e6      	beq.n	8006fd0 <_printf_common+0xa4>
 8007002:	3601      	adds	r6, #1
 8007004:	e7d9      	b.n	8006fba <_printf_common+0x8e>
	...

08007008 <_printf_i>:
 8007008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	7e0f      	ldrb	r7, [r1, #24]
 800700e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007010:	2f78      	cmp	r7, #120	@ 0x78
 8007012:	4691      	mov	r9, r2
 8007014:	4680      	mov	r8, r0
 8007016:	460c      	mov	r4, r1
 8007018:	469a      	mov	sl, r3
 800701a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800701e:	d807      	bhi.n	8007030 <_printf_i+0x28>
 8007020:	2f62      	cmp	r7, #98	@ 0x62
 8007022:	d80a      	bhi.n	800703a <_printf_i+0x32>
 8007024:	2f00      	cmp	r7, #0
 8007026:	f000 80d1 	beq.w	80071cc <_printf_i+0x1c4>
 800702a:	2f58      	cmp	r7, #88	@ 0x58
 800702c:	f000 80b8 	beq.w	80071a0 <_printf_i+0x198>
 8007030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007034:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007038:	e03a      	b.n	80070b0 <_printf_i+0xa8>
 800703a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800703e:	2b15      	cmp	r3, #21
 8007040:	d8f6      	bhi.n	8007030 <_printf_i+0x28>
 8007042:	a101      	add	r1, pc, #4	@ (adr r1, 8007048 <_printf_i+0x40>)
 8007044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007048:	080070a1 	.word	0x080070a1
 800704c:	080070b5 	.word	0x080070b5
 8007050:	08007031 	.word	0x08007031
 8007054:	08007031 	.word	0x08007031
 8007058:	08007031 	.word	0x08007031
 800705c:	08007031 	.word	0x08007031
 8007060:	080070b5 	.word	0x080070b5
 8007064:	08007031 	.word	0x08007031
 8007068:	08007031 	.word	0x08007031
 800706c:	08007031 	.word	0x08007031
 8007070:	08007031 	.word	0x08007031
 8007074:	080071b3 	.word	0x080071b3
 8007078:	080070df 	.word	0x080070df
 800707c:	0800716d 	.word	0x0800716d
 8007080:	08007031 	.word	0x08007031
 8007084:	08007031 	.word	0x08007031
 8007088:	080071d5 	.word	0x080071d5
 800708c:	08007031 	.word	0x08007031
 8007090:	080070df 	.word	0x080070df
 8007094:	08007031 	.word	0x08007031
 8007098:	08007031 	.word	0x08007031
 800709c:	08007175 	.word	0x08007175
 80070a0:	6833      	ldr	r3, [r6, #0]
 80070a2:	1d1a      	adds	r2, r3, #4
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6032      	str	r2, [r6, #0]
 80070a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80070ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80070b0:	2301      	movs	r3, #1
 80070b2:	e09c      	b.n	80071ee <_printf_i+0x1e6>
 80070b4:	6833      	ldr	r3, [r6, #0]
 80070b6:	6820      	ldr	r0, [r4, #0]
 80070b8:	1d19      	adds	r1, r3, #4
 80070ba:	6031      	str	r1, [r6, #0]
 80070bc:	0606      	lsls	r6, r0, #24
 80070be:	d501      	bpl.n	80070c4 <_printf_i+0xbc>
 80070c0:	681d      	ldr	r5, [r3, #0]
 80070c2:	e003      	b.n	80070cc <_printf_i+0xc4>
 80070c4:	0645      	lsls	r5, r0, #25
 80070c6:	d5fb      	bpl.n	80070c0 <_printf_i+0xb8>
 80070c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	da03      	bge.n	80070d8 <_printf_i+0xd0>
 80070d0:	232d      	movs	r3, #45	@ 0x2d
 80070d2:	426d      	negs	r5, r5
 80070d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070d8:	4858      	ldr	r0, [pc, #352]	@ (800723c <_printf_i+0x234>)
 80070da:	230a      	movs	r3, #10
 80070dc:	e011      	b.n	8007102 <_printf_i+0xfa>
 80070de:	6821      	ldr	r1, [r4, #0]
 80070e0:	6833      	ldr	r3, [r6, #0]
 80070e2:	0608      	lsls	r0, r1, #24
 80070e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80070e8:	d402      	bmi.n	80070f0 <_printf_i+0xe8>
 80070ea:	0649      	lsls	r1, r1, #25
 80070ec:	bf48      	it	mi
 80070ee:	b2ad      	uxthmi	r5, r5
 80070f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80070f2:	4852      	ldr	r0, [pc, #328]	@ (800723c <_printf_i+0x234>)
 80070f4:	6033      	str	r3, [r6, #0]
 80070f6:	bf14      	ite	ne
 80070f8:	230a      	movne	r3, #10
 80070fa:	2308      	moveq	r3, #8
 80070fc:	2100      	movs	r1, #0
 80070fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007102:	6866      	ldr	r6, [r4, #4]
 8007104:	60a6      	str	r6, [r4, #8]
 8007106:	2e00      	cmp	r6, #0
 8007108:	db05      	blt.n	8007116 <_printf_i+0x10e>
 800710a:	6821      	ldr	r1, [r4, #0]
 800710c:	432e      	orrs	r6, r5
 800710e:	f021 0104 	bic.w	r1, r1, #4
 8007112:	6021      	str	r1, [r4, #0]
 8007114:	d04b      	beq.n	80071ae <_printf_i+0x1a6>
 8007116:	4616      	mov	r6, r2
 8007118:	fbb5 f1f3 	udiv	r1, r5, r3
 800711c:	fb03 5711 	mls	r7, r3, r1, r5
 8007120:	5dc7      	ldrb	r7, [r0, r7]
 8007122:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007126:	462f      	mov	r7, r5
 8007128:	42bb      	cmp	r3, r7
 800712a:	460d      	mov	r5, r1
 800712c:	d9f4      	bls.n	8007118 <_printf_i+0x110>
 800712e:	2b08      	cmp	r3, #8
 8007130:	d10b      	bne.n	800714a <_printf_i+0x142>
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	07df      	lsls	r7, r3, #31
 8007136:	d508      	bpl.n	800714a <_printf_i+0x142>
 8007138:	6923      	ldr	r3, [r4, #16]
 800713a:	6861      	ldr	r1, [r4, #4]
 800713c:	4299      	cmp	r1, r3
 800713e:	bfde      	ittt	le
 8007140:	2330      	movle	r3, #48	@ 0x30
 8007142:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007146:	f106 36ff 	addle.w	r6, r6, #4294967295
 800714a:	1b92      	subs	r2, r2, r6
 800714c:	6122      	str	r2, [r4, #16]
 800714e:	f8cd a000 	str.w	sl, [sp]
 8007152:	464b      	mov	r3, r9
 8007154:	aa03      	add	r2, sp, #12
 8007156:	4621      	mov	r1, r4
 8007158:	4640      	mov	r0, r8
 800715a:	f7ff fee7 	bl	8006f2c <_printf_common>
 800715e:	3001      	adds	r0, #1
 8007160:	d14a      	bne.n	80071f8 <_printf_i+0x1f0>
 8007162:	f04f 30ff 	mov.w	r0, #4294967295
 8007166:	b004      	add	sp, #16
 8007168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	f043 0320 	orr.w	r3, r3, #32
 8007172:	6023      	str	r3, [r4, #0]
 8007174:	4832      	ldr	r0, [pc, #200]	@ (8007240 <_printf_i+0x238>)
 8007176:	2778      	movs	r7, #120	@ 0x78
 8007178:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	6831      	ldr	r1, [r6, #0]
 8007180:	061f      	lsls	r7, r3, #24
 8007182:	f851 5b04 	ldr.w	r5, [r1], #4
 8007186:	d402      	bmi.n	800718e <_printf_i+0x186>
 8007188:	065f      	lsls	r7, r3, #25
 800718a:	bf48      	it	mi
 800718c:	b2ad      	uxthmi	r5, r5
 800718e:	6031      	str	r1, [r6, #0]
 8007190:	07d9      	lsls	r1, r3, #31
 8007192:	bf44      	itt	mi
 8007194:	f043 0320 	orrmi.w	r3, r3, #32
 8007198:	6023      	strmi	r3, [r4, #0]
 800719a:	b11d      	cbz	r5, 80071a4 <_printf_i+0x19c>
 800719c:	2310      	movs	r3, #16
 800719e:	e7ad      	b.n	80070fc <_printf_i+0xf4>
 80071a0:	4826      	ldr	r0, [pc, #152]	@ (800723c <_printf_i+0x234>)
 80071a2:	e7e9      	b.n	8007178 <_printf_i+0x170>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	f023 0320 	bic.w	r3, r3, #32
 80071aa:	6023      	str	r3, [r4, #0]
 80071ac:	e7f6      	b.n	800719c <_printf_i+0x194>
 80071ae:	4616      	mov	r6, r2
 80071b0:	e7bd      	b.n	800712e <_printf_i+0x126>
 80071b2:	6833      	ldr	r3, [r6, #0]
 80071b4:	6825      	ldr	r5, [r4, #0]
 80071b6:	6961      	ldr	r1, [r4, #20]
 80071b8:	1d18      	adds	r0, r3, #4
 80071ba:	6030      	str	r0, [r6, #0]
 80071bc:	062e      	lsls	r6, r5, #24
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	d501      	bpl.n	80071c6 <_printf_i+0x1be>
 80071c2:	6019      	str	r1, [r3, #0]
 80071c4:	e002      	b.n	80071cc <_printf_i+0x1c4>
 80071c6:	0668      	lsls	r0, r5, #25
 80071c8:	d5fb      	bpl.n	80071c2 <_printf_i+0x1ba>
 80071ca:	8019      	strh	r1, [r3, #0]
 80071cc:	2300      	movs	r3, #0
 80071ce:	6123      	str	r3, [r4, #16]
 80071d0:	4616      	mov	r6, r2
 80071d2:	e7bc      	b.n	800714e <_printf_i+0x146>
 80071d4:	6833      	ldr	r3, [r6, #0]
 80071d6:	1d1a      	adds	r2, r3, #4
 80071d8:	6032      	str	r2, [r6, #0]
 80071da:	681e      	ldr	r6, [r3, #0]
 80071dc:	6862      	ldr	r2, [r4, #4]
 80071de:	2100      	movs	r1, #0
 80071e0:	4630      	mov	r0, r6
 80071e2:	f7f8 fff5 	bl	80001d0 <memchr>
 80071e6:	b108      	cbz	r0, 80071ec <_printf_i+0x1e4>
 80071e8:	1b80      	subs	r0, r0, r6
 80071ea:	6060      	str	r0, [r4, #4]
 80071ec:	6863      	ldr	r3, [r4, #4]
 80071ee:	6123      	str	r3, [r4, #16]
 80071f0:	2300      	movs	r3, #0
 80071f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f6:	e7aa      	b.n	800714e <_printf_i+0x146>
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	4632      	mov	r2, r6
 80071fc:	4649      	mov	r1, r9
 80071fe:	4640      	mov	r0, r8
 8007200:	47d0      	blx	sl
 8007202:	3001      	adds	r0, #1
 8007204:	d0ad      	beq.n	8007162 <_printf_i+0x15a>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	079b      	lsls	r3, r3, #30
 800720a:	d413      	bmi.n	8007234 <_printf_i+0x22c>
 800720c:	68e0      	ldr	r0, [r4, #12]
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	4298      	cmp	r0, r3
 8007212:	bfb8      	it	lt
 8007214:	4618      	movlt	r0, r3
 8007216:	e7a6      	b.n	8007166 <_printf_i+0x15e>
 8007218:	2301      	movs	r3, #1
 800721a:	4632      	mov	r2, r6
 800721c:	4649      	mov	r1, r9
 800721e:	4640      	mov	r0, r8
 8007220:	47d0      	blx	sl
 8007222:	3001      	adds	r0, #1
 8007224:	d09d      	beq.n	8007162 <_printf_i+0x15a>
 8007226:	3501      	adds	r5, #1
 8007228:	68e3      	ldr	r3, [r4, #12]
 800722a:	9903      	ldr	r1, [sp, #12]
 800722c:	1a5b      	subs	r3, r3, r1
 800722e:	42ab      	cmp	r3, r5
 8007230:	dcf2      	bgt.n	8007218 <_printf_i+0x210>
 8007232:	e7eb      	b.n	800720c <_printf_i+0x204>
 8007234:	2500      	movs	r5, #0
 8007236:	f104 0619 	add.w	r6, r4, #25
 800723a:	e7f5      	b.n	8007228 <_printf_i+0x220>
 800723c:	0800a2a6 	.word	0x0800a2a6
 8007240:	0800a2b7 	.word	0x0800a2b7

08007244 <std>:
 8007244:	2300      	movs	r3, #0
 8007246:	b510      	push	{r4, lr}
 8007248:	4604      	mov	r4, r0
 800724a:	e9c0 3300 	strd	r3, r3, [r0]
 800724e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007252:	6083      	str	r3, [r0, #8]
 8007254:	8181      	strh	r1, [r0, #12]
 8007256:	6643      	str	r3, [r0, #100]	@ 0x64
 8007258:	81c2      	strh	r2, [r0, #14]
 800725a:	6183      	str	r3, [r0, #24]
 800725c:	4619      	mov	r1, r3
 800725e:	2208      	movs	r2, #8
 8007260:	305c      	adds	r0, #92	@ 0x5c
 8007262:	f000 f931 	bl	80074c8 <memset>
 8007266:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <std+0x58>)
 8007268:	6263      	str	r3, [r4, #36]	@ 0x24
 800726a:	4b0d      	ldr	r3, [pc, #52]	@ (80072a0 <std+0x5c>)
 800726c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800726e:	4b0d      	ldr	r3, [pc, #52]	@ (80072a4 <std+0x60>)
 8007270:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007272:	4b0d      	ldr	r3, [pc, #52]	@ (80072a8 <std+0x64>)
 8007274:	6323      	str	r3, [r4, #48]	@ 0x30
 8007276:	4b0d      	ldr	r3, [pc, #52]	@ (80072ac <std+0x68>)
 8007278:	6224      	str	r4, [r4, #32]
 800727a:	429c      	cmp	r4, r3
 800727c:	d006      	beq.n	800728c <std+0x48>
 800727e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007282:	4294      	cmp	r4, r2
 8007284:	d002      	beq.n	800728c <std+0x48>
 8007286:	33d0      	adds	r3, #208	@ 0xd0
 8007288:	429c      	cmp	r4, r3
 800728a:	d105      	bne.n	8007298 <std+0x54>
 800728c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007294:	f000 b994 	b.w	80075c0 <__retarget_lock_init_recursive>
 8007298:	bd10      	pop	{r4, pc}
 800729a:	bf00      	nop
 800729c:	080073c9 	.word	0x080073c9
 80072a0:	080073eb 	.word	0x080073eb
 80072a4:	08007423 	.word	0x08007423
 80072a8:	08007447 	.word	0x08007447
 80072ac:	20002ab8 	.word	0x20002ab8

080072b0 <stdio_exit_handler>:
 80072b0:	4a02      	ldr	r2, [pc, #8]	@ (80072bc <stdio_exit_handler+0xc>)
 80072b2:	4903      	ldr	r1, [pc, #12]	@ (80072c0 <stdio_exit_handler+0x10>)
 80072b4:	4803      	ldr	r0, [pc, #12]	@ (80072c4 <stdio_exit_handler+0x14>)
 80072b6:	f000 b869 	b.w	800738c <_fwalk_sglue>
 80072ba:	bf00      	nop
 80072bc:	200023f8 	.word	0x200023f8
 80072c0:	08008f45 	.word	0x08008f45
 80072c4:	20002408 	.word	0x20002408

080072c8 <cleanup_stdio>:
 80072c8:	6841      	ldr	r1, [r0, #4]
 80072ca:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <cleanup_stdio+0x34>)
 80072cc:	4299      	cmp	r1, r3
 80072ce:	b510      	push	{r4, lr}
 80072d0:	4604      	mov	r4, r0
 80072d2:	d001      	beq.n	80072d8 <cleanup_stdio+0x10>
 80072d4:	f001 fe36 	bl	8008f44 <_fflush_r>
 80072d8:	68a1      	ldr	r1, [r4, #8]
 80072da:	4b09      	ldr	r3, [pc, #36]	@ (8007300 <cleanup_stdio+0x38>)
 80072dc:	4299      	cmp	r1, r3
 80072de:	d002      	beq.n	80072e6 <cleanup_stdio+0x1e>
 80072e0:	4620      	mov	r0, r4
 80072e2:	f001 fe2f 	bl	8008f44 <_fflush_r>
 80072e6:	68e1      	ldr	r1, [r4, #12]
 80072e8:	4b06      	ldr	r3, [pc, #24]	@ (8007304 <cleanup_stdio+0x3c>)
 80072ea:	4299      	cmp	r1, r3
 80072ec:	d004      	beq.n	80072f8 <cleanup_stdio+0x30>
 80072ee:	4620      	mov	r0, r4
 80072f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072f4:	f001 be26 	b.w	8008f44 <_fflush_r>
 80072f8:	bd10      	pop	{r4, pc}
 80072fa:	bf00      	nop
 80072fc:	20002ab8 	.word	0x20002ab8
 8007300:	20002b20 	.word	0x20002b20
 8007304:	20002b88 	.word	0x20002b88

08007308 <global_stdio_init.part.0>:
 8007308:	b510      	push	{r4, lr}
 800730a:	4b0b      	ldr	r3, [pc, #44]	@ (8007338 <global_stdio_init.part.0+0x30>)
 800730c:	4c0b      	ldr	r4, [pc, #44]	@ (800733c <global_stdio_init.part.0+0x34>)
 800730e:	4a0c      	ldr	r2, [pc, #48]	@ (8007340 <global_stdio_init.part.0+0x38>)
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	4620      	mov	r0, r4
 8007314:	2200      	movs	r2, #0
 8007316:	2104      	movs	r1, #4
 8007318:	f7ff ff94 	bl	8007244 <std>
 800731c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007320:	2201      	movs	r2, #1
 8007322:	2109      	movs	r1, #9
 8007324:	f7ff ff8e 	bl	8007244 <std>
 8007328:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800732c:	2202      	movs	r2, #2
 800732e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007332:	2112      	movs	r1, #18
 8007334:	f7ff bf86 	b.w	8007244 <std>
 8007338:	20002bf0 	.word	0x20002bf0
 800733c:	20002ab8 	.word	0x20002ab8
 8007340:	080072b1 	.word	0x080072b1

08007344 <__sfp_lock_acquire>:
 8007344:	4801      	ldr	r0, [pc, #4]	@ (800734c <__sfp_lock_acquire+0x8>)
 8007346:	f000 b93c 	b.w	80075c2 <__retarget_lock_acquire_recursive>
 800734a:	bf00      	nop
 800734c:	20002bf9 	.word	0x20002bf9

08007350 <__sfp_lock_release>:
 8007350:	4801      	ldr	r0, [pc, #4]	@ (8007358 <__sfp_lock_release+0x8>)
 8007352:	f000 b937 	b.w	80075c4 <__retarget_lock_release_recursive>
 8007356:	bf00      	nop
 8007358:	20002bf9 	.word	0x20002bf9

0800735c <__sinit>:
 800735c:	b510      	push	{r4, lr}
 800735e:	4604      	mov	r4, r0
 8007360:	f7ff fff0 	bl	8007344 <__sfp_lock_acquire>
 8007364:	6a23      	ldr	r3, [r4, #32]
 8007366:	b11b      	cbz	r3, 8007370 <__sinit+0x14>
 8007368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800736c:	f7ff bff0 	b.w	8007350 <__sfp_lock_release>
 8007370:	4b04      	ldr	r3, [pc, #16]	@ (8007384 <__sinit+0x28>)
 8007372:	6223      	str	r3, [r4, #32]
 8007374:	4b04      	ldr	r3, [pc, #16]	@ (8007388 <__sinit+0x2c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1f5      	bne.n	8007368 <__sinit+0xc>
 800737c:	f7ff ffc4 	bl	8007308 <global_stdio_init.part.0>
 8007380:	e7f2      	b.n	8007368 <__sinit+0xc>
 8007382:	bf00      	nop
 8007384:	080072c9 	.word	0x080072c9
 8007388:	20002bf0 	.word	0x20002bf0

0800738c <_fwalk_sglue>:
 800738c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007390:	4607      	mov	r7, r0
 8007392:	4688      	mov	r8, r1
 8007394:	4614      	mov	r4, r2
 8007396:	2600      	movs	r6, #0
 8007398:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800739c:	f1b9 0901 	subs.w	r9, r9, #1
 80073a0:	d505      	bpl.n	80073ae <_fwalk_sglue+0x22>
 80073a2:	6824      	ldr	r4, [r4, #0]
 80073a4:	2c00      	cmp	r4, #0
 80073a6:	d1f7      	bne.n	8007398 <_fwalk_sglue+0xc>
 80073a8:	4630      	mov	r0, r6
 80073aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ae:	89ab      	ldrh	r3, [r5, #12]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d907      	bls.n	80073c4 <_fwalk_sglue+0x38>
 80073b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073b8:	3301      	adds	r3, #1
 80073ba:	d003      	beq.n	80073c4 <_fwalk_sglue+0x38>
 80073bc:	4629      	mov	r1, r5
 80073be:	4638      	mov	r0, r7
 80073c0:	47c0      	blx	r8
 80073c2:	4306      	orrs	r6, r0
 80073c4:	3568      	adds	r5, #104	@ 0x68
 80073c6:	e7e9      	b.n	800739c <_fwalk_sglue+0x10>

080073c8 <__sread>:
 80073c8:	b510      	push	{r4, lr}
 80073ca:	460c      	mov	r4, r1
 80073cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073d0:	f000 f8a8 	bl	8007524 <_read_r>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	bfab      	itete	ge
 80073d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073da:	89a3      	ldrhlt	r3, [r4, #12]
 80073dc:	181b      	addge	r3, r3, r0
 80073de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073e2:	bfac      	ite	ge
 80073e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073e6:	81a3      	strhlt	r3, [r4, #12]
 80073e8:	bd10      	pop	{r4, pc}

080073ea <__swrite>:
 80073ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073ee:	461f      	mov	r7, r3
 80073f0:	898b      	ldrh	r3, [r1, #12]
 80073f2:	05db      	lsls	r3, r3, #23
 80073f4:	4605      	mov	r5, r0
 80073f6:	460c      	mov	r4, r1
 80073f8:	4616      	mov	r6, r2
 80073fa:	d505      	bpl.n	8007408 <__swrite+0x1e>
 80073fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007400:	2302      	movs	r3, #2
 8007402:	2200      	movs	r2, #0
 8007404:	f000 f87c 	bl	8007500 <_lseek_r>
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800740e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007412:	81a3      	strh	r3, [r4, #12]
 8007414:	4632      	mov	r2, r6
 8007416:	463b      	mov	r3, r7
 8007418:	4628      	mov	r0, r5
 800741a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800741e:	f000 b893 	b.w	8007548 <_write_r>

08007422 <__sseek>:
 8007422:	b510      	push	{r4, lr}
 8007424:	460c      	mov	r4, r1
 8007426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742a:	f000 f869 	bl	8007500 <_lseek_r>
 800742e:	1c43      	adds	r3, r0, #1
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	bf15      	itete	ne
 8007434:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007436:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800743a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800743e:	81a3      	strheq	r3, [r4, #12]
 8007440:	bf18      	it	ne
 8007442:	81a3      	strhne	r3, [r4, #12]
 8007444:	bd10      	pop	{r4, pc}

08007446 <__sclose>:
 8007446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744a:	f000 b849 	b.w	80074e0 <_close_r>

0800744e <_vsniprintf_r>:
 800744e:	b530      	push	{r4, r5, lr}
 8007450:	4614      	mov	r4, r2
 8007452:	2c00      	cmp	r4, #0
 8007454:	b09b      	sub	sp, #108	@ 0x6c
 8007456:	4605      	mov	r5, r0
 8007458:	461a      	mov	r2, r3
 800745a:	da05      	bge.n	8007468 <_vsniprintf_r+0x1a>
 800745c:	238b      	movs	r3, #139	@ 0x8b
 800745e:	6003      	str	r3, [r0, #0]
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	b01b      	add	sp, #108	@ 0x6c
 8007466:	bd30      	pop	{r4, r5, pc}
 8007468:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800746c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007470:	f04f 0300 	mov.w	r3, #0
 8007474:	9319      	str	r3, [sp, #100]	@ 0x64
 8007476:	bf14      	ite	ne
 8007478:	f104 33ff 	addne.w	r3, r4, #4294967295
 800747c:	4623      	moveq	r3, r4
 800747e:	9302      	str	r3, [sp, #8]
 8007480:	9305      	str	r3, [sp, #20]
 8007482:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007486:	9100      	str	r1, [sp, #0]
 8007488:	9104      	str	r1, [sp, #16]
 800748a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800748e:	4669      	mov	r1, sp
 8007490:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007492:	f001 fbd7 	bl	8008c44 <_svfiprintf_r>
 8007496:	1c43      	adds	r3, r0, #1
 8007498:	bfbc      	itt	lt
 800749a:	238b      	movlt	r3, #139	@ 0x8b
 800749c:	602b      	strlt	r3, [r5, #0]
 800749e:	2c00      	cmp	r4, #0
 80074a0:	d0e0      	beq.n	8007464 <_vsniprintf_r+0x16>
 80074a2:	9b00      	ldr	r3, [sp, #0]
 80074a4:	2200      	movs	r2, #0
 80074a6:	701a      	strb	r2, [r3, #0]
 80074a8:	e7dc      	b.n	8007464 <_vsniprintf_r+0x16>
	...

080074ac <vsniprintf>:
 80074ac:	b507      	push	{r0, r1, r2, lr}
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	4613      	mov	r3, r2
 80074b2:	460a      	mov	r2, r1
 80074b4:	4601      	mov	r1, r0
 80074b6:	4803      	ldr	r0, [pc, #12]	@ (80074c4 <vsniprintf+0x18>)
 80074b8:	6800      	ldr	r0, [r0, #0]
 80074ba:	f7ff ffc8 	bl	800744e <_vsniprintf_r>
 80074be:	b003      	add	sp, #12
 80074c0:	f85d fb04 	ldr.w	pc, [sp], #4
 80074c4:	20002404 	.word	0x20002404

080074c8 <memset>:
 80074c8:	4402      	add	r2, r0
 80074ca:	4603      	mov	r3, r0
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d100      	bne.n	80074d2 <memset+0xa>
 80074d0:	4770      	bx	lr
 80074d2:	f803 1b01 	strb.w	r1, [r3], #1
 80074d6:	e7f9      	b.n	80074cc <memset+0x4>

080074d8 <_localeconv_r>:
 80074d8:	4800      	ldr	r0, [pc, #0]	@ (80074dc <_localeconv_r+0x4>)
 80074da:	4770      	bx	lr
 80074dc:	20002544 	.word	0x20002544

080074e0 <_close_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4d06      	ldr	r5, [pc, #24]	@ (80074fc <_close_r+0x1c>)
 80074e4:	2300      	movs	r3, #0
 80074e6:	4604      	mov	r4, r0
 80074e8:	4608      	mov	r0, r1
 80074ea:	602b      	str	r3, [r5, #0]
 80074ec:	f7fa fb56 	bl	8001b9c <_close>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	d102      	bne.n	80074fa <_close_r+0x1a>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	b103      	cbz	r3, 80074fa <_close_r+0x1a>
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	20002bf4 	.word	0x20002bf4

08007500 <_lseek_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4d07      	ldr	r5, [pc, #28]	@ (8007520 <_lseek_r+0x20>)
 8007504:	4604      	mov	r4, r0
 8007506:	4608      	mov	r0, r1
 8007508:	4611      	mov	r1, r2
 800750a:	2200      	movs	r2, #0
 800750c:	602a      	str	r2, [r5, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	f7fa fb6b 	bl	8001bea <_lseek>
 8007514:	1c43      	adds	r3, r0, #1
 8007516:	d102      	bne.n	800751e <_lseek_r+0x1e>
 8007518:	682b      	ldr	r3, [r5, #0]
 800751a:	b103      	cbz	r3, 800751e <_lseek_r+0x1e>
 800751c:	6023      	str	r3, [r4, #0]
 800751e:	bd38      	pop	{r3, r4, r5, pc}
 8007520:	20002bf4 	.word	0x20002bf4

08007524 <_read_r>:
 8007524:	b538      	push	{r3, r4, r5, lr}
 8007526:	4d07      	ldr	r5, [pc, #28]	@ (8007544 <_read_r+0x20>)
 8007528:	4604      	mov	r4, r0
 800752a:	4608      	mov	r0, r1
 800752c:	4611      	mov	r1, r2
 800752e:	2200      	movs	r2, #0
 8007530:	602a      	str	r2, [r5, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	f7fa faf9 	bl	8001b2a <_read>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_read_r+0x1e>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_read_r+0x1e>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	20002bf4 	.word	0x20002bf4

08007548 <_write_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4d07      	ldr	r5, [pc, #28]	@ (8007568 <_write_r+0x20>)
 800754c:	4604      	mov	r4, r0
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	2200      	movs	r2, #0
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7fa fb04 	bl	8001b64 <_write>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_write_r+0x1e>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	b103      	cbz	r3, 8007566 <_write_r+0x1e>
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	20002bf4 	.word	0x20002bf4

0800756c <__errno>:
 800756c:	4b01      	ldr	r3, [pc, #4]	@ (8007574 <__errno+0x8>)
 800756e:	6818      	ldr	r0, [r3, #0]
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20002404 	.word	0x20002404

08007578 <__libc_init_array>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	4d0d      	ldr	r5, [pc, #52]	@ (80075b0 <__libc_init_array+0x38>)
 800757c:	4c0d      	ldr	r4, [pc, #52]	@ (80075b4 <__libc_init_array+0x3c>)
 800757e:	1b64      	subs	r4, r4, r5
 8007580:	10a4      	asrs	r4, r4, #2
 8007582:	2600      	movs	r6, #0
 8007584:	42a6      	cmp	r6, r4
 8007586:	d109      	bne.n	800759c <__libc_init_array+0x24>
 8007588:	4d0b      	ldr	r5, [pc, #44]	@ (80075b8 <__libc_init_array+0x40>)
 800758a:	4c0c      	ldr	r4, [pc, #48]	@ (80075bc <__libc_init_array+0x44>)
 800758c:	f002 f86a 	bl	8009664 <_init>
 8007590:	1b64      	subs	r4, r4, r5
 8007592:	10a4      	asrs	r4, r4, #2
 8007594:	2600      	movs	r6, #0
 8007596:	42a6      	cmp	r6, r4
 8007598:	d105      	bne.n	80075a6 <__libc_init_array+0x2e>
 800759a:	bd70      	pop	{r4, r5, r6, pc}
 800759c:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a0:	4798      	blx	r3
 80075a2:	3601      	adds	r6, #1
 80075a4:	e7ee      	b.n	8007584 <__libc_init_array+0xc>
 80075a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80075aa:	4798      	blx	r3
 80075ac:	3601      	adds	r6, #1
 80075ae:	e7f2      	b.n	8007596 <__libc_init_array+0x1e>
 80075b0:	0800a614 	.word	0x0800a614
 80075b4:	0800a614 	.word	0x0800a614
 80075b8:	0800a614 	.word	0x0800a614
 80075bc:	0800a618 	.word	0x0800a618

080075c0 <__retarget_lock_init_recursive>:
 80075c0:	4770      	bx	lr

080075c2 <__retarget_lock_acquire_recursive>:
 80075c2:	4770      	bx	lr

080075c4 <__retarget_lock_release_recursive>:
 80075c4:	4770      	bx	lr

080075c6 <memcpy>:
 80075c6:	440a      	add	r2, r1
 80075c8:	4291      	cmp	r1, r2
 80075ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80075ce:	d100      	bne.n	80075d2 <memcpy+0xc>
 80075d0:	4770      	bx	lr
 80075d2:	b510      	push	{r4, lr}
 80075d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075dc:	4291      	cmp	r1, r2
 80075de:	d1f9      	bne.n	80075d4 <memcpy+0xe>
 80075e0:	bd10      	pop	{r4, pc}

080075e2 <quorem>:
 80075e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e6:	6903      	ldr	r3, [r0, #16]
 80075e8:	690c      	ldr	r4, [r1, #16]
 80075ea:	42a3      	cmp	r3, r4
 80075ec:	4607      	mov	r7, r0
 80075ee:	db7e      	blt.n	80076ee <quorem+0x10c>
 80075f0:	3c01      	subs	r4, #1
 80075f2:	f101 0814 	add.w	r8, r1, #20
 80075f6:	00a3      	lsls	r3, r4, #2
 80075f8:	f100 0514 	add.w	r5, r0, #20
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007602:	9301      	str	r3, [sp, #4]
 8007604:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007608:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800760c:	3301      	adds	r3, #1
 800760e:	429a      	cmp	r2, r3
 8007610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007614:	fbb2 f6f3 	udiv	r6, r2, r3
 8007618:	d32e      	bcc.n	8007678 <quorem+0x96>
 800761a:	f04f 0a00 	mov.w	sl, #0
 800761e:	46c4      	mov	ip, r8
 8007620:	46ae      	mov	lr, r5
 8007622:	46d3      	mov	fp, sl
 8007624:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007628:	b298      	uxth	r0, r3
 800762a:	fb06 a000 	mla	r0, r6, r0, sl
 800762e:	0c02      	lsrs	r2, r0, #16
 8007630:	0c1b      	lsrs	r3, r3, #16
 8007632:	fb06 2303 	mla	r3, r6, r3, r2
 8007636:	f8de 2000 	ldr.w	r2, [lr]
 800763a:	b280      	uxth	r0, r0
 800763c:	b292      	uxth	r2, r2
 800763e:	1a12      	subs	r2, r2, r0
 8007640:	445a      	add	r2, fp
 8007642:	f8de 0000 	ldr.w	r0, [lr]
 8007646:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800764a:	b29b      	uxth	r3, r3
 800764c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007650:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007654:	b292      	uxth	r2, r2
 8007656:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800765a:	45e1      	cmp	r9, ip
 800765c:	f84e 2b04 	str.w	r2, [lr], #4
 8007660:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007664:	d2de      	bcs.n	8007624 <quorem+0x42>
 8007666:	9b00      	ldr	r3, [sp, #0]
 8007668:	58eb      	ldr	r3, [r5, r3]
 800766a:	b92b      	cbnz	r3, 8007678 <quorem+0x96>
 800766c:	9b01      	ldr	r3, [sp, #4]
 800766e:	3b04      	subs	r3, #4
 8007670:	429d      	cmp	r5, r3
 8007672:	461a      	mov	r2, r3
 8007674:	d32f      	bcc.n	80076d6 <quorem+0xf4>
 8007676:	613c      	str	r4, [r7, #16]
 8007678:	4638      	mov	r0, r7
 800767a:	f001 f97f 	bl	800897c <__mcmp>
 800767e:	2800      	cmp	r0, #0
 8007680:	db25      	blt.n	80076ce <quorem+0xec>
 8007682:	4629      	mov	r1, r5
 8007684:	2000      	movs	r0, #0
 8007686:	f858 2b04 	ldr.w	r2, [r8], #4
 800768a:	f8d1 c000 	ldr.w	ip, [r1]
 800768e:	fa1f fe82 	uxth.w	lr, r2
 8007692:	fa1f f38c 	uxth.w	r3, ip
 8007696:	eba3 030e 	sub.w	r3, r3, lr
 800769a:	4403      	add	r3, r0
 800769c:	0c12      	lsrs	r2, r2, #16
 800769e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ac:	45c1      	cmp	r9, r8
 80076ae:	f841 3b04 	str.w	r3, [r1], #4
 80076b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076b6:	d2e6      	bcs.n	8007686 <quorem+0xa4>
 80076b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076c0:	b922      	cbnz	r2, 80076cc <quorem+0xea>
 80076c2:	3b04      	subs	r3, #4
 80076c4:	429d      	cmp	r5, r3
 80076c6:	461a      	mov	r2, r3
 80076c8:	d30b      	bcc.n	80076e2 <quorem+0x100>
 80076ca:	613c      	str	r4, [r7, #16]
 80076cc:	3601      	adds	r6, #1
 80076ce:	4630      	mov	r0, r6
 80076d0:	b003      	add	sp, #12
 80076d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d6:	6812      	ldr	r2, [r2, #0]
 80076d8:	3b04      	subs	r3, #4
 80076da:	2a00      	cmp	r2, #0
 80076dc:	d1cb      	bne.n	8007676 <quorem+0x94>
 80076de:	3c01      	subs	r4, #1
 80076e0:	e7c6      	b.n	8007670 <quorem+0x8e>
 80076e2:	6812      	ldr	r2, [r2, #0]
 80076e4:	3b04      	subs	r3, #4
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	d1ef      	bne.n	80076ca <quorem+0xe8>
 80076ea:	3c01      	subs	r4, #1
 80076ec:	e7ea      	b.n	80076c4 <quorem+0xe2>
 80076ee:	2000      	movs	r0, #0
 80076f0:	e7ee      	b.n	80076d0 <quorem+0xee>
 80076f2:	0000      	movs	r0, r0
 80076f4:	0000      	movs	r0, r0
	...

080076f8 <_dtoa_r>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	69c7      	ldr	r7, [r0, #28]
 80076fe:	b097      	sub	sp, #92	@ 0x5c
 8007700:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007704:	ec55 4b10 	vmov	r4, r5, d0
 8007708:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800770a:	9107      	str	r1, [sp, #28]
 800770c:	4681      	mov	r9, r0
 800770e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007710:	9311      	str	r3, [sp, #68]	@ 0x44
 8007712:	b97f      	cbnz	r7, 8007734 <_dtoa_r+0x3c>
 8007714:	2010      	movs	r0, #16
 8007716:	f000 fe09 	bl	800832c <malloc>
 800771a:	4602      	mov	r2, r0
 800771c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007720:	b920      	cbnz	r0, 800772c <_dtoa_r+0x34>
 8007722:	4ba9      	ldr	r3, [pc, #676]	@ (80079c8 <_dtoa_r+0x2d0>)
 8007724:	21ef      	movs	r1, #239	@ 0xef
 8007726:	48a9      	ldr	r0, [pc, #676]	@ (80079cc <_dtoa_r+0x2d4>)
 8007728:	f001 fc5e 	bl	8008fe8 <__assert_func>
 800772c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007730:	6007      	str	r7, [r0, #0]
 8007732:	60c7      	str	r7, [r0, #12]
 8007734:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007738:	6819      	ldr	r1, [r3, #0]
 800773a:	b159      	cbz	r1, 8007754 <_dtoa_r+0x5c>
 800773c:	685a      	ldr	r2, [r3, #4]
 800773e:	604a      	str	r2, [r1, #4]
 8007740:	2301      	movs	r3, #1
 8007742:	4093      	lsls	r3, r2
 8007744:	608b      	str	r3, [r1, #8]
 8007746:	4648      	mov	r0, r9
 8007748:	f000 fee6 	bl	8008518 <_Bfree>
 800774c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	1e2b      	subs	r3, r5, #0
 8007756:	bfb9      	ittee	lt
 8007758:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800775c:	9305      	strlt	r3, [sp, #20]
 800775e:	2300      	movge	r3, #0
 8007760:	6033      	strge	r3, [r6, #0]
 8007762:	9f05      	ldr	r7, [sp, #20]
 8007764:	4b9a      	ldr	r3, [pc, #616]	@ (80079d0 <_dtoa_r+0x2d8>)
 8007766:	bfbc      	itt	lt
 8007768:	2201      	movlt	r2, #1
 800776a:	6032      	strlt	r2, [r6, #0]
 800776c:	43bb      	bics	r3, r7
 800776e:	d112      	bne.n	8007796 <_dtoa_r+0x9e>
 8007770:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007772:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800777c:	4323      	orrs	r3, r4
 800777e:	f000 855a 	beq.w	8008236 <_dtoa_r+0xb3e>
 8007782:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007784:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80079e4 <_dtoa_r+0x2ec>
 8007788:	2b00      	cmp	r3, #0
 800778a:	f000 855c 	beq.w	8008246 <_dtoa_r+0xb4e>
 800778e:	f10a 0303 	add.w	r3, sl, #3
 8007792:	f000 bd56 	b.w	8008242 <_dtoa_r+0xb4a>
 8007796:	ed9d 7b04 	vldr	d7, [sp, #16]
 800779a:	2200      	movs	r2, #0
 800779c:	ec51 0b17 	vmov	r0, r1, d7
 80077a0:	2300      	movs	r3, #0
 80077a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80077a6:	f7f9 f98f 	bl	8000ac8 <__aeabi_dcmpeq>
 80077aa:	4680      	mov	r8, r0
 80077ac:	b158      	cbz	r0, 80077c6 <_dtoa_r+0xce>
 80077ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80077b0:	2301      	movs	r3, #1
 80077b2:	6013      	str	r3, [r2, #0]
 80077b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80077b6:	b113      	cbz	r3, 80077be <_dtoa_r+0xc6>
 80077b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80077ba:	4b86      	ldr	r3, [pc, #536]	@ (80079d4 <_dtoa_r+0x2dc>)
 80077bc:	6013      	str	r3, [r2, #0]
 80077be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80079e8 <_dtoa_r+0x2f0>
 80077c2:	f000 bd40 	b.w	8008246 <_dtoa_r+0xb4e>
 80077c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80077ca:	aa14      	add	r2, sp, #80	@ 0x50
 80077cc:	a915      	add	r1, sp, #84	@ 0x54
 80077ce:	4648      	mov	r0, r9
 80077d0:	f001 f984 	bl	8008adc <__d2b>
 80077d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80077d8:	9002      	str	r0, [sp, #8]
 80077da:	2e00      	cmp	r6, #0
 80077dc:	d078      	beq.n	80078d0 <_dtoa_r+0x1d8>
 80077de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80077e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80077ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80077f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80077f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80077f8:	4619      	mov	r1, r3
 80077fa:	2200      	movs	r2, #0
 80077fc:	4b76      	ldr	r3, [pc, #472]	@ (80079d8 <_dtoa_r+0x2e0>)
 80077fe:	f7f8 fd43 	bl	8000288 <__aeabi_dsub>
 8007802:	a36b      	add	r3, pc, #428	@ (adr r3, 80079b0 <_dtoa_r+0x2b8>)
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	f7f8 fef6 	bl	80005f8 <__aeabi_dmul>
 800780c:	a36a      	add	r3, pc, #424	@ (adr r3, 80079b8 <_dtoa_r+0x2c0>)
 800780e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007812:	f7f8 fd3b 	bl	800028c <__adddf3>
 8007816:	4604      	mov	r4, r0
 8007818:	4630      	mov	r0, r6
 800781a:	460d      	mov	r5, r1
 800781c:	f7f8 fe82 	bl	8000524 <__aeabi_i2d>
 8007820:	a367      	add	r3, pc, #412	@ (adr r3, 80079c0 <_dtoa_r+0x2c8>)
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	f7f8 fee7 	bl	80005f8 <__aeabi_dmul>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	4620      	mov	r0, r4
 8007830:	4629      	mov	r1, r5
 8007832:	f7f8 fd2b 	bl	800028c <__adddf3>
 8007836:	4604      	mov	r4, r0
 8007838:	460d      	mov	r5, r1
 800783a:	f7f9 f98d 	bl	8000b58 <__aeabi_d2iz>
 800783e:	2200      	movs	r2, #0
 8007840:	4607      	mov	r7, r0
 8007842:	2300      	movs	r3, #0
 8007844:	4620      	mov	r0, r4
 8007846:	4629      	mov	r1, r5
 8007848:	f7f9 f948 	bl	8000adc <__aeabi_dcmplt>
 800784c:	b140      	cbz	r0, 8007860 <_dtoa_r+0x168>
 800784e:	4638      	mov	r0, r7
 8007850:	f7f8 fe68 	bl	8000524 <__aeabi_i2d>
 8007854:	4622      	mov	r2, r4
 8007856:	462b      	mov	r3, r5
 8007858:	f7f9 f936 	bl	8000ac8 <__aeabi_dcmpeq>
 800785c:	b900      	cbnz	r0, 8007860 <_dtoa_r+0x168>
 800785e:	3f01      	subs	r7, #1
 8007860:	2f16      	cmp	r7, #22
 8007862:	d852      	bhi.n	800790a <_dtoa_r+0x212>
 8007864:	4b5d      	ldr	r3, [pc, #372]	@ (80079dc <_dtoa_r+0x2e4>)
 8007866:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800786a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007872:	f7f9 f933 	bl	8000adc <__aeabi_dcmplt>
 8007876:	2800      	cmp	r0, #0
 8007878:	d049      	beq.n	800790e <_dtoa_r+0x216>
 800787a:	3f01      	subs	r7, #1
 800787c:	2300      	movs	r3, #0
 800787e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007880:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007882:	1b9b      	subs	r3, r3, r6
 8007884:	1e5a      	subs	r2, r3, #1
 8007886:	bf45      	ittet	mi
 8007888:	f1c3 0301 	rsbmi	r3, r3, #1
 800788c:	9300      	strmi	r3, [sp, #0]
 800788e:	2300      	movpl	r3, #0
 8007890:	2300      	movmi	r3, #0
 8007892:	9206      	str	r2, [sp, #24]
 8007894:	bf54      	ite	pl
 8007896:	9300      	strpl	r3, [sp, #0]
 8007898:	9306      	strmi	r3, [sp, #24]
 800789a:	2f00      	cmp	r7, #0
 800789c:	db39      	blt.n	8007912 <_dtoa_r+0x21a>
 800789e:	9b06      	ldr	r3, [sp, #24]
 80078a0:	970d      	str	r7, [sp, #52]	@ 0x34
 80078a2:	443b      	add	r3, r7
 80078a4:	9306      	str	r3, [sp, #24]
 80078a6:	2300      	movs	r3, #0
 80078a8:	9308      	str	r3, [sp, #32]
 80078aa:	9b07      	ldr	r3, [sp, #28]
 80078ac:	2b09      	cmp	r3, #9
 80078ae:	d863      	bhi.n	8007978 <_dtoa_r+0x280>
 80078b0:	2b05      	cmp	r3, #5
 80078b2:	bfc4      	itt	gt
 80078b4:	3b04      	subgt	r3, #4
 80078b6:	9307      	strgt	r3, [sp, #28]
 80078b8:	9b07      	ldr	r3, [sp, #28]
 80078ba:	f1a3 0302 	sub.w	r3, r3, #2
 80078be:	bfcc      	ite	gt
 80078c0:	2400      	movgt	r4, #0
 80078c2:	2401      	movle	r4, #1
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d863      	bhi.n	8007990 <_dtoa_r+0x298>
 80078c8:	e8df f003 	tbb	[pc, r3]
 80078cc:	2b375452 	.word	0x2b375452
 80078d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80078d4:	441e      	add	r6, r3
 80078d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80078da:	2b20      	cmp	r3, #32
 80078dc:	bfc1      	itttt	gt
 80078de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80078e2:	409f      	lslgt	r7, r3
 80078e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80078e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80078ec:	bfd6      	itet	le
 80078ee:	f1c3 0320 	rsble	r3, r3, #32
 80078f2:	ea47 0003 	orrgt.w	r0, r7, r3
 80078f6:	fa04 f003 	lslle.w	r0, r4, r3
 80078fa:	f7f8 fe03 	bl	8000504 <__aeabi_ui2d>
 80078fe:	2201      	movs	r2, #1
 8007900:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007904:	3e01      	subs	r6, #1
 8007906:	9212      	str	r2, [sp, #72]	@ 0x48
 8007908:	e776      	b.n	80077f8 <_dtoa_r+0x100>
 800790a:	2301      	movs	r3, #1
 800790c:	e7b7      	b.n	800787e <_dtoa_r+0x186>
 800790e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007910:	e7b6      	b.n	8007880 <_dtoa_r+0x188>
 8007912:	9b00      	ldr	r3, [sp, #0]
 8007914:	1bdb      	subs	r3, r3, r7
 8007916:	9300      	str	r3, [sp, #0]
 8007918:	427b      	negs	r3, r7
 800791a:	9308      	str	r3, [sp, #32]
 800791c:	2300      	movs	r3, #0
 800791e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007920:	e7c3      	b.n	80078aa <_dtoa_r+0x1b2>
 8007922:	2301      	movs	r3, #1
 8007924:	9309      	str	r3, [sp, #36]	@ 0x24
 8007926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007928:	eb07 0b03 	add.w	fp, r7, r3
 800792c:	f10b 0301 	add.w	r3, fp, #1
 8007930:	2b01      	cmp	r3, #1
 8007932:	9303      	str	r3, [sp, #12]
 8007934:	bfb8      	it	lt
 8007936:	2301      	movlt	r3, #1
 8007938:	e006      	b.n	8007948 <_dtoa_r+0x250>
 800793a:	2301      	movs	r3, #1
 800793c:	9309      	str	r3, [sp, #36]	@ 0x24
 800793e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007940:	2b00      	cmp	r3, #0
 8007942:	dd28      	ble.n	8007996 <_dtoa_r+0x29e>
 8007944:	469b      	mov	fp, r3
 8007946:	9303      	str	r3, [sp, #12]
 8007948:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800794c:	2100      	movs	r1, #0
 800794e:	2204      	movs	r2, #4
 8007950:	f102 0514 	add.w	r5, r2, #20
 8007954:	429d      	cmp	r5, r3
 8007956:	d926      	bls.n	80079a6 <_dtoa_r+0x2ae>
 8007958:	6041      	str	r1, [r0, #4]
 800795a:	4648      	mov	r0, r9
 800795c:	f000 fd9c 	bl	8008498 <_Balloc>
 8007960:	4682      	mov	sl, r0
 8007962:	2800      	cmp	r0, #0
 8007964:	d142      	bne.n	80079ec <_dtoa_r+0x2f4>
 8007966:	4b1e      	ldr	r3, [pc, #120]	@ (80079e0 <_dtoa_r+0x2e8>)
 8007968:	4602      	mov	r2, r0
 800796a:	f240 11af 	movw	r1, #431	@ 0x1af
 800796e:	e6da      	b.n	8007726 <_dtoa_r+0x2e>
 8007970:	2300      	movs	r3, #0
 8007972:	e7e3      	b.n	800793c <_dtoa_r+0x244>
 8007974:	2300      	movs	r3, #0
 8007976:	e7d5      	b.n	8007924 <_dtoa_r+0x22c>
 8007978:	2401      	movs	r4, #1
 800797a:	2300      	movs	r3, #0
 800797c:	9307      	str	r3, [sp, #28]
 800797e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007980:	f04f 3bff 	mov.w	fp, #4294967295
 8007984:	2200      	movs	r2, #0
 8007986:	f8cd b00c 	str.w	fp, [sp, #12]
 800798a:	2312      	movs	r3, #18
 800798c:	920c      	str	r2, [sp, #48]	@ 0x30
 800798e:	e7db      	b.n	8007948 <_dtoa_r+0x250>
 8007990:	2301      	movs	r3, #1
 8007992:	9309      	str	r3, [sp, #36]	@ 0x24
 8007994:	e7f4      	b.n	8007980 <_dtoa_r+0x288>
 8007996:	f04f 0b01 	mov.w	fp, #1
 800799a:	f8cd b00c 	str.w	fp, [sp, #12]
 800799e:	465b      	mov	r3, fp
 80079a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80079a4:	e7d0      	b.n	8007948 <_dtoa_r+0x250>
 80079a6:	3101      	adds	r1, #1
 80079a8:	0052      	lsls	r2, r2, #1
 80079aa:	e7d1      	b.n	8007950 <_dtoa_r+0x258>
 80079ac:	f3af 8000 	nop.w
 80079b0:	636f4361 	.word	0x636f4361
 80079b4:	3fd287a7 	.word	0x3fd287a7
 80079b8:	8b60c8b3 	.word	0x8b60c8b3
 80079bc:	3fc68a28 	.word	0x3fc68a28
 80079c0:	509f79fb 	.word	0x509f79fb
 80079c4:	3fd34413 	.word	0x3fd34413
 80079c8:	0800a2d5 	.word	0x0800a2d5
 80079cc:	0800a2ec 	.word	0x0800a2ec
 80079d0:	7ff00000 	.word	0x7ff00000
 80079d4:	0800a2a5 	.word	0x0800a2a5
 80079d8:	3ff80000 	.word	0x3ff80000
 80079dc:	0800a440 	.word	0x0800a440
 80079e0:	0800a344 	.word	0x0800a344
 80079e4:	0800a2d1 	.word	0x0800a2d1
 80079e8:	0800a2a4 	.word	0x0800a2a4
 80079ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80079f0:	6018      	str	r0, [r3, #0]
 80079f2:	9b03      	ldr	r3, [sp, #12]
 80079f4:	2b0e      	cmp	r3, #14
 80079f6:	f200 80a1 	bhi.w	8007b3c <_dtoa_r+0x444>
 80079fa:	2c00      	cmp	r4, #0
 80079fc:	f000 809e 	beq.w	8007b3c <_dtoa_r+0x444>
 8007a00:	2f00      	cmp	r7, #0
 8007a02:	dd33      	ble.n	8007a6c <_dtoa_r+0x374>
 8007a04:	4b9c      	ldr	r3, [pc, #624]	@ (8007c78 <_dtoa_r+0x580>)
 8007a06:	f007 020f 	and.w	r2, r7, #15
 8007a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a0e:	ed93 7b00 	vldr	d7, [r3]
 8007a12:	05f8      	lsls	r0, r7, #23
 8007a14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007a18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a1c:	d516      	bpl.n	8007a4c <_dtoa_r+0x354>
 8007a1e:	4b97      	ldr	r3, [pc, #604]	@ (8007c7c <_dtoa_r+0x584>)
 8007a20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a28:	f7f8 ff10 	bl	800084c <__aeabi_ddiv>
 8007a2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a30:	f004 040f 	and.w	r4, r4, #15
 8007a34:	2603      	movs	r6, #3
 8007a36:	4d91      	ldr	r5, [pc, #580]	@ (8007c7c <_dtoa_r+0x584>)
 8007a38:	b954      	cbnz	r4, 8007a50 <_dtoa_r+0x358>
 8007a3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a42:	f7f8 ff03 	bl	800084c <__aeabi_ddiv>
 8007a46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a4a:	e028      	b.n	8007a9e <_dtoa_r+0x3a6>
 8007a4c:	2602      	movs	r6, #2
 8007a4e:	e7f2      	b.n	8007a36 <_dtoa_r+0x33e>
 8007a50:	07e1      	lsls	r1, r4, #31
 8007a52:	d508      	bpl.n	8007a66 <_dtoa_r+0x36e>
 8007a54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007a58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a5c:	f7f8 fdcc 	bl	80005f8 <__aeabi_dmul>
 8007a60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007a64:	3601      	adds	r6, #1
 8007a66:	1064      	asrs	r4, r4, #1
 8007a68:	3508      	adds	r5, #8
 8007a6a:	e7e5      	b.n	8007a38 <_dtoa_r+0x340>
 8007a6c:	f000 80af 	beq.w	8007bce <_dtoa_r+0x4d6>
 8007a70:	427c      	negs	r4, r7
 8007a72:	4b81      	ldr	r3, [pc, #516]	@ (8007c78 <_dtoa_r+0x580>)
 8007a74:	4d81      	ldr	r5, [pc, #516]	@ (8007c7c <_dtoa_r+0x584>)
 8007a76:	f004 020f 	and.w	r2, r4, #15
 8007a7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a86:	f7f8 fdb7 	bl	80005f8 <__aeabi_dmul>
 8007a8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a8e:	1124      	asrs	r4, r4, #4
 8007a90:	2300      	movs	r3, #0
 8007a92:	2602      	movs	r6, #2
 8007a94:	2c00      	cmp	r4, #0
 8007a96:	f040 808f 	bne.w	8007bb8 <_dtoa_r+0x4c0>
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d1d3      	bne.n	8007a46 <_dtoa_r+0x34e>
 8007a9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007aa0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f000 8094 	beq.w	8007bd2 <_dtoa_r+0x4da>
 8007aaa:	4b75      	ldr	r3, [pc, #468]	@ (8007c80 <_dtoa_r+0x588>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	4620      	mov	r0, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	f7f9 f813 	bl	8000adc <__aeabi_dcmplt>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	f000 808b 	beq.w	8007bd2 <_dtoa_r+0x4da>
 8007abc:	9b03      	ldr	r3, [sp, #12]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f000 8087 	beq.w	8007bd2 <_dtoa_r+0x4da>
 8007ac4:	f1bb 0f00 	cmp.w	fp, #0
 8007ac8:	dd34      	ble.n	8007b34 <_dtoa_r+0x43c>
 8007aca:	4620      	mov	r0, r4
 8007acc:	4b6d      	ldr	r3, [pc, #436]	@ (8007c84 <_dtoa_r+0x58c>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f8 fd91 	bl	80005f8 <__aeabi_dmul>
 8007ad6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ada:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ade:	3601      	adds	r6, #1
 8007ae0:	465c      	mov	r4, fp
 8007ae2:	4630      	mov	r0, r6
 8007ae4:	f7f8 fd1e 	bl	8000524 <__aeabi_i2d>
 8007ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007aec:	f7f8 fd84 	bl	80005f8 <__aeabi_dmul>
 8007af0:	4b65      	ldr	r3, [pc, #404]	@ (8007c88 <_dtoa_r+0x590>)
 8007af2:	2200      	movs	r2, #0
 8007af4:	f7f8 fbca 	bl	800028c <__adddf3>
 8007af8:	4605      	mov	r5, r0
 8007afa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007afe:	2c00      	cmp	r4, #0
 8007b00:	d16a      	bne.n	8007bd8 <_dtoa_r+0x4e0>
 8007b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b06:	4b61      	ldr	r3, [pc, #388]	@ (8007c8c <_dtoa_r+0x594>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f7f8 fbbd 	bl	8000288 <__aeabi_dsub>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007b16:	462a      	mov	r2, r5
 8007b18:	4633      	mov	r3, r6
 8007b1a:	f7f8 fffd 	bl	8000b18 <__aeabi_dcmpgt>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	f040 8298 	bne.w	8008054 <_dtoa_r+0x95c>
 8007b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b28:	462a      	mov	r2, r5
 8007b2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b2e:	f7f8 ffd5 	bl	8000adc <__aeabi_dcmplt>
 8007b32:	bb38      	cbnz	r0, 8007b84 <_dtoa_r+0x48c>
 8007b34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007b38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	f2c0 8157 	blt.w	8007df2 <_dtoa_r+0x6fa>
 8007b44:	2f0e      	cmp	r7, #14
 8007b46:	f300 8154 	bgt.w	8007df2 <_dtoa_r+0x6fa>
 8007b4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007c78 <_dtoa_r+0x580>)
 8007b4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b50:	ed93 7b00 	vldr	d7, [r3]
 8007b54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	ed8d 7b00 	vstr	d7, [sp]
 8007b5c:	f280 80e5 	bge.w	8007d2a <_dtoa_r+0x632>
 8007b60:	9b03      	ldr	r3, [sp, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f300 80e1 	bgt.w	8007d2a <_dtoa_r+0x632>
 8007b68:	d10c      	bne.n	8007b84 <_dtoa_r+0x48c>
 8007b6a:	4b48      	ldr	r3, [pc, #288]	@ (8007c8c <_dtoa_r+0x594>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	ec51 0b17 	vmov	r0, r1, d7
 8007b72:	f7f8 fd41 	bl	80005f8 <__aeabi_dmul>
 8007b76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b7a:	f7f8 ffc3 	bl	8000b04 <__aeabi_dcmpge>
 8007b7e:	2800      	cmp	r0, #0
 8007b80:	f000 8266 	beq.w	8008050 <_dtoa_r+0x958>
 8007b84:	2400      	movs	r4, #0
 8007b86:	4625      	mov	r5, r4
 8007b88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b8a:	4656      	mov	r6, sl
 8007b8c:	ea6f 0803 	mvn.w	r8, r3
 8007b90:	2700      	movs	r7, #0
 8007b92:	4621      	mov	r1, r4
 8007b94:	4648      	mov	r0, r9
 8007b96:	f000 fcbf 	bl	8008518 <_Bfree>
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	f000 80bd 	beq.w	8007d1a <_dtoa_r+0x622>
 8007ba0:	b12f      	cbz	r7, 8007bae <_dtoa_r+0x4b6>
 8007ba2:	42af      	cmp	r7, r5
 8007ba4:	d003      	beq.n	8007bae <_dtoa_r+0x4b6>
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	4648      	mov	r0, r9
 8007baa:	f000 fcb5 	bl	8008518 <_Bfree>
 8007bae:	4629      	mov	r1, r5
 8007bb0:	4648      	mov	r0, r9
 8007bb2:	f000 fcb1 	bl	8008518 <_Bfree>
 8007bb6:	e0b0      	b.n	8007d1a <_dtoa_r+0x622>
 8007bb8:	07e2      	lsls	r2, r4, #31
 8007bba:	d505      	bpl.n	8007bc8 <_dtoa_r+0x4d0>
 8007bbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007bc0:	f7f8 fd1a 	bl	80005f8 <__aeabi_dmul>
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	1064      	asrs	r4, r4, #1
 8007bca:	3508      	adds	r5, #8
 8007bcc:	e762      	b.n	8007a94 <_dtoa_r+0x39c>
 8007bce:	2602      	movs	r6, #2
 8007bd0:	e765      	b.n	8007a9e <_dtoa_r+0x3a6>
 8007bd2:	9c03      	ldr	r4, [sp, #12]
 8007bd4:	46b8      	mov	r8, r7
 8007bd6:	e784      	b.n	8007ae2 <_dtoa_r+0x3ea>
 8007bd8:	4b27      	ldr	r3, [pc, #156]	@ (8007c78 <_dtoa_r+0x580>)
 8007bda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bdc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007be0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007be4:	4454      	add	r4, sl
 8007be6:	2900      	cmp	r1, #0
 8007be8:	d054      	beq.n	8007c94 <_dtoa_r+0x59c>
 8007bea:	4929      	ldr	r1, [pc, #164]	@ (8007c90 <_dtoa_r+0x598>)
 8007bec:	2000      	movs	r0, #0
 8007bee:	f7f8 fe2d 	bl	800084c <__aeabi_ddiv>
 8007bf2:	4633      	mov	r3, r6
 8007bf4:	462a      	mov	r2, r5
 8007bf6:	f7f8 fb47 	bl	8000288 <__aeabi_dsub>
 8007bfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007bfe:	4656      	mov	r6, sl
 8007c00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c04:	f7f8 ffa8 	bl	8000b58 <__aeabi_d2iz>
 8007c08:	4605      	mov	r5, r0
 8007c0a:	f7f8 fc8b 	bl	8000524 <__aeabi_i2d>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	460b      	mov	r3, r1
 8007c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c16:	f7f8 fb37 	bl	8000288 <__aeabi_dsub>
 8007c1a:	3530      	adds	r5, #48	@ 0x30
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007c24:	f806 5b01 	strb.w	r5, [r6], #1
 8007c28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c2c:	f7f8 ff56 	bl	8000adc <__aeabi_dcmplt>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d172      	bne.n	8007d1a <_dtoa_r+0x622>
 8007c34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c38:	4911      	ldr	r1, [pc, #68]	@ (8007c80 <_dtoa_r+0x588>)
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	f7f8 fb24 	bl	8000288 <__aeabi_dsub>
 8007c40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c44:	f7f8 ff4a 	bl	8000adc <__aeabi_dcmplt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	f040 80b4 	bne.w	8007db6 <_dtoa_r+0x6be>
 8007c4e:	42a6      	cmp	r6, r4
 8007c50:	f43f af70 	beq.w	8007b34 <_dtoa_r+0x43c>
 8007c54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c58:	4b0a      	ldr	r3, [pc, #40]	@ (8007c84 <_dtoa_r+0x58c>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f7f8 fccc 	bl	80005f8 <__aeabi_dmul>
 8007c60:	4b08      	ldr	r3, [pc, #32]	@ (8007c84 <_dtoa_r+0x58c>)
 8007c62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c66:	2200      	movs	r2, #0
 8007c68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c6c:	f7f8 fcc4 	bl	80005f8 <__aeabi_dmul>
 8007c70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c74:	e7c4      	b.n	8007c00 <_dtoa_r+0x508>
 8007c76:	bf00      	nop
 8007c78:	0800a440 	.word	0x0800a440
 8007c7c:	0800a418 	.word	0x0800a418
 8007c80:	3ff00000 	.word	0x3ff00000
 8007c84:	40240000 	.word	0x40240000
 8007c88:	401c0000 	.word	0x401c0000
 8007c8c:	40140000 	.word	0x40140000
 8007c90:	3fe00000 	.word	0x3fe00000
 8007c94:	4631      	mov	r1, r6
 8007c96:	4628      	mov	r0, r5
 8007c98:	f7f8 fcae 	bl	80005f8 <__aeabi_dmul>
 8007c9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ca0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007ca2:	4656      	mov	r6, sl
 8007ca4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ca8:	f7f8 ff56 	bl	8000b58 <__aeabi_d2iz>
 8007cac:	4605      	mov	r5, r0
 8007cae:	f7f8 fc39 	bl	8000524 <__aeabi_i2d>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cba:	f7f8 fae5 	bl	8000288 <__aeabi_dsub>
 8007cbe:	3530      	adds	r5, #48	@ 0x30
 8007cc0:	f806 5b01 	strb.w	r5, [r6], #1
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	42a6      	cmp	r6, r4
 8007cca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cce:	f04f 0200 	mov.w	r2, #0
 8007cd2:	d124      	bne.n	8007d1e <_dtoa_r+0x626>
 8007cd4:	4baf      	ldr	r3, [pc, #700]	@ (8007f94 <_dtoa_r+0x89c>)
 8007cd6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007cda:	f7f8 fad7 	bl	800028c <__adddf3>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ce6:	f7f8 ff17 	bl	8000b18 <__aeabi_dcmpgt>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d163      	bne.n	8007db6 <_dtoa_r+0x6be>
 8007cee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007cf2:	49a8      	ldr	r1, [pc, #672]	@ (8007f94 <_dtoa_r+0x89c>)
 8007cf4:	2000      	movs	r0, #0
 8007cf6:	f7f8 fac7 	bl	8000288 <__aeabi_dsub>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d02:	f7f8 feeb 	bl	8000adc <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	f43f af14 	beq.w	8007b34 <_dtoa_r+0x43c>
 8007d0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d0e:	1e73      	subs	r3, r6, #1
 8007d10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d16:	2b30      	cmp	r3, #48	@ 0x30
 8007d18:	d0f8      	beq.n	8007d0c <_dtoa_r+0x614>
 8007d1a:	4647      	mov	r7, r8
 8007d1c:	e03b      	b.n	8007d96 <_dtoa_r+0x69e>
 8007d1e:	4b9e      	ldr	r3, [pc, #632]	@ (8007f98 <_dtoa_r+0x8a0>)
 8007d20:	f7f8 fc6a 	bl	80005f8 <__aeabi_dmul>
 8007d24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d28:	e7bc      	b.n	8007ca4 <_dtoa_r+0x5ac>
 8007d2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d2e:	4656      	mov	r6, sl
 8007d30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d34:	4620      	mov	r0, r4
 8007d36:	4629      	mov	r1, r5
 8007d38:	f7f8 fd88 	bl	800084c <__aeabi_ddiv>
 8007d3c:	f7f8 ff0c 	bl	8000b58 <__aeabi_d2iz>
 8007d40:	4680      	mov	r8, r0
 8007d42:	f7f8 fbef 	bl	8000524 <__aeabi_i2d>
 8007d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d4a:	f7f8 fc55 	bl	80005f8 <__aeabi_dmul>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	4620      	mov	r0, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d5a:	f7f8 fa95 	bl	8000288 <__aeabi_dsub>
 8007d5e:	f806 4b01 	strb.w	r4, [r6], #1
 8007d62:	9d03      	ldr	r5, [sp, #12]
 8007d64:	eba6 040a 	sub.w	r4, r6, sl
 8007d68:	42a5      	cmp	r5, r4
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	d133      	bne.n	8007dd8 <_dtoa_r+0x6e0>
 8007d70:	f7f8 fa8c 	bl	800028c <__adddf3>
 8007d74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	f7f8 fecc 	bl	8000b18 <__aeabi_dcmpgt>
 8007d80:	b9c0      	cbnz	r0, 8007db4 <_dtoa_r+0x6bc>
 8007d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f8 fe9d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d8e:	b110      	cbz	r0, 8007d96 <_dtoa_r+0x69e>
 8007d90:	f018 0f01 	tst.w	r8, #1
 8007d94:	d10e      	bne.n	8007db4 <_dtoa_r+0x6bc>
 8007d96:	9902      	ldr	r1, [sp, #8]
 8007d98:	4648      	mov	r0, r9
 8007d9a:	f000 fbbd 	bl	8008518 <_Bfree>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	7033      	strb	r3, [r6, #0]
 8007da2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007da4:	3701      	adds	r7, #1
 8007da6:	601f      	str	r7, [r3, #0]
 8007da8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	f000 824b 	beq.w	8008246 <_dtoa_r+0xb4e>
 8007db0:	601e      	str	r6, [r3, #0]
 8007db2:	e248      	b.n	8008246 <_dtoa_r+0xb4e>
 8007db4:	46b8      	mov	r8, r7
 8007db6:	4633      	mov	r3, r6
 8007db8:	461e      	mov	r6, r3
 8007dba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dbe:	2a39      	cmp	r2, #57	@ 0x39
 8007dc0:	d106      	bne.n	8007dd0 <_dtoa_r+0x6d8>
 8007dc2:	459a      	cmp	sl, r3
 8007dc4:	d1f8      	bne.n	8007db8 <_dtoa_r+0x6c0>
 8007dc6:	2230      	movs	r2, #48	@ 0x30
 8007dc8:	f108 0801 	add.w	r8, r8, #1
 8007dcc:	f88a 2000 	strb.w	r2, [sl]
 8007dd0:	781a      	ldrb	r2, [r3, #0]
 8007dd2:	3201      	adds	r2, #1
 8007dd4:	701a      	strb	r2, [r3, #0]
 8007dd6:	e7a0      	b.n	8007d1a <_dtoa_r+0x622>
 8007dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8007f98 <_dtoa_r+0x8a0>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f7f8 fc0c 	bl	80005f8 <__aeabi_dmul>
 8007de0:	2200      	movs	r2, #0
 8007de2:	2300      	movs	r3, #0
 8007de4:	4604      	mov	r4, r0
 8007de6:	460d      	mov	r5, r1
 8007de8:	f7f8 fe6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007dec:	2800      	cmp	r0, #0
 8007dee:	d09f      	beq.n	8007d30 <_dtoa_r+0x638>
 8007df0:	e7d1      	b.n	8007d96 <_dtoa_r+0x69e>
 8007df2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007df4:	2a00      	cmp	r2, #0
 8007df6:	f000 80ea 	beq.w	8007fce <_dtoa_r+0x8d6>
 8007dfa:	9a07      	ldr	r2, [sp, #28]
 8007dfc:	2a01      	cmp	r2, #1
 8007dfe:	f300 80cd 	bgt.w	8007f9c <_dtoa_r+0x8a4>
 8007e02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e04:	2a00      	cmp	r2, #0
 8007e06:	f000 80c1 	beq.w	8007f8c <_dtoa_r+0x894>
 8007e0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e0e:	9c08      	ldr	r4, [sp, #32]
 8007e10:	9e00      	ldr	r6, [sp, #0]
 8007e12:	9a00      	ldr	r2, [sp, #0]
 8007e14:	441a      	add	r2, r3
 8007e16:	9200      	str	r2, [sp, #0]
 8007e18:	9a06      	ldr	r2, [sp, #24]
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	441a      	add	r2, r3
 8007e1e:	4648      	mov	r0, r9
 8007e20:	9206      	str	r2, [sp, #24]
 8007e22:	f000 fc2d 	bl	8008680 <__i2b>
 8007e26:	4605      	mov	r5, r0
 8007e28:	b166      	cbz	r6, 8007e44 <_dtoa_r+0x74c>
 8007e2a:	9b06      	ldr	r3, [sp, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	dd09      	ble.n	8007e44 <_dtoa_r+0x74c>
 8007e30:	42b3      	cmp	r3, r6
 8007e32:	9a00      	ldr	r2, [sp, #0]
 8007e34:	bfa8      	it	ge
 8007e36:	4633      	movge	r3, r6
 8007e38:	1ad2      	subs	r2, r2, r3
 8007e3a:	9200      	str	r2, [sp, #0]
 8007e3c:	9a06      	ldr	r2, [sp, #24]
 8007e3e:	1af6      	subs	r6, r6, r3
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	9306      	str	r3, [sp, #24]
 8007e44:	9b08      	ldr	r3, [sp, #32]
 8007e46:	b30b      	cbz	r3, 8007e8c <_dtoa_r+0x794>
 8007e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	f000 80c6 	beq.w	8007fdc <_dtoa_r+0x8e4>
 8007e50:	2c00      	cmp	r4, #0
 8007e52:	f000 80c0 	beq.w	8007fd6 <_dtoa_r+0x8de>
 8007e56:	4629      	mov	r1, r5
 8007e58:	4622      	mov	r2, r4
 8007e5a:	4648      	mov	r0, r9
 8007e5c:	f000 fcc8 	bl	80087f0 <__pow5mult>
 8007e60:	9a02      	ldr	r2, [sp, #8]
 8007e62:	4601      	mov	r1, r0
 8007e64:	4605      	mov	r5, r0
 8007e66:	4648      	mov	r0, r9
 8007e68:	f000 fc20 	bl	80086ac <__multiply>
 8007e6c:	9902      	ldr	r1, [sp, #8]
 8007e6e:	4680      	mov	r8, r0
 8007e70:	4648      	mov	r0, r9
 8007e72:	f000 fb51 	bl	8008518 <_Bfree>
 8007e76:	9b08      	ldr	r3, [sp, #32]
 8007e78:	1b1b      	subs	r3, r3, r4
 8007e7a:	9308      	str	r3, [sp, #32]
 8007e7c:	f000 80b1 	beq.w	8007fe2 <_dtoa_r+0x8ea>
 8007e80:	9a08      	ldr	r2, [sp, #32]
 8007e82:	4641      	mov	r1, r8
 8007e84:	4648      	mov	r0, r9
 8007e86:	f000 fcb3 	bl	80087f0 <__pow5mult>
 8007e8a:	9002      	str	r0, [sp, #8]
 8007e8c:	2101      	movs	r1, #1
 8007e8e:	4648      	mov	r0, r9
 8007e90:	f000 fbf6 	bl	8008680 <__i2b>
 8007e94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e96:	4604      	mov	r4, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 81d8 	beq.w	800824e <_dtoa_r+0xb56>
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	4601      	mov	r1, r0
 8007ea2:	4648      	mov	r0, r9
 8007ea4:	f000 fca4 	bl	80087f0 <__pow5mult>
 8007ea8:	9b07      	ldr	r3, [sp, #28]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	4604      	mov	r4, r0
 8007eae:	f300 809f 	bgt.w	8007ff0 <_dtoa_r+0x8f8>
 8007eb2:	9b04      	ldr	r3, [sp, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f040 8097 	bne.w	8007fe8 <_dtoa_r+0x8f0>
 8007eba:	9b05      	ldr	r3, [sp, #20]
 8007ebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f040 8093 	bne.w	8007fec <_dtoa_r+0x8f4>
 8007ec6:	9b05      	ldr	r3, [sp, #20]
 8007ec8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ecc:	0d1b      	lsrs	r3, r3, #20
 8007ece:	051b      	lsls	r3, r3, #20
 8007ed0:	b133      	cbz	r3, 8007ee0 <_dtoa_r+0x7e8>
 8007ed2:	9b00      	ldr	r3, [sp, #0]
 8007ed4:	3301      	adds	r3, #1
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	9b06      	ldr	r3, [sp, #24]
 8007eda:	3301      	adds	r3, #1
 8007edc:	9306      	str	r3, [sp, #24]
 8007ede:	2301      	movs	r3, #1
 8007ee0:	9308      	str	r3, [sp, #32]
 8007ee2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f000 81b8 	beq.w	800825a <_dtoa_r+0xb62>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ef0:	6918      	ldr	r0, [r3, #16]
 8007ef2:	f000 fb79 	bl	80085e8 <__hi0bits>
 8007ef6:	f1c0 0020 	rsb	r0, r0, #32
 8007efa:	9b06      	ldr	r3, [sp, #24]
 8007efc:	4418      	add	r0, r3
 8007efe:	f010 001f 	ands.w	r0, r0, #31
 8007f02:	f000 8082 	beq.w	800800a <_dtoa_r+0x912>
 8007f06:	f1c0 0320 	rsb	r3, r0, #32
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	dd73      	ble.n	8007ff6 <_dtoa_r+0x8fe>
 8007f0e:	9b00      	ldr	r3, [sp, #0]
 8007f10:	f1c0 001c 	rsb	r0, r0, #28
 8007f14:	4403      	add	r3, r0
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	9b06      	ldr	r3, [sp, #24]
 8007f1a:	4403      	add	r3, r0
 8007f1c:	4406      	add	r6, r0
 8007f1e:	9306      	str	r3, [sp, #24]
 8007f20:	9b00      	ldr	r3, [sp, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	dd05      	ble.n	8007f32 <_dtoa_r+0x83a>
 8007f26:	9902      	ldr	r1, [sp, #8]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f000 fcba 	bl	80088a4 <__lshift>
 8007f30:	9002      	str	r0, [sp, #8]
 8007f32:	9b06      	ldr	r3, [sp, #24]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	dd05      	ble.n	8007f44 <_dtoa_r+0x84c>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	f000 fcb1 	bl	80088a4 <__lshift>
 8007f42:	4604      	mov	r4, r0
 8007f44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d061      	beq.n	800800e <_dtoa_r+0x916>
 8007f4a:	9802      	ldr	r0, [sp, #8]
 8007f4c:	4621      	mov	r1, r4
 8007f4e:	f000 fd15 	bl	800897c <__mcmp>
 8007f52:	2800      	cmp	r0, #0
 8007f54:	da5b      	bge.n	800800e <_dtoa_r+0x916>
 8007f56:	2300      	movs	r3, #0
 8007f58:	9902      	ldr	r1, [sp, #8]
 8007f5a:	220a      	movs	r2, #10
 8007f5c:	4648      	mov	r0, r9
 8007f5e:	f000 fafd 	bl	800855c <__multadd>
 8007f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f64:	9002      	str	r0, [sp, #8]
 8007f66:	f107 38ff 	add.w	r8, r7, #4294967295
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 8177 	beq.w	800825e <_dtoa_r+0xb66>
 8007f70:	4629      	mov	r1, r5
 8007f72:	2300      	movs	r3, #0
 8007f74:	220a      	movs	r2, #10
 8007f76:	4648      	mov	r0, r9
 8007f78:	f000 faf0 	bl	800855c <__multadd>
 8007f7c:	f1bb 0f00 	cmp.w	fp, #0
 8007f80:	4605      	mov	r5, r0
 8007f82:	dc6f      	bgt.n	8008064 <_dtoa_r+0x96c>
 8007f84:	9b07      	ldr	r3, [sp, #28]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	dc49      	bgt.n	800801e <_dtoa_r+0x926>
 8007f8a:	e06b      	b.n	8008064 <_dtoa_r+0x96c>
 8007f8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007f8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007f92:	e73c      	b.n	8007e0e <_dtoa_r+0x716>
 8007f94:	3fe00000 	.word	0x3fe00000
 8007f98:	40240000 	.word	0x40240000
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	1e5c      	subs	r4, r3, #1
 8007fa0:	9b08      	ldr	r3, [sp, #32]
 8007fa2:	42a3      	cmp	r3, r4
 8007fa4:	db09      	blt.n	8007fba <_dtoa_r+0x8c2>
 8007fa6:	1b1c      	subs	r4, r3, r4
 8007fa8:	9b03      	ldr	r3, [sp, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f6bf af30 	bge.w	8007e10 <_dtoa_r+0x718>
 8007fb0:	9b00      	ldr	r3, [sp, #0]
 8007fb2:	9a03      	ldr	r2, [sp, #12]
 8007fb4:	1a9e      	subs	r6, r3, r2
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e72b      	b.n	8007e12 <_dtoa_r+0x71a>
 8007fba:	9b08      	ldr	r3, [sp, #32]
 8007fbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007fbe:	9408      	str	r4, [sp, #32]
 8007fc0:	1ae3      	subs	r3, r4, r3
 8007fc2:	441a      	add	r2, r3
 8007fc4:	9e00      	ldr	r6, [sp, #0]
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	920d      	str	r2, [sp, #52]	@ 0x34
 8007fca:	2400      	movs	r4, #0
 8007fcc:	e721      	b.n	8007e12 <_dtoa_r+0x71a>
 8007fce:	9c08      	ldr	r4, [sp, #32]
 8007fd0:	9e00      	ldr	r6, [sp, #0]
 8007fd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007fd4:	e728      	b.n	8007e28 <_dtoa_r+0x730>
 8007fd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007fda:	e751      	b.n	8007e80 <_dtoa_r+0x788>
 8007fdc:	9a08      	ldr	r2, [sp, #32]
 8007fde:	9902      	ldr	r1, [sp, #8]
 8007fe0:	e750      	b.n	8007e84 <_dtoa_r+0x78c>
 8007fe2:	f8cd 8008 	str.w	r8, [sp, #8]
 8007fe6:	e751      	b.n	8007e8c <_dtoa_r+0x794>
 8007fe8:	2300      	movs	r3, #0
 8007fea:	e779      	b.n	8007ee0 <_dtoa_r+0x7e8>
 8007fec:	9b04      	ldr	r3, [sp, #16]
 8007fee:	e777      	b.n	8007ee0 <_dtoa_r+0x7e8>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9308      	str	r3, [sp, #32]
 8007ff4:	e779      	b.n	8007eea <_dtoa_r+0x7f2>
 8007ff6:	d093      	beq.n	8007f20 <_dtoa_r+0x828>
 8007ff8:	9a00      	ldr	r2, [sp, #0]
 8007ffa:	331c      	adds	r3, #28
 8007ffc:	441a      	add	r2, r3
 8007ffe:	9200      	str	r2, [sp, #0]
 8008000:	9a06      	ldr	r2, [sp, #24]
 8008002:	441a      	add	r2, r3
 8008004:	441e      	add	r6, r3
 8008006:	9206      	str	r2, [sp, #24]
 8008008:	e78a      	b.n	8007f20 <_dtoa_r+0x828>
 800800a:	4603      	mov	r3, r0
 800800c:	e7f4      	b.n	8007ff8 <_dtoa_r+0x900>
 800800e:	9b03      	ldr	r3, [sp, #12]
 8008010:	2b00      	cmp	r3, #0
 8008012:	46b8      	mov	r8, r7
 8008014:	dc20      	bgt.n	8008058 <_dtoa_r+0x960>
 8008016:	469b      	mov	fp, r3
 8008018:	9b07      	ldr	r3, [sp, #28]
 800801a:	2b02      	cmp	r3, #2
 800801c:	dd1e      	ble.n	800805c <_dtoa_r+0x964>
 800801e:	f1bb 0f00 	cmp.w	fp, #0
 8008022:	f47f adb1 	bne.w	8007b88 <_dtoa_r+0x490>
 8008026:	4621      	mov	r1, r4
 8008028:	465b      	mov	r3, fp
 800802a:	2205      	movs	r2, #5
 800802c:	4648      	mov	r0, r9
 800802e:	f000 fa95 	bl	800855c <__multadd>
 8008032:	4601      	mov	r1, r0
 8008034:	4604      	mov	r4, r0
 8008036:	9802      	ldr	r0, [sp, #8]
 8008038:	f000 fca0 	bl	800897c <__mcmp>
 800803c:	2800      	cmp	r0, #0
 800803e:	f77f ada3 	ble.w	8007b88 <_dtoa_r+0x490>
 8008042:	4656      	mov	r6, sl
 8008044:	2331      	movs	r3, #49	@ 0x31
 8008046:	f806 3b01 	strb.w	r3, [r6], #1
 800804a:	f108 0801 	add.w	r8, r8, #1
 800804e:	e59f      	b.n	8007b90 <_dtoa_r+0x498>
 8008050:	9c03      	ldr	r4, [sp, #12]
 8008052:	46b8      	mov	r8, r7
 8008054:	4625      	mov	r5, r4
 8008056:	e7f4      	b.n	8008042 <_dtoa_r+0x94a>
 8008058:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800805c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 8101 	beq.w	8008266 <_dtoa_r+0xb6e>
 8008064:	2e00      	cmp	r6, #0
 8008066:	dd05      	ble.n	8008074 <_dtoa_r+0x97c>
 8008068:	4629      	mov	r1, r5
 800806a:	4632      	mov	r2, r6
 800806c:	4648      	mov	r0, r9
 800806e:	f000 fc19 	bl	80088a4 <__lshift>
 8008072:	4605      	mov	r5, r0
 8008074:	9b08      	ldr	r3, [sp, #32]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d05c      	beq.n	8008134 <_dtoa_r+0xa3c>
 800807a:	6869      	ldr	r1, [r5, #4]
 800807c:	4648      	mov	r0, r9
 800807e:	f000 fa0b 	bl	8008498 <_Balloc>
 8008082:	4606      	mov	r6, r0
 8008084:	b928      	cbnz	r0, 8008092 <_dtoa_r+0x99a>
 8008086:	4b82      	ldr	r3, [pc, #520]	@ (8008290 <_dtoa_r+0xb98>)
 8008088:	4602      	mov	r2, r0
 800808a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800808e:	f7ff bb4a 	b.w	8007726 <_dtoa_r+0x2e>
 8008092:	692a      	ldr	r2, [r5, #16]
 8008094:	3202      	adds	r2, #2
 8008096:	0092      	lsls	r2, r2, #2
 8008098:	f105 010c 	add.w	r1, r5, #12
 800809c:	300c      	adds	r0, #12
 800809e:	f7ff fa92 	bl	80075c6 <memcpy>
 80080a2:	2201      	movs	r2, #1
 80080a4:	4631      	mov	r1, r6
 80080a6:	4648      	mov	r0, r9
 80080a8:	f000 fbfc 	bl	80088a4 <__lshift>
 80080ac:	f10a 0301 	add.w	r3, sl, #1
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	eb0a 030b 	add.w	r3, sl, fp
 80080b6:	9308      	str	r3, [sp, #32]
 80080b8:	9b04      	ldr	r3, [sp, #16]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	462f      	mov	r7, r5
 80080c0:	9306      	str	r3, [sp, #24]
 80080c2:	4605      	mov	r5, r0
 80080c4:	9b00      	ldr	r3, [sp, #0]
 80080c6:	9802      	ldr	r0, [sp, #8]
 80080c8:	4621      	mov	r1, r4
 80080ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80080ce:	f7ff fa88 	bl	80075e2 <quorem>
 80080d2:	4603      	mov	r3, r0
 80080d4:	3330      	adds	r3, #48	@ 0x30
 80080d6:	9003      	str	r0, [sp, #12]
 80080d8:	4639      	mov	r1, r7
 80080da:	9802      	ldr	r0, [sp, #8]
 80080dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80080de:	f000 fc4d 	bl	800897c <__mcmp>
 80080e2:	462a      	mov	r2, r5
 80080e4:	9004      	str	r0, [sp, #16]
 80080e6:	4621      	mov	r1, r4
 80080e8:	4648      	mov	r0, r9
 80080ea:	f000 fc63 	bl	80089b4 <__mdiff>
 80080ee:	68c2      	ldr	r2, [r0, #12]
 80080f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080f2:	4606      	mov	r6, r0
 80080f4:	bb02      	cbnz	r2, 8008138 <_dtoa_r+0xa40>
 80080f6:	4601      	mov	r1, r0
 80080f8:	9802      	ldr	r0, [sp, #8]
 80080fa:	f000 fc3f 	bl	800897c <__mcmp>
 80080fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008100:	4602      	mov	r2, r0
 8008102:	4631      	mov	r1, r6
 8008104:	4648      	mov	r0, r9
 8008106:	920c      	str	r2, [sp, #48]	@ 0x30
 8008108:	9309      	str	r3, [sp, #36]	@ 0x24
 800810a:	f000 fa05 	bl	8008518 <_Bfree>
 800810e:	9b07      	ldr	r3, [sp, #28]
 8008110:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008112:	9e00      	ldr	r6, [sp, #0]
 8008114:	ea42 0103 	orr.w	r1, r2, r3
 8008118:	9b06      	ldr	r3, [sp, #24]
 800811a:	4319      	orrs	r1, r3
 800811c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800811e:	d10d      	bne.n	800813c <_dtoa_r+0xa44>
 8008120:	2b39      	cmp	r3, #57	@ 0x39
 8008122:	d027      	beq.n	8008174 <_dtoa_r+0xa7c>
 8008124:	9a04      	ldr	r2, [sp, #16]
 8008126:	2a00      	cmp	r2, #0
 8008128:	dd01      	ble.n	800812e <_dtoa_r+0xa36>
 800812a:	9b03      	ldr	r3, [sp, #12]
 800812c:	3331      	adds	r3, #49	@ 0x31
 800812e:	f88b 3000 	strb.w	r3, [fp]
 8008132:	e52e      	b.n	8007b92 <_dtoa_r+0x49a>
 8008134:	4628      	mov	r0, r5
 8008136:	e7b9      	b.n	80080ac <_dtoa_r+0x9b4>
 8008138:	2201      	movs	r2, #1
 800813a:	e7e2      	b.n	8008102 <_dtoa_r+0xa0a>
 800813c:	9904      	ldr	r1, [sp, #16]
 800813e:	2900      	cmp	r1, #0
 8008140:	db04      	blt.n	800814c <_dtoa_r+0xa54>
 8008142:	9807      	ldr	r0, [sp, #28]
 8008144:	4301      	orrs	r1, r0
 8008146:	9806      	ldr	r0, [sp, #24]
 8008148:	4301      	orrs	r1, r0
 800814a:	d120      	bne.n	800818e <_dtoa_r+0xa96>
 800814c:	2a00      	cmp	r2, #0
 800814e:	ddee      	ble.n	800812e <_dtoa_r+0xa36>
 8008150:	9902      	ldr	r1, [sp, #8]
 8008152:	9300      	str	r3, [sp, #0]
 8008154:	2201      	movs	r2, #1
 8008156:	4648      	mov	r0, r9
 8008158:	f000 fba4 	bl	80088a4 <__lshift>
 800815c:	4621      	mov	r1, r4
 800815e:	9002      	str	r0, [sp, #8]
 8008160:	f000 fc0c 	bl	800897c <__mcmp>
 8008164:	2800      	cmp	r0, #0
 8008166:	9b00      	ldr	r3, [sp, #0]
 8008168:	dc02      	bgt.n	8008170 <_dtoa_r+0xa78>
 800816a:	d1e0      	bne.n	800812e <_dtoa_r+0xa36>
 800816c:	07da      	lsls	r2, r3, #31
 800816e:	d5de      	bpl.n	800812e <_dtoa_r+0xa36>
 8008170:	2b39      	cmp	r3, #57	@ 0x39
 8008172:	d1da      	bne.n	800812a <_dtoa_r+0xa32>
 8008174:	2339      	movs	r3, #57	@ 0x39
 8008176:	f88b 3000 	strb.w	r3, [fp]
 800817a:	4633      	mov	r3, r6
 800817c:	461e      	mov	r6, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008184:	2a39      	cmp	r2, #57	@ 0x39
 8008186:	d04e      	beq.n	8008226 <_dtoa_r+0xb2e>
 8008188:	3201      	adds	r2, #1
 800818a:	701a      	strb	r2, [r3, #0]
 800818c:	e501      	b.n	8007b92 <_dtoa_r+0x49a>
 800818e:	2a00      	cmp	r2, #0
 8008190:	dd03      	ble.n	800819a <_dtoa_r+0xaa2>
 8008192:	2b39      	cmp	r3, #57	@ 0x39
 8008194:	d0ee      	beq.n	8008174 <_dtoa_r+0xa7c>
 8008196:	3301      	adds	r3, #1
 8008198:	e7c9      	b.n	800812e <_dtoa_r+0xa36>
 800819a:	9a00      	ldr	r2, [sp, #0]
 800819c:	9908      	ldr	r1, [sp, #32]
 800819e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80081a2:	428a      	cmp	r2, r1
 80081a4:	d028      	beq.n	80081f8 <_dtoa_r+0xb00>
 80081a6:	9902      	ldr	r1, [sp, #8]
 80081a8:	2300      	movs	r3, #0
 80081aa:	220a      	movs	r2, #10
 80081ac:	4648      	mov	r0, r9
 80081ae:	f000 f9d5 	bl	800855c <__multadd>
 80081b2:	42af      	cmp	r7, r5
 80081b4:	9002      	str	r0, [sp, #8]
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	f04f 020a 	mov.w	r2, #10
 80081be:	4639      	mov	r1, r7
 80081c0:	4648      	mov	r0, r9
 80081c2:	d107      	bne.n	80081d4 <_dtoa_r+0xadc>
 80081c4:	f000 f9ca 	bl	800855c <__multadd>
 80081c8:	4607      	mov	r7, r0
 80081ca:	4605      	mov	r5, r0
 80081cc:	9b00      	ldr	r3, [sp, #0]
 80081ce:	3301      	adds	r3, #1
 80081d0:	9300      	str	r3, [sp, #0]
 80081d2:	e777      	b.n	80080c4 <_dtoa_r+0x9cc>
 80081d4:	f000 f9c2 	bl	800855c <__multadd>
 80081d8:	4629      	mov	r1, r5
 80081da:	4607      	mov	r7, r0
 80081dc:	2300      	movs	r3, #0
 80081de:	220a      	movs	r2, #10
 80081e0:	4648      	mov	r0, r9
 80081e2:	f000 f9bb 	bl	800855c <__multadd>
 80081e6:	4605      	mov	r5, r0
 80081e8:	e7f0      	b.n	80081cc <_dtoa_r+0xad4>
 80081ea:	f1bb 0f00 	cmp.w	fp, #0
 80081ee:	bfcc      	ite	gt
 80081f0:	465e      	movgt	r6, fp
 80081f2:	2601      	movle	r6, #1
 80081f4:	4456      	add	r6, sl
 80081f6:	2700      	movs	r7, #0
 80081f8:	9902      	ldr	r1, [sp, #8]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	2201      	movs	r2, #1
 80081fe:	4648      	mov	r0, r9
 8008200:	f000 fb50 	bl	80088a4 <__lshift>
 8008204:	4621      	mov	r1, r4
 8008206:	9002      	str	r0, [sp, #8]
 8008208:	f000 fbb8 	bl	800897c <__mcmp>
 800820c:	2800      	cmp	r0, #0
 800820e:	dcb4      	bgt.n	800817a <_dtoa_r+0xa82>
 8008210:	d102      	bne.n	8008218 <_dtoa_r+0xb20>
 8008212:	9b00      	ldr	r3, [sp, #0]
 8008214:	07db      	lsls	r3, r3, #31
 8008216:	d4b0      	bmi.n	800817a <_dtoa_r+0xa82>
 8008218:	4633      	mov	r3, r6
 800821a:	461e      	mov	r6, r3
 800821c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008220:	2a30      	cmp	r2, #48	@ 0x30
 8008222:	d0fa      	beq.n	800821a <_dtoa_r+0xb22>
 8008224:	e4b5      	b.n	8007b92 <_dtoa_r+0x49a>
 8008226:	459a      	cmp	sl, r3
 8008228:	d1a8      	bne.n	800817c <_dtoa_r+0xa84>
 800822a:	2331      	movs	r3, #49	@ 0x31
 800822c:	f108 0801 	add.w	r8, r8, #1
 8008230:	f88a 3000 	strb.w	r3, [sl]
 8008234:	e4ad      	b.n	8007b92 <_dtoa_r+0x49a>
 8008236:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008238:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008294 <_dtoa_r+0xb9c>
 800823c:	b11b      	cbz	r3, 8008246 <_dtoa_r+0xb4e>
 800823e:	f10a 0308 	add.w	r3, sl, #8
 8008242:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	4650      	mov	r0, sl
 8008248:	b017      	add	sp, #92	@ 0x5c
 800824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824e:	9b07      	ldr	r3, [sp, #28]
 8008250:	2b01      	cmp	r3, #1
 8008252:	f77f ae2e 	ble.w	8007eb2 <_dtoa_r+0x7ba>
 8008256:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008258:	9308      	str	r3, [sp, #32]
 800825a:	2001      	movs	r0, #1
 800825c:	e64d      	b.n	8007efa <_dtoa_r+0x802>
 800825e:	f1bb 0f00 	cmp.w	fp, #0
 8008262:	f77f aed9 	ble.w	8008018 <_dtoa_r+0x920>
 8008266:	4656      	mov	r6, sl
 8008268:	9802      	ldr	r0, [sp, #8]
 800826a:	4621      	mov	r1, r4
 800826c:	f7ff f9b9 	bl	80075e2 <quorem>
 8008270:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008274:	f806 3b01 	strb.w	r3, [r6], #1
 8008278:	eba6 020a 	sub.w	r2, r6, sl
 800827c:	4593      	cmp	fp, r2
 800827e:	ddb4      	ble.n	80081ea <_dtoa_r+0xaf2>
 8008280:	9902      	ldr	r1, [sp, #8]
 8008282:	2300      	movs	r3, #0
 8008284:	220a      	movs	r2, #10
 8008286:	4648      	mov	r0, r9
 8008288:	f000 f968 	bl	800855c <__multadd>
 800828c:	9002      	str	r0, [sp, #8]
 800828e:	e7eb      	b.n	8008268 <_dtoa_r+0xb70>
 8008290:	0800a344 	.word	0x0800a344
 8008294:	0800a2c8 	.word	0x0800a2c8

08008298 <_free_r>:
 8008298:	b538      	push	{r3, r4, r5, lr}
 800829a:	4605      	mov	r5, r0
 800829c:	2900      	cmp	r1, #0
 800829e:	d041      	beq.n	8008324 <_free_r+0x8c>
 80082a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a4:	1f0c      	subs	r4, r1, #4
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfb8      	it	lt
 80082aa:	18e4      	addlt	r4, r4, r3
 80082ac:	f000 f8e8 	bl	8008480 <__malloc_lock>
 80082b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008328 <_free_r+0x90>)
 80082b2:	6813      	ldr	r3, [r2, #0]
 80082b4:	b933      	cbnz	r3, 80082c4 <_free_r+0x2c>
 80082b6:	6063      	str	r3, [r4, #4]
 80082b8:	6014      	str	r4, [r2, #0]
 80082ba:	4628      	mov	r0, r5
 80082bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082c0:	f000 b8e4 	b.w	800848c <__malloc_unlock>
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	d908      	bls.n	80082da <_free_r+0x42>
 80082c8:	6820      	ldr	r0, [r4, #0]
 80082ca:	1821      	adds	r1, r4, r0
 80082cc:	428b      	cmp	r3, r1
 80082ce:	bf01      	itttt	eq
 80082d0:	6819      	ldreq	r1, [r3, #0]
 80082d2:	685b      	ldreq	r3, [r3, #4]
 80082d4:	1809      	addeq	r1, r1, r0
 80082d6:	6021      	streq	r1, [r4, #0]
 80082d8:	e7ed      	b.n	80082b6 <_free_r+0x1e>
 80082da:	461a      	mov	r2, r3
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	b10b      	cbz	r3, 80082e4 <_free_r+0x4c>
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	d9fa      	bls.n	80082da <_free_r+0x42>
 80082e4:	6811      	ldr	r1, [r2, #0]
 80082e6:	1850      	adds	r0, r2, r1
 80082e8:	42a0      	cmp	r0, r4
 80082ea:	d10b      	bne.n	8008304 <_free_r+0x6c>
 80082ec:	6820      	ldr	r0, [r4, #0]
 80082ee:	4401      	add	r1, r0
 80082f0:	1850      	adds	r0, r2, r1
 80082f2:	4283      	cmp	r3, r0
 80082f4:	6011      	str	r1, [r2, #0]
 80082f6:	d1e0      	bne.n	80082ba <_free_r+0x22>
 80082f8:	6818      	ldr	r0, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	6053      	str	r3, [r2, #4]
 80082fe:	4408      	add	r0, r1
 8008300:	6010      	str	r0, [r2, #0]
 8008302:	e7da      	b.n	80082ba <_free_r+0x22>
 8008304:	d902      	bls.n	800830c <_free_r+0x74>
 8008306:	230c      	movs	r3, #12
 8008308:	602b      	str	r3, [r5, #0]
 800830a:	e7d6      	b.n	80082ba <_free_r+0x22>
 800830c:	6820      	ldr	r0, [r4, #0]
 800830e:	1821      	adds	r1, r4, r0
 8008310:	428b      	cmp	r3, r1
 8008312:	bf04      	itt	eq
 8008314:	6819      	ldreq	r1, [r3, #0]
 8008316:	685b      	ldreq	r3, [r3, #4]
 8008318:	6063      	str	r3, [r4, #4]
 800831a:	bf04      	itt	eq
 800831c:	1809      	addeq	r1, r1, r0
 800831e:	6021      	streq	r1, [r4, #0]
 8008320:	6054      	str	r4, [r2, #4]
 8008322:	e7ca      	b.n	80082ba <_free_r+0x22>
 8008324:	bd38      	pop	{r3, r4, r5, pc}
 8008326:	bf00      	nop
 8008328:	20002c00 	.word	0x20002c00

0800832c <malloc>:
 800832c:	4b02      	ldr	r3, [pc, #8]	@ (8008338 <malloc+0xc>)
 800832e:	4601      	mov	r1, r0
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	f000 b825 	b.w	8008380 <_malloc_r>
 8008336:	bf00      	nop
 8008338:	20002404 	.word	0x20002404

0800833c <sbrk_aligned>:
 800833c:	b570      	push	{r4, r5, r6, lr}
 800833e:	4e0f      	ldr	r6, [pc, #60]	@ (800837c <sbrk_aligned+0x40>)
 8008340:	460c      	mov	r4, r1
 8008342:	6831      	ldr	r1, [r6, #0]
 8008344:	4605      	mov	r5, r0
 8008346:	b911      	cbnz	r1, 800834e <sbrk_aligned+0x12>
 8008348:	f000 fe3e 	bl	8008fc8 <_sbrk_r>
 800834c:	6030      	str	r0, [r6, #0]
 800834e:	4621      	mov	r1, r4
 8008350:	4628      	mov	r0, r5
 8008352:	f000 fe39 	bl	8008fc8 <_sbrk_r>
 8008356:	1c43      	adds	r3, r0, #1
 8008358:	d103      	bne.n	8008362 <sbrk_aligned+0x26>
 800835a:	f04f 34ff 	mov.w	r4, #4294967295
 800835e:	4620      	mov	r0, r4
 8008360:	bd70      	pop	{r4, r5, r6, pc}
 8008362:	1cc4      	adds	r4, r0, #3
 8008364:	f024 0403 	bic.w	r4, r4, #3
 8008368:	42a0      	cmp	r0, r4
 800836a:	d0f8      	beq.n	800835e <sbrk_aligned+0x22>
 800836c:	1a21      	subs	r1, r4, r0
 800836e:	4628      	mov	r0, r5
 8008370:	f000 fe2a 	bl	8008fc8 <_sbrk_r>
 8008374:	3001      	adds	r0, #1
 8008376:	d1f2      	bne.n	800835e <sbrk_aligned+0x22>
 8008378:	e7ef      	b.n	800835a <sbrk_aligned+0x1e>
 800837a:	bf00      	nop
 800837c:	20002bfc 	.word	0x20002bfc

08008380 <_malloc_r>:
 8008380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008384:	1ccd      	adds	r5, r1, #3
 8008386:	f025 0503 	bic.w	r5, r5, #3
 800838a:	3508      	adds	r5, #8
 800838c:	2d0c      	cmp	r5, #12
 800838e:	bf38      	it	cc
 8008390:	250c      	movcc	r5, #12
 8008392:	2d00      	cmp	r5, #0
 8008394:	4606      	mov	r6, r0
 8008396:	db01      	blt.n	800839c <_malloc_r+0x1c>
 8008398:	42a9      	cmp	r1, r5
 800839a:	d904      	bls.n	80083a6 <_malloc_r+0x26>
 800839c:	230c      	movs	r3, #12
 800839e:	6033      	str	r3, [r6, #0]
 80083a0:	2000      	movs	r0, #0
 80083a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800847c <_malloc_r+0xfc>
 80083aa:	f000 f869 	bl	8008480 <__malloc_lock>
 80083ae:	f8d8 3000 	ldr.w	r3, [r8]
 80083b2:	461c      	mov	r4, r3
 80083b4:	bb44      	cbnz	r4, 8008408 <_malloc_r+0x88>
 80083b6:	4629      	mov	r1, r5
 80083b8:	4630      	mov	r0, r6
 80083ba:	f7ff ffbf 	bl	800833c <sbrk_aligned>
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	4604      	mov	r4, r0
 80083c2:	d158      	bne.n	8008476 <_malloc_r+0xf6>
 80083c4:	f8d8 4000 	ldr.w	r4, [r8]
 80083c8:	4627      	mov	r7, r4
 80083ca:	2f00      	cmp	r7, #0
 80083cc:	d143      	bne.n	8008456 <_malloc_r+0xd6>
 80083ce:	2c00      	cmp	r4, #0
 80083d0:	d04b      	beq.n	800846a <_malloc_r+0xea>
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	4639      	mov	r1, r7
 80083d6:	4630      	mov	r0, r6
 80083d8:	eb04 0903 	add.w	r9, r4, r3
 80083dc:	f000 fdf4 	bl	8008fc8 <_sbrk_r>
 80083e0:	4581      	cmp	r9, r0
 80083e2:	d142      	bne.n	800846a <_malloc_r+0xea>
 80083e4:	6821      	ldr	r1, [r4, #0]
 80083e6:	1a6d      	subs	r5, r5, r1
 80083e8:	4629      	mov	r1, r5
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff ffa6 	bl	800833c <sbrk_aligned>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d03a      	beq.n	800846a <_malloc_r+0xea>
 80083f4:	6823      	ldr	r3, [r4, #0]
 80083f6:	442b      	add	r3, r5
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	f8d8 3000 	ldr.w	r3, [r8]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	bb62      	cbnz	r2, 800845c <_malloc_r+0xdc>
 8008402:	f8c8 7000 	str.w	r7, [r8]
 8008406:	e00f      	b.n	8008428 <_malloc_r+0xa8>
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	1b52      	subs	r2, r2, r5
 800840c:	d420      	bmi.n	8008450 <_malloc_r+0xd0>
 800840e:	2a0b      	cmp	r2, #11
 8008410:	d917      	bls.n	8008442 <_malloc_r+0xc2>
 8008412:	1961      	adds	r1, r4, r5
 8008414:	42a3      	cmp	r3, r4
 8008416:	6025      	str	r5, [r4, #0]
 8008418:	bf18      	it	ne
 800841a:	6059      	strne	r1, [r3, #4]
 800841c:	6863      	ldr	r3, [r4, #4]
 800841e:	bf08      	it	eq
 8008420:	f8c8 1000 	streq.w	r1, [r8]
 8008424:	5162      	str	r2, [r4, r5]
 8008426:	604b      	str	r3, [r1, #4]
 8008428:	4630      	mov	r0, r6
 800842a:	f000 f82f 	bl	800848c <__malloc_unlock>
 800842e:	f104 000b 	add.w	r0, r4, #11
 8008432:	1d23      	adds	r3, r4, #4
 8008434:	f020 0007 	bic.w	r0, r0, #7
 8008438:	1ac2      	subs	r2, r0, r3
 800843a:	bf1c      	itt	ne
 800843c:	1a1b      	subne	r3, r3, r0
 800843e:	50a3      	strne	r3, [r4, r2]
 8008440:	e7af      	b.n	80083a2 <_malloc_r+0x22>
 8008442:	6862      	ldr	r2, [r4, #4]
 8008444:	42a3      	cmp	r3, r4
 8008446:	bf0c      	ite	eq
 8008448:	f8c8 2000 	streq.w	r2, [r8]
 800844c:	605a      	strne	r2, [r3, #4]
 800844e:	e7eb      	b.n	8008428 <_malloc_r+0xa8>
 8008450:	4623      	mov	r3, r4
 8008452:	6864      	ldr	r4, [r4, #4]
 8008454:	e7ae      	b.n	80083b4 <_malloc_r+0x34>
 8008456:	463c      	mov	r4, r7
 8008458:	687f      	ldr	r7, [r7, #4]
 800845a:	e7b6      	b.n	80083ca <_malloc_r+0x4a>
 800845c:	461a      	mov	r2, r3
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	42a3      	cmp	r3, r4
 8008462:	d1fb      	bne.n	800845c <_malloc_r+0xdc>
 8008464:	2300      	movs	r3, #0
 8008466:	6053      	str	r3, [r2, #4]
 8008468:	e7de      	b.n	8008428 <_malloc_r+0xa8>
 800846a:	230c      	movs	r3, #12
 800846c:	6033      	str	r3, [r6, #0]
 800846e:	4630      	mov	r0, r6
 8008470:	f000 f80c 	bl	800848c <__malloc_unlock>
 8008474:	e794      	b.n	80083a0 <_malloc_r+0x20>
 8008476:	6005      	str	r5, [r0, #0]
 8008478:	e7d6      	b.n	8008428 <_malloc_r+0xa8>
 800847a:	bf00      	nop
 800847c:	20002c00 	.word	0x20002c00

08008480 <__malloc_lock>:
 8008480:	4801      	ldr	r0, [pc, #4]	@ (8008488 <__malloc_lock+0x8>)
 8008482:	f7ff b89e 	b.w	80075c2 <__retarget_lock_acquire_recursive>
 8008486:	bf00      	nop
 8008488:	20002bf8 	.word	0x20002bf8

0800848c <__malloc_unlock>:
 800848c:	4801      	ldr	r0, [pc, #4]	@ (8008494 <__malloc_unlock+0x8>)
 800848e:	f7ff b899 	b.w	80075c4 <__retarget_lock_release_recursive>
 8008492:	bf00      	nop
 8008494:	20002bf8 	.word	0x20002bf8

08008498 <_Balloc>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	69c6      	ldr	r6, [r0, #28]
 800849c:	4604      	mov	r4, r0
 800849e:	460d      	mov	r5, r1
 80084a0:	b976      	cbnz	r6, 80084c0 <_Balloc+0x28>
 80084a2:	2010      	movs	r0, #16
 80084a4:	f7ff ff42 	bl	800832c <malloc>
 80084a8:	4602      	mov	r2, r0
 80084aa:	61e0      	str	r0, [r4, #28]
 80084ac:	b920      	cbnz	r0, 80084b8 <_Balloc+0x20>
 80084ae:	4b18      	ldr	r3, [pc, #96]	@ (8008510 <_Balloc+0x78>)
 80084b0:	4818      	ldr	r0, [pc, #96]	@ (8008514 <_Balloc+0x7c>)
 80084b2:	216b      	movs	r1, #107	@ 0x6b
 80084b4:	f000 fd98 	bl	8008fe8 <__assert_func>
 80084b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084bc:	6006      	str	r6, [r0, #0]
 80084be:	60c6      	str	r6, [r0, #12]
 80084c0:	69e6      	ldr	r6, [r4, #28]
 80084c2:	68f3      	ldr	r3, [r6, #12]
 80084c4:	b183      	cbz	r3, 80084e8 <_Balloc+0x50>
 80084c6:	69e3      	ldr	r3, [r4, #28]
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084ce:	b9b8      	cbnz	r0, 8008500 <_Balloc+0x68>
 80084d0:	2101      	movs	r1, #1
 80084d2:	fa01 f605 	lsl.w	r6, r1, r5
 80084d6:	1d72      	adds	r2, r6, #5
 80084d8:	0092      	lsls	r2, r2, #2
 80084da:	4620      	mov	r0, r4
 80084dc:	f000 fda2 	bl	8009024 <_calloc_r>
 80084e0:	b160      	cbz	r0, 80084fc <_Balloc+0x64>
 80084e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084e6:	e00e      	b.n	8008506 <_Balloc+0x6e>
 80084e8:	2221      	movs	r2, #33	@ 0x21
 80084ea:	2104      	movs	r1, #4
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 fd99 	bl	8009024 <_calloc_r>
 80084f2:	69e3      	ldr	r3, [r4, #28]
 80084f4:	60f0      	str	r0, [r6, #12]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1e4      	bne.n	80084c6 <_Balloc+0x2e>
 80084fc:	2000      	movs	r0, #0
 80084fe:	bd70      	pop	{r4, r5, r6, pc}
 8008500:	6802      	ldr	r2, [r0, #0]
 8008502:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008506:	2300      	movs	r3, #0
 8008508:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800850c:	e7f7      	b.n	80084fe <_Balloc+0x66>
 800850e:	bf00      	nop
 8008510:	0800a2d5 	.word	0x0800a2d5
 8008514:	0800a355 	.word	0x0800a355

08008518 <_Bfree>:
 8008518:	b570      	push	{r4, r5, r6, lr}
 800851a:	69c6      	ldr	r6, [r0, #28]
 800851c:	4605      	mov	r5, r0
 800851e:	460c      	mov	r4, r1
 8008520:	b976      	cbnz	r6, 8008540 <_Bfree+0x28>
 8008522:	2010      	movs	r0, #16
 8008524:	f7ff ff02 	bl	800832c <malloc>
 8008528:	4602      	mov	r2, r0
 800852a:	61e8      	str	r0, [r5, #28]
 800852c:	b920      	cbnz	r0, 8008538 <_Bfree+0x20>
 800852e:	4b09      	ldr	r3, [pc, #36]	@ (8008554 <_Bfree+0x3c>)
 8008530:	4809      	ldr	r0, [pc, #36]	@ (8008558 <_Bfree+0x40>)
 8008532:	218f      	movs	r1, #143	@ 0x8f
 8008534:	f000 fd58 	bl	8008fe8 <__assert_func>
 8008538:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800853c:	6006      	str	r6, [r0, #0]
 800853e:	60c6      	str	r6, [r0, #12]
 8008540:	b13c      	cbz	r4, 8008552 <_Bfree+0x3a>
 8008542:	69eb      	ldr	r3, [r5, #28]
 8008544:	6862      	ldr	r2, [r4, #4]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800854c:	6021      	str	r1, [r4, #0]
 800854e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	0800a2d5 	.word	0x0800a2d5
 8008558:	0800a355 	.word	0x0800a355

0800855c <__multadd>:
 800855c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008560:	690d      	ldr	r5, [r1, #16]
 8008562:	4607      	mov	r7, r0
 8008564:	460c      	mov	r4, r1
 8008566:	461e      	mov	r6, r3
 8008568:	f101 0c14 	add.w	ip, r1, #20
 800856c:	2000      	movs	r0, #0
 800856e:	f8dc 3000 	ldr.w	r3, [ip]
 8008572:	b299      	uxth	r1, r3
 8008574:	fb02 6101 	mla	r1, r2, r1, r6
 8008578:	0c1e      	lsrs	r6, r3, #16
 800857a:	0c0b      	lsrs	r3, r1, #16
 800857c:	fb02 3306 	mla	r3, r2, r6, r3
 8008580:	b289      	uxth	r1, r1
 8008582:	3001      	adds	r0, #1
 8008584:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008588:	4285      	cmp	r5, r0
 800858a:	f84c 1b04 	str.w	r1, [ip], #4
 800858e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008592:	dcec      	bgt.n	800856e <__multadd+0x12>
 8008594:	b30e      	cbz	r6, 80085da <__multadd+0x7e>
 8008596:	68a3      	ldr	r3, [r4, #8]
 8008598:	42ab      	cmp	r3, r5
 800859a:	dc19      	bgt.n	80085d0 <__multadd+0x74>
 800859c:	6861      	ldr	r1, [r4, #4]
 800859e:	4638      	mov	r0, r7
 80085a0:	3101      	adds	r1, #1
 80085a2:	f7ff ff79 	bl	8008498 <_Balloc>
 80085a6:	4680      	mov	r8, r0
 80085a8:	b928      	cbnz	r0, 80085b6 <__multadd+0x5a>
 80085aa:	4602      	mov	r2, r0
 80085ac:	4b0c      	ldr	r3, [pc, #48]	@ (80085e0 <__multadd+0x84>)
 80085ae:	480d      	ldr	r0, [pc, #52]	@ (80085e4 <__multadd+0x88>)
 80085b0:	21ba      	movs	r1, #186	@ 0xba
 80085b2:	f000 fd19 	bl	8008fe8 <__assert_func>
 80085b6:	6922      	ldr	r2, [r4, #16]
 80085b8:	3202      	adds	r2, #2
 80085ba:	f104 010c 	add.w	r1, r4, #12
 80085be:	0092      	lsls	r2, r2, #2
 80085c0:	300c      	adds	r0, #12
 80085c2:	f7ff f800 	bl	80075c6 <memcpy>
 80085c6:	4621      	mov	r1, r4
 80085c8:	4638      	mov	r0, r7
 80085ca:	f7ff ffa5 	bl	8008518 <_Bfree>
 80085ce:	4644      	mov	r4, r8
 80085d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085d4:	3501      	adds	r5, #1
 80085d6:	615e      	str	r6, [r3, #20]
 80085d8:	6125      	str	r5, [r4, #16]
 80085da:	4620      	mov	r0, r4
 80085dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e0:	0800a344 	.word	0x0800a344
 80085e4:	0800a355 	.word	0x0800a355

080085e8 <__hi0bits>:
 80085e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80085ec:	4603      	mov	r3, r0
 80085ee:	bf36      	itet	cc
 80085f0:	0403      	lslcc	r3, r0, #16
 80085f2:	2000      	movcs	r0, #0
 80085f4:	2010      	movcc	r0, #16
 80085f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80085fa:	bf3c      	itt	cc
 80085fc:	021b      	lslcc	r3, r3, #8
 80085fe:	3008      	addcc	r0, #8
 8008600:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008604:	bf3c      	itt	cc
 8008606:	011b      	lslcc	r3, r3, #4
 8008608:	3004      	addcc	r0, #4
 800860a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800860e:	bf3c      	itt	cc
 8008610:	009b      	lslcc	r3, r3, #2
 8008612:	3002      	addcc	r0, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	db05      	blt.n	8008624 <__hi0bits+0x3c>
 8008618:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800861c:	f100 0001 	add.w	r0, r0, #1
 8008620:	bf08      	it	eq
 8008622:	2020      	moveq	r0, #32
 8008624:	4770      	bx	lr

08008626 <__lo0bits>:
 8008626:	6803      	ldr	r3, [r0, #0]
 8008628:	4602      	mov	r2, r0
 800862a:	f013 0007 	ands.w	r0, r3, #7
 800862e:	d00b      	beq.n	8008648 <__lo0bits+0x22>
 8008630:	07d9      	lsls	r1, r3, #31
 8008632:	d421      	bmi.n	8008678 <__lo0bits+0x52>
 8008634:	0798      	lsls	r0, r3, #30
 8008636:	bf49      	itett	mi
 8008638:	085b      	lsrmi	r3, r3, #1
 800863a:	089b      	lsrpl	r3, r3, #2
 800863c:	2001      	movmi	r0, #1
 800863e:	6013      	strmi	r3, [r2, #0]
 8008640:	bf5c      	itt	pl
 8008642:	6013      	strpl	r3, [r2, #0]
 8008644:	2002      	movpl	r0, #2
 8008646:	4770      	bx	lr
 8008648:	b299      	uxth	r1, r3
 800864a:	b909      	cbnz	r1, 8008650 <__lo0bits+0x2a>
 800864c:	0c1b      	lsrs	r3, r3, #16
 800864e:	2010      	movs	r0, #16
 8008650:	b2d9      	uxtb	r1, r3
 8008652:	b909      	cbnz	r1, 8008658 <__lo0bits+0x32>
 8008654:	3008      	adds	r0, #8
 8008656:	0a1b      	lsrs	r3, r3, #8
 8008658:	0719      	lsls	r1, r3, #28
 800865a:	bf04      	itt	eq
 800865c:	091b      	lsreq	r3, r3, #4
 800865e:	3004      	addeq	r0, #4
 8008660:	0799      	lsls	r1, r3, #30
 8008662:	bf04      	itt	eq
 8008664:	089b      	lsreq	r3, r3, #2
 8008666:	3002      	addeq	r0, #2
 8008668:	07d9      	lsls	r1, r3, #31
 800866a:	d403      	bmi.n	8008674 <__lo0bits+0x4e>
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	f100 0001 	add.w	r0, r0, #1
 8008672:	d003      	beq.n	800867c <__lo0bits+0x56>
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	4770      	bx	lr
 8008678:	2000      	movs	r0, #0
 800867a:	4770      	bx	lr
 800867c:	2020      	movs	r0, #32
 800867e:	4770      	bx	lr

08008680 <__i2b>:
 8008680:	b510      	push	{r4, lr}
 8008682:	460c      	mov	r4, r1
 8008684:	2101      	movs	r1, #1
 8008686:	f7ff ff07 	bl	8008498 <_Balloc>
 800868a:	4602      	mov	r2, r0
 800868c:	b928      	cbnz	r0, 800869a <__i2b+0x1a>
 800868e:	4b05      	ldr	r3, [pc, #20]	@ (80086a4 <__i2b+0x24>)
 8008690:	4805      	ldr	r0, [pc, #20]	@ (80086a8 <__i2b+0x28>)
 8008692:	f240 1145 	movw	r1, #325	@ 0x145
 8008696:	f000 fca7 	bl	8008fe8 <__assert_func>
 800869a:	2301      	movs	r3, #1
 800869c:	6144      	str	r4, [r0, #20]
 800869e:	6103      	str	r3, [r0, #16]
 80086a0:	bd10      	pop	{r4, pc}
 80086a2:	bf00      	nop
 80086a4:	0800a344 	.word	0x0800a344
 80086a8:	0800a355 	.word	0x0800a355

080086ac <__multiply>:
 80086ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b0:	4617      	mov	r7, r2
 80086b2:	690a      	ldr	r2, [r1, #16]
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	bfa8      	it	ge
 80086ba:	463b      	movge	r3, r7
 80086bc:	4689      	mov	r9, r1
 80086be:	bfa4      	itt	ge
 80086c0:	460f      	movge	r7, r1
 80086c2:	4699      	movge	r9, r3
 80086c4:	693d      	ldr	r5, [r7, #16]
 80086c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6879      	ldr	r1, [r7, #4]
 80086ce:	eb05 060a 	add.w	r6, r5, sl
 80086d2:	42b3      	cmp	r3, r6
 80086d4:	b085      	sub	sp, #20
 80086d6:	bfb8      	it	lt
 80086d8:	3101      	addlt	r1, #1
 80086da:	f7ff fedd 	bl	8008498 <_Balloc>
 80086de:	b930      	cbnz	r0, 80086ee <__multiply+0x42>
 80086e0:	4602      	mov	r2, r0
 80086e2:	4b41      	ldr	r3, [pc, #260]	@ (80087e8 <__multiply+0x13c>)
 80086e4:	4841      	ldr	r0, [pc, #260]	@ (80087ec <__multiply+0x140>)
 80086e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80086ea:	f000 fc7d 	bl	8008fe8 <__assert_func>
 80086ee:	f100 0414 	add.w	r4, r0, #20
 80086f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80086f6:	4623      	mov	r3, r4
 80086f8:	2200      	movs	r2, #0
 80086fa:	4573      	cmp	r3, lr
 80086fc:	d320      	bcc.n	8008740 <__multiply+0x94>
 80086fe:	f107 0814 	add.w	r8, r7, #20
 8008702:	f109 0114 	add.w	r1, r9, #20
 8008706:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800870a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800870e:	9302      	str	r3, [sp, #8]
 8008710:	1beb      	subs	r3, r5, r7
 8008712:	3b15      	subs	r3, #21
 8008714:	f023 0303 	bic.w	r3, r3, #3
 8008718:	3304      	adds	r3, #4
 800871a:	3715      	adds	r7, #21
 800871c:	42bd      	cmp	r5, r7
 800871e:	bf38      	it	cc
 8008720:	2304      	movcc	r3, #4
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	9b02      	ldr	r3, [sp, #8]
 8008726:	9103      	str	r1, [sp, #12]
 8008728:	428b      	cmp	r3, r1
 800872a:	d80c      	bhi.n	8008746 <__multiply+0x9a>
 800872c:	2e00      	cmp	r6, #0
 800872e:	dd03      	ble.n	8008738 <__multiply+0x8c>
 8008730:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008734:	2b00      	cmp	r3, #0
 8008736:	d055      	beq.n	80087e4 <__multiply+0x138>
 8008738:	6106      	str	r6, [r0, #16]
 800873a:	b005      	add	sp, #20
 800873c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008740:	f843 2b04 	str.w	r2, [r3], #4
 8008744:	e7d9      	b.n	80086fa <__multiply+0x4e>
 8008746:	f8b1 a000 	ldrh.w	sl, [r1]
 800874a:	f1ba 0f00 	cmp.w	sl, #0
 800874e:	d01f      	beq.n	8008790 <__multiply+0xe4>
 8008750:	46c4      	mov	ip, r8
 8008752:	46a1      	mov	r9, r4
 8008754:	2700      	movs	r7, #0
 8008756:	f85c 2b04 	ldr.w	r2, [ip], #4
 800875a:	f8d9 3000 	ldr.w	r3, [r9]
 800875e:	fa1f fb82 	uxth.w	fp, r2
 8008762:	b29b      	uxth	r3, r3
 8008764:	fb0a 330b 	mla	r3, sl, fp, r3
 8008768:	443b      	add	r3, r7
 800876a:	f8d9 7000 	ldr.w	r7, [r9]
 800876e:	0c12      	lsrs	r2, r2, #16
 8008770:	0c3f      	lsrs	r7, r7, #16
 8008772:	fb0a 7202 	mla	r2, sl, r2, r7
 8008776:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800877a:	b29b      	uxth	r3, r3
 800877c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008780:	4565      	cmp	r5, ip
 8008782:	f849 3b04 	str.w	r3, [r9], #4
 8008786:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800878a:	d8e4      	bhi.n	8008756 <__multiply+0xaa>
 800878c:	9b01      	ldr	r3, [sp, #4]
 800878e:	50e7      	str	r7, [r4, r3]
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008796:	3104      	adds	r1, #4
 8008798:	f1b9 0f00 	cmp.w	r9, #0
 800879c:	d020      	beq.n	80087e0 <__multiply+0x134>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	4647      	mov	r7, r8
 80087a2:	46a4      	mov	ip, r4
 80087a4:	f04f 0a00 	mov.w	sl, #0
 80087a8:	f8b7 b000 	ldrh.w	fp, [r7]
 80087ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80087b0:	fb09 220b 	mla	r2, r9, fp, r2
 80087b4:	4452      	add	r2, sl
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087bc:	f84c 3b04 	str.w	r3, [ip], #4
 80087c0:	f857 3b04 	ldr.w	r3, [r7], #4
 80087c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087c8:	f8bc 3000 	ldrh.w	r3, [ip]
 80087cc:	fb09 330a 	mla	r3, r9, sl, r3
 80087d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80087d4:	42bd      	cmp	r5, r7
 80087d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087da:	d8e5      	bhi.n	80087a8 <__multiply+0xfc>
 80087dc:	9a01      	ldr	r2, [sp, #4]
 80087de:	50a3      	str	r3, [r4, r2]
 80087e0:	3404      	adds	r4, #4
 80087e2:	e79f      	b.n	8008724 <__multiply+0x78>
 80087e4:	3e01      	subs	r6, #1
 80087e6:	e7a1      	b.n	800872c <__multiply+0x80>
 80087e8:	0800a344 	.word	0x0800a344
 80087ec:	0800a355 	.word	0x0800a355

080087f0 <__pow5mult>:
 80087f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087f4:	4615      	mov	r5, r2
 80087f6:	f012 0203 	ands.w	r2, r2, #3
 80087fa:	4607      	mov	r7, r0
 80087fc:	460e      	mov	r6, r1
 80087fe:	d007      	beq.n	8008810 <__pow5mult+0x20>
 8008800:	4c25      	ldr	r4, [pc, #148]	@ (8008898 <__pow5mult+0xa8>)
 8008802:	3a01      	subs	r2, #1
 8008804:	2300      	movs	r3, #0
 8008806:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800880a:	f7ff fea7 	bl	800855c <__multadd>
 800880e:	4606      	mov	r6, r0
 8008810:	10ad      	asrs	r5, r5, #2
 8008812:	d03d      	beq.n	8008890 <__pow5mult+0xa0>
 8008814:	69fc      	ldr	r4, [r7, #28]
 8008816:	b97c      	cbnz	r4, 8008838 <__pow5mult+0x48>
 8008818:	2010      	movs	r0, #16
 800881a:	f7ff fd87 	bl	800832c <malloc>
 800881e:	4602      	mov	r2, r0
 8008820:	61f8      	str	r0, [r7, #28]
 8008822:	b928      	cbnz	r0, 8008830 <__pow5mult+0x40>
 8008824:	4b1d      	ldr	r3, [pc, #116]	@ (800889c <__pow5mult+0xac>)
 8008826:	481e      	ldr	r0, [pc, #120]	@ (80088a0 <__pow5mult+0xb0>)
 8008828:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800882c:	f000 fbdc 	bl	8008fe8 <__assert_func>
 8008830:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008834:	6004      	str	r4, [r0, #0]
 8008836:	60c4      	str	r4, [r0, #12]
 8008838:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800883c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008840:	b94c      	cbnz	r4, 8008856 <__pow5mult+0x66>
 8008842:	f240 2171 	movw	r1, #625	@ 0x271
 8008846:	4638      	mov	r0, r7
 8008848:	f7ff ff1a 	bl	8008680 <__i2b>
 800884c:	2300      	movs	r3, #0
 800884e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008852:	4604      	mov	r4, r0
 8008854:	6003      	str	r3, [r0, #0]
 8008856:	f04f 0900 	mov.w	r9, #0
 800885a:	07eb      	lsls	r3, r5, #31
 800885c:	d50a      	bpl.n	8008874 <__pow5mult+0x84>
 800885e:	4631      	mov	r1, r6
 8008860:	4622      	mov	r2, r4
 8008862:	4638      	mov	r0, r7
 8008864:	f7ff ff22 	bl	80086ac <__multiply>
 8008868:	4631      	mov	r1, r6
 800886a:	4680      	mov	r8, r0
 800886c:	4638      	mov	r0, r7
 800886e:	f7ff fe53 	bl	8008518 <_Bfree>
 8008872:	4646      	mov	r6, r8
 8008874:	106d      	asrs	r5, r5, #1
 8008876:	d00b      	beq.n	8008890 <__pow5mult+0xa0>
 8008878:	6820      	ldr	r0, [r4, #0]
 800887a:	b938      	cbnz	r0, 800888c <__pow5mult+0x9c>
 800887c:	4622      	mov	r2, r4
 800887e:	4621      	mov	r1, r4
 8008880:	4638      	mov	r0, r7
 8008882:	f7ff ff13 	bl	80086ac <__multiply>
 8008886:	6020      	str	r0, [r4, #0]
 8008888:	f8c0 9000 	str.w	r9, [r0]
 800888c:	4604      	mov	r4, r0
 800888e:	e7e4      	b.n	800885a <__pow5mult+0x6a>
 8008890:	4630      	mov	r0, r6
 8008892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008896:	bf00      	nop
 8008898:	0800a408 	.word	0x0800a408
 800889c:	0800a2d5 	.word	0x0800a2d5
 80088a0:	0800a355 	.word	0x0800a355

080088a4 <__lshift>:
 80088a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a8:	460c      	mov	r4, r1
 80088aa:	6849      	ldr	r1, [r1, #4]
 80088ac:	6923      	ldr	r3, [r4, #16]
 80088ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088b2:	68a3      	ldr	r3, [r4, #8]
 80088b4:	4607      	mov	r7, r0
 80088b6:	4691      	mov	r9, r2
 80088b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088bc:	f108 0601 	add.w	r6, r8, #1
 80088c0:	42b3      	cmp	r3, r6
 80088c2:	db0b      	blt.n	80088dc <__lshift+0x38>
 80088c4:	4638      	mov	r0, r7
 80088c6:	f7ff fde7 	bl	8008498 <_Balloc>
 80088ca:	4605      	mov	r5, r0
 80088cc:	b948      	cbnz	r0, 80088e2 <__lshift+0x3e>
 80088ce:	4602      	mov	r2, r0
 80088d0:	4b28      	ldr	r3, [pc, #160]	@ (8008974 <__lshift+0xd0>)
 80088d2:	4829      	ldr	r0, [pc, #164]	@ (8008978 <__lshift+0xd4>)
 80088d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80088d8:	f000 fb86 	bl	8008fe8 <__assert_func>
 80088dc:	3101      	adds	r1, #1
 80088de:	005b      	lsls	r3, r3, #1
 80088e0:	e7ee      	b.n	80088c0 <__lshift+0x1c>
 80088e2:	2300      	movs	r3, #0
 80088e4:	f100 0114 	add.w	r1, r0, #20
 80088e8:	f100 0210 	add.w	r2, r0, #16
 80088ec:	4618      	mov	r0, r3
 80088ee:	4553      	cmp	r3, sl
 80088f0:	db33      	blt.n	800895a <__lshift+0xb6>
 80088f2:	6920      	ldr	r0, [r4, #16]
 80088f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80088f8:	f104 0314 	add.w	r3, r4, #20
 80088fc:	f019 091f 	ands.w	r9, r9, #31
 8008900:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008904:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008908:	d02b      	beq.n	8008962 <__lshift+0xbe>
 800890a:	f1c9 0e20 	rsb	lr, r9, #32
 800890e:	468a      	mov	sl, r1
 8008910:	2200      	movs	r2, #0
 8008912:	6818      	ldr	r0, [r3, #0]
 8008914:	fa00 f009 	lsl.w	r0, r0, r9
 8008918:	4310      	orrs	r0, r2
 800891a:	f84a 0b04 	str.w	r0, [sl], #4
 800891e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008922:	459c      	cmp	ip, r3
 8008924:	fa22 f20e 	lsr.w	r2, r2, lr
 8008928:	d8f3      	bhi.n	8008912 <__lshift+0x6e>
 800892a:	ebac 0304 	sub.w	r3, ip, r4
 800892e:	3b15      	subs	r3, #21
 8008930:	f023 0303 	bic.w	r3, r3, #3
 8008934:	3304      	adds	r3, #4
 8008936:	f104 0015 	add.w	r0, r4, #21
 800893a:	4560      	cmp	r0, ip
 800893c:	bf88      	it	hi
 800893e:	2304      	movhi	r3, #4
 8008940:	50ca      	str	r2, [r1, r3]
 8008942:	b10a      	cbz	r2, 8008948 <__lshift+0xa4>
 8008944:	f108 0602 	add.w	r6, r8, #2
 8008948:	3e01      	subs	r6, #1
 800894a:	4638      	mov	r0, r7
 800894c:	612e      	str	r6, [r5, #16]
 800894e:	4621      	mov	r1, r4
 8008950:	f7ff fde2 	bl	8008518 <_Bfree>
 8008954:	4628      	mov	r0, r5
 8008956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800895a:	f842 0f04 	str.w	r0, [r2, #4]!
 800895e:	3301      	adds	r3, #1
 8008960:	e7c5      	b.n	80088ee <__lshift+0x4a>
 8008962:	3904      	subs	r1, #4
 8008964:	f853 2b04 	ldr.w	r2, [r3], #4
 8008968:	f841 2f04 	str.w	r2, [r1, #4]!
 800896c:	459c      	cmp	ip, r3
 800896e:	d8f9      	bhi.n	8008964 <__lshift+0xc0>
 8008970:	e7ea      	b.n	8008948 <__lshift+0xa4>
 8008972:	bf00      	nop
 8008974:	0800a344 	.word	0x0800a344
 8008978:	0800a355 	.word	0x0800a355

0800897c <__mcmp>:
 800897c:	690a      	ldr	r2, [r1, #16]
 800897e:	4603      	mov	r3, r0
 8008980:	6900      	ldr	r0, [r0, #16]
 8008982:	1a80      	subs	r0, r0, r2
 8008984:	b530      	push	{r4, r5, lr}
 8008986:	d10e      	bne.n	80089a6 <__mcmp+0x2a>
 8008988:	3314      	adds	r3, #20
 800898a:	3114      	adds	r1, #20
 800898c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008990:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008994:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008998:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800899c:	4295      	cmp	r5, r2
 800899e:	d003      	beq.n	80089a8 <__mcmp+0x2c>
 80089a0:	d205      	bcs.n	80089ae <__mcmp+0x32>
 80089a2:	f04f 30ff 	mov.w	r0, #4294967295
 80089a6:	bd30      	pop	{r4, r5, pc}
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	d3f3      	bcc.n	8008994 <__mcmp+0x18>
 80089ac:	e7fb      	b.n	80089a6 <__mcmp+0x2a>
 80089ae:	2001      	movs	r0, #1
 80089b0:	e7f9      	b.n	80089a6 <__mcmp+0x2a>
	...

080089b4 <__mdiff>:
 80089b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089b8:	4689      	mov	r9, r1
 80089ba:	4606      	mov	r6, r0
 80089bc:	4611      	mov	r1, r2
 80089be:	4648      	mov	r0, r9
 80089c0:	4614      	mov	r4, r2
 80089c2:	f7ff ffdb 	bl	800897c <__mcmp>
 80089c6:	1e05      	subs	r5, r0, #0
 80089c8:	d112      	bne.n	80089f0 <__mdiff+0x3c>
 80089ca:	4629      	mov	r1, r5
 80089cc:	4630      	mov	r0, r6
 80089ce:	f7ff fd63 	bl	8008498 <_Balloc>
 80089d2:	4602      	mov	r2, r0
 80089d4:	b928      	cbnz	r0, 80089e2 <__mdiff+0x2e>
 80089d6:	4b3f      	ldr	r3, [pc, #252]	@ (8008ad4 <__mdiff+0x120>)
 80089d8:	f240 2137 	movw	r1, #567	@ 0x237
 80089dc:	483e      	ldr	r0, [pc, #248]	@ (8008ad8 <__mdiff+0x124>)
 80089de:	f000 fb03 	bl	8008fe8 <__assert_func>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80089e8:	4610      	mov	r0, r2
 80089ea:	b003      	add	sp, #12
 80089ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f0:	bfbc      	itt	lt
 80089f2:	464b      	movlt	r3, r9
 80089f4:	46a1      	movlt	r9, r4
 80089f6:	4630      	mov	r0, r6
 80089f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80089fc:	bfba      	itte	lt
 80089fe:	461c      	movlt	r4, r3
 8008a00:	2501      	movlt	r5, #1
 8008a02:	2500      	movge	r5, #0
 8008a04:	f7ff fd48 	bl	8008498 <_Balloc>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	b918      	cbnz	r0, 8008a14 <__mdiff+0x60>
 8008a0c:	4b31      	ldr	r3, [pc, #196]	@ (8008ad4 <__mdiff+0x120>)
 8008a0e:	f240 2145 	movw	r1, #581	@ 0x245
 8008a12:	e7e3      	b.n	80089dc <__mdiff+0x28>
 8008a14:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a18:	6926      	ldr	r6, [r4, #16]
 8008a1a:	60c5      	str	r5, [r0, #12]
 8008a1c:	f109 0310 	add.w	r3, r9, #16
 8008a20:	f109 0514 	add.w	r5, r9, #20
 8008a24:	f104 0e14 	add.w	lr, r4, #20
 8008a28:	f100 0b14 	add.w	fp, r0, #20
 8008a2c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a30:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	46d9      	mov	r9, fp
 8008a38:	f04f 0c00 	mov.w	ip, #0
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	fa1f f38a 	uxth.w	r3, sl
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	b283      	uxth	r3, r0
 8008a50:	1acb      	subs	r3, r1, r3
 8008a52:	0c00      	lsrs	r0, r0, #16
 8008a54:	4463      	add	r3, ip
 8008a56:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008a5a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008a64:	4576      	cmp	r6, lr
 8008a66:	f849 3b04 	str.w	r3, [r9], #4
 8008a6a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a6e:	d8e5      	bhi.n	8008a3c <__mdiff+0x88>
 8008a70:	1b33      	subs	r3, r6, r4
 8008a72:	3b15      	subs	r3, #21
 8008a74:	f023 0303 	bic.w	r3, r3, #3
 8008a78:	3415      	adds	r4, #21
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	42a6      	cmp	r6, r4
 8008a7e:	bf38      	it	cc
 8008a80:	2304      	movcc	r3, #4
 8008a82:	441d      	add	r5, r3
 8008a84:	445b      	add	r3, fp
 8008a86:	461e      	mov	r6, r3
 8008a88:	462c      	mov	r4, r5
 8008a8a:	4544      	cmp	r4, r8
 8008a8c:	d30e      	bcc.n	8008aac <__mdiff+0xf8>
 8008a8e:	f108 0103 	add.w	r1, r8, #3
 8008a92:	1b49      	subs	r1, r1, r5
 8008a94:	f021 0103 	bic.w	r1, r1, #3
 8008a98:	3d03      	subs	r5, #3
 8008a9a:	45a8      	cmp	r8, r5
 8008a9c:	bf38      	it	cc
 8008a9e:	2100      	movcc	r1, #0
 8008aa0:	440b      	add	r3, r1
 8008aa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008aa6:	b191      	cbz	r1, 8008ace <__mdiff+0x11a>
 8008aa8:	6117      	str	r7, [r2, #16]
 8008aaa:	e79d      	b.n	80089e8 <__mdiff+0x34>
 8008aac:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ab0:	46e6      	mov	lr, ip
 8008ab2:	0c08      	lsrs	r0, r1, #16
 8008ab4:	fa1c fc81 	uxtah	ip, ip, r1
 8008ab8:	4471      	add	r1, lr
 8008aba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008abe:	b289      	uxth	r1, r1
 8008ac0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ac4:	f846 1b04 	str.w	r1, [r6], #4
 8008ac8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008acc:	e7dd      	b.n	8008a8a <__mdiff+0xd6>
 8008ace:	3f01      	subs	r7, #1
 8008ad0:	e7e7      	b.n	8008aa2 <__mdiff+0xee>
 8008ad2:	bf00      	nop
 8008ad4:	0800a344 	.word	0x0800a344
 8008ad8:	0800a355 	.word	0x0800a355

08008adc <__d2b>:
 8008adc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	2101      	movs	r1, #1
 8008ae4:	ec59 8b10 	vmov	r8, r9, d0
 8008ae8:	4616      	mov	r6, r2
 8008aea:	f7ff fcd5 	bl	8008498 <_Balloc>
 8008aee:	4604      	mov	r4, r0
 8008af0:	b930      	cbnz	r0, 8008b00 <__d2b+0x24>
 8008af2:	4602      	mov	r2, r0
 8008af4:	4b23      	ldr	r3, [pc, #140]	@ (8008b84 <__d2b+0xa8>)
 8008af6:	4824      	ldr	r0, [pc, #144]	@ (8008b88 <__d2b+0xac>)
 8008af8:	f240 310f 	movw	r1, #783	@ 0x30f
 8008afc:	f000 fa74 	bl	8008fe8 <__assert_func>
 8008b00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b08:	b10d      	cbz	r5, 8008b0e <__d2b+0x32>
 8008b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b0e:	9301      	str	r3, [sp, #4]
 8008b10:	f1b8 0300 	subs.w	r3, r8, #0
 8008b14:	d023      	beq.n	8008b5e <__d2b+0x82>
 8008b16:	4668      	mov	r0, sp
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	f7ff fd84 	bl	8008626 <__lo0bits>
 8008b1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b22:	b1d0      	cbz	r0, 8008b5a <__d2b+0x7e>
 8008b24:	f1c0 0320 	rsb	r3, r0, #32
 8008b28:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2c:	430b      	orrs	r3, r1
 8008b2e:	40c2      	lsrs	r2, r0
 8008b30:	6163      	str	r3, [r4, #20]
 8008b32:	9201      	str	r2, [sp, #4]
 8008b34:	9b01      	ldr	r3, [sp, #4]
 8008b36:	61a3      	str	r3, [r4, #24]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	bf0c      	ite	eq
 8008b3c:	2201      	moveq	r2, #1
 8008b3e:	2202      	movne	r2, #2
 8008b40:	6122      	str	r2, [r4, #16]
 8008b42:	b1a5      	cbz	r5, 8008b6e <__d2b+0x92>
 8008b44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b48:	4405      	add	r5, r0
 8008b4a:	603d      	str	r5, [r7, #0]
 8008b4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b50:	6030      	str	r0, [r6, #0]
 8008b52:	4620      	mov	r0, r4
 8008b54:	b003      	add	sp, #12
 8008b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b5a:	6161      	str	r1, [r4, #20]
 8008b5c:	e7ea      	b.n	8008b34 <__d2b+0x58>
 8008b5e:	a801      	add	r0, sp, #4
 8008b60:	f7ff fd61 	bl	8008626 <__lo0bits>
 8008b64:	9b01      	ldr	r3, [sp, #4]
 8008b66:	6163      	str	r3, [r4, #20]
 8008b68:	3020      	adds	r0, #32
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	e7e8      	b.n	8008b40 <__d2b+0x64>
 8008b6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b76:	6038      	str	r0, [r7, #0]
 8008b78:	6918      	ldr	r0, [r3, #16]
 8008b7a:	f7ff fd35 	bl	80085e8 <__hi0bits>
 8008b7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b82:	e7e5      	b.n	8008b50 <__d2b+0x74>
 8008b84:	0800a344 	.word	0x0800a344
 8008b88:	0800a355 	.word	0x0800a355

08008b8c <__ssputs_r>:
 8008b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b90:	688e      	ldr	r6, [r1, #8]
 8008b92:	461f      	mov	r7, r3
 8008b94:	42be      	cmp	r6, r7
 8008b96:	680b      	ldr	r3, [r1, #0]
 8008b98:	4682      	mov	sl, r0
 8008b9a:	460c      	mov	r4, r1
 8008b9c:	4690      	mov	r8, r2
 8008b9e:	d82d      	bhi.n	8008bfc <__ssputs_r+0x70>
 8008ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ba4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008ba8:	d026      	beq.n	8008bf8 <__ssputs_r+0x6c>
 8008baa:	6965      	ldr	r5, [r4, #20]
 8008bac:	6909      	ldr	r1, [r1, #16]
 8008bae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bb2:	eba3 0901 	sub.w	r9, r3, r1
 8008bb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008bba:	1c7b      	adds	r3, r7, #1
 8008bbc:	444b      	add	r3, r9
 8008bbe:	106d      	asrs	r5, r5, #1
 8008bc0:	429d      	cmp	r5, r3
 8008bc2:	bf38      	it	cc
 8008bc4:	461d      	movcc	r5, r3
 8008bc6:	0553      	lsls	r3, r2, #21
 8008bc8:	d527      	bpl.n	8008c1a <__ssputs_r+0x8e>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	f7ff fbd8 	bl	8008380 <_malloc_r>
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	b360      	cbz	r0, 8008c2e <__ssputs_r+0xa2>
 8008bd4:	6921      	ldr	r1, [r4, #16]
 8008bd6:	464a      	mov	r2, r9
 8008bd8:	f7fe fcf5 	bl	80075c6 <memcpy>
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008be2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008be6:	81a3      	strh	r3, [r4, #12]
 8008be8:	6126      	str	r6, [r4, #16]
 8008bea:	6165      	str	r5, [r4, #20]
 8008bec:	444e      	add	r6, r9
 8008bee:	eba5 0509 	sub.w	r5, r5, r9
 8008bf2:	6026      	str	r6, [r4, #0]
 8008bf4:	60a5      	str	r5, [r4, #8]
 8008bf6:	463e      	mov	r6, r7
 8008bf8:	42be      	cmp	r6, r7
 8008bfa:	d900      	bls.n	8008bfe <__ssputs_r+0x72>
 8008bfc:	463e      	mov	r6, r7
 8008bfe:	6820      	ldr	r0, [r4, #0]
 8008c00:	4632      	mov	r2, r6
 8008c02:	4641      	mov	r1, r8
 8008c04:	f000 f9c6 	bl	8008f94 <memmove>
 8008c08:	68a3      	ldr	r3, [r4, #8]
 8008c0a:	1b9b      	subs	r3, r3, r6
 8008c0c:	60a3      	str	r3, [r4, #8]
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	4433      	add	r3, r6
 8008c12:	6023      	str	r3, [r4, #0]
 8008c14:	2000      	movs	r0, #0
 8008c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c1a:	462a      	mov	r2, r5
 8008c1c:	f000 fa28 	bl	8009070 <_realloc_r>
 8008c20:	4606      	mov	r6, r0
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d1e0      	bne.n	8008be8 <__ssputs_r+0x5c>
 8008c26:	6921      	ldr	r1, [r4, #16]
 8008c28:	4650      	mov	r0, sl
 8008c2a:	f7ff fb35 	bl	8008298 <_free_r>
 8008c2e:	230c      	movs	r3, #12
 8008c30:	f8ca 3000 	str.w	r3, [sl]
 8008c34:	89a3      	ldrh	r3, [r4, #12]
 8008c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c3a:	81a3      	strh	r3, [r4, #12]
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	e7e9      	b.n	8008c16 <__ssputs_r+0x8a>
	...

08008c44 <_svfiprintf_r>:
 8008c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c48:	4698      	mov	r8, r3
 8008c4a:	898b      	ldrh	r3, [r1, #12]
 8008c4c:	061b      	lsls	r3, r3, #24
 8008c4e:	b09d      	sub	sp, #116	@ 0x74
 8008c50:	4607      	mov	r7, r0
 8008c52:	460d      	mov	r5, r1
 8008c54:	4614      	mov	r4, r2
 8008c56:	d510      	bpl.n	8008c7a <_svfiprintf_r+0x36>
 8008c58:	690b      	ldr	r3, [r1, #16]
 8008c5a:	b973      	cbnz	r3, 8008c7a <_svfiprintf_r+0x36>
 8008c5c:	2140      	movs	r1, #64	@ 0x40
 8008c5e:	f7ff fb8f 	bl	8008380 <_malloc_r>
 8008c62:	6028      	str	r0, [r5, #0]
 8008c64:	6128      	str	r0, [r5, #16]
 8008c66:	b930      	cbnz	r0, 8008c76 <_svfiprintf_r+0x32>
 8008c68:	230c      	movs	r3, #12
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c70:	b01d      	add	sp, #116	@ 0x74
 8008c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	2340      	movs	r3, #64	@ 0x40
 8008c78:	616b      	str	r3, [r5, #20]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c7e:	2320      	movs	r3, #32
 8008c80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c88:	2330      	movs	r3, #48	@ 0x30
 8008c8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e28 <_svfiprintf_r+0x1e4>
 8008c8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c92:	f04f 0901 	mov.w	r9, #1
 8008c96:	4623      	mov	r3, r4
 8008c98:	469a      	mov	sl, r3
 8008c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c9e:	b10a      	cbz	r2, 8008ca4 <_svfiprintf_r+0x60>
 8008ca0:	2a25      	cmp	r2, #37	@ 0x25
 8008ca2:	d1f9      	bne.n	8008c98 <_svfiprintf_r+0x54>
 8008ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ca8:	d00b      	beq.n	8008cc2 <_svfiprintf_r+0x7e>
 8008caa:	465b      	mov	r3, fp
 8008cac:	4622      	mov	r2, r4
 8008cae:	4629      	mov	r1, r5
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	f7ff ff6b 	bl	8008b8c <__ssputs_r>
 8008cb6:	3001      	adds	r0, #1
 8008cb8:	f000 80a7 	beq.w	8008e0a <_svfiprintf_r+0x1c6>
 8008cbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cbe:	445a      	add	r2, fp
 8008cc0:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f000 809f 	beq.w	8008e0a <_svfiprintf_r+0x1c6>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	f04f 32ff 	mov.w	r2, #4294967295
 8008cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cd6:	f10a 0a01 	add.w	sl, sl, #1
 8008cda:	9304      	str	r3, [sp, #16]
 8008cdc:	9307      	str	r3, [sp, #28]
 8008cde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ce2:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ce4:	4654      	mov	r4, sl
 8008ce6:	2205      	movs	r2, #5
 8008ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cec:	484e      	ldr	r0, [pc, #312]	@ (8008e28 <_svfiprintf_r+0x1e4>)
 8008cee:	f7f7 fa6f 	bl	80001d0 <memchr>
 8008cf2:	9a04      	ldr	r2, [sp, #16]
 8008cf4:	b9d8      	cbnz	r0, 8008d2e <_svfiprintf_r+0xea>
 8008cf6:	06d0      	lsls	r0, r2, #27
 8008cf8:	bf44      	itt	mi
 8008cfa:	2320      	movmi	r3, #32
 8008cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d00:	0711      	lsls	r1, r2, #28
 8008d02:	bf44      	itt	mi
 8008d04:	232b      	movmi	r3, #43	@ 0x2b
 8008d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d10:	d015      	beq.n	8008d3e <_svfiprintf_r+0xfa>
 8008d12:	9a07      	ldr	r2, [sp, #28]
 8008d14:	4654      	mov	r4, sl
 8008d16:	2000      	movs	r0, #0
 8008d18:	f04f 0c0a 	mov.w	ip, #10
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d22:	3b30      	subs	r3, #48	@ 0x30
 8008d24:	2b09      	cmp	r3, #9
 8008d26:	d94b      	bls.n	8008dc0 <_svfiprintf_r+0x17c>
 8008d28:	b1b0      	cbz	r0, 8008d58 <_svfiprintf_r+0x114>
 8008d2a:	9207      	str	r2, [sp, #28]
 8008d2c:	e014      	b.n	8008d58 <_svfiprintf_r+0x114>
 8008d2e:	eba0 0308 	sub.w	r3, r0, r8
 8008d32:	fa09 f303 	lsl.w	r3, r9, r3
 8008d36:	4313      	orrs	r3, r2
 8008d38:	9304      	str	r3, [sp, #16]
 8008d3a:	46a2      	mov	sl, r4
 8008d3c:	e7d2      	b.n	8008ce4 <_svfiprintf_r+0xa0>
 8008d3e:	9b03      	ldr	r3, [sp, #12]
 8008d40:	1d19      	adds	r1, r3, #4
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	9103      	str	r1, [sp, #12]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	bfbb      	ittet	lt
 8008d4a:	425b      	neglt	r3, r3
 8008d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8008d50:	9307      	strge	r3, [sp, #28]
 8008d52:	9307      	strlt	r3, [sp, #28]
 8008d54:	bfb8      	it	lt
 8008d56:	9204      	strlt	r2, [sp, #16]
 8008d58:	7823      	ldrb	r3, [r4, #0]
 8008d5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d5c:	d10a      	bne.n	8008d74 <_svfiprintf_r+0x130>
 8008d5e:	7863      	ldrb	r3, [r4, #1]
 8008d60:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d62:	d132      	bne.n	8008dca <_svfiprintf_r+0x186>
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	1d1a      	adds	r2, r3, #4
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	9203      	str	r2, [sp, #12]
 8008d6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d70:	3402      	adds	r4, #2
 8008d72:	9305      	str	r3, [sp, #20]
 8008d74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e38 <_svfiprintf_r+0x1f4>
 8008d78:	7821      	ldrb	r1, [r4, #0]
 8008d7a:	2203      	movs	r2, #3
 8008d7c:	4650      	mov	r0, sl
 8008d7e:	f7f7 fa27 	bl	80001d0 <memchr>
 8008d82:	b138      	cbz	r0, 8008d94 <_svfiprintf_r+0x150>
 8008d84:	9b04      	ldr	r3, [sp, #16]
 8008d86:	eba0 000a 	sub.w	r0, r0, sl
 8008d8a:	2240      	movs	r2, #64	@ 0x40
 8008d8c:	4082      	lsls	r2, r0
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	3401      	adds	r4, #1
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d98:	4824      	ldr	r0, [pc, #144]	@ (8008e2c <_svfiprintf_r+0x1e8>)
 8008d9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d9e:	2206      	movs	r2, #6
 8008da0:	f7f7 fa16 	bl	80001d0 <memchr>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d036      	beq.n	8008e16 <_svfiprintf_r+0x1d2>
 8008da8:	4b21      	ldr	r3, [pc, #132]	@ (8008e30 <_svfiprintf_r+0x1ec>)
 8008daa:	bb1b      	cbnz	r3, 8008df4 <_svfiprintf_r+0x1b0>
 8008dac:	9b03      	ldr	r3, [sp, #12]
 8008dae:	3307      	adds	r3, #7
 8008db0:	f023 0307 	bic.w	r3, r3, #7
 8008db4:	3308      	adds	r3, #8
 8008db6:	9303      	str	r3, [sp, #12]
 8008db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dba:	4433      	add	r3, r6
 8008dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dbe:	e76a      	b.n	8008c96 <_svfiprintf_r+0x52>
 8008dc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	2001      	movs	r0, #1
 8008dc8:	e7a8      	b.n	8008d1c <_svfiprintf_r+0xd8>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	3401      	adds	r4, #1
 8008dce:	9305      	str	r3, [sp, #20]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f04f 0c0a 	mov.w	ip, #10
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ddc:	3a30      	subs	r2, #48	@ 0x30
 8008dde:	2a09      	cmp	r2, #9
 8008de0:	d903      	bls.n	8008dea <_svfiprintf_r+0x1a6>
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0c6      	beq.n	8008d74 <_svfiprintf_r+0x130>
 8008de6:	9105      	str	r1, [sp, #20]
 8008de8:	e7c4      	b.n	8008d74 <_svfiprintf_r+0x130>
 8008dea:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dee:	4604      	mov	r4, r0
 8008df0:	2301      	movs	r3, #1
 8008df2:	e7f0      	b.n	8008dd6 <_svfiprintf_r+0x192>
 8008df4:	ab03      	add	r3, sp, #12
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	462a      	mov	r2, r5
 8008dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8008e34 <_svfiprintf_r+0x1f0>)
 8008dfc:	a904      	add	r1, sp, #16
 8008dfe:	4638      	mov	r0, r7
 8008e00:	f7fd fe6a 	bl	8006ad8 <_printf_float>
 8008e04:	1c42      	adds	r2, r0, #1
 8008e06:	4606      	mov	r6, r0
 8008e08:	d1d6      	bne.n	8008db8 <_svfiprintf_r+0x174>
 8008e0a:	89ab      	ldrh	r3, [r5, #12]
 8008e0c:	065b      	lsls	r3, r3, #25
 8008e0e:	f53f af2d 	bmi.w	8008c6c <_svfiprintf_r+0x28>
 8008e12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e14:	e72c      	b.n	8008c70 <_svfiprintf_r+0x2c>
 8008e16:	ab03      	add	r3, sp, #12
 8008e18:	9300      	str	r3, [sp, #0]
 8008e1a:	462a      	mov	r2, r5
 8008e1c:	4b05      	ldr	r3, [pc, #20]	@ (8008e34 <_svfiprintf_r+0x1f0>)
 8008e1e:	a904      	add	r1, sp, #16
 8008e20:	4638      	mov	r0, r7
 8008e22:	f7fe f8f1 	bl	8007008 <_printf_i>
 8008e26:	e7ed      	b.n	8008e04 <_svfiprintf_r+0x1c0>
 8008e28:	0800a3ae 	.word	0x0800a3ae
 8008e2c:	0800a3b8 	.word	0x0800a3b8
 8008e30:	08006ad9 	.word	0x08006ad9
 8008e34:	08008b8d 	.word	0x08008b8d
 8008e38:	0800a3b4 	.word	0x0800a3b4

08008e3c <__sflush_r>:
 8008e3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e44:	0716      	lsls	r6, r2, #28
 8008e46:	4605      	mov	r5, r0
 8008e48:	460c      	mov	r4, r1
 8008e4a:	d454      	bmi.n	8008ef6 <__sflush_r+0xba>
 8008e4c:	684b      	ldr	r3, [r1, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dc02      	bgt.n	8008e58 <__sflush_r+0x1c>
 8008e52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	dd48      	ble.n	8008eea <__sflush_r+0xae>
 8008e58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e5a:	2e00      	cmp	r6, #0
 8008e5c:	d045      	beq.n	8008eea <__sflush_r+0xae>
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008e64:	682f      	ldr	r7, [r5, #0]
 8008e66:	6a21      	ldr	r1, [r4, #32]
 8008e68:	602b      	str	r3, [r5, #0]
 8008e6a:	d030      	beq.n	8008ece <__sflush_r+0x92>
 8008e6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	0759      	lsls	r1, r3, #29
 8008e72:	d505      	bpl.n	8008e80 <__sflush_r+0x44>
 8008e74:	6863      	ldr	r3, [r4, #4]
 8008e76:	1ad2      	subs	r2, r2, r3
 8008e78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008e7a:	b10b      	cbz	r3, 8008e80 <__sflush_r+0x44>
 8008e7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	2300      	movs	r3, #0
 8008e82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008e84:	6a21      	ldr	r1, [r4, #32]
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b0      	blx	r6
 8008e8a:	1c43      	adds	r3, r0, #1
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	d106      	bne.n	8008e9e <__sflush_r+0x62>
 8008e90:	6829      	ldr	r1, [r5, #0]
 8008e92:	291d      	cmp	r1, #29
 8008e94:	d82b      	bhi.n	8008eee <__sflush_r+0xb2>
 8008e96:	4a2a      	ldr	r2, [pc, #168]	@ (8008f40 <__sflush_r+0x104>)
 8008e98:	40ca      	lsrs	r2, r1
 8008e9a:	07d6      	lsls	r6, r2, #31
 8008e9c:	d527      	bpl.n	8008eee <__sflush_r+0xb2>
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	6062      	str	r2, [r4, #4]
 8008ea2:	04d9      	lsls	r1, r3, #19
 8008ea4:	6922      	ldr	r2, [r4, #16]
 8008ea6:	6022      	str	r2, [r4, #0]
 8008ea8:	d504      	bpl.n	8008eb4 <__sflush_r+0x78>
 8008eaa:	1c42      	adds	r2, r0, #1
 8008eac:	d101      	bne.n	8008eb2 <__sflush_r+0x76>
 8008eae:	682b      	ldr	r3, [r5, #0]
 8008eb0:	b903      	cbnz	r3, 8008eb4 <__sflush_r+0x78>
 8008eb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008eb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008eb6:	602f      	str	r7, [r5, #0]
 8008eb8:	b1b9      	cbz	r1, 8008eea <__sflush_r+0xae>
 8008eba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ebe:	4299      	cmp	r1, r3
 8008ec0:	d002      	beq.n	8008ec8 <__sflush_r+0x8c>
 8008ec2:	4628      	mov	r0, r5
 8008ec4:	f7ff f9e8 	bl	8008298 <_free_r>
 8008ec8:	2300      	movs	r3, #0
 8008eca:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ecc:	e00d      	b.n	8008eea <__sflush_r+0xae>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	47b0      	blx	r6
 8008ed4:	4602      	mov	r2, r0
 8008ed6:	1c50      	adds	r0, r2, #1
 8008ed8:	d1c9      	bne.n	8008e6e <__sflush_r+0x32>
 8008eda:	682b      	ldr	r3, [r5, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0c6      	beq.n	8008e6e <__sflush_r+0x32>
 8008ee0:	2b1d      	cmp	r3, #29
 8008ee2:	d001      	beq.n	8008ee8 <__sflush_r+0xac>
 8008ee4:	2b16      	cmp	r3, #22
 8008ee6:	d11e      	bne.n	8008f26 <__sflush_r+0xea>
 8008ee8:	602f      	str	r7, [r5, #0]
 8008eea:	2000      	movs	r0, #0
 8008eec:	e022      	b.n	8008f34 <__sflush_r+0xf8>
 8008eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ef2:	b21b      	sxth	r3, r3
 8008ef4:	e01b      	b.n	8008f2e <__sflush_r+0xf2>
 8008ef6:	690f      	ldr	r7, [r1, #16]
 8008ef8:	2f00      	cmp	r7, #0
 8008efa:	d0f6      	beq.n	8008eea <__sflush_r+0xae>
 8008efc:	0793      	lsls	r3, r2, #30
 8008efe:	680e      	ldr	r6, [r1, #0]
 8008f00:	bf08      	it	eq
 8008f02:	694b      	ldreq	r3, [r1, #20]
 8008f04:	600f      	str	r7, [r1, #0]
 8008f06:	bf18      	it	ne
 8008f08:	2300      	movne	r3, #0
 8008f0a:	eba6 0807 	sub.w	r8, r6, r7
 8008f0e:	608b      	str	r3, [r1, #8]
 8008f10:	f1b8 0f00 	cmp.w	r8, #0
 8008f14:	dde9      	ble.n	8008eea <__sflush_r+0xae>
 8008f16:	6a21      	ldr	r1, [r4, #32]
 8008f18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f1a:	4643      	mov	r3, r8
 8008f1c:	463a      	mov	r2, r7
 8008f1e:	4628      	mov	r0, r5
 8008f20:	47b0      	blx	r6
 8008f22:	2800      	cmp	r0, #0
 8008f24:	dc08      	bgt.n	8008f38 <__sflush_r+0xfc>
 8008f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f38:	4407      	add	r7, r0
 8008f3a:	eba8 0800 	sub.w	r8, r8, r0
 8008f3e:	e7e7      	b.n	8008f10 <__sflush_r+0xd4>
 8008f40:	20400001 	.word	0x20400001

08008f44 <_fflush_r>:
 8008f44:	b538      	push	{r3, r4, r5, lr}
 8008f46:	690b      	ldr	r3, [r1, #16]
 8008f48:	4605      	mov	r5, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	b913      	cbnz	r3, 8008f54 <_fflush_r+0x10>
 8008f4e:	2500      	movs	r5, #0
 8008f50:	4628      	mov	r0, r5
 8008f52:	bd38      	pop	{r3, r4, r5, pc}
 8008f54:	b118      	cbz	r0, 8008f5e <_fflush_r+0x1a>
 8008f56:	6a03      	ldr	r3, [r0, #32]
 8008f58:	b90b      	cbnz	r3, 8008f5e <_fflush_r+0x1a>
 8008f5a:	f7fe f9ff 	bl	800735c <__sinit>
 8008f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0f3      	beq.n	8008f4e <_fflush_r+0xa>
 8008f66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008f68:	07d0      	lsls	r0, r2, #31
 8008f6a:	d404      	bmi.n	8008f76 <_fflush_r+0x32>
 8008f6c:	0599      	lsls	r1, r3, #22
 8008f6e:	d402      	bmi.n	8008f76 <_fflush_r+0x32>
 8008f70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f72:	f7fe fb26 	bl	80075c2 <__retarget_lock_acquire_recursive>
 8008f76:	4628      	mov	r0, r5
 8008f78:	4621      	mov	r1, r4
 8008f7a:	f7ff ff5f 	bl	8008e3c <__sflush_r>
 8008f7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f80:	07da      	lsls	r2, r3, #31
 8008f82:	4605      	mov	r5, r0
 8008f84:	d4e4      	bmi.n	8008f50 <_fflush_r+0xc>
 8008f86:	89a3      	ldrh	r3, [r4, #12]
 8008f88:	059b      	lsls	r3, r3, #22
 8008f8a:	d4e1      	bmi.n	8008f50 <_fflush_r+0xc>
 8008f8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f8e:	f7fe fb19 	bl	80075c4 <__retarget_lock_release_recursive>
 8008f92:	e7dd      	b.n	8008f50 <_fflush_r+0xc>

08008f94 <memmove>:
 8008f94:	4288      	cmp	r0, r1
 8008f96:	b510      	push	{r4, lr}
 8008f98:	eb01 0402 	add.w	r4, r1, r2
 8008f9c:	d902      	bls.n	8008fa4 <memmove+0x10>
 8008f9e:	4284      	cmp	r4, r0
 8008fa0:	4623      	mov	r3, r4
 8008fa2:	d807      	bhi.n	8008fb4 <memmove+0x20>
 8008fa4:	1e43      	subs	r3, r0, #1
 8008fa6:	42a1      	cmp	r1, r4
 8008fa8:	d008      	beq.n	8008fbc <memmove+0x28>
 8008faa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fb2:	e7f8      	b.n	8008fa6 <memmove+0x12>
 8008fb4:	4402      	add	r2, r0
 8008fb6:	4601      	mov	r1, r0
 8008fb8:	428a      	cmp	r2, r1
 8008fba:	d100      	bne.n	8008fbe <memmove+0x2a>
 8008fbc:	bd10      	pop	{r4, pc}
 8008fbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fc6:	e7f7      	b.n	8008fb8 <memmove+0x24>

08008fc8 <_sbrk_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	4d06      	ldr	r5, [pc, #24]	@ (8008fe4 <_sbrk_r+0x1c>)
 8008fcc:	2300      	movs	r3, #0
 8008fce:	4604      	mov	r4, r0
 8008fd0:	4608      	mov	r0, r1
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	f7f8 fe16 	bl	8001c04 <_sbrk>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d102      	bne.n	8008fe2 <_sbrk_r+0x1a>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	b103      	cbz	r3, 8008fe2 <_sbrk_r+0x1a>
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	20002bf4 	.word	0x20002bf4

08008fe8 <__assert_func>:
 8008fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008fea:	4614      	mov	r4, r2
 8008fec:	461a      	mov	r2, r3
 8008fee:	4b09      	ldr	r3, [pc, #36]	@ (8009014 <__assert_func+0x2c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4605      	mov	r5, r0
 8008ff4:	68d8      	ldr	r0, [r3, #12]
 8008ff6:	b14c      	cbz	r4, 800900c <__assert_func+0x24>
 8008ff8:	4b07      	ldr	r3, [pc, #28]	@ (8009018 <__assert_func+0x30>)
 8008ffa:	9100      	str	r1, [sp, #0]
 8008ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009000:	4906      	ldr	r1, [pc, #24]	@ (800901c <__assert_func+0x34>)
 8009002:	462b      	mov	r3, r5
 8009004:	f000 f870 	bl	80090e8 <fiprintf>
 8009008:	f000 f880 	bl	800910c <abort>
 800900c:	4b04      	ldr	r3, [pc, #16]	@ (8009020 <__assert_func+0x38>)
 800900e:	461c      	mov	r4, r3
 8009010:	e7f3      	b.n	8008ffa <__assert_func+0x12>
 8009012:	bf00      	nop
 8009014:	20002404 	.word	0x20002404
 8009018:	0800a3c9 	.word	0x0800a3c9
 800901c:	0800a3d6 	.word	0x0800a3d6
 8009020:	0800a404 	.word	0x0800a404

08009024 <_calloc_r>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	fba1 5402 	umull	r5, r4, r1, r2
 800902a:	b934      	cbnz	r4, 800903a <_calloc_r+0x16>
 800902c:	4629      	mov	r1, r5
 800902e:	f7ff f9a7 	bl	8008380 <_malloc_r>
 8009032:	4606      	mov	r6, r0
 8009034:	b928      	cbnz	r0, 8009042 <_calloc_r+0x1e>
 8009036:	4630      	mov	r0, r6
 8009038:	bd70      	pop	{r4, r5, r6, pc}
 800903a:	220c      	movs	r2, #12
 800903c:	6002      	str	r2, [r0, #0]
 800903e:	2600      	movs	r6, #0
 8009040:	e7f9      	b.n	8009036 <_calloc_r+0x12>
 8009042:	462a      	mov	r2, r5
 8009044:	4621      	mov	r1, r4
 8009046:	f7fe fa3f 	bl	80074c8 <memset>
 800904a:	e7f4      	b.n	8009036 <_calloc_r+0x12>

0800904c <__ascii_mbtowc>:
 800904c:	b082      	sub	sp, #8
 800904e:	b901      	cbnz	r1, 8009052 <__ascii_mbtowc+0x6>
 8009050:	a901      	add	r1, sp, #4
 8009052:	b142      	cbz	r2, 8009066 <__ascii_mbtowc+0x1a>
 8009054:	b14b      	cbz	r3, 800906a <__ascii_mbtowc+0x1e>
 8009056:	7813      	ldrb	r3, [r2, #0]
 8009058:	600b      	str	r3, [r1, #0]
 800905a:	7812      	ldrb	r2, [r2, #0]
 800905c:	1e10      	subs	r0, r2, #0
 800905e:	bf18      	it	ne
 8009060:	2001      	movne	r0, #1
 8009062:	b002      	add	sp, #8
 8009064:	4770      	bx	lr
 8009066:	4610      	mov	r0, r2
 8009068:	e7fb      	b.n	8009062 <__ascii_mbtowc+0x16>
 800906a:	f06f 0001 	mvn.w	r0, #1
 800906e:	e7f8      	b.n	8009062 <__ascii_mbtowc+0x16>

08009070 <_realloc_r>:
 8009070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009074:	4607      	mov	r7, r0
 8009076:	4614      	mov	r4, r2
 8009078:	460d      	mov	r5, r1
 800907a:	b921      	cbnz	r1, 8009086 <_realloc_r+0x16>
 800907c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009080:	4611      	mov	r1, r2
 8009082:	f7ff b97d 	b.w	8008380 <_malloc_r>
 8009086:	b92a      	cbnz	r2, 8009094 <_realloc_r+0x24>
 8009088:	f7ff f906 	bl	8008298 <_free_r>
 800908c:	4625      	mov	r5, r4
 800908e:	4628      	mov	r0, r5
 8009090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009094:	f000 f841 	bl	800911a <_malloc_usable_size_r>
 8009098:	4284      	cmp	r4, r0
 800909a:	4606      	mov	r6, r0
 800909c:	d802      	bhi.n	80090a4 <_realloc_r+0x34>
 800909e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090a2:	d8f4      	bhi.n	800908e <_realloc_r+0x1e>
 80090a4:	4621      	mov	r1, r4
 80090a6:	4638      	mov	r0, r7
 80090a8:	f7ff f96a 	bl	8008380 <_malloc_r>
 80090ac:	4680      	mov	r8, r0
 80090ae:	b908      	cbnz	r0, 80090b4 <_realloc_r+0x44>
 80090b0:	4645      	mov	r5, r8
 80090b2:	e7ec      	b.n	800908e <_realloc_r+0x1e>
 80090b4:	42b4      	cmp	r4, r6
 80090b6:	4622      	mov	r2, r4
 80090b8:	4629      	mov	r1, r5
 80090ba:	bf28      	it	cs
 80090bc:	4632      	movcs	r2, r6
 80090be:	f7fe fa82 	bl	80075c6 <memcpy>
 80090c2:	4629      	mov	r1, r5
 80090c4:	4638      	mov	r0, r7
 80090c6:	f7ff f8e7 	bl	8008298 <_free_r>
 80090ca:	e7f1      	b.n	80090b0 <_realloc_r+0x40>

080090cc <__ascii_wctomb>:
 80090cc:	4603      	mov	r3, r0
 80090ce:	4608      	mov	r0, r1
 80090d0:	b141      	cbz	r1, 80090e4 <__ascii_wctomb+0x18>
 80090d2:	2aff      	cmp	r2, #255	@ 0xff
 80090d4:	d904      	bls.n	80090e0 <__ascii_wctomb+0x14>
 80090d6:	228a      	movs	r2, #138	@ 0x8a
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	f04f 30ff 	mov.w	r0, #4294967295
 80090de:	4770      	bx	lr
 80090e0:	700a      	strb	r2, [r1, #0]
 80090e2:	2001      	movs	r0, #1
 80090e4:	4770      	bx	lr
	...

080090e8 <fiprintf>:
 80090e8:	b40e      	push	{r1, r2, r3}
 80090ea:	b503      	push	{r0, r1, lr}
 80090ec:	4601      	mov	r1, r0
 80090ee:	ab03      	add	r3, sp, #12
 80090f0:	4805      	ldr	r0, [pc, #20]	@ (8009108 <fiprintf+0x20>)
 80090f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090f6:	6800      	ldr	r0, [r0, #0]
 80090f8:	9301      	str	r3, [sp, #4]
 80090fa:	f000 f83f 	bl	800917c <_vfiprintf_r>
 80090fe:	b002      	add	sp, #8
 8009100:	f85d eb04 	ldr.w	lr, [sp], #4
 8009104:	b003      	add	sp, #12
 8009106:	4770      	bx	lr
 8009108:	20002404 	.word	0x20002404

0800910c <abort>:
 800910c:	b508      	push	{r3, lr}
 800910e:	2006      	movs	r0, #6
 8009110:	f000 fa08 	bl	8009524 <raise>
 8009114:	2001      	movs	r0, #1
 8009116:	f7f8 fcfd 	bl	8001b14 <_exit>

0800911a <_malloc_usable_size_r>:
 800911a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911e:	1f18      	subs	r0, r3, #4
 8009120:	2b00      	cmp	r3, #0
 8009122:	bfbc      	itt	lt
 8009124:	580b      	ldrlt	r3, [r1, r0]
 8009126:	18c0      	addlt	r0, r0, r3
 8009128:	4770      	bx	lr

0800912a <__sfputc_r>:
 800912a:	6893      	ldr	r3, [r2, #8]
 800912c:	3b01      	subs	r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	b410      	push	{r4}
 8009132:	6093      	str	r3, [r2, #8]
 8009134:	da08      	bge.n	8009148 <__sfputc_r+0x1e>
 8009136:	6994      	ldr	r4, [r2, #24]
 8009138:	42a3      	cmp	r3, r4
 800913a:	db01      	blt.n	8009140 <__sfputc_r+0x16>
 800913c:	290a      	cmp	r1, #10
 800913e:	d103      	bne.n	8009148 <__sfputc_r+0x1e>
 8009140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009144:	f000 b932 	b.w	80093ac <__swbuf_r>
 8009148:	6813      	ldr	r3, [r2, #0]
 800914a:	1c58      	adds	r0, r3, #1
 800914c:	6010      	str	r0, [r2, #0]
 800914e:	7019      	strb	r1, [r3, #0]
 8009150:	4608      	mov	r0, r1
 8009152:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009156:	4770      	bx	lr

08009158 <__sfputs_r>:
 8009158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915a:	4606      	mov	r6, r0
 800915c:	460f      	mov	r7, r1
 800915e:	4614      	mov	r4, r2
 8009160:	18d5      	adds	r5, r2, r3
 8009162:	42ac      	cmp	r4, r5
 8009164:	d101      	bne.n	800916a <__sfputs_r+0x12>
 8009166:	2000      	movs	r0, #0
 8009168:	e007      	b.n	800917a <__sfputs_r+0x22>
 800916a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800916e:	463a      	mov	r2, r7
 8009170:	4630      	mov	r0, r6
 8009172:	f7ff ffda 	bl	800912a <__sfputc_r>
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	d1f3      	bne.n	8009162 <__sfputs_r+0xa>
 800917a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800917c <_vfiprintf_r>:
 800917c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009180:	460d      	mov	r5, r1
 8009182:	b09d      	sub	sp, #116	@ 0x74
 8009184:	4614      	mov	r4, r2
 8009186:	4698      	mov	r8, r3
 8009188:	4606      	mov	r6, r0
 800918a:	b118      	cbz	r0, 8009194 <_vfiprintf_r+0x18>
 800918c:	6a03      	ldr	r3, [r0, #32]
 800918e:	b90b      	cbnz	r3, 8009194 <_vfiprintf_r+0x18>
 8009190:	f7fe f8e4 	bl	800735c <__sinit>
 8009194:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009196:	07d9      	lsls	r1, r3, #31
 8009198:	d405      	bmi.n	80091a6 <_vfiprintf_r+0x2a>
 800919a:	89ab      	ldrh	r3, [r5, #12]
 800919c:	059a      	lsls	r2, r3, #22
 800919e:	d402      	bmi.n	80091a6 <_vfiprintf_r+0x2a>
 80091a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091a2:	f7fe fa0e 	bl	80075c2 <__retarget_lock_acquire_recursive>
 80091a6:	89ab      	ldrh	r3, [r5, #12]
 80091a8:	071b      	lsls	r3, r3, #28
 80091aa:	d501      	bpl.n	80091b0 <_vfiprintf_r+0x34>
 80091ac:	692b      	ldr	r3, [r5, #16]
 80091ae:	b99b      	cbnz	r3, 80091d8 <_vfiprintf_r+0x5c>
 80091b0:	4629      	mov	r1, r5
 80091b2:	4630      	mov	r0, r6
 80091b4:	f000 f938 	bl	8009428 <__swsetup_r>
 80091b8:	b170      	cbz	r0, 80091d8 <_vfiprintf_r+0x5c>
 80091ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091bc:	07dc      	lsls	r4, r3, #31
 80091be:	d504      	bpl.n	80091ca <_vfiprintf_r+0x4e>
 80091c0:	f04f 30ff 	mov.w	r0, #4294967295
 80091c4:	b01d      	add	sp, #116	@ 0x74
 80091c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ca:	89ab      	ldrh	r3, [r5, #12]
 80091cc:	0598      	lsls	r0, r3, #22
 80091ce:	d4f7      	bmi.n	80091c0 <_vfiprintf_r+0x44>
 80091d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091d2:	f7fe f9f7 	bl	80075c4 <__retarget_lock_release_recursive>
 80091d6:	e7f3      	b.n	80091c0 <_vfiprintf_r+0x44>
 80091d8:	2300      	movs	r3, #0
 80091da:	9309      	str	r3, [sp, #36]	@ 0x24
 80091dc:	2320      	movs	r3, #32
 80091de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80091e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80091e6:	2330      	movs	r3, #48	@ 0x30
 80091e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009398 <_vfiprintf_r+0x21c>
 80091ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80091f0:	f04f 0901 	mov.w	r9, #1
 80091f4:	4623      	mov	r3, r4
 80091f6:	469a      	mov	sl, r3
 80091f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091fc:	b10a      	cbz	r2, 8009202 <_vfiprintf_r+0x86>
 80091fe:	2a25      	cmp	r2, #37	@ 0x25
 8009200:	d1f9      	bne.n	80091f6 <_vfiprintf_r+0x7a>
 8009202:	ebba 0b04 	subs.w	fp, sl, r4
 8009206:	d00b      	beq.n	8009220 <_vfiprintf_r+0xa4>
 8009208:	465b      	mov	r3, fp
 800920a:	4622      	mov	r2, r4
 800920c:	4629      	mov	r1, r5
 800920e:	4630      	mov	r0, r6
 8009210:	f7ff ffa2 	bl	8009158 <__sfputs_r>
 8009214:	3001      	adds	r0, #1
 8009216:	f000 80a7 	beq.w	8009368 <_vfiprintf_r+0x1ec>
 800921a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800921c:	445a      	add	r2, fp
 800921e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009220:	f89a 3000 	ldrb.w	r3, [sl]
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 809f 	beq.w	8009368 <_vfiprintf_r+0x1ec>
 800922a:	2300      	movs	r3, #0
 800922c:	f04f 32ff 	mov.w	r2, #4294967295
 8009230:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009234:	f10a 0a01 	add.w	sl, sl, #1
 8009238:	9304      	str	r3, [sp, #16]
 800923a:	9307      	str	r3, [sp, #28]
 800923c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009240:	931a      	str	r3, [sp, #104]	@ 0x68
 8009242:	4654      	mov	r4, sl
 8009244:	2205      	movs	r2, #5
 8009246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800924a:	4853      	ldr	r0, [pc, #332]	@ (8009398 <_vfiprintf_r+0x21c>)
 800924c:	f7f6 ffc0 	bl	80001d0 <memchr>
 8009250:	9a04      	ldr	r2, [sp, #16]
 8009252:	b9d8      	cbnz	r0, 800928c <_vfiprintf_r+0x110>
 8009254:	06d1      	lsls	r1, r2, #27
 8009256:	bf44      	itt	mi
 8009258:	2320      	movmi	r3, #32
 800925a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800925e:	0713      	lsls	r3, r2, #28
 8009260:	bf44      	itt	mi
 8009262:	232b      	movmi	r3, #43	@ 0x2b
 8009264:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009268:	f89a 3000 	ldrb.w	r3, [sl]
 800926c:	2b2a      	cmp	r3, #42	@ 0x2a
 800926e:	d015      	beq.n	800929c <_vfiprintf_r+0x120>
 8009270:	9a07      	ldr	r2, [sp, #28]
 8009272:	4654      	mov	r4, sl
 8009274:	2000      	movs	r0, #0
 8009276:	f04f 0c0a 	mov.w	ip, #10
 800927a:	4621      	mov	r1, r4
 800927c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009280:	3b30      	subs	r3, #48	@ 0x30
 8009282:	2b09      	cmp	r3, #9
 8009284:	d94b      	bls.n	800931e <_vfiprintf_r+0x1a2>
 8009286:	b1b0      	cbz	r0, 80092b6 <_vfiprintf_r+0x13a>
 8009288:	9207      	str	r2, [sp, #28]
 800928a:	e014      	b.n	80092b6 <_vfiprintf_r+0x13a>
 800928c:	eba0 0308 	sub.w	r3, r0, r8
 8009290:	fa09 f303 	lsl.w	r3, r9, r3
 8009294:	4313      	orrs	r3, r2
 8009296:	9304      	str	r3, [sp, #16]
 8009298:	46a2      	mov	sl, r4
 800929a:	e7d2      	b.n	8009242 <_vfiprintf_r+0xc6>
 800929c:	9b03      	ldr	r3, [sp, #12]
 800929e:	1d19      	adds	r1, r3, #4
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	9103      	str	r1, [sp, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	bfbb      	ittet	lt
 80092a8:	425b      	neglt	r3, r3
 80092aa:	f042 0202 	orrlt.w	r2, r2, #2
 80092ae:	9307      	strge	r3, [sp, #28]
 80092b0:	9307      	strlt	r3, [sp, #28]
 80092b2:	bfb8      	it	lt
 80092b4:	9204      	strlt	r2, [sp, #16]
 80092b6:	7823      	ldrb	r3, [r4, #0]
 80092b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80092ba:	d10a      	bne.n	80092d2 <_vfiprintf_r+0x156>
 80092bc:	7863      	ldrb	r3, [r4, #1]
 80092be:	2b2a      	cmp	r3, #42	@ 0x2a
 80092c0:	d132      	bne.n	8009328 <_vfiprintf_r+0x1ac>
 80092c2:	9b03      	ldr	r3, [sp, #12]
 80092c4:	1d1a      	adds	r2, r3, #4
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	9203      	str	r2, [sp, #12]
 80092ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092ce:	3402      	adds	r4, #2
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093a8 <_vfiprintf_r+0x22c>
 80092d6:	7821      	ldrb	r1, [r4, #0]
 80092d8:	2203      	movs	r2, #3
 80092da:	4650      	mov	r0, sl
 80092dc:	f7f6 ff78 	bl	80001d0 <memchr>
 80092e0:	b138      	cbz	r0, 80092f2 <_vfiprintf_r+0x176>
 80092e2:	9b04      	ldr	r3, [sp, #16]
 80092e4:	eba0 000a 	sub.w	r0, r0, sl
 80092e8:	2240      	movs	r2, #64	@ 0x40
 80092ea:	4082      	lsls	r2, r0
 80092ec:	4313      	orrs	r3, r2
 80092ee:	3401      	adds	r4, #1
 80092f0:	9304      	str	r3, [sp, #16]
 80092f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092f6:	4829      	ldr	r0, [pc, #164]	@ (800939c <_vfiprintf_r+0x220>)
 80092f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092fc:	2206      	movs	r2, #6
 80092fe:	f7f6 ff67 	bl	80001d0 <memchr>
 8009302:	2800      	cmp	r0, #0
 8009304:	d03f      	beq.n	8009386 <_vfiprintf_r+0x20a>
 8009306:	4b26      	ldr	r3, [pc, #152]	@ (80093a0 <_vfiprintf_r+0x224>)
 8009308:	bb1b      	cbnz	r3, 8009352 <_vfiprintf_r+0x1d6>
 800930a:	9b03      	ldr	r3, [sp, #12]
 800930c:	3307      	adds	r3, #7
 800930e:	f023 0307 	bic.w	r3, r3, #7
 8009312:	3308      	adds	r3, #8
 8009314:	9303      	str	r3, [sp, #12]
 8009316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009318:	443b      	add	r3, r7
 800931a:	9309      	str	r3, [sp, #36]	@ 0x24
 800931c:	e76a      	b.n	80091f4 <_vfiprintf_r+0x78>
 800931e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009322:	460c      	mov	r4, r1
 8009324:	2001      	movs	r0, #1
 8009326:	e7a8      	b.n	800927a <_vfiprintf_r+0xfe>
 8009328:	2300      	movs	r3, #0
 800932a:	3401      	adds	r4, #1
 800932c:	9305      	str	r3, [sp, #20]
 800932e:	4619      	mov	r1, r3
 8009330:	f04f 0c0a 	mov.w	ip, #10
 8009334:	4620      	mov	r0, r4
 8009336:	f810 2b01 	ldrb.w	r2, [r0], #1
 800933a:	3a30      	subs	r2, #48	@ 0x30
 800933c:	2a09      	cmp	r2, #9
 800933e:	d903      	bls.n	8009348 <_vfiprintf_r+0x1cc>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d0c6      	beq.n	80092d2 <_vfiprintf_r+0x156>
 8009344:	9105      	str	r1, [sp, #20]
 8009346:	e7c4      	b.n	80092d2 <_vfiprintf_r+0x156>
 8009348:	fb0c 2101 	mla	r1, ip, r1, r2
 800934c:	4604      	mov	r4, r0
 800934e:	2301      	movs	r3, #1
 8009350:	e7f0      	b.n	8009334 <_vfiprintf_r+0x1b8>
 8009352:	ab03      	add	r3, sp, #12
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	462a      	mov	r2, r5
 8009358:	4b12      	ldr	r3, [pc, #72]	@ (80093a4 <_vfiprintf_r+0x228>)
 800935a:	a904      	add	r1, sp, #16
 800935c:	4630      	mov	r0, r6
 800935e:	f7fd fbbb 	bl	8006ad8 <_printf_float>
 8009362:	4607      	mov	r7, r0
 8009364:	1c78      	adds	r0, r7, #1
 8009366:	d1d6      	bne.n	8009316 <_vfiprintf_r+0x19a>
 8009368:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800936a:	07d9      	lsls	r1, r3, #31
 800936c:	d405      	bmi.n	800937a <_vfiprintf_r+0x1fe>
 800936e:	89ab      	ldrh	r3, [r5, #12]
 8009370:	059a      	lsls	r2, r3, #22
 8009372:	d402      	bmi.n	800937a <_vfiprintf_r+0x1fe>
 8009374:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009376:	f7fe f925 	bl	80075c4 <__retarget_lock_release_recursive>
 800937a:	89ab      	ldrh	r3, [r5, #12]
 800937c:	065b      	lsls	r3, r3, #25
 800937e:	f53f af1f 	bmi.w	80091c0 <_vfiprintf_r+0x44>
 8009382:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009384:	e71e      	b.n	80091c4 <_vfiprintf_r+0x48>
 8009386:	ab03      	add	r3, sp, #12
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	462a      	mov	r2, r5
 800938c:	4b05      	ldr	r3, [pc, #20]	@ (80093a4 <_vfiprintf_r+0x228>)
 800938e:	a904      	add	r1, sp, #16
 8009390:	4630      	mov	r0, r6
 8009392:	f7fd fe39 	bl	8007008 <_printf_i>
 8009396:	e7e4      	b.n	8009362 <_vfiprintf_r+0x1e6>
 8009398:	0800a3ae 	.word	0x0800a3ae
 800939c:	0800a3b8 	.word	0x0800a3b8
 80093a0:	08006ad9 	.word	0x08006ad9
 80093a4:	08009159 	.word	0x08009159
 80093a8:	0800a3b4 	.word	0x0800a3b4

080093ac <__swbuf_r>:
 80093ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ae:	460e      	mov	r6, r1
 80093b0:	4614      	mov	r4, r2
 80093b2:	4605      	mov	r5, r0
 80093b4:	b118      	cbz	r0, 80093be <__swbuf_r+0x12>
 80093b6:	6a03      	ldr	r3, [r0, #32]
 80093b8:	b90b      	cbnz	r3, 80093be <__swbuf_r+0x12>
 80093ba:	f7fd ffcf 	bl	800735c <__sinit>
 80093be:	69a3      	ldr	r3, [r4, #24]
 80093c0:	60a3      	str	r3, [r4, #8]
 80093c2:	89a3      	ldrh	r3, [r4, #12]
 80093c4:	071a      	lsls	r2, r3, #28
 80093c6:	d501      	bpl.n	80093cc <__swbuf_r+0x20>
 80093c8:	6923      	ldr	r3, [r4, #16]
 80093ca:	b943      	cbnz	r3, 80093de <__swbuf_r+0x32>
 80093cc:	4621      	mov	r1, r4
 80093ce:	4628      	mov	r0, r5
 80093d0:	f000 f82a 	bl	8009428 <__swsetup_r>
 80093d4:	b118      	cbz	r0, 80093de <__swbuf_r+0x32>
 80093d6:	f04f 37ff 	mov.w	r7, #4294967295
 80093da:	4638      	mov	r0, r7
 80093dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093de:	6823      	ldr	r3, [r4, #0]
 80093e0:	6922      	ldr	r2, [r4, #16]
 80093e2:	1a98      	subs	r0, r3, r2
 80093e4:	6963      	ldr	r3, [r4, #20]
 80093e6:	b2f6      	uxtb	r6, r6
 80093e8:	4283      	cmp	r3, r0
 80093ea:	4637      	mov	r7, r6
 80093ec:	dc05      	bgt.n	80093fa <__swbuf_r+0x4e>
 80093ee:	4621      	mov	r1, r4
 80093f0:	4628      	mov	r0, r5
 80093f2:	f7ff fda7 	bl	8008f44 <_fflush_r>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d1ed      	bne.n	80093d6 <__swbuf_r+0x2a>
 80093fa:	68a3      	ldr	r3, [r4, #8]
 80093fc:	3b01      	subs	r3, #1
 80093fe:	60a3      	str	r3, [r4, #8]
 8009400:	6823      	ldr	r3, [r4, #0]
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	6022      	str	r2, [r4, #0]
 8009406:	701e      	strb	r6, [r3, #0]
 8009408:	6962      	ldr	r2, [r4, #20]
 800940a:	1c43      	adds	r3, r0, #1
 800940c:	429a      	cmp	r2, r3
 800940e:	d004      	beq.n	800941a <__swbuf_r+0x6e>
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	07db      	lsls	r3, r3, #31
 8009414:	d5e1      	bpl.n	80093da <__swbuf_r+0x2e>
 8009416:	2e0a      	cmp	r6, #10
 8009418:	d1df      	bne.n	80093da <__swbuf_r+0x2e>
 800941a:	4621      	mov	r1, r4
 800941c:	4628      	mov	r0, r5
 800941e:	f7ff fd91 	bl	8008f44 <_fflush_r>
 8009422:	2800      	cmp	r0, #0
 8009424:	d0d9      	beq.n	80093da <__swbuf_r+0x2e>
 8009426:	e7d6      	b.n	80093d6 <__swbuf_r+0x2a>

08009428 <__swsetup_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4b29      	ldr	r3, [pc, #164]	@ (80094d0 <__swsetup_r+0xa8>)
 800942c:	4605      	mov	r5, r0
 800942e:	6818      	ldr	r0, [r3, #0]
 8009430:	460c      	mov	r4, r1
 8009432:	b118      	cbz	r0, 800943c <__swsetup_r+0x14>
 8009434:	6a03      	ldr	r3, [r0, #32]
 8009436:	b90b      	cbnz	r3, 800943c <__swsetup_r+0x14>
 8009438:	f7fd ff90 	bl	800735c <__sinit>
 800943c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009440:	0719      	lsls	r1, r3, #28
 8009442:	d422      	bmi.n	800948a <__swsetup_r+0x62>
 8009444:	06da      	lsls	r2, r3, #27
 8009446:	d407      	bmi.n	8009458 <__swsetup_r+0x30>
 8009448:	2209      	movs	r2, #9
 800944a:	602a      	str	r2, [r5, #0]
 800944c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009450:	81a3      	strh	r3, [r4, #12]
 8009452:	f04f 30ff 	mov.w	r0, #4294967295
 8009456:	e033      	b.n	80094c0 <__swsetup_r+0x98>
 8009458:	0758      	lsls	r0, r3, #29
 800945a:	d512      	bpl.n	8009482 <__swsetup_r+0x5a>
 800945c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800945e:	b141      	cbz	r1, 8009472 <__swsetup_r+0x4a>
 8009460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009464:	4299      	cmp	r1, r3
 8009466:	d002      	beq.n	800946e <__swsetup_r+0x46>
 8009468:	4628      	mov	r0, r5
 800946a:	f7fe ff15 	bl	8008298 <_free_r>
 800946e:	2300      	movs	r3, #0
 8009470:	6363      	str	r3, [r4, #52]	@ 0x34
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009478:	81a3      	strh	r3, [r4, #12]
 800947a:	2300      	movs	r3, #0
 800947c:	6063      	str	r3, [r4, #4]
 800947e:	6923      	ldr	r3, [r4, #16]
 8009480:	6023      	str	r3, [r4, #0]
 8009482:	89a3      	ldrh	r3, [r4, #12]
 8009484:	f043 0308 	orr.w	r3, r3, #8
 8009488:	81a3      	strh	r3, [r4, #12]
 800948a:	6923      	ldr	r3, [r4, #16]
 800948c:	b94b      	cbnz	r3, 80094a2 <__swsetup_r+0x7a>
 800948e:	89a3      	ldrh	r3, [r4, #12]
 8009490:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009494:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009498:	d003      	beq.n	80094a2 <__swsetup_r+0x7a>
 800949a:	4621      	mov	r1, r4
 800949c:	4628      	mov	r0, r5
 800949e:	f000 f883 	bl	80095a8 <__smakebuf_r>
 80094a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094a6:	f013 0201 	ands.w	r2, r3, #1
 80094aa:	d00a      	beq.n	80094c2 <__swsetup_r+0x9a>
 80094ac:	2200      	movs	r2, #0
 80094ae:	60a2      	str	r2, [r4, #8]
 80094b0:	6962      	ldr	r2, [r4, #20]
 80094b2:	4252      	negs	r2, r2
 80094b4:	61a2      	str	r2, [r4, #24]
 80094b6:	6922      	ldr	r2, [r4, #16]
 80094b8:	b942      	cbnz	r2, 80094cc <__swsetup_r+0xa4>
 80094ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094be:	d1c5      	bne.n	800944c <__swsetup_r+0x24>
 80094c0:	bd38      	pop	{r3, r4, r5, pc}
 80094c2:	0799      	lsls	r1, r3, #30
 80094c4:	bf58      	it	pl
 80094c6:	6962      	ldrpl	r2, [r4, #20]
 80094c8:	60a2      	str	r2, [r4, #8]
 80094ca:	e7f4      	b.n	80094b6 <__swsetup_r+0x8e>
 80094cc:	2000      	movs	r0, #0
 80094ce:	e7f7      	b.n	80094c0 <__swsetup_r+0x98>
 80094d0:	20002404 	.word	0x20002404

080094d4 <_raise_r>:
 80094d4:	291f      	cmp	r1, #31
 80094d6:	b538      	push	{r3, r4, r5, lr}
 80094d8:	4605      	mov	r5, r0
 80094da:	460c      	mov	r4, r1
 80094dc:	d904      	bls.n	80094e8 <_raise_r+0x14>
 80094de:	2316      	movs	r3, #22
 80094e0:	6003      	str	r3, [r0, #0]
 80094e2:	f04f 30ff 	mov.w	r0, #4294967295
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094ea:	b112      	cbz	r2, 80094f2 <_raise_r+0x1e>
 80094ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094f0:	b94b      	cbnz	r3, 8009506 <_raise_r+0x32>
 80094f2:	4628      	mov	r0, r5
 80094f4:	f000 f830 	bl	8009558 <_getpid_r>
 80094f8:	4622      	mov	r2, r4
 80094fa:	4601      	mov	r1, r0
 80094fc:	4628      	mov	r0, r5
 80094fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009502:	f000 b817 	b.w	8009534 <_kill_r>
 8009506:	2b01      	cmp	r3, #1
 8009508:	d00a      	beq.n	8009520 <_raise_r+0x4c>
 800950a:	1c59      	adds	r1, r3, #1
 800950c:	d103      	bne.n	8009516 <_raise_r+0x42>
 800950e:	2316      	movs	r3, #22
 8009510:	6003      	str	r3, [r0, #0]
 8009512:	2001      	movs	r0, #1
 8009514:	e7e7      	b.n	80094e6 <_raise_r+0x12>
 8009516:	2100      	movs	r1, #0
 8009518:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800951c:	4620      	mov	r0, r4
 800951e:	4798      	blx	r3
 8009520:	2000      	movs	r0, #0
 8009522:	e7e0      	b.n	80094e6 <_raise_r+0x12>

08009524 <raise>:
 8009524:	4b02      	ldr	r3, [pc, #8]	@ (8009530 <raise+0xc>)
 8009526:	4601      	mov	r1, r0
 8009528:	6818      	ldr	r0, [r3, #0]
 800952a:	f7ff bfd3 	b.w	80094d4 <_raise_r>
 800952e:	bf00      	nop
 8009530:	20002404 	.word	0x20002404

08009534 <_kill_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d07      	ldr	r5, [pc, #28]	@ (8009554 <_kill_r+0x20>)
 8009538:	2300      	movs	r3, #0
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	4611      	mov	r1, r2
 8009540:	602b      	str	r3, [r5, #0]
 8009542:	f7f8 fad7 	bl	8001af4 <_kill>
 8009546:	1c43      	adds	r3, r0, #1
 8009548:	d102      	bne.n	8009550 <_kill_r+0x1c>
 800954a:	682b      	ldr	r3, [r5, #0]
 800954c:	b103      	cbz	r3, 8009550 <_kill_r+0x1c>
 800954e:	6023      	str	r3, [r4, #0]
 8009550:	bd38      	pop	{r3, r4, r5, pc}
 8009552:	bf00      	nop
 8009554:	20002bf4 	.word	0x20002bf4

08009558 <_getpid_r>:
 8009558:	f7f8 bac4 	b.w	8001ae4 <_getpid>

0800955c <__swhatbuf_r>:
 800955c:	b570      	push	{r4, r5, r6, lr}
 800955e:	460c      	mov	r4, r1
 8009560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009564:	2900      	cmp	r1, #0
 8009566:	b096      	sub	sp, #88	@ 0x58
 8009568:	4615      	mov	r5, r2
 800956a:	461e      	mov	r6, r3
 800956c:	da0d      	bge.n	800958a <__swhatbuf_r+0x2e>
 800956e:	89a3      	ldrh	r3, [r4, #12]
 8009570:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009574:	f04f 0100 	mov.w	r1, #0
 8009578:	bf14      	ite	ne
 800957a:	2340      	movne	r3, #64	@ 0x40
 800957c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009580:	2000      	movs	r0, #0
 8009582:	6031      	str	r1, [r6, #0]
 8009584:	602b      	str	r3, [r5, #0]
 8009586:	b016      	add	sp, #88	@ 0x58
 8009588:	bd70      	pop	{r4, r5, r6, pc}
 800958a:	466a      	mov	r2, sp
 800958c:	f000 f848 	bl	8009620 <_fstat_r>
 8009590:	2800      	cmp	r0, #0
 8009592:	dbec      	blt.n	800956e <__swhatbuf_r+0x12>
 8009594:	9901      	ldr	r1, [sp, #4]
 8009596:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800959a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800959e:	4259      	negs	r1, r3
 80095a0:	4159      	adcs	r1, r3
 80095a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095a6:	e7eb      	b.n	8009580 <__swhatbuf_r+0x24>

080095a8 <__smakebuf_r>:
 80095a8:	898b      	ldrh	r3, [r1, #12]
 80095aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ac:	079d      	lsls	r5, r3, #30
 80095ae:	4606      	mov	r6, r0
 80095b0:	460c      	mov	r4, r1
 80095b2:	d507      	bpl.n	80095c4 <__smakebuf_r+0x1c>
 80095b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	6123      	str	r3, [r4, #16]
 80095bc:	2301      	movs	r3, #1
 80095be:	6163      	str	r3, [r4, #20]
 80095c0:	b003      	add	sp, #12
 80095c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c4:	ab01      	add	r3, sp, #4
 80095c6:	466a      	mov	r2, sp
 80095c8:	f7ff ffc8 	bl	800955c <__swhatbuf_r>
 80095cc:	9f00      	ldr	r7, [sp, #0]
 80095ce:	4605      	mov	r5, r0
 80095d0:	4639      	mov	r1, r7
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7fe fed4 	bl	8008380 <_malloc_r>
 80095d8:	b948      	cbnz	r0, 80095ee <__smakebuf_r+0x46>
 80095da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095de:	059a      	lsls	r2, r3, #22
 80095e0:	d4ee      	bmi.n	80095c0 <__smakebuf_r+0x18>
 80095e2:	f023 0303 	bic.w	r3, r3, #3
 80095e6:	f043 0302 	orr.w	r3, r3, #2
 80095ea:	81a3      	strh	r3, [r4, #12]
 80095ec:	e7e2      	b.n	80095b4 <__smakebuf_r+0xc>
 80095ee:	89a3      	ldrh	r3, [r4, #12]
 80095f0:	6020      	str	r0, [r4, #0]
 80095f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095f6:	81a3      	strh	r3, [r4, #12]
 80095f8:	9b01      	ldr	r3, [sp, #4]
 80095fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80095fe:	b15b      	cbz	r3, 8009618 <__smakebuf_r+0x70>
 8009600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009604:	4630      	mov	r0, r6
 8009606:	f000 f81d 	bl	8009644 <_isatty_r>
 800960a:	b128      	cbz	r0, 8009618 <__smakebuf_r+0x70>
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f023 0303 	bic.w	r3, r3, #3
 8009612:	f043 0301 	orr.w	r3, r3, #1
 8009616:	81a3      	strh	r3, [r4, #12]
 8009618:	89a3      	ldrh	r3, [r4, #12]
 800961a:	431d      	orrs	r5, r3
 800961c:	81a5      	strh	r5, [r4, #12]
 800961e:	e7cf      	b.n	80095c0 <__smakebuf_r+0x18>

08009620 <_fstat_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4d07      	ldr	r5, [pc, #28]	@ (8009640 <_fstat_r+0x20>)
 8009624:	2300      	movs	r3, #0
 8009626:	4604      	mov	r4, r0
 8009628:	4608      	mov	r0, r1
 800962a:	4611      	mov	r1, r2
 800962c:	602b      	str	r3, [r5, #0]
 800962e:	f7f8 fac1 	bl	8001bb4 <_fstat>
 8009632:	1c43      	adds	r3, r0, #1
 8009634:	d102      	bne.n	800963c <_fstat_r+0x1c>
 8009636:	682b      	ldr	r3, [r5, #0]
 8009638:	b103      	cbz	r3, 800963c <_fstat_r+0x1c>
 800963a:	6023      	str	r3, [r4, #0]
 800963c:	bd38      	pop	{r3, r4, r5, pc}
 800963e:	bf00      	nop
 8009640:	20002bf4 	.word	0x20002bf4

08009644 <_isatty_r>:
 8009644:	b538      	push	{r3, r4, r5, lr}
 8009646:	4d06      	ldr	r5, [pc, #24]	@ (8009660 <_isatty_r+0x1c>)
 8009648:	2300      	movs	r3, #0
 800964a:	4604      	mov	r4, r0
 800964c:	4608      	mov	r0, r1
 800964e:	602b      	str	r3, [r5, #0]
 8009650:	f7f8 fac0 	bl	8001bd4 <_isatty>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_isatty_r+0x1a>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_isatty_r+0x1a>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	20002bf4 	.word	0x20002bf4

08009664 <_init>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	bf00      	nop
 8009668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966a:	bc08      	pop	{r3}
 800966c:	469e      	mov	lr, r3
 800966e:	4770      	bx	lr

08009670 <_fini>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	bf00      	nop
 8009674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009676:	bc08      	pop	{r3}
 8009678:	469e      	mov	lr, r3
 800967a:	4770      	bx	lr
